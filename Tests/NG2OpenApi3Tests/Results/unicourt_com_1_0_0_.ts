import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	export interface AccessTokenIdListResponse {

		/**
		 * Array of access tokens Id.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 10
		 */
		AccessTokenIdArray: Array<AccessTokenIdResponse>;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: string;
	}
	export interface AccessTokenIdListResponseFormProperties {

		/**
		 * Name of the object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAccessTokenIdListResponseFormGroup() {
		return new FormGroup<AccessTokenIdListResponseFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface AccessTokenIdResponse {

		/**
		 * Ip address.
		 * Required
		 * Max length: 15
		 * Min length: 7
		 */
		issueAddress: string;

		/**
		 * Date when access token was created.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		issuedDate: Date;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;

		/**
		 * Unique Id for the access token.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		tokenId: string;
	}
	export interface AccessTokenIdResponseFormProperties {

		/**
		 * Ip address.
		 * Required
		 * Max length: 15
		 * Min length: 7
		 */
		issueAddress: FormControl<string | null | undefined>,

		/**
		 * Date when access token was created.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		issuedDate: FormControl<Date | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Unique Id for the access token.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		tokenId: FormControl<string | null | undefined>,
	}
	export function CreateAccessTokenIdResponseFormGroup() {
		return new FormGroup<AccessTokenIdResponseFormProperties>({
			issueAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(15)]),
			issuedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
			tokenId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}

	export interface AccessTokenRequest {

		/**
		 * Your Client ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 32
		 * Min length: 32
		 */
		clientId: string;

		/**
		 * Your Client Secret ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 64
		 * Min length: 64
		 */
		clientSecret: string;
	}
	export interface AccessTokenRequestFormProperties {

		/**
		 * Your Client ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 32
		 * Min length: 32
		 */
		clientId: FormControl<string | null | undefined>,

		/**
		 * Your Client Secret ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 64
		 * Min length: 64
		 */
		clientSecret: FormControl<string | null | undefined>,
	}
	export function CreateAccessTokenRequestFormGroup() {
		return new FormGroup<AccessTokenRequestFormProperties>({
			clientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(32), Validators.maxLength(32)]),
			clientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(64), Validators.maxLength(64)]),
		});

	}

	export interface AccessTokenResponse {

		/**
		 * Access token for API.
		 * Required
		 * Max length: 2000
		 * Min length: 700
		 */
		accessToken: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;

		/**
		 * Unique Id for the access token.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		tokenId: string;

		/**
		 * Token type.
		 * Required
		 * Max length: 6
		 * Min length: 6
		 */
		tokenType: string;
	}
	export interface AccessTokenResponseFormProperties {

		/**
		 * Access token for API.
		 * Required
		 * Max length: 2000
		 * Min length: 700
		 */
		accessToken: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Unique Id for the access token.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		tokenId: FormControl<string | null | undefined>,

		/**
		 * Token type.
		 * Required
		 * Max length: 6
		 * Min length: 6
		 */
		tokenType: FormControl<string | null | undefined>,
	}
	export function CreateAccessTokenResponseFormGroup() {
		return new FormGroup<AccessTokenResponseFormProperties>({
			accessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(700), Validators.maxLength(2000)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
			tokenId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			tokenType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(6)]),
		});

	}

	export interface AdditionalLevels {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level1: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level2: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level3: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level4: string;

		/**
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: string;
	}
	export interface AdditionalLevelsFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level1: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level2: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level3: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		level4: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAdditionalLevelsFormGroup() {
		return new FormGroup<AdditionalLevelsFormProperties>({
			level1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			level2: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			level3: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			level4: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(16), Validators.maxLength(16)]),
		});

	}


	/** Address object Data Schema */
	export interface Address {

		/**
		 * City
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		city: string;

		/**
		 * ISO 3166-1 alpha-3 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements). Code of the country if country name is present.
		 * Required
		 * Max length: 3
		 * Min length: 2
		 */
		countryCode: string;

		/**
		 * Country Name if present else default value.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		countryName: string;

		/**
		 * Date at which this record is created in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Boolean indicating if the address is visible or not.
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		isVisible: boolean;

		/**
		 * Date at which this record was updated in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Coordinates at geographic coordinate system.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 * Minimum: -90
		 * Maximum: 90
		 */
		latitude: number;

		/**
		 * Coordinates at geographic coordinate system.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 * Minimum: -180
		 * Maximum: 180
		 */
		longitude: number;

		/**
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: string;

		/**
		 * State Code if the state is a US state else contains null.
		 * Required
		 * Max length: 2
		 * Min length: 2
		 */
		stateCode: string;

		/**
		 * State Name if present else default value.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		stateName: string;

		/**
		 * 1st part of the street address.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		streetAddress1: string;

		/**
		 * 2nd part of the street address.
		 * Required
		 * Max length: 150
		 * Min length: 1
		 */
		streetAddress2: string;

		/**
		 * Zip code of the address.
		 * Required
		 * Max length: 10
		 * Min length: 1
		 */
		zip: string;

		/**
		 * 4 digit extension of the zip code if the address is a US address.
		 * Required
		 * Max length: 4
		 * Min length: 4
		 */
		zip4: string;
	}

	/** Address object Data Schema */
	export interface AddressFormProperties {

		/**
		 * City
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * ISO 3166-1 alpha-3 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements). Code of the country if country name is present.
		 * Required
		 * Max length: 3
		 * Min length: 2
		 */
		countryCode: FormControl<string | null | undefined>,

		/**
		 * Country Name if present else default value.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		countryName: FormControl<string | null | undefined>,

		/**
		 * Date at which this record is created in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Boolean indicating if the address is visible or not.
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Date at which this record was updated in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Coordinates at geographic coordinate system.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 * Minimum: -90
		 * Maximum: 90
		 */
		latitude: FormControl<number | null | undefined>,

		/**
		 * Coordinates at geographic coordinate system.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 * Minimum: -180
		 * Maximum: 180
		 */
		longitude: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * State Code if the state is a US state else contains null.
		 * Required
		 * Max length: 2
		 * Min length: 2
		 */
		stateCode: FormControl<string | null | undefined>,

		/**
		 * State Name if present else default value.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		stateName: FormControl<string | null | undefined>,

		/**
		 * 1st part of the street address.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		streetAddress1: FormControl<string | null | undefined>,

		/**
		 * 2nd part of the street address.
		 * Required
		 * Max length: 150
		 * Min length: 1
		 */
		streetAddress2: FormControl<string | null | undefined>,

		/**
		 * Zip code of the address.
		 * Required
		 * Max length: 10
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,

		/**
		 * 4 digit extension of the zip code if the address is a US address.
		 * Required
		 * Max length: 4
		 * Min length: 4
		 */
		zip4: FormControl<string | null | undefined>,
	}
	export function CreateAddressFormGroup() {
		return new FormGroup<AddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(100)]),
			countryCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(3)]),
			countryName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(100)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(35)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(5)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(35)]),
			latitude: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255), Validators.min(-90), Validators.max(90)]),
			longitude: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255), Validators.min(-180), Validators.max(180)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(7)]),
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),
			stateName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(100)]),
			streetAddress1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			streetAddress2: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(150)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(10)]),
			zip4: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(4)]),
		});

	}

	export interface AreaOfLaw {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		areaOfLawId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseClass: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;
	}
	export interface AreaOfLawFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		areaOfLawId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseClass: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAreaOfLawFormGroup() {
		return new FormGroup<AreaOfLawFormProperties>({
			areaOfLawId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseClass: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseClassId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export interface AreaOfLawResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		areaOfLawArray: Array<AreaOfLaw>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2139
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface AreaOfLawResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2139
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAreaOfLawResponseFormGroup() {
		return new FormGroup<AreaOfLawResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2140)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2139)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface AssociatedNormAttorney {

		/** Required */
		caseCount: number;

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		caseTimeline: CaseTimeline;

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Link to details for the Attorney.
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: string;

		/**
		 * Required
		 * Max length: 22
		 */
		object: string;

		/** Required */
		stateBarDataArray: Array<BarRecordPreview>;
	}
	export interface AssociatedNormAttorneyFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Link to details for the Attorney.
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 22
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAssociatedNormAttorneyFormGroup() {
		return new FormGroup<AssociatedNormAttorneyFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normAttorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(22)]),
		});

	}

	export interface CaseTimeline {

		/**
		 * The first date when the two entities have appeared together in the case. (These dates are determined from case filed dates)
		 * Required
		 * Max length: 25
		 */
		firstCaseFiledDate: Date;

		/**
		 * The last date when the two entities have appeared together in the case. (These dates are determined from case filed dates)
		 * Required
		 * Max length: 25
		 */
		lastCaseFiledDate: Date;

		/**
		 * Required
		 * Max length: 12
		 */
		object: string;
	}
	export interface CaseTimelineFormProperties {

		/**
		 * The first date when the two entities have appeared together in the case. (These dates are determined from case filed dates)
		 * Required
		 * Max length: 25
		 */
		firstCaseFiledDate: FormControl<Date | null | undefined>,

		/**
		 * The last date when the two entities have appeared together in the case. (These dates are determined from case filed dates)
		 * Required
		 * Max length: 25
		 */
		lastCaseFiledDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 12
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseTimelineFormGroup() {
		return new FormGroup<CaseTimelineFormProperties>({
			firstCaseFiledDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			lastCaseFiledDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(12)]),
		});

	}

	export interface BarRecordPreview {

		/**
		 * Required
		 * Max length: 250
		 */
		barNumber: string;

		/**
		 * Required
		 * Max length: 70
		 */
		barSourceType: string;

		/**
		 * Required
		 * Max length: 16
		 */
		object: string;

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: string;
	}
	export interface BarRecordPreviewFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		barNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 70
		 */
		barSourceType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: FormControl<string | null | undefined>,
	}
	export function CreateBarRecordPreviewFormGroup() {
		return new FormGroup<BarRecordPreviewFormProperties>({
			barNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			barSourceType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(70)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(16)]),
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2)]),
		});

	}

	export interface AssociatedNormAttorneyResponse {

		/** Required */
		associatedNormAttorneyArray: Array<AssociatedNormAttorney>;

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Previous page of results if applicable.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface AssociatedNormAttorneyResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Previous page of results if applicable.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAssociatedNormAttorneyResponseFormGroup() {
		return new FormGroup<AssociatedNormAttorneyResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Associated Judge */
	export interface AssociatedNormJudge {

		/** Required */
		caseCount: number;

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		caseTimeline: CaseTimeline;

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Link to Details from the Judge.
		 * Required
		 * Max length: 255
		 */
		normJudgeAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: string;

		/**
		 * Required
		 * Max length: 19
		 */
		object: string;

		/**
		 * Required
		 * Max length: 7
		 */
		version: string;
	}

	/** Associated Judge */
	export interface AssociatedNormJudgeFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Link to Details from the Judge.
		 * Required
		 * Max length: 255
		 */
		normJudgeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 7
		 */
		version: FormControl<string | null | undefined>,
	}
	export function CreateAssociatedNormJudgeFormGroup() {
		return new FormGroup<AssociatedNormJudgeFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normJudgeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normJudgeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(19)]),
			version: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(7)]),
		});

	}

	export interface AssociatedNormJudgeResponse {

		/** Required */
		associatedNormJudgeArray: Array<AssociatedNormJudge>;

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Previous page of results if applicable.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface AssociatedNormJudgeResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Previous page of results if applicable.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAssociatedNormJudgeResponseFormGroup() {
		return new FormGroup<AssociatedNormJudgeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AssociatedNormLawFirm {

		/** Required */
		caseCount: number;

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		caseTimeline: CaseTimeline;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Link to Details for this Law Firm.
		 * Required
		 * Max length: 255
		 */
		normLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: string;

		/**
		 * Required
		 * Max length: 21
		 */
		object: string;

		/** Required */
		sosDataArray: Array<SOSDataPreview>;
	}
	export interface AssociatedNormLawFirmFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Link to Details for this Law Firm.
		 * Required
		 * Max length: 255
		 */
		normLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 21
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAssociatedNormLawFirmFormGroup() {
		return new FormGroup<AssociatedNormLawFirmFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normLawFirmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(21)]),
		});

	}

	export interface SOSDataPreview {

		/**
		 * Required
		 * Max length: 14
		 */
		object: string;

		/**
		 * Required
		 * Max length: 250
		 */
		sosNumber: string;

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: string;
	}
	export interface SOSDataPreviewFormProperties {

		/**
		 * Required
		 * Max length: 14
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		sosNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: FormControl<string | null | undefined>,
	}
	export function CreateSOSDataPreviewFormGroup() {
		return new FormGroup<SOSDataPreviewFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(14)]),
			sosNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2)]),
		});

	}

	export interface AssociatedNormLawFirmResponse {

		/** Required */
		associatedNormLawFirmArray: Array<AssociatedNormLawFirm>;

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface AssociatedNormLawFirmResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAssociatedNormLawFirmResponseFormGroup() {
		return new FormGroup<AssociatedNormLawFirmResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AssociatedNormParty {

		/** Required */
		caseCount: number;

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		caseTimeline: CaseTimeline;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Link to Details for the Party.
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: string;

		/**
		 * Required
		 * Max length: 19
		 */
		object: string;

		/** Required */
		sosDataArray: Array<SOSDataPreview>;
	}
	export interface AssociatedNormPartyFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to related cases for this association.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Link to Details for the Party.
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAssociatedNormPartyFormGroup() {
		return new FormGroup<AssociatedNormPartyFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normPartyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(19)]),
		});

	}

	export interface AssociatedNormPartyResponse {

		/** Required */
		associatedNormPartyArray: Array<AssociatedNormParty>;

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface AssociatedNormPartyResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of results for this criteria.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAssociatedNormPartyResponseFormGroup() {
		return new FormGroup<AssociatedNormPartyResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AssociatedSoSPerson {

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/**
		 * Required
		 * Max length: 500
		 */
		entityName: string;

		/**
		 * Required
		 * Max length: 50
		 */
		entityType: AssociatedSoSPersonEntityType;

		/**
		 * Required
		 * Max length: 19
		 */
		object: string;
	}
	export interface AssociatedSoSPersonFormProperties {

		/**
		 * Required
		 * Max length: 500
		 */
		entityName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 50
		 */
		entityType: FormControl<AssociatedSoSPersonEntityType | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAssociatedSoSPersonFormGroup() {
		return new FormGroup<AssociatedSoSPersonFormProperties>({
			entityName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			entityType: new FormControl<AssociatedSoSPersonEntityType | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(19)]),
		});

	}


	/** Contact object data schema. */
	export interface Contact {

		/**
		 * List of available addresses.
		 * Required
		 */
		addressArray: Array<Address>;

		/**
		 * List of available emails.
		 * Required
		 */
		emailArray: Array<Email>;

		/**
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: string;

		/**
		 * List of available phone numbers.
		 * Required
		 */
		phoneNumberArray: Array<Phone>;
	}

	/** Contact object data schema. */
	export interface ContactFormProperties {

		/**
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateContactFormGroup() {
		return new FormGroup<ContactFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(7)]),
		});

	}


	/** Email object data schema. */
	export interface Email {

		/**
		 * email id
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		emailId: string;

		/**
		 * Date at which this record is created in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Boolean indicating if the email is visible or not.
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		isVisible: boolean;

		/**
		 * Date at which this record was updated in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: string;
	}

	/** Email object data schema. */
	export interface EmailFormProperties {

		/**
		 * email id
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		emailId: FormControl<string | null | undefined>,

		/**
		 * Date at which this record is created in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Boolean indicating if the email is visible or not.
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Date at which this record was updated in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateEmailFormGroup() {
		return new FormGroup<EmailFormProperties>({
			emailId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(100)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(35)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(5)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(35)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
		});

	}


	/** Phone object data schema. */
	export interface Phone {

		/**
		 * Date at which this record is created in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Boolean indicating if the phone is visible or not.
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		isVisible: boolean;

		/**
		 * Date at which this record was updated in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: string;

		/**
		 * Phone Number
		 * Required
		 * Max length: 30
		 * Min length: 1
		 */
		phoneNumber: string;

		/**
		 * Resolved phone type (ideally from master data).
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		phoneType: PhonePhoneType;
	}

	/** Phone object data schema. */
	export interface PhoneFormProperties {

		/**
		 * Date at which this record is created in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Boolean indicating if the phone is visible or not.
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Date at which this record was updated in UniCourt.
		 * Required
		 * Max length: 35
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Phone Number
		 * Required
		 * Max length: 30
		 * Min length: 1
		 */
		phoneNumber: FormControl<string | null | undefined>,

		/**
		 * Resolved phone type (ideally from master data).
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		phoneType: FormControl<PhonePhoneType | null | undefined>,
	}
	export function CreatePhoneFormGroup() {
		return new FormGroup<PhoneFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(35)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(5)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(35)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
			phoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(30)]),
			phoneType: new FormControl<PhonePhoneType | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
		});

	}

	export enum PhonePhoneType { DEFAULT = 0, OFFICE = 1, FAX = 2, PHONE = 3 }

	export enum AssociatedSoSPersonEntityType { Partner = 0, Agent = 1, CEO = 2, 'Partner/General Member' = 3, 'Partner/GeneralMember' = 4 }

	export interface Attorney {

		/**
		 * ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyId: string;

		/**
		 * Required
		 * Maximum items: 25
		 */
		attorneyLawFirmArray: Array<AttorneyLawFirm>;

		/** Required */
		attorneyType: AttorneyType;

		/**
		 * The bar enrollment number of an attorney.
		 * Required
		 * Max length: 250
		 */
		barNumber: string;

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/**
		 * When was the attorney first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * First name of the attorney. This is normalized by UniCourt.
		 * Required
		 * Max length: 250
		 */
		firstName: string;

		/**
		 * Signifies if the attorney as this attorney type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * When was the attorney last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Last name of the attorney. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		lastName: string;

		/**
		 * Middle name of the attorney. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		middleName: string;

		/**
		 * Name of the attorney as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 10
		 */
		namePrefix: string;

		/**
		 * Required
		 * Max length: 10
		 */
		nameSuffix: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: string;

		/** Required */
		partyAttorneyAssociations: PartyAttorneyAssociations;

		/**
		 * Party Role Group Id for a Attorney.
		 * Required
		 */
		partyRoleGroupIdArray: Array<string>;

		/**
		 * Party Role Id for a Attorney.
		 * Required
		 */
		partyRoleIdArray: Array<string>;

		/** Required */
		possibleNormAttorneyArray: Array<PossibleNormAttorney>;

		/**
		 * Possible Norm Lawfirm array for a Attorney.
		 * Required
		 */
		possibleNormLawFirmArray: Array<PossibleNormLawFirm>;

		/**
		 * Attorney Type as provided by Court.
		 * Required
		 * Max length: 250
		 */
		sourceAttorneyType: string;
	}
	export interface AttorneyFormProperties {

		/**
		 * ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyId: FormControl<string | null | undefined>,

		/**
		 * The bar enrollment number of an attorney.
		 * Required
		 * Max length: 250
		 */
		barNumber: FormControl<string | null | undefined>,

		/**
		 * When was the attorney first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * First name of the attorney. This is normalized by UniCourt.
		 * Required
		 * Max length: 250
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Signifies if the attorney as this attorney type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * When was the attorney last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Last name of the attorney. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Middle name of the attorney. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Name of the attorney as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		namePrefix: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		nameSuffix: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Attorney Type as provided by Court.
		 * Required
		 * Max length: 250
		 */
		sourceAttorneyType: FormControl<string | null | undefined>,
	}
	export function CreateAttorneyFormGroup() {
		return new FormGroup<AttorneyFormProperties>({
			attorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			barNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			namePrefix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			nameSuffix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),
			sourceAttorneyType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}


	/** Name of the attorney's law firm as provided by Court. This can be null as some Courts do not provide this as a separate field. */
	export interface AttorneyLawFirm {

		/**
		 * ID for the law firm of an attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		attorneyLawFirmId: string;

		/**
		 * Is the date when the document was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: string;

		/**
		 * Signifies if the attorney as this attorney type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * Is the date when the document was last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: string;

		/**
		 * Name of the law firm as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: string;
	}

	/** Name of the attorney's law firm as provided by Court. This can be null as some Courts do not provide this as a separate field. */
	export interface AttorneyLawFirmFormProperties {

		/**
		 * ID for the law firm of an attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		attorneyLawFirmId: FormControl<string | null | undefined>,

		/**
		 * Is the date when the document was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<string | null | undefined>,

		/**
		 * Signifies if the attorney as this attorney type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Is the date when the document was last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<string | null | undefined>,

		/**
		 * Name of the law firm as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAttorneyLawFirmFormGroup() {
		return new FormGroup<AttorneyLawFirmFormProperties>({
			attorneyLawFirmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(18)]),
			firstFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(15)]),
		});

	}

	export interface AttorneyType {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyTypeId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: string;
	}
	export interface AttorneyTypeFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyTypeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAttorneyTypeFormGroup() {
		return new FormGroup<AttorneyTypeFormProperties>({
			attorneyTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(12), Validators.maxLength(12)]),
		});

	}

	export interface PartyAttorneyAssociations {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Required
		 * Maximum items: 25
		 */
		partyAttorneyAssociationArray: Array<PartyAttorneyAssociation>;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface PartyAttorneyAssociationsFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePartyAttorneyAssociationsFormGroup() {
		return new FormGroup<PartyAttorneyAssociationsFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PartyAttorneyAssociation {

		/**
		 * ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyId: string;

		/**
		 * Signifies if this party attorney relationship is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * Name of the object
		 * Required
		 * Max length: 24
		 * Min length: 24
		 */
		object: string;

		/**
		 * ID of the association
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyAttorneyAssociationId: string;

		/**
		 * ID for the party in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyId: string;
	}
	export interface PartyAttorneyAssociationFormProperties {

		/**
		 * ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyId: FormControl<string | null | undefined>,

		/**
		 * Signifies if this party attorney relationship is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 24
		 * Min length: 24
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * ID of the association
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyAttorneyAssociationId: FormControl<string | null | undefined>,

		/**
		 * ID for the party in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyId: FormControl<string | null | undefined>,
	}
	export function CreatePartyAttorneyAssociationFormGroup() {
		return new FormGroup<PartyAttorneyAssociationFormProperties>({
			attorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(24), Validators.maxLength(24)]),
			partyAttorneyAssociationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			partyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}

	export interface PossibleNormAttorney {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: string;

		/** Required */
		bestMatch: boolean;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByNormAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: string;

		/** Required */
		confidenceScore: number;

		/**
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normAttorneyName: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: string;

		/** Required */
		scoreConstituents: PossibleNormAttorneyScoreConstituents;
	}
	export interface PossibleNormAttorneyFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: FormControl<string | null | undefined>,

		/** Required */
		bestMatch: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByNormAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: FormControl<string | null | undefined>,

		/** Required */
		confidenceScore: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normAttorneyName: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePossibleNormAttorneyFormGroup() {
		return new FormGroup<PossibleNormAttorneyFormProperties>({
			associatedNormJudgesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormLawFirmsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormPartiesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bestMatch: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			caseCountAnalyticsByNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			confidenceScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			normAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normAttorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normAttorneyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(20)]),
		});

	}

	export interface PossibleNormAttorneyScoreConstituents {

		/**
		 * Required
		 * Max length: 250
		 */
		address: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		barId: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		email: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		lawFirm: PossibleNormAttorneyScoreConstituentsAddress;

		/** Required */
		nameSimilarityScore: number;

		/** Required */
		otherPotentialNormAttorneys: number;

		/**
		 * Required
		 * Max length: 250
		 */
		phone: PossibleNormAttorneyScoreConstituentsAddress;
	}
	export interface PossibleNormAttorneyScoreConstituentsFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		address: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		barId: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		email: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		lawFirm: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/** Required */
		nameSimilarityScore: FormControl<number | null | undefined>,

		/** Required */
		otherPotentialNormAttorneys: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		phone: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,
	}
	export function CreatePossibleNormAttorneyScoreConstituentsFormGroup() {
		return new FormGroup<PossibleNormAttorneyScoreConstituentsFormProperties>({
			address: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			barId: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			email: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			lawFirm: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			nameSimilarityScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			otherPotentialNormAttorneys: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export enum PossibleNormAttorneyScoreConstituentsAddress { Matched = 0, Mismatched = 1, Not_Provided_By_Data_Source = 2 }

	export interface PossibleNormLawFirm {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgeAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: string;

		/** Required */
		bestMatch: boolean;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByNormLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: string;

		/** Required */
		confidenceScore: number;

		/**
		 * Required
		 * Max length: 255
		 */
		normLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normLawFirmName: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;

		/** Required */
		scoreConstituents: PossibleNormLawFirmScoreConstituents;

		/** Required */
		sourceDetails: PossibleNormLawFirmSourceDetails;
	}
	export interface PossibleNormLawFirmFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: FormControl<string | null | undefined>,

		/** Required */
		bestMatch: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByNormLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: FormControl<string | null | undefined>,

		/** Required */
		confidenceScore: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		normLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normLawFirmName: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePossibleNormLawFirmFormGroup() {
		return new FormGroup<PossibleNormLawFirmFormProperties>({
			associatedNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormJudgeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormPartiesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bestMatch: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			caseCountAnalyticsByNormLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			confidenceScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			normLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normLawFirmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normLawFirmName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
		});

	}

	export interface PossibleNormLawFirmScoreConstituents {

		/**
		 * Required
		 * Max length: 250
		 */
		address: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		email: PossibleNormAttorneyScoreConstituentsAddress;

		/** Required */
		nameSimilarityScore: number;

		/** Required */
		otherPotentialNormLawFirms: number;

		/**
		 * Required
		 * Max length: 250
		 */
		phone: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		secretaryOfStateId: PossibleNormAttorneyScoreConstituentsAddress;
	}
	export interface PossibleNormLawFirmScoreConstituentsFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		address: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		email: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/** Required */
		nameSimilarityScore: FormControl<number | null | undefined>,

		/** Required */
		otherPotentialNormLawFirms: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		phone: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		secretaryOfStateId: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,
	}
	export function CreatePossibleNormLawFirmScoreConstituentsFormGroup() {
		return new FormGroup<PossibleNormLawFirmScoreConstituentsFormProperties>({
			address: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			email: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			nameSimilarityScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			otherPotentialNormLawFirms: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			secretaryOfStateId: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface PossibleNormLawFirmSourceDetails {

		/** Required */
		linkedNormAttorneyIdArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		source: PossibleNormLawFirmSourceDetailsSource;
	}
	export interface PossibleNormLawFirmSourceDetailsFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		source: FormControl<PossibleNormLawFirmSourceDetailsSource | null | undefined>,
	}
	export function CreatePossibleNormLawFirmSourceDetailsFormGroup() {
		return new FormGroup<PossibleNormLawFirmSourceDetailsFormProperties>({
			source: new FormControl<PossibleNormLawFirmSourceDetailsSource | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export enum PossibleNormLawFirmSourceDetailsSource { Case_Attorney_Linked_In_Other_Cases = 0, Case_Attorney_Field_Contains_Law_Firm = 1 }

	export interface AttorneyAnalyticsAPI {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: string;

		/**
		 * Link to Details for the Attorney.
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 20
		 */
		object: string;
	}
	export interface AttorneyAnalyticsAPIFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Link to Details for the Attorney.
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 20
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAttorneyAnalyticsAPIFormGroup() {
		return new FormGroup<AttorneyAnalyticsAPIFormProperties>({
			associatedNormJudgesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormLawFirmsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormPartiesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(20)]),
		});

	}

	export interface AttorneyRepresentationType {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyRepresentationTypeId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: string;
	}
	export interface AttorneyRepresentationTypeFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		attorneyRepresentationTypeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateAttorneyRepresentationTypeFormGroup() {
		return new FormGroup<AttorneyRepresentationTypeFormProperties>({
			attorneyRepresentationTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(26), Validators.maxLength(26)]),
		});

	}

	export interface AttorneyRepresentationTypeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		attorneyRepresentationTypeArray: Array<AttorneyRepresentationType>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 34
		 * Min length: 34
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2158
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface AttorneyRepresentationTypeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 34
		 * Min length: 34
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2158
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAttorneyRepresentationTypeResponseFormGroup() {
		return new FormGroup<AttorneyRepresentationTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2159)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(34), Validators.maxLength(34)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2158)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface AttorneyTypeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		attorneyTypeArray: Array<AttorneyType>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2145
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2144
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface AttorneyTypeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2145
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2144
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAttorneyTypeResponseFormGroup() {
		return new FormGroup<AttorneyTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2145)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(20)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2144)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface Attorneys {

		/**
		 * Required
		 * Maximum items: 25
		 */
		attorneyArray: Array<Attorney>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface AttorneysFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateAttorneysFormGroup() {
		return new FormGroup<AttorneysFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** This contains the Attorney details that is obtained from the State Bar where the attorney is registered. */
	export interface BarRecord {

		/**
		 * The admittedDate is the date when an attorney was admitted to the bar of a given state.
		 * Required
		 * Max length: 25
		 */
		admittedDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		barNumber: string;

		/** Required */
		barSourceData: BarSourceData;

		/**
		 * Required
		 * Max length: 70
		 */
		barSourceType: string;

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/**
		 * Required
		 * Max length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		inactivationDate: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Last Fetch Date of the Attorney Update.
		 * Required
		 * Max length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/**
		 * Required
		 * Max length: 9
		 */
		object: string;

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: string;

		/**
		 * Required
		 * Max length: 15
		 */
		status: BarRecordStatus;
	}

	/** This contains the Attorney details that is obtained from the State Bar where the attorney is registered. */
	export interface BarRecordFormProperties {

		/**
		 * The admittedDate is the date when an attorney was admitted to the bar of a given state.
		 * Required
		 * Max length: 25
		 */
		admittedDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		barNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 70
		 */
		barSourceType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		inactivationDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Last Fetch Date of the Attorney Update.
		 * Required
		 * Max length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 */
		status: FormControl<BarRecordStatus | null | undefined>,
	}
	export function CreateBarRecordFormGroup() {
		return new FormGroup<BarRecordFormProperties>({
			admittedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			barNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			barSourceType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(70)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			inactivationDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(9)]),
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2)]),
			status: new FormControl<BarRecordStatus | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
		});

	}

	export interface BarSourceData {

		/** Required */
		BarSourceDataAdministrativeActionsArray: Array<BarSourceDataAdministrativeActionsArray>;

		/**
		 * Required
		 * Max length: 250
		 */
		admissionType: string;

		/** Required */
		BarSourceDataAdvancedDegreeArray: Array<BarSourceDataAdvancedDegreeArray>;

		/**
		 * Required
		 * Max length: 250
		 */
		appellateCourtDistrict: string;

		/**
		 * Required
		 * Max length: 250
		 */
		appellateDivisionDepartment: string;

		/**
		 * Required
		 * Max length: 250
		 */
		attorneyGroup: string;

		/**
		 * Required
		 * Max length: 250
		 */
		authorized: string;

		/**
		 * Required
		 * Max length: 250
		 */
		barLawFirm: string;

		/**
		 * Required
		 * Max length: 250
		 */
		barServiceClass: string;

		/** Required */
		BarSourceDataBarStatusArray: Array<BarSourceDataBarStatusArray>;

		/**
		 * Required
		 * Max length: 5000
		 */
		bio: string;

		/** Required */
		BarSourceDataBoardCertificationsArray: Array<BarSourceDataBoardCertificationsArray>;

		/**
		 * Required
		 * Max length: 250
		 */
		boardDistrict: string;

		/**
		 * Required
		 * Max length: 250
		 */
		circuit: string;

		/** Required */
		clientsRepresentedArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		comments: string;

		/** Required */
		BarSourceDataCommitteesArray: Array<BarSourceDataCommitteesArray>;

		/** Required */
		BarSourceDataCourtHistoryArray: Array<BarSourceDataCourtHistoryArray>;

		/** Required */
		courtOfAdmissions: BarSourceDataCourtOfAdmissions;

		/**
		 * Required
		 * Max length: 250
		 */
		courtServiceEmail: string;

		/** Required */
		BarSourceDataDisciplinaryHistoryArray: Array<BarSourceDataDisciplinaryHistoryArray>;

		/** Required */
		BarSourceDataDisciplineSummariesArray: Array<BarSourceDataDisciplineSummariesArray>;

		/** Required */
		dismissalsArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		district: string;

		/** Required */
		BarSourceDataEmploymentHistoryArray: Array<BarSourceDataEmploymentHistoryArray>;

		/**
		 * Required
		 * Max length: 25
		 */
		expirationDate: Date;

		/** Required */
		BarSourceDataFeesOptionsArray: Array<BarSourceDataFeesOptionsArray>;

		/**
		 * Required
		 * Max length: 250
		 */
		firmSize: string;

		/**
		 * Required
		 * Max length: 1000
		 */
		firmWebsite: string;

		/**
		 * The firstAdmittedDate is the date when an attorney was admitted to the bar for the very first time regardless of which U.S state.
		 * Required
		 * Max length: 25
		 */
		firstAdmittedDate: Date;

		/** Required */
		firstAdmittedYear: number;

		/**
		 * Required
		 * Max length: 250
		 */
		homeCounty: string;

		/**
		 * Required
		 * Max length: 250
		 */
		inGoodStanding: string;

		/**
		 * Required
		 * Max length: 500
		 */
		insurance: string;

		/** Required */
		BarSourceDataInvolvementsArray: Array<BarSourceDataInvolvementsArray>;

		/**
		 * Required
		 * Max length: 250
		 */
		judicialDistrict: string;

		/**
		 * Required
		 * Max length: 250
		 */
		jurisType: string;

		/** Required */
		languagesArray: Array<string>;

		/**
		 * Required
		 * Max length: 25
		 */
		lastRenewalDate: Date;

		/** Required */
		BarSourceDataLawSchoolArray: Array<BarSourceDataLawSchoolArray>;

		/** Required */
		legalSpecialityArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		licenseType: string;

		/** Required */
		name: BarSourceDataName;

		/**
		 * Required
		 * Max length: 25
		 */
		nextRegistration: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		nextRenewalDate: Date;

		/**
		 * Required
		 * Max length: 13
		 */
		object: string;

		/** Required */
		BarSourceDataOpenActionStatusArray: Array<BarSourceDataOpenActionStatusArray>;

		/** Required */
		BarSourceDataOtherJurisdictionArray: Array<BarSourceDataOtherJurisdictionArray>;

		/** Required */
		otherNameArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		parish: string;

		/** Required */
		pendingProceedingArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		position: string;

		/** Required */
		practiceAreaArray: Array<string>;

		/** Required */
		practiceLocationArray: Array<string>;

		/**
		 * Required
		 * Max length: 250
		 */
		privateLawPractice: string;

		/**
		 * Required
		 * Max length: 25
		 */
		profileLastCertified: Date;

		/** Required */
		BarSourceDataPublicHearingArray: Array<BarSourceDataPublicHearingArray>;

		/** Required */
		reasonForInactivation: BarSourceDataReasonForInactivation;

		/** Required */
		BarSourceDataRelatedCasesArray: Array<BarSourceDataRelatedCasesArray>;

		/** Required */
		sectionsArray: Array<string>;

		/** Required */
		servicesArray: Array<string>;

		/** Required */
		sourceInfo: BarSourceDataSourceInfo;

		/** Required */
		BarSourceDataStatewideGrievanceCommitteeHistoryArray: Array<BarSourceDataStatewideGrievanceCommitteeHistoryArray>;

		/**
		 * Required
		 * Max length: 500
		 */
		status: string;

		/**
		 * Required
		 * Max length: 25
		 */
		statusDate: Date;

		/**
		 * Required
		 * Max length: 500
		 */
		statusHint: string;

		/** Required */
		BarSourceDataStatusHistoryArray: Array<BarSourceDataStatusHistoryArray>;

		/** Required */
		BarSourceDataTenYearDisciplineArray: Array<BarSourceDataTenYearDisciplineArray>;

		/**
		 * Required
		 * Max length: 250
		 */
		undergraduateSchool: string;

		/**
		 * Required
		 * Max length: 250
		 */
		yearsOfPractice: string;
	}
	export interface BarSourceDataFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		admissionType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		appellateCourtDistrict: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		appellateDivisionDepartment: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		attorneyGroup: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		authorized: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		barLawFirm: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		barServiceClass: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 5000
		 */
		bio: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		boardDistrict: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		circuit: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		comments: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		courtServiceEmail: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		district: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		expirationDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		firmSize: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 1000
		 */
		firmWebsite: FormControl<string | null | undefined>,

		/**
		 * The firstAdmittedDate is the date when an attorney was admitted to the bar for the very first time regardless of which U.S state.
		 * Required
		 * Max length: 25
		 */
		firstAdmittedDate: FormControl<Date | null | undefined>,

		/** Required */
		firstAdmittedYear: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		homeCounty: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		inGoodStanding: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		insurance: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		judicialDistrict: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		jurisType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		lastRenewalDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		licenseType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		nextRegistration: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		nextRenewalDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		parish: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		position: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		privateLawPractice: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		profileLastCertified: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		statusDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		statusHint: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		undergraduateSchool: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		yearsOfPractice: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataFormGroup() {
		return new FormGroup<BarSourceDataFormProperties>({
			admissionType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			appellateCourtDistrict: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			appellateDivisionDepartment: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			attorneyGroup: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			authorized: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			barLawFirm: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			barServiceClass: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			bio: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(5000)]),
			boardDistrict: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			circuit: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			comments: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			courtServiceEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			district: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			expirationDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			firmSize: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			firmWebsite: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firstAdmittedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			firstAdmittedYear: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			homeCounty: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			inGoodStanding: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			insurance: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			judicialDistrict: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			jurisType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			lastRenewalDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			licenseType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			nextRegistration: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			nextRenewalDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(13)]),
			parish: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			position: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			privateLawPractice: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			profileLastCertified: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			statusDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			statusHint: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			undergraduateSchool: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			yearsOfPractice: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataAdministrativeActionsArray {

		/**
		 * Required
		 * Max length: 250
		 */
		caseNumber: string;

		/**
		 * Required
		 * Max length: 250
		 */
		description: string;

		/**
		 * Required
		 * Max length: 25
		 */
		effectiveDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		resultingStatus: string;

		/**
		 * Required
		 * Max length: 250
		 */
		type: string;
	}
	export interface BarSourceDataAdministrativeActionsArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		caseNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		effectiveDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		resultingStatus: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataAdministrativeActionsArrayFormGroup() {
		return new FormGroup<BarSourceDataAdministrativeActionsArrayFormProperties>({
			caseNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			effectiveDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			resultingStatus: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataAdvancedDegreeArray {

		/**
		 * Required
		 * Max length: 250
		 */
		area: string;

		/**
		 * Required
		 * Max length: 250
		 */
		degree: string;
	}
	export interface BarSourceDataAdvancedDegreeArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		area: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		degree: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataAdvancedDegreeArrayFormGroup() {
		return new FormGroup<BarSourceDataAdvancedDegreeArrayFormProperties>({
			area: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			degree: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataBarStatusArray {

		/**
		 * Required
		 * Max length: 25
		 */
		date: string;

		/**
		 * Required
		 * Max length: 250
		 */
		status: string;
	}
	export interface BarSourceDataBarStatusArrayFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		date: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataBarStatusArrayFormGroup() {
		return new FormGroup<BarSourceDataBarStatusArrayFormProperties>({
			date: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataBoardCertificationsArray {

		/**
		 * Required
		 * Max length: 250
		 */
		area: string;

		/**
		 * Required
		 * Max length: 250
		 */
		year: string;
	}
	export interface BarSourceDataBoardCertificationsArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		area: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		year: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataBoardCertificationsArrayFormGroup() {
		return new FormGroup<BarSourceDataBoardCertificationsArrayFormProperties>({
			area: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			year: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataCommitteesArray {

		/**
		 * Required
		 * Max length: 250
		 */
		committee: string;

		/**
		 * Required
		 * Max length: 250
		 */
		office: string;

		/**
		 * Required
		 * Max length: 250
		 */
		term: string;
	}
	export interface BarSourceDataCommitteesArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		committee: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		office: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		term: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataCommitteesArrayFormGroup() {
		return new FormGroup<BarSourceDataCommitteesArrayFormProperties>({
			committee: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			office: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			term: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataCourtHistoryArray {

		/**
		 * Required
		 * Max length: 250
		 */
		action: string;

		/**
		 * Required
		 * Max length: 2000
		 */
		actionComments: string;

		/**
		 * Required
		 * Max length: 25
		 */
		reinstatedDate: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		startDate: Date;
	}
	export interface BarSourceDataCourtHistoryArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		action: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2000
		 */
		actionComments: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		reinstatedDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		startDate: FormControl<Date | null | undefined>,
	}
	export function CreateBarSourceDataCourtHistoryArrayFormGroup() {
		return new FormGroup<BarSourceDataCourtHistoryArrayFormProperties>({
			action: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			actionComments: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2000)]),
			reinstatedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			startDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
		});

	}

	export interface BarSourceDataCourtOfAdmissions {

		/** Required */
		courtStateArray: Array<string>;

		/** Required */
		federalArray: Array<string>;

		/** Required */
		otherCourtsArray: Array<string>;
	}
	export interface BarSourceDataCourtOfAdmissionsFormProperties {
	}
	export function CreateBarSourceDataCourtOfAdmissionsFormGroup() {
		return new FormGroup<BarSourceDataCourtOfAdmissionsFormProperties>({
		});

	}

	export interface BarSourceDataDisciplinaryHistoryArray {

		/**
		 * Required
		 * Max length: 250
		 */
		action: string;

		/**
		 * Required
		 * Max length: 250
		 */
		caseNumber: string;

		/**
		 * Required
		 * Max length: 1000
		 */
		complaint: string;

		/**
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		contactId: string;

		/**
		 * Required
		 * Max length: 25
		 */
		dateOfAction: Date;

		/**
		 * Required
		 * Max length: 1000
		 */
		definition: string;

		/**
		 * Required
		 * Max length: 250
		 */
		disciplinaryDecision: string;

		/**
		 * Required
		 * Max length: 25
		 */
		entryDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		information: string;

		/**
		 * Required
		 * Max length: 250
		 */
		link: string;

		/**
		 * Required
		 * Max length: 1000
		 */
		note: string;

		/**
		 * Required
		 * Max length: 25
		 */
		probationDate: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		reinstatedDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		rule: string;

		/**
		 * Required
		 * Max length: 250
		 */
		ruleNumber: string;

		/**
		 * Required
		 * Max length: 25
		 */
		sectionDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		status: string;

		/**
		 * Required
		 * Max length: 25
		 */
		stayDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		supremeCourt: string;

		/**
		 * Required
		 * Max length: 250
		 */
		term: string;

		/**
		 * Required
		 * Max length: 250
		 */
		typeOfAction: string;
	}
	export interface BarSourceDataDisciplinaryHistoryArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		action: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		caseNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 1000
		 */
		complaint: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		contactId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		dateOfAction: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 1000
		 */
		definition: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		disciplinaryDecision: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		entryDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		information: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		link: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 1000
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		probationDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		reinstatedDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		rule: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		ruleNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		sectionDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		stayDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		supremeCourt: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		term: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		typeOfAction: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataDisciplinaryHistoryArrayFormGroup() {
		return new FormGroup<BarSourceDataDisciplinaryHistoryArrayFormProperties>({
			action: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			caseNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			complaint: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			contactId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			dateOfAction: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			definition: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			disciplinaryDecision: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			entryDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			information: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			link: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			probationDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			reinstatedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			rule: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			ruleNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			sectionDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			stayDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			supremeCourt: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			term: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			typeOfAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataDisciplineSummariesArray {

		/**
		 * Required
		 * Max length: 25
		 */
		date: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		link: string;

		/**
		 * Required
		 * Max length: 250
		 */
		title: string;
	}
	export interface BarSourceDataDisciplineSummariesArrayFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		link: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataDisciplineSummariesArrayFormGroup() {
		return new FormGroup<BarSourceDataDisciplineSummariesArrayFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			link: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataEmploymentHistoryArray {

		/**
		 * Required
		 * Max length: 250
		 */
		employer: string;

		/**
		 * Required
		 * Max length: 25
		 */
		endDate: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		startDate: Date;
	}
	export interface BarSourceDataEmploymentHistoryArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		employer: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		endDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		startDate: FormControl<Date | null | undefined>,
	}
	export function CreateBarSourceDataEmploymentHistoryArrayFormGroup() {
		return new FormGroup<BarSourceDataEmploymentHistoryArrayFormProperties>({
			employer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			endDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			startDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
		});

	}

	export interface BarSourceDataFeesOptionsArray {

		/**
		 * Required
		 * Max length: 250
		 */
		contingencyFees: string;

		/**
		 * Required
		 * Max length: 250
		 */
		flatFees: string;

		/**
		 * Required
		 * Max length: 250
		 */
		hourlyRate: string;

		/**
		 * Required
		 * Max length: 250
		 */
		paymentPlans: string;

		/**
		 * Required
		 * Max length: 250
		 */
		slidingScaleFees: string;
	}
	export interface BarSourceDataFeesOptionsArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		contingencyFees: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		flatFees: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		hourlyRate: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		paymentPlans: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		slidingScaleFees: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataFeesOptionsArrayFormGroup() {
		return new FormGroup<BarSourceDataFeesOptionsArrayFormProperties>({
			contingencyFees: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			flatFees: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			hourlyRate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			paymentPlans: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			slidingScaleFees: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataInvolvementsArray {

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 250
		 */
		position: string;

		/**
		 * Required
		 * Max length: 250
		 */
		type: string;
	}
	export interface BarSourceDataInvolvementsArrayFormProperties {

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		position: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataInvolvementsArrayFormGroup() {
		return new FormGroup<BarSourceDataInvolvementsArrayFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			position: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataLawSchoolArray {

		/**
		 * Required
		 * Max length: 250
		 */
		lawSchool: string;

		/**
		 * Required
		 * Max length: 25
		 */
		lawSchoolGraduatedDate: Date;
	}
	export interface BarSourceDataLawSchoolArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		lawSchool: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		lawSchoolGraduatedDate: FormControl<Date | null | undefined>,
	}
	export function CreateBarSourceDataLawSchoolArrayFormGroup() {
		return new FormGroup<BarSourceDataLawSchoolArrayFormProperties>({
			lawSchool: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			lawSchoolGraduatedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
		});

	}

	export interface BarSourceDataName {

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 250
		 */
		prefix: string;

		/**
		 * Required
		 * Max length: 250
		 */
		suffix: string;
	}
	export interface BarSourceDataNameFormProperties {

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		prefix: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		suffix: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataNameFormGroup() {
		return new FormGroup<BarSourceDataNameFormProperties>({
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			prefix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			suffix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataOpenActionStatusArray {

		/**
		 * Required
		 * Max length: 25
		 */
		date: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		reason: string;
	}
	export interface BarSourceDataOpenActionStatusArrayFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		reason: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataOpenActionStatusArrayFormGroup() {
		return new FormGroup<BarSourceDataOpenActionStatusArrayFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataOtherJurisdictionArray {

		/**
		 * Required
		 * Max length: 250
		 */
		barNumber: string;

		/**
		 * Required
		 * Max length: 250
		 */
		state: string;
	}
	export interface BarSourceDataOtherJurisdictionArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		barNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataOtherJurisdictionArrayFormGroup() {
		return new FormGroup<BarSourceDataOtherJurisdictionArrayFormProperties>({
			barNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataPublicHearingArray {

		/**
		 * Required
		 * Max length: 500
		 */
		conduct: string;

		/**
		 * Required
		 * Max length: 25
		 */
		date: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		issuedBy: string;

		/**
		 * Required
		 * Max length: 250
		 */
		order: string;

		/**
		 * Required
		 * Max length: 250
		 */
		respondent: string;
	}
	export interface BarSourceDataPublicHearingArrayFormProperties {

		/**
		 * Required
		 * Max length: 500
		 */
		conduct: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		issuedBy: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		order: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		respondent: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataPublicHearingArrayFormGroup() {
		return new FormGroup<BarSourceDataPublicHearingArrayFormProperties>({
			conduct: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			issuedBy: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			order: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			respondent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataReasonForInactivation {

		/**
		 * Required
		 * Max length: 250
		 */
		caseNumber: string;

		/**
		 * Required
		 * Max length: 250
		 */
		link: string;
	}
	export interface BarSourceDataReasonForInactivationFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		caseNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		link: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataReasonForInactivationFormGroup() {
		return new FormGroup<BarSourceDataReasonForInactivationFormProperties>({
			caseNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			link: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataRelatedCasesArray {

		/**
		 * Required
		 * Max length: 250
		 */
		caseDetails: string;

		/**
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		caseId: string;
	}
	export interface BarSourceDataRelatedCasesArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		caseDetails: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		caseId: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataRelatedCasesArrayFormGroup() {
		return new FormGroup<BarSourceDataRelatedCasesArrayFormProperties>({
			caseDetails: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataSourceInfo {

		/**
		 * Required
		 * Max length: 255
		 */
		url: string;
	}
	export interface BarSourceDataSourceInfoFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataSourceInfoFormGroup() {
		return new FormGroup<BarSourceDataSourceInfoFormProperties>({
			url: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}

	export interface BarSourceDataStatewideGrievanceCommitteeHistoryArray {

		/**
		 * Required
		 * Max length: 250
		 */
		finalDecision: string;

		/**
		 * Required
		 * Max length: 25
		 */
		finalDecisionDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		grievanceComplaintNumber: string;

		/**
		 * Required
		 * Max length: 1000
		 */
		publicComments: string;
	}
	export interface BarSourceDataStatewideGrievanceCommitteeHistoryArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		finalDecision: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		finalDecisionDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		grievanceComplaintNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 1000
		 */
		publicComments: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataStatewideGrievanceCommitteeHistoryArrayFormGroup() {
		return new FormGroup<BarSourceDataStatewideGrievanceCommitteeHistoryArrayFormProperties>({
			finalDecision: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			finalDecisionDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			grievanceComplaintNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			publicComments: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}

	export interface BarSourceDataStatusHistoryArray {

		/**
		 * Required
		 * Max length: 25
		 */
		effectiveDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		statusChange: string;
	}
	export interface BarSourceDataStatusHistoryArrayFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		effectiveDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		statusChange: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataStatusHistoryArrayFormGroup() {
		return new FormGroup<BarSourceDataStatusHistoryArrayFormProperties>({
			effectiveDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			statusChange: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface BarSourceDataTenYearDisciplineArray {

		/**
		 * Required
		 * Max length: 25
		 */
		actionDate: Date;

		/**
		 * Required
		 * Max length: 250
		 */
		description: string;

		/**
		 * Required
		 * Max length: 250
		 */
		reference: string;
	}
	export interface BarSourceDataTenYearDisciplineArrayFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		actionDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		reference: FormControl<string | null | undefined>,
	}
	export function CreateBarSourceDataTenYearDisciplineArrayFormGroup() {
		return new FormGroup<BarSourceDataTenYearDisciplineArrayFormProperties>({
			actionDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export enum BarRecordStatus { Active = 0, Inactive = 1, 'Not Classified' = 2, Unknown = 3 }

	export interface BillingCycleUsageResponse {

		/**
		 * Total number of API calls billed for the billing cycle.
		 * Required
		 */
		apiCallsBillable: BillingCycleUsageResponseApiCallsBillable;

		/**
		 * Total number of callbackFailures including caseUpdate, caseDocumentOrder and caseExport for the billing cycle.
		 * Required
		 */
		apiCallsCredited: BillingCycleUsageResponseApiCallsCredited;

		/**
		 * Total API calls made for the billing cycle.
		 * Required
		 */
		apiCallsMade: BillingCycleUsageResponseApiCallsMade;

		/**
		 * Billing cycle apiUsage.
		 * Required
		 */
		apiUsage: string;

		/**
		 * StartDate and endDate of the billing cycle.
		 * Required
		 */
		billingCycle: BillingCycleUsageResponseBillingCycle;

		/**
		 * Billing cycle days.
		 * Required
		 */
		days: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: string;

		/**
		 * Total number of successful case tracks.
		 * Required
		 */
		totalCasesTracked: number;
	}
	export interface BillingCycleUsageResponseFormProperties {

		/**
		 * Billing cycle apiUsage.
		 * Required
		 */
		apiUsage: FormControl<string | null | undefined>,

		/**
		 * Billing cycle days.
		 * Required
		 */
		days: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Total number of successful case tracks.
		 * Required
		 */
		totalCasesTracked: FormControl<number | null | undefined>,
	}
	export function CreateBillingCycleUsageResponseFormGroup() {
		return new FormGroup<BillingCycleUsageResponseFormProperties>({
			apiUsage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			days: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			totalCasesTracked: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface BillingCycleUsageResponseApiCallsBillable {

		/**
		 * Total API calls billed  for the billing cycle
		 * Required
		 */
		count: number;

		/**
		 * Last Updated date and time for the field apiCallsBillable
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: Date;
	}
	export interface BillingCycleUsageResponseApiCallsBillableFormProperties {

		/**
		 * Total API calls billed  for the billing cycle
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Last Updated date and time for the field apiCallsBillable
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: FormControl<Date | null | undefined>,
	}
	export function CreateBillingCycleUsageResponseApiCallsBillableFormGroup() {
		return new FormGroup<BillingCycleUsageResponseApiCallsBillableFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastUpdated: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface BillingCycleUsageResponseApiCallsCredited {

		/**
		 * Total API calls credited back for the billing cycle
		 * Required
		 */
		count: number;

		/**
		 * Last Updated date and time for the field apiCallsCredited
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: Date;
	}
	export interface BillingCycleUsageResponseApiCallsCreditedFormProperties {

		/**
		 * Total API calls credited back for the billing cycle
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Last Updated date and time for the field apiCallsCredited
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: FormControl<Date | null | undefined>,
	}
	export function CreateBillingCycleUsageResponseApiCallsCreditedFormGroup() {
		return new FormGroup<BillingCycleUsageResponseApiCallsCreditedFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastUpdated: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface BillingCycleUsageResponseApiCallsMade {

		/**
		 * Total API calls made for the billing cycle
		 * Required
		 */
		count: number;

		/**
		 * Last Updated date and time for the field apiCallsMade
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: Date;
	}
	export interface BillingCycleUsageResponseApiCallsMadeFormProperties {

		/**
		 * Total API calls made for the billing cycle
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Last Updated date and time for the field apiCallsMade
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: FormControl<Date | null | undefined>,
	}
	export function CreateBillingCycleUsageResponseApiCallsMadeFormGroup() {
		return new FormGroup<BillingCycleUsageResponseApiCallsMadeFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastUpdated: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface BillingCycleUsageResponseBillingCycle {

		/**
		 * End date of the billing cycle.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		endDate: Date;

		/**
		 * Start date of the billing cycle.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		startDate: Date;
	}
	export interface BillingCycleUsageResponseBillingCycleFormProperties {

		/**
		 * End date of the billing cycle.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		endDate: FormControl<Date | null | undefined>,

		/**
		 * Start date of the billing cycle.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		startDate: FormControl<Date | null | undefined>,
	}
	export function CreateBillingCycleUsageResponseBillingCycleFormGroup() {
		return new FormGroup<BillingCycleUsageResponseBillingCycleFormProperties>({
			endDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			startDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface BillingCyclesResponse {

		/**
		 * Array of previous 12 Billing Cycles.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 12
		 */
		billingCycleArray: Array<string>;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;
	}
	export interface BillingCyclesResponseFormProperties {

		/**
		 * Name of the object.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateBillingCyclesResponseFormGroup() {
		return new FormGroup<BillingCyclesResponseFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
		});

	}

	export interface CallbackListResponse {

		/** Required */
		caseDocumentOrderCallbacks: CallbackListResponseCaseDocumentOrderCallbacks;

		/** Required */
		caseExportCallbacks: CallbackListResponseCaseExportCallbacks;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: string;
	}
	export interface CallbackListResponseFormProperties {

		/**
		 * Name of the object.
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCallbackListResponseFormGroup() {
		return new FormGroup<CallbackListResponseFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(20)]),
		});

	}

	export interface CallbackListResponseCaseDocumentOrderCallbacks {

		/** Required */
		count: number;

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		link: string;
	}
	export interface CallbackListResponseCaseDocumentOrderCallbacksFormProperties {

		/** Required */
		count: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		link: FormControl<string | null | undefined>,
	}
	export function CreateCallbackListResponseCaseDocumentOrderCallbacksFormGroup() {
		return new FormGroup<CallbackListResponseCaseDocumentOrderCallbacksFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			link: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
		});

	}

	export interface CallbackListResponseCaseExportCallbacks {

		/** Required */
		count: number;

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		link: string;
	}
	export interface CallbackListResponseCaseExportCallbacksFormProperties {

		/** Required */
		count: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		link: FormControl<string | null | undefined>,
	}
	export function CreateCallbackListResponseCaseExportCallbacksFormGroup() {
		return new FormGroup<CallbackListResponseCaseExportCallbacksFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			link: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
		});

	}

	export interface Case {

		/** Required */
		attorneys: Attorneys;

		/** Required */
		caseDocuments: CaseDocuments;

		/**
		 * Unique identifier of Case.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * Case name as provided by Court.
		 * Required
		 * Max length: 250
		 */
		caseName: string;

		/**
		 * Case number as provided by Court.
		 * Required
		 * Max length: 50
		 * Min length: 3
		 */
		caseNumber: string;

		/**
		 * Count of each entitiy of a case is mentioned here so that you can calculate the number of requests needs to be done to obtain each entity results completely.
		 * Required
		 */
		caseStats: CaseStats;

		/** Required */
		caseStatus: CaseStatus;

		/** Required */
		caseType: CaseType;

		/**
		 * Array of cause of Actions that are added to this case.
		 * Required
		 */
		causeOfActionArray: Array<CaseCauseOfAction>;

		/**
		 * Array of charges that are added to this case.
		 * Required
		 */
		chargeArray: Array<CaseCharge>;

		/** Required */
		court: Court;

		/** Required */
		courtLocation: CourtLocation;

		/**
		 * API to get the service statuses of the given case.
		 * Required
		 * Max length: 250
		 */
		courtServiceStatusAPI: string;

		/**
		 * Court Service Status ID of the requested case where we can use it to get the service status
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtServiceStatusId: string;

		/** Required */
		docketEntries: DocketEntries;

		/**
		 * When a case is beyond the threshold of entities we provide this link so that the user can request and get all the data of the case with one additional call. This data will be zipped and sent via a webhoook.
		 * Required
		 * Max length: 255
		 */
		exportAPI: string;

		/**
		 * Filing date for the case provided by the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		filedDate: Date;

		/**
		 * The date and time when the case was first fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * This field will be set to TRUE if atleast one document has a preview.
		 * Required
		 */
		hasDocumentsWithPreview: boolean;

		/**
		 * This field determines if this case object has only meta information. If the value is true and if the full information is required you would need to call the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: boolean;

		/** Required */
		hearings: Hearings;

		/** Required */
		judges: Judges;

		/**
		 * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/**
		 * Name of the object
		 * Required
		 * Max length: 4
		 * Min length: 4
		 */
		object: string;

		/**
		 * The date and time when parties/attorneys were last updated from the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: This is currently applicable for Federal PACER cases since we have an option to exclude parties and fetch only latest docket entries when updating cases to save PACER fees.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		participantsLastFetchDate: Date;

		/** Required */
		parties: Parties;

		/** Required */
		relatedCases: RelatedCases;

		/**
		 * Source data in the court website.
		 * Required
		 */
		sourceCaseData: SourceCaseData;

		/**
		 * The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
		 * Required
		 */
		sourceDataStatus: CaseSourceDataStatus;

		/**
		 * URL to the case page in UniCourt Application.
		 * Required
		 * Max length: 500
		 */
		url: string;
	}
	export interface CaseFormProperties {

		/**
		 * Unique identifier of Case.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * Case name as provided by Court.
		 * Required
		 * Max length: 250
		 */
		caseName: FormControl<string | null | undefined>,

		/**
		 * Case number as provided by Court.
		 * Required
		 * Max length: 50
		 * Min length: 3
		 */
		caseNumber: FormControl<string | null | undefined>,

		/**
		 * API to get the service statuses of the given case.
		 * Required
		 * Max length: 250
		 */
		courtServiceStatusAPI: FormControl<string | null | undefined>,

		/**
		 * Court Service Status ID of the requested case where we can use it to get the service status
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtServiceStatusId: FormControl<string | null | undefined>,

		/**
		 * When a case is beyond the threshold of entities we provide this link so that the user can request and get all the data of the case with one additional call. This data will be zipped and sent via a webhoook.
		 * Required
		 * Max length: 255
		 */
		exportAPI: FormControl<string | null | undefined>,

		/**
		 * Filing date for the case provided by the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		filedDate: FormControl<Date | null | undefined>,

		/**
		 * The date and time when the case was first fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * This field will be set to TRUE if atleast one document has a preview.
		 * Required
		 */
		hasDocumentsWithPreview: FormControl<boolean | null | undefined>,

		/**
		 * This field determines if this case object has only meta information. If the value is true and if the full information is required you would need to call the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: FormControl<boolean | null | undefined>,

		/**
		 * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 4
		 * Min length: 4
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * The date and time when parties/attorneys were last updated from the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: This is currently applicable for Federal PACER cases since we have an option to exclude parties and fetch only latest docket entries when updating cases to save PACER fees.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		participantsLastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
		 * Required
		 */
		sourceDataStatus: FormControl<CaseSourceDataStatus | null | undefined>,

		/**
		 * URL to the case page in UniCourt Application.
		 * Required
		 * Max length: 500
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCaseFormGroup() {
		return new FormGroup<CaseFormProperties>({
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			caseNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),
			courtServiceStatusAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			courtServiceStatusId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			exportAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			filedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			hasDocumentsWithPreview: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			hasOnlyMetaInfo: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(4)]),
			participantsLastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			sourceDataStatus: new FormControl<CaseSourceDataStatus | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
		});

	}

	export interface CaseDocuments {

		/**
		 * Required
		 * Maximum items: 100
		 */
		caseDocumentArray: Array<CaseDocument>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseDocumentsFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseDocumentsFormGroup() {
		return new FormGroup<CaseDocumentsFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseDocument {

		/**
		 * Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		addedToLibraryDate: string;

		/**
		 * UniCourt's Case Document ID.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: string;

		/**
		 * List of child document ID's if exists or else it will be an empty lsit.
		 * Required
		 */
		childDocumentIdArray: Array<string>;

		/**
		 * Description of the document.
		 * Required
		 * Max length: 100000
		 */
		description: string;

		/**
		 * Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		documentFiledDate: string;

		/**
		 * Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.
		 * Required
		 * Max length: 255
		 */
		downloadAPI: string;

		/**
		 * Estimated duration of a Order.
		 * Required
		 * Max length: 25
		 * Min length: 10
		 */
		estimatedOrderDuration: CaseDocumentEstimatedOrderDuration;

		/**
		 * Is the date when the document was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: string;

		/**
		 * Determines if the document is present in the UniCourt Library or not.
		 * Required
		 */
		inLibrary: boolean;

		/**
		 * Determines if a preview is available for the case document.
		 * Required
		 */
		isPreviewAvailable: boolean;

		/**
		 * Document name.
		 * Required
		 * Max length: 255
		 */
		name: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: string;

		/**
		 * Total number of pages in the document.
		 * Required
		 */
		pages: number;

		/**
		 * Document ID which is the parent document for the current document. This will be null if the current document is a parent document.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		parentDocumentId: string;

		/** Required */
		previewDocument: PreviewDocument;

		/**
		 * Price of the document.
		 * Required
		 */
		price: number;

		/**
		 * Order of documents how it is being stored in UniCourt.
		 * Required
		 */
		sortOrder: number;

		/**
		 * The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
		 * Required
		 */
		sourceDataStatus: CaseDocumentSourceDataStatus;
	}
	export interface CaseDocumentFormProperties {

		/**
		 * Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		addedToLibraryDate: FormControl<string | null | undefined>,

		/**
		 * UniCourt's Case Document ID.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: FormControl<string | null | undefined>,

		/**
		 * Description of the document.
		 * Required
		 * Max length: 100000
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		documentFiledDate: FormControl<string | null | undefined>,

		/**
		 * Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.
		 * Required
		 * Max length: 255
		 */
		downloadAPI: FormControl<string | null | undefined>,

		/**
		 * Estimated duration of a Order.
		 * Required
		 * Max length: 25
		 * Min length: 10
		 */
		estimatedOrderDuration: FormControl<CaseDocumentEstimatedOrderDuration | null | undefined>,

		/**
		 * Is the date when the document was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<string | null | undefined>,

		/**
		 * Determines if the document is present in the UniCourt Library or not.
		 * Required
		 */
		inLibrary: FormControl<boolean | null | undefined>,

		/**
		 * Determines if a preview is available for the case document.
		 * Required
		 */
		isPreviewAvailable: FormControl<boolean | null | undefined>,

		/**
		 * Document name.
		 * Required
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Total number of pages in the document.
		 * Required
		 */
		pages: FormControl<number | null | undefined>,

		/**
		 * Document ID which is the parent document for the current document. This will be null if the current document is a parent document.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		parentDocumentId: FormControl<string | null | undefined>,

		/**
		 * Price of the document.
		 * Required
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * Order of documents how it is being stored in UniCourt.
		 * Required
		 */
		sortOrder: FormControl<number | null | undefined>,

		/**
		 * The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
		 * Required
		 */
		sourceDataStatus: FormControl<CaseDocumentSourceDataStatus | null | undefined>,
	}
	export function CreateCaseDocumentFormGroup() {
		return new FormGroup<CaseDocumentFormProperties>({
			addedToLibraryDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			caseDocumentId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100000)]),
			documentFiledDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			downloadAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			estimatedOrderDuration: new FormControl<CaseDocumentEstimatedOrderDuration | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(25)]),
			firstFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			inLibrary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			isPreviewAvailable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(12), Validators.maxLength(12)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			parentDocumentId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sortOrder: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sourceDataStatus: new FormControl<CaseDocumentSourceDataStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CaseDocumentEstimatedOrderDuration { estimateUnavailable = 0, withinMinutes = 1, withinHours = 2, withinDays = 3, withinWeeks = 4 }

	export interface PreviewDocument {

		/**
		 * Date and time when the preview document was downloaded and added to the UniCourt CrowdSourced Library.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		addedToLibraryDate: string;

		/**
		 * Link to get the file url for the preview document which is already present in the UniCourt CrowdSourced Library.
		 * Required
		 * Max length: 255
		 */
		downloadAPI: string;

		/**
		 * Determines if the preview document is present in the UniCourt Library or not.
		 * Required
		 */
		inLibrary: boolean;

		/**
		 * Name of the object
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: string;
	}
	export interface PreviewDocumentFormProperties {

		/**
		 * Date and time when the preview document was downloaded and added to the UniCourt CrowdSourced Library.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		addedToLibraryDate: FormControl<string | null | undefined>,

		/**
		 * Link to get the file url for the preview document which is already present in the UniCourt CrowdSourced Library.
		 * Required
		 * Max length: 255
		 */
		downloadAPI: FormControl<string | null | undefined>,

		/**
		 * Determines if the preview document is present in the UniCourt Library or not.
		 * Required
		 */
		inLibrary: FormControl<boolean | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePreviewDocumentFormGroup() {
		return new FormGroup<PreviewDocumentFormProperties>({
			addedToLibraryDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			downloadAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			inLibrary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(15)]),
		});

	}

	export enum CaseDocumentSourceDataStatus { NO_LONGER_AVAILABLE_IN_COURT = 0, SOURCE_DEPRECATED = 1, SEALED = 2, _null = 3 }


	/** Count of each entitiy of a case is mentioned here so that you can calculate the number of requests needs to be done to obtain each entity results completely. */
	export interface CaseStats {

		/**
		 * Count which includes the freeCaseDocumentCount and paidCaseDocumentCount.
		 * Required
		 */
		allCaseDocumentCount: number;

		/**
		 * Count of number of attornies available in the case being requested for.
		 * Required
		 */
		attorneyCount: number;

		/**
		 * Count of number of documents that are available in the UniCourt CrowdSourced Library for the case being requested for.
		 * Required
		 */
		caseDocumentInLibraryCount: number;

		/**
		 * Count of number of docket entries available in the case being requested for.
		 * Required
		 */
		docketEntryCount: number;

		/**
		 * Count of number of free documents available in the case being requested for.
		 * Required
		 */
		freeCaseDocumentCount: number;

		/**
		 * Count of number of hearings available in the case being requested for.
		 * Required
		 */
		hearingCount: number;

		/**
		 * Count of number of judges available in the case being requested for.
		 * Required
		 */
		judgeCount: number;

		/**
		 * Name of the object
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;

		/**
		 * Count of number of paid documents available in the case being requested for.
		 * Required
		 */
		paidCaseDocumentCount: number;

		/**
		 * Count of number of parties available in the case being requested for.
		 * Required
		 */
		partyCount: number;

		/**
		 * Count of related cases that are available in the case being requested.
		 * Required
		 */
		relatedCaseCount: number;
	}

	/** Count of each entitiy of a case is mentioned here so that you can calculate the number of requests needs to be done to obtain each entity results completely. */
	export interface CaseStatsFormProperties {

		/**
		 * Count which includes the freeCaseDocumentCount and paidCaseDocumentCount.
		 * Required
		 */
		allCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of attornies available in the case being requested for.
		 * Required
		 */
		attorneyCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of documents that are available in the UniCourt CrowdSourced Library for the case being requested for.
		 * Required
		 */
		caseDocumentInLibraryCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of docket entries available in the case being requested for.
		 * Required
		 */
		docketEntryCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of free documents available in the case being requested for.
		 * Required
		 */
		freeCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of hearings available in the case being requested for.
		 * Required
		 */
		hearingCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of judges available in the case being requested for.
		 * Required
		 */
		judgeCount: FormControl<number | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Count of number of paid documents available in the case being requested for.
		 * Required
		 */
		paidCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Count of number of parties available in the case being requested for.
		 * Required
		 */
		partyCount: FormControl<number | null | undefined>,

		/**
		 * Count of related cases that are available in the case being requested.
		 * Required
		 */
		relatedCaseCount: FormControl<number | null | undefined>,
	}
	export function CreateCaseStatsFormGroup() {
		return new FormGroup<CaseStatsFormProperties>({
			allCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			attorneyCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseDocumentInLibraryCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			docketEntryCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			freeCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			hearingCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			judgeCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
			paidCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			partyCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			relatedCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseStatus {

		/** Required */
		caseClassArray: Array<string>;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseStatusGroup: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseStatusGroupId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseStatusId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: string;
	}
	export interface CaseStatusFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseStatusGroup: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseStatusGroupId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseStatusId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseStatusFormGroup() {
		return new FormGroup<CaseStatusFormProperties>({
			caseStatusGroup: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseStatusGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseStatusId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(10)]),
		});

	}

	export interface CaseType {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		areaOfLaw: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		areaOfLawId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseClass: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseTypeGroup: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseTypeGroupId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseTypeId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseTypeTag: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		saliCode: string;
	}
	export interface CaseTypeFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		areaOfLaw: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		areaOfLawId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseClass: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseTypeGroup: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseTypeGroupId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseTypeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseTypeTag: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		saliCode: FormControl<string | null | undefined>,
	}
	export function CreateCaseTypeFormGroup() {
		return new FormGroup<CaseTypeFormProperties>({
			areaOfLaw: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			areaOfLawId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseClass: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseClassId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseTypeGroup: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseTypeGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseTypeTag: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),
			saliCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseCauseOfAction {

		/** Required */
		causeOfAction: CauseOfAction;

		/** Required */
		causeOfActionAdditionalDataArray: Array<CauseOfActionAdditionalData>;

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;
	}
	export interface CaseCauseOfActionFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCauseOfActionFormGroup() {
		return new FormGroup<CaseCauseOfActionFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
		});

	}

	export interface CauseOfAction {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		causeOfActionGroup: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionGroupId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;
	}
	export interface CauseOfActionFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		causeOfActionGroup: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionGroupId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCauseOfActionFormGroup() {
		return new FormGroup<CauseOfActionFormProperties>({
			causeOfActionGroup: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			causeOfActionGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			causeOfActionId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
		});

	}

	export interface CauseOfActionAdditionalData {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionAdditionalDataId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 27
		 * Min length: 27
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		type: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		value: string;
	}
	export interface CauseOfActionAdditionalDataFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionAdditionalDataId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 27
		 * Min length: 27
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateCauseOfActionAdditionalDataFormGroup() {
		return new FormGroup<CauseOfActionAdditionalDataFormProperties>({
			causeOfActionAdditionalDataId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(27), Validators.maxLength(27)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			value: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseCharge {

		/** Required */
		charge: Charge;

		/** Required */
		chargeAdditionalDataArray: Array<ChargeAdditionalData>;

		/** Required */
		chargeDegree: ChargeDegree;

		/** Required */
		chargeSeverity: ChargeSeverity;

		/**
		 * Name of the object
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: string;
	}
	export interface CaseChargeFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseChargeFormGroup() {
		return new FormGroup<CaseChargeFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(10)]),
		});

	}

	export interface Charge {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		chargeGroup: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeGroupId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 6
		 * Min length: 6
		 */
		object: string;
	}
	export interface ChargeFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		chargeGroup: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeGroupId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 6
		 * Min length: 6
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateChargeFormGroup() {
		return new FormGroup<ChargeFormProperties>({
			chargeGroup: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			chargeGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			chargeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(6)]),
		});

	}

	export interface ChargeAdditionalData {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeAdditionalDataId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		type: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		value: string;
	}
	export interface ChargeAdditionalDataFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeAdditionalDataId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateChargeAdditionalDataFormGroup() {
		return new FormGroup<ChargeAdditionalDataFormProperties>({
			chargeAdditionalDataId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(20)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			value: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface ChargeDegree {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeDegreeId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: string;
	}
	export interface ChargeDegreeFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeDegreeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateChargeDegreeFormGroup() {
		return new FormGroup<ChargeDegreeFormProperties>({
			chargeDegreeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(12), Validators.maxLength(12)]),
		});

	}

	export interface ChargeSeverity {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeSeverityId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: string;
	}
	export interface ChargeSeverityFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeSeverityId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateChargeSeverityFormGroup() {
		return new FormGroup<ChargeSeverityFormProperties>({
			chargeSeverityId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(14), Validators.maxLength(14)]),
		});

	}

	export interface Court {

		/** Required */
		additionalLevels: AdditionalLevels;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		appealCourtsForCourtAPI: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		container: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		containerType: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtLocationsForCourtAPI: string;

		/**
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		courtServiceStatusAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtSystemId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtTypeId: string;

		/**
		 * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		jurisdictionGeoForCourtAPI: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		nameAka: string;

		/**
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		system: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		type: string;
	}
	export interface CourtFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		appealCourtsForCourtAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		container: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		containerType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtLocationsForCourtAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		courtServiceStatusAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtSystemId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtTypeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		jurisdictionGeoForCourtAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		nameAka: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		system: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateCourtFormGroup() {
		return new FormGroup<CourtFormProperties>({
			appealCourtsForCourtAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			container: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			containerType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			courtId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			courtLocationsForCourtAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			courtServiceStatusAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			courtSystemId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			courtTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			jurisdictionGeoForCourtAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			nameAka: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
			system: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CourtLocation {

		/**
		 * City
		 * Required
		 * Max length: 100
		 */
		city: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtLocationId: string;

		/**
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		courtServiceStatusAPI: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtsForCourtLocationAPI: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;

		/**
		 * State Name if present else default value.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		stateName: string;

		/**
		 * 1st part of the street address.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		streetAddress1: string;

		/**
		 * 2nd part of the street address.
		 * Required
		 * Max length: 150
		 */
		streetAddress2: string;
	}
	export interface CourtLocationFormProperties {

		/**
		 * City
		 * Required
		 * Max length: 100
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtLocationId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		courtServiceStatusAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtsForCourtLocationAPI: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * State Name if present else default value.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		stateName: FormControl<string | null | undefined>,

		/**
		 * 1st part of the street address.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		streetAddress1: FormControl<string | null | undefined>,

		/**
		 * 2nd part of the street address.
		 * Required
		 * Max length: 150
		 */
		streetAddress2: FormControl<string | null | undefined>,
	}
	export function CreateCourtLocationFormGroup() {
		return new FormGroup<CourtLocationFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			courtLocationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			courtServiceStatusAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			courtsForCourtLocationAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
			stateName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			streetAddress1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			streetAddress2: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(150)]),
		});

	}

	export interface DocketEntries {

		/**
		 * Required
		 * Maximum items: 100
		 */
		docketEntryArray: Array<DocketEntry>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface DocketEntriesFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateDocketEntriesFormGroup() {
		return new FormGroup<DocketEntriesFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DocketEntry {

		/**
		 * Determines if it is the first docket entry or the last docket entry. This value will be set only for the first and last docket entry. For other docket entries it will be null. However, this will be set as single_docket_entry when the Case contains only one docket entry.
		 * Required
		 */
		boundary: DocketEntryBoundary;

		/**
		 * Docket Badge helps you to know what type of a docket entry it is.
		 * Required
		 */
		docketBadge: DocketEntryDocketBadge;

		/**
		 * Docket Action Date
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		docketEntryDate: Date;

		/**
		 * Primary Documents refers to documents that are directly related to a docket entry. Primary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the primary document is one which is attached to the docket number. Because in district for a primary document it can have many attachments associatated to it. PACER Appeal Courts - Here the attachments for a docket entry are the primary documents. Because in appeal for those attachments there is no primary documents.
		 * Required
		 */
		docketEntryPrimaryDocuments: DocketEntryPrimaryDocuments;

		/**
		 * Secondary Documents refers to documents that are attached to a docket entry. Secondary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the secondary document is one which is attached in the docket entry.
		 * Required
		 */
		docketEntrySecondaryDocuments: DocketEntrySecondaryDocuments;

		/**
		 * The respective docket entry number which is defined in the court website.
		 * Required
		 */
		docketNumber: number;

		/**
		 * When this docket entry was last fetched from the source.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: string;

		/**
		 * Other Docket Numbers that referenced for a particular docket entry.
		 * Required
		 */
		referencedDocketNumberArray: Array<ReferencedDocketNumber>;

		/**
		 * Order number how the dockets have stored in UniCourt.
		 * Required
		 */
		sortOrder: number;

		/**
		 * Source Docket Entry
		 * Required
		 * Max length: 1000000
		 */
		text: string;

		/** Required */
		textStructured: SourceStructuredData;
	}
	export interface DocketEntryFormProperties {

		/**
		 * Determines if it is the first docket entry or the last docket entry. This value will be set only for the first and last docket entry. For other docket entries it will be null. However, this will be set as single_docket_entry when the Case contains only one docket entry.
		 * Required
		 */
		boundary: FormControl<DocketEntryBoundary | null | undefined>,

		/**
		 * Docket Badge helps you to know what type of a docket entry it is.
		 * Required
		 */
		docketBadge: FormControl<DocketEntryDocketBadge | null | undefined>,

		/**
		 * Docket Action Date
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		docketEntryDate: FormControl<Date | null | undefined>,

		/**
		 * The respective docket entry number which is defined in the court website.
		 * Required
		 */
		docketNumber: FormControl<number | null | undefined>,

		/**
		 * When this docket entry was last fetched from the source.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Order number how the dockets have stored in UniCourt.
		 * Required
		 */
		sortOrder: FormControl<number | null | undefined>,

		/**
		 * Source Docket Entry
		 * Required
		 * Max length: 1000000
		 */
		text: FormControl<string | null | undefined>,
	}
	export function CreateDocketEntryFormGroup() {
		return new FormGroup<DocketEntryFormProperties>({
			boundary: new FormControl<DocketEntryBoundary | null | undefined>(undefined, [Validators.required]),
			docketBadge: new FormControl<DocketEntryDocketBadge | null | undefined>(undefined, [Validators.required]),
			docketEntryDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			docketNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(11), Validators.maxLength(11)]),
			sortOrder: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			text: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000000)]),
		});

	}

	export enum DocketEntryBoundary { first = 0, last = 1, single_docket_entry = 2, _null = 3 }

	export enum DocketEntryDocketBadge { DOCKET = 0, CHARGE = 1, HEARING = 2, JUDGEMENT = 3, FINANCIAL = 4, DISPOSITION = 5, SENTENCE = 6, BOND = 7, BAIL = 8, CAUSE_OF_ACTION = 9, ARREST = 10, WARRANT = 11, SUMMON = 12, TICKLER = 13, OPINION = 14 }


	/** Primary Documents refers to documents that are directly related to a docket entry. Primary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the primary document is one which is attached to the docket number. Because in district for a primary document it can have many attachments associatated to it. PACER Appeal Courts - Here the attachments for a docket entry are the primary documents. Because in appeal for those attachments there is no primary documents. */
	export interface DocketEntryPrimaryDocuments {

		/**
		 * Required
		 * Maximum items: 100
		 */
		caseDocumentArray: Array<CaseDocument>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 27
		 * Min length: 27
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case. entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}

	/** Primary Documents refers to documents that are directly related to a docket entry. Primary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the primary document is one which is attached to the docket number. Because in district for a primary document it can have many attachments associatated to it. PACER Appeal Courts - Here the attachments for a docket entry are the primary documents. Because in appeal for those attachments there is no primary documents. */
	export interface DocketEntryPrimaryDocumentsFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 27
		 * Min length: 27
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case. entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateDocketEntryPrimaryDocumentsFormGroup() {
		return new FormGroup<DocketEntryPrimaryDocumentsFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(27), Validators.maxLength(27)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Secondary Documents refers to documents that are attached to a docket entry. Secondary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the secondary document is one which is attached in the docket entry. */
	export interface DocketEntrySecondaryDocuments {

		/**
		 * Required
		 * Maximum items: 100
		 */
		caseDocumentArray: Array<CaseDocument>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 29
		 * Min length: 29
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case. entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}

	/** Secondary Documents refers to documents that are attached to a docket entry. Secondary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the secondary document is one which is attached in the docket entry. */
	export interface DocketEntrySecondaryDocumentsFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 29
		 * Min length: 29
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case. entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateDocketEntrySecondaryDocumentsFormGroup() {
		return new FormGroup<DocketEntrySecondaryDocumentsFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(29), Validators.maxLength(29)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object consisiting of each docket entry number and its corresponding API call. */
	export interface ReferencedDocketNumber {

		/**
		 * Link to Docket Entries API with the current docket number. The response of this API will give all the primary documents and secondary documents that are associated to it.
		 * Required
		 * Max length: 255
		 */
		docketEntriesAPI: string;

		/**
		 * Each referenced docket number
		 * Required
		 */
		docketNumber: number;

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;
	}

	/** Object consisiting of each docket entry number and its corresponding API call. */
	export interface ReferencedDocketNumberFormProperties {

		/**
		 * Link to Docket Entries API with the current docket number. The response of this API will give all the primary documents and secondary documents that are associated to it.
		 * Required
		 * Max length: 255
		 */
		docketEntriesAPI: FormControl<string | null | undefined>,

		/**
		 * Each referenced docket number
		 * Required
		 */
		docketNumber: FormControl<number | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateReferencedDocketNumberFormGroup() {
		return new FormGroup<ReferencedDocketNumberFormProperties>({
			docketEntriesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			docketNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
		});

	}

	export interface SourceStructuredData {

		/** Required */
		extractedFields: ExtractedFields;

		/** Required */
		rawOrderedDataArray: Array<RawOrderedData>;
	}
	export interface SourceStructuredDataFormProperties {
	}
	export function CreateSourceStructuredDataFormGroup() {
		return new FormGroup<SourceStructuredDataFormProperties>({
		});

	}

	export interface ExtractedFields {

		/** This can be an field that is extracted from rawOrderedDataArray on request of different users. */
		key?: string | null;
	}
	export interface ExtractedFieldsFormProperties {

		/** This can be an field that is extracted from rawOrderedDataArray on request of different users. */
		key: FormControl<string | null | undefined>,
	}
	export function CreateExtractedFieldsFormGroup() {
		return new FormGroup<ExtractedFieldsFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RawOrderedData {

		/**
		 * Any docket text that belongs to the main docket text is added in the child.
		 * Required
		 */
		childArray: Array<RawOrderedDataChild>;

		/**
		 * Label of the docket from the source.
		 * Required
		 * Max length: 100000
		 */
		lbl: string;

		/**
		 * Structure order
		 * Required
		 */
		ord: number;

		/**
		 * List of available addresses.
		 * Required
		 * Max length: 1000000
		 */
		val: string;
	}
	export interface RawOrderedDataFormProperties {

		/**
		 * Label of the docket from the source.
		 * Required
		 * Max length: 100000
		 */
		lbl: FormControl<string | null | undefined>,

		/**
		 * Structure order
		 * Required
		 */
		ord: FormControl<number | null | undefined>,

		/**
		 * List of available addresses.
		 * Required
		 * Max length: 1000000
		 */
		val: FormControl<string | null | undefined>,
	}
	export function CreateRawOrderedDataFormGroup() {
		return new FormGroup<RawOrderedDataFormProperties>({
			lbl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100000)]),
			ord: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			val: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000000)]),
		});

	}

	export interface RawOrderedDataChild {

		/**
		 * Any docket text that belongs to the main docket text is added in the child.
		 * Required
		 */
		RawOrderedDataChildChildArray: Array<RawOrderedDataChildChildArray>;

		/**
		 * Label of the docket from the source.
		 * Required
		 * Max length: 255
		 */
		lbl: string;

		/**
		 * Structure order.
		 * Required
		 */
		ord: number;

		/**
		 * List of available addresses.
		 * Required
		 * Max length: 100000
		 */
		val: string;
	}
	export interface RawOrderedDataChildFormProperties {

		/**
		 * Label of the docket from the source.
		 * Required
		 * Max length: 255
		 */
		lbl: FormControl<string | null | undefined>,

		/**
		 * Structure order.
		 * Required
		 */
		ord: FormControl<number | null | undefined>,

		/**
		 * List of available addresses.
		 * Required
		 * Max length: 100000
		 */
		val: FormControl<string | null | undefined>,
	}
	export function CreateRawOrderedDataChildFormGroup() {
		return new FormGroup<RawOrderedDataChildFormProperties>({
			lbl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ord: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			val: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100000)]),
		});

	}

	export interface RawOrderedDataChildChildArray {

		/** Required */
		childArray: Array<string>;

		/**
		 * Label of the docket from the source.
		 * Required
		 * Max length: 500
		 */
		lbl: string;

		/**
		 * Structure order.
		 * Required
		 */
		ord: number;

		/**
		 * List of available addresses.
		 * Required
		 * Max length: 1000000
		 */
		val: string;
	}
	export interface RawOrderedDataChildChildArrayFormProperties {

		/**
		 * Label of the docket from the source.
		 * Required
		 * Max length: 500
		 */
		lbl: FormControl<string | null | undefined>,

		/**
		 * Structure order.
		 * Required
		 */
		ord: FormControl<number | null | undefined>,

		/**
		 * List of available addresses.
		 * Required
		 * Max length: 1000000
		 */
		val: FormControl<string | null | undefined>,
	}
	export function CreateRawOrderedDataChildChildArrayFormGroup() {
		return new FormGroup<RawOrderedDataChildChildArrayFormProperties>({
			lbl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			ord: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			val: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000000)]),
		});

	}

	export interface Hearings {

		/** Required */
		hearingArray: Array<Hearing>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface HearingsFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateHearingsFormGroup() {
		return new FormGroup<HearingsFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Hearing {

		/**
		 * When this hearing was first fetched from the source.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: string;

		/**
		 * Hearing Date
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		hearingDate: Date;

		/**
		 * Source Hearing Description Text
		 * Required
		 * Max length: 100000
		 */
		hearingDescription: string;

		/** Required */
		hearingStructured: SourceStructuredData;

		/**
		 * When this hearing was last fetched from the source.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: string;

		/**
		 * Location where the hearing will takeplace.
		 * Required
		 * Max length: 250
		 */
		location: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: string;
	}
	export interface HearingFormProperties {

		/**
		 * When this hearing was first fetched from the source.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<string | null | undefined>,

		/**
		 * Hearing Date
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		hearingDate: FormControl<Date | null | undefined>,

		/**
		 * Source Hearing Description Text
		 * Required
		 * Max length: 100000
		 */
		hearingDescription: FormControl<string | null | undefined>,

		/**
		 * When this hearing was last fetched from the source.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<string | null | undefined>,

		/**
		 * Location where the hearing will takeplace.
		 * Required
		 * Max length: 250
		 */
		location: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateHearingFormGroup() {
		return new FormGroup<HearingFormProperties>({
			firstFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			hearingDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			hearingDescription: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100000)]),
			lastFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			location: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(7)]),
		});

	}

	export interface Judges {

		/**
		 * Required
		 * Maximum items: 25
		 */
		judgeArray: Array<Judge>;

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 6
		 * Min length: 6
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface JudgesFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 6
		 * Min length: 6
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateJudgesFormGroup() {
		return new FormGroup<JudgesFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(6)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Judge {

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/**
		 * When was the judge first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * First name of the judge. This is normalized by UniCourt.
		 * Required
		 * Max length: 250
		 */
		firstName: string;

		/**
		 * Signifies if the judge as this judge type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * ID for the judge in this case. This ID is unique within a case and NOT across cases. If the same Judge were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		judgeId: string;

		/** Required */
		judgeType: JudgeType;

		/**
		 * When was the judge last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Last name of the judge. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		lastName: string;

		/**
		 * Middle name of the judge. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		middleName: string;

		/**
		 * Name of the judge as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 10
		 */
		namePrefix: string;

		/**
		 * Required
		 * Max length: 10
		 */
		nameSuffix: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: string;

		/** Required */
		possibleNormJudgeArray: Array<PossibleNormJudge>;

		/**
		 * Required
		 * Max length: 50
		 */
		sourceJudgeType: string;
	}
	export interface JudgeFormProperties {

		/**
		 * When was the judge first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * First name of the judge. This is normalized by UniCourt.
		 * Required
		 * Max length: 250
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Signifies if the judge as this judge type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * ID for the judge in this case. This ID is unique within a case and NOT across cases. If the same Judge were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		judgeId: FormControl<string | null | undefined>,

		/**
		 * When was the judge last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Last name of the judge. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Middle name of the judge. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Name of the judge as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		namePrefix: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		nameSuffix: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 50
		 */
		sourceJudgeType: FormControl<string | null | undefined>,
	}
	export function CreateJudgeFormGroup() {
		return new FormGroup<JudgeFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			judgeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			namePrefix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			nameSuffix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
			sourceJudgeType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}

	export interface JudgeType {

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		judgeTypeId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;
	}
	export interface JudgeTypeFormProperties {

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		judgeTypeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateJudgeTypeFormGroup() {
		return new FormGroup<JudgeTypeFormProperties>({
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			judgeTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export interface PossibleNormJudge {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: string;

		/** Required */
		bestMatch: boolean;

		/**
		 * Required
		 * Max length: 250
		 */
		caseCountAnalyticsByNormJudgeAPI: string;

		/** Required */
		confidenceScore: number;

		/**
		 * Link to Details For the Judge.
		 * Required
		 * Max length: 255
		 */
		normJudgeAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normJudgeName: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/** Required */
		scoreConstituents: PossibleNormJudgeScoreConstituents;
	}
	export interface PossibleNormJudgeFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: FormControl<string | null | undefined>,

		/** Required */
		bestMatch: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		caseCountAnalyticsByNormJudgeAPI: FormControl<string | null | undefined>,

		/** Required */
		confidenceScore: FormControl<number | null | undefined>,

		/**
		 * Link to Details For the Judge.
		 * Required
		 * Max length: 255
		 */
		normJudgeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normJudgeName: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePossibleNormJudgeFormGroup() {
		return new FormGroup<PossibleNormJudgeFormProperties>({
			associatedNormAttorneysAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormLawFirmsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormPartiesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bestMatch: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			caseCountAnalyticsByNormJudgeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			confidenceScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			normJudgeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normJudgeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normJudgeName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
		});

	}

	export interface PossibleNormJudgeScoreConstituents {

		/**
		 * Required
		 * Max length: 250
		 */
		address: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		email: PossibleNormAttorneyScoreConstituentsAddress;

		/** Required */
		nameSimilarityScore: number;

		/** Required */
		otherPotentialNormJudges: number;

		/**
		 * Required
		 * Max length: 250
		 */
		phone: PossibleNormAttorneyScoreConstituentsAddress;
	}
	export interface PossibleNormJudgeScoreConstituentsFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		address: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		email: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/** Required */
		nameSimilarityScore: FormControl<number | null | undefined>,

		/** Required */
		otherPotentialNormJudges: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		phone: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,
	}
	export function CreatePossibleNormJudgeScoreConstituentsFormGroup() {
		return new FormGroup<PossibleNormJudgeScoreConstituentsFormProperties>({
			address: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			email: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			nameSimilarityScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			otherPotentialNormJudges: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface Parties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Required
		 * Maximum items: 25
		 */
		partyArray: Array<Party>;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface PartiesFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePartiesFormGroup() {
		return new FormGroup<PartiesFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(7)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Party {

		/** Required */
		attorneyRepresentationType: AttorneyRepresentationType;

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/**
		 * When was the party first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * First name of the party. This is normalized by UniCourt.
		 * Required
		 * Max length: 250
		 */
		firstName: string;

		/**
		 * Signifies if the party as this party type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * When was the party last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Last name of the party. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		lastName: string;

		/**
		 * Middle name of the party. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		middleName: string;

		/**
		 * Name of the party as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 10
		 */
		namePrefix: string;

		/**
		 * Required
		 * Max length: 10
		 */
		nameSuffix: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: string;

		/** Required */
		partyAttorneyAssociations: PartyAttorneyAssociations;

		/**
		 * To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.
		 * Required
		 * Max length: 50
		 */
		partyClassificationType: PartyPartyClassificationType;

		/**
		 * ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyId: string;

		/** Required */
		partyRole: PartyRole;

		/** Required */
		possibleNormPartyArray: Array<PossibleNormParty>;

		/**
		 * Party Type as provided by Court.
		 * Required
		 * Max length: 50
		 */
		sourcePartyRole: string;
	}
	export interface PartyFormProperties {

		/**
		 * When was the party first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * First name of the party. This is normalized by UniCourt.
		 * Required
		 * Max length: 250
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Signifies if the party as this party type is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * When was the party last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Last name of the party. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Middle name of the party. This is normalized by UniCourt.
		 * Required
		 * Max length: 100
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Name of the party as provided by Court.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		namePrefix: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		nameSuffix: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.
		 * Required
		 * Max length: 50
		 */
		partyClassificationType: FormControl<PartyPartyClassificationType | null | undefined>,

		/**
		 * ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyId: FormControl<string | null | undefined>,

		/**
		 * Party Type as provided by Court.
		 * Required
		 * Max length: 50
		 */
		sourcePartyRole: FormControl<string | null | undefined>,
	}
	export function CreatePartyFormGroup() {
		return new FormGroup<PartyFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			namePrefix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			nameSuffix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
			partyClassificationType: new FormControl<PartyPartyClassificationType | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			partyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			sourcePartyRole: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}

	export enum PartyPartyClassificationType { INDIVIDUAL = 0, COMPANY = 1, OTHER = 2 }

	export interface PartyRole {

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		description: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		partyRoleGroup: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyRoleGroupId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyRoleId: string;
	}
	export interface PartyRoleFormProperties {

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		partyRoleGroup: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyRoleGroupId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyRoleId: FormControl<string | null | undefined>,
	}
	export function CreatePartyRoleFormGroup() {
		return new FormGroup<PartyRoleFormProperties>({
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
			partyRoleGroup: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			partyRoleGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			partyRoleId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}

	export interface PossibleNormParty {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: string;

		/** Required */
		bestMatch: boolean;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByNormPartyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: string;

		/** Required */
		confidenceScore: number;

		/**
		 * Link to Details For the Party.
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normPartyName: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/** Required */
		scoreConstituents: PossibleNormPartyScoreConstituents;
	}
	export interface PossibleNormPartyFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: FormControl<string | null | undefined>,

		/** Required */
		bestMatch: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByNormPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: FormControl<string | null | undefined>,

		/** Required */
		confidenceScore: FormControl<number | null | undefined>,

		/**
		 * Link to Details For the Party.
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normPartyName: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePossibleNormPartyFormGroup() {
		return new FormGroup<PossibleNormPartyFormProperties>({
			associatedNormAttorneysAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormJudgesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormLawFirmsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bestMatch: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			caseCountAnalyticsByNormPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			confidenceScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			normPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normPartyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normPartyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
		});

	}

	export interface PossibleNormPartyScoreConstituents {

		/**
		 * Required
		 * Max length: 250
		 */
		address: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		email: PossibleNormAttorneyScoreConstituentsAddress;

		/** Required */
		nameSimilarityScore: number;

		/** Required */
		otherPotentialNormParties: number;

		/**
		 * Required
		 * Max length: 250
		 */
		phone: PossibleNormAttorneyScoreConstituentsAddress;

		/**
		 * Required
		 * Max length: 250
		 */
		secretaryOfStateId: PossibleNormAttorneyScoreConstituentsAddress;
	}
	export interface PossibleNormPartyScoreConstituentsFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		address: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		email: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/** Required */
		nameSimilarityScore: FormControl<number | null | undefined>,

		/** Required */
		otherPotentialNormParties: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		phone: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		secretaryOfStateId: FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>,
	}
	export function CreatePossibleNormPartyScoreConstituentsFormGroup() {
		return new FormGroup<PossibleNormPartyScoreConstituentsFormProperties>({
			address: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			email: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			nameSimilarityScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			otherPotentialNormParties: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			secretaryOfStateId: new FormControl<PossibleNormAttorneyScoreConstituentsAddress | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface RelatedCases {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Required
		 * Maximum items: 100
		 */
		relatedCaseArray: Array<RelatedCase>;

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: number;
	}
	export interface RelatedCasesFormProperties {

		/**
		 * Link to next page of a particular entity in a Case.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of parties of the Case entity in a Case.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects of a party in the Case.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateRelatedCasesFormGroup() {
		return new FormGroup<RelatedCasesFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(12), Validators.maxLength(12)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface RelatedCase {

		/** Required */
		additionalSourceData: SourceStructuredData;

		/**
		 * Link to the Case API of the current related case.
		 * Required
		 * Max length: 255
		 */
		caseAPI: string;

		/**
		 * Case ID of the related Case. This can be null if this case in not found in our database. However the meta information of the related case will be present.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * Case Name of the related Case.
		 * Required
		 * Max length: 250
		 */
		caseName: string;

		/**
		 * Case Number of the related Case.
		 * Required
		 * Max length: 50
		 * Min length: 3
		 */
		caseNumber: string;

		/** Required */
		caseRelationshipType: CaseRelationshipType;

		/**
		 * This specifies if the related cases is still related to the parent case or not.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * Name of the object
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: string;

		/**
		 * Case Relationship Type provided by court.
		 * Required
		 * Max length: 250
		 * Min length: 3
		 */
		sourceCaseRelationshipType: string;
	}
	export interface RelatedCaseFormProperties {

		/**
		 * Link to the Case API of the current related case.
		 * Required
		 * Max length: 255
		 */
		caseAPI: FormControl<string | null | undefined>,

		/**
		 * Case ID of the related Case. This can be null if this case in not found in our database. However the meta information of the related case will be present.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * Case Name of the related Case.
		 * Required
		 * Max length: 250
		 */
		caseName: FormControl<string | null | undefined>,

		/**
		 * Case Number of the related Case.
		 * Required
		 * Max length: 50
		 * Min length: 3
		 */
		caseNumber: FormControl<string | null | undefined>,

		/**
		 * This specifies if the related cases is still related to the parent case or not.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Case Relationship Type provided by court.
		 * Required
		 * Max length: 250
		 * Min length: 3
		 */
		sourceCaseRelationshipType: FormControl<string | null | undefined>,
	}
	export function CreateRelatedCaseFormGroup() {
		return new FormGroup<RelatedCaseFormProperties>({
			caseAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			caseNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(11), Validators.maxLength(11)]),
			sourceCaseRelationshipType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(250)]),
		});

	}

	export interface CaseRelationshipType {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseRelationshipTypeId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: string;
	}
	export interface CaseRelationshipTypeFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseRelationshipTypeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseRelationshipTypeFormGroup() {
		return new FormGroup<CaseRelationshipTypeFormProperties>({
			caseRelationshipTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(20)]),
		});

	}


	/** Source data in the court website. */
	export interface SourceCaseData {

		/**
		 * Array of Charges for a case which is provided by the Court.
		 * Required
		 */
		natureOfSuitArray: Array<NatureOfSuit>;

		/**
		 * Name of the object
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: string;

		/**
		 * Case Status as provided by Court.
		 * Required
		 * Max length: 250
		 */
		sourceCaseStatus: string;

		/**
		 * Case Type for a case which is provided by the Court.
		 * Required
		 * Max length: 250
		 */
		sourceCaseType: string;

		/**
		 * Array of Cause Of Action for a case which is provided by the Court.
		 * Required
		 */
		sourceCauseOfActionArray: Array<SourceCauseOfAction>;

		/**
		 * Array of Charges for a case which is provided by the Court.
		 * Required
		 */
		sourceChargeArray: Array<SourceCharge>;

		/**
		 * Courtrhouse as provided by Court.
		 * Required
		 * Max length: 250
		 */
		sourceCourt: string;

		/** Required */
		sourcePageData: Array<SourcePageData>;
	}

	/** Source data in the court website. */
	export interface SourceCaseDataFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Case Status as provided by Court.
		 * Required
		 * Max length: 250
		 */
		sourceCaseStatus: FormControl<string | null | undefined>,

		/**
		 * Case Type for a case which is provided by the Court.
		 * Required
		 * Max length: 250
		 */
		sourceCaseType: FormControl<string | null | undefined>,

		/**
		 * Courtrhouse as provided by Court.
		 * Required
		 * Max length: 250
		 */
		sourceCourt: FormControl<string | null | undefined>,
	}
	export function CreateSourceCaseDataFormGroup() {
		return new FormGroup<SourceCaseDataFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(14), Validators.maxLength(14)]),
			sourceCaseStatus: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			sourceCaseType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			sourceCourt: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}


	/** Nature Of Suit for a case. */
	export interface NatureOfSuit {

		/**
		 * Nos Code from the source site which is extracted from the sourceText.
		 * Required
		 */
		code: number;

		/**
		 * Code Name from the source site which is extracted from the sourceText.
		 * Required
		 * Max length: 255
		 */
		name: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: string;

		/**
		 * Section of a nos code extracted from the sourceText.
		 * Required
		 * Max length: 255
		 */
		section: string;

		/**
		 * Source nos code data from the court site.
		 * Required
		 * Max length: 500
		 */
		sourceText: string;
	}

	/** Nature Of Suit for a case. */
	export interface NatureOfSuitFormProperties {

		/**
		 * Nos Code from the source site which is extracted from the sourceText.
		 * Required
		 */
		code: FormControl<number | null | undefined>,

		/**
		 * Code Name from the source site which is extracted from the sourceText.
		 * Required
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Section of a nos code extracted from the sourceText.
		 * Required
		 * Max length: 255
		 */
		section: FormControl<string | null | undefined>,

		/**
		 * Source nos code data from the court site.
		 * Required
		 * Max length: 500
		 */
		sourceText: FormControl<string | null | undefined>,
	}
	export function CreateNatureOfSuitFormGroup() {
		return new FormGroup<NatureOfSuitFormProperties>({
			code: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(12), Validators.maxLength(12)]),
			section: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sourceText: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
		});

	}


	/** Source Cause of Action data from the source site. */
	export interface SourceCauseOfAction {

		/**
		 * When this Cause of Action was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: string;

		/**
		 * Signifies if the cause of action is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * When this Cause of Action was last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;

		/**
		 * Cause of Action data from the source site.
		 * Required
		 * Max length: 250
		 */
		sourceCauseOfAction: string;

		/**
		 * Raw Cause of Action data from the source site.
		 * Required
		 * Max length: 500
		 */
		sourceCauseOfActionRaw: string;

		/**
		 * Statute of a Cause of Action.
		 * Required
		 * Max length: 250
		 */
		sourceStatute: string;
	}

	/** Source Cause of Action data from the source site. */
	export interface SourceCauseOfActionFormProperties {

		/**
		 * When this Cause of Action was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<string | null | undefined>,

		/**
		 * Signifies if the cause of action is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * When this Cause of Action was last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Cause of Action data from the source site.
		 * Required
		 * Max length: 250
		 */
		sourceCauseOfAction: FormControl<string | null | undefined>,

		/**
		 * Raw Cause of Action data from the source site.
		 * Required
		 * Max length: 500
		 */
		sourceCauseOfActionRaw: FormControl<string | null | undefined>,

		/**
		 * Statute of a Cause of Action.
		 * Required
		 * Max length: 250
		 */
		sourceStatute: FormControl<string | null | undefined>,
	}
	export function CreateSourceCauseOfActionFormGroup() {
		return new FormGroup<SourceCauseOfActionFormProperties>({
			firstFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
			sourceCauseOfAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			sourceCauseOfActionRaw: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			sourceStatute: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}


	/** Source charge data from the source site. */
	export interface SourceCharge {

		/**
		 * When this charge was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: string;

		/**
		 * Signifies if the charge is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * When this charge was last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: string;

		/**
		 * Charge data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceCharge: string;

		/**
		 * Additional data related to the charge which is available in the source site.
		 * Required
		 */
		sourceChargeAdditionalDataArray: Array<SourceChargeAdditionalData>;

		/**
		 * Charge degree data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceChargeDegree: string;

		/**
		 * Raw charge data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceChargeRaw: string;

		/**
		 * Charge severity data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceChargeSeverity: string;

		/**
		 * Statute of a charge.
		 * Required
		 * Max length: 50
		 */
		sourceStatute: string;
	}

	/** Source charge data from the source site. */
	export interface SourceChargeFormProperties {

		/**
		 * When this charge was first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<string | null | undefined>,

		/**
		 * Signifies if the charge is currently isVisible or not for the case.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * When this charge was last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 12
		 * Min length: 12
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Charge data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceCharge: FormControl<string | null | undefined>,

		/**
		 * Charge degree data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceChargeDegree: FormControl<string | null | undefined>,

		/**
		 * Raw charge data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceChargeRaw: FormControl<string | null | undefined>,

		/**
		 * Charge severity data from the source site.
		 * Required
		 * Max length: 255
		 */
		sourceChargeSeverity: FormControl<string | null | undefined>,

		/**
		 * Statute of a charge.
		 * Required
		 * Max length: 50
		 */
		sourceStatute: FormControl<string | null | undefined>,
	}
	export function CreateSourceChargeFormGroup() {
		return new FormGroup<SourceChargeFormProperties>({
			firstFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(12), Validators.maxLength(12)]),
			sourceCharge: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sourceChargeDegree: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sourceChargeRaw: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sourceChargeSeverity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sourceStatute: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}


	/** Additional data that enchances the information of a given charge. */
	export interface SourceChargeAdditionalData {

		/**
		 * Name of the object
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: string;

		/**
		 * Describes what type of additional data.
		 * Required
		 * Max length: 255
		 */
		type: string;

		/**
		 * Value of additional data.
		 * Required
		 * Max length: 255
		 */
		value: string;
	}

	/** Additional data that enchances the information of a given charge. */
	export interface SourceChargeAdditionalDataFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Describes what type of additional data.
		 * Required
		 * Max length: 255
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * Value of additional data.
		 * Required
		 * Max length: 255
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSourceChargeAdditionalDataFormGroup() {
		return new FormGroup<SourceChargeAdditionalDataFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(26), Validators.maxLength(26)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			value: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** Source data from different pages in the court website. */
	export interface SourcePageData {

		/** Required */
		additionalSourceData: SourceStructuredData;

		/**
		 * When was the page first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: string;

		/**
		 * When was the page last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: string;

		/**
		 * Pages supported for PACER pacerCaseQuery, pacerDocketReport, pacerCaseSummary, pacerAssociatedCases, pacerCaseLocatorResults, hearing, relatedCases.
		 * Required
		 * Max length: 100
		 */
		pageName: string;
	}

	/** Source data from different pages in the court website. */
	export interface SourcePageDataFormProperties {

		/**
		 * When was the page first fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<string | null | undefined>,

		/**
		 * When was the page last fetched from the court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Pages supported for PACER pacerCaseQuery, pacerDocketReport, pacerCaseSummary, pacerAssociatedCases, pacerCaseLocatorResults, hearing, relatedCases.
		 * Required
		 * Max length: 100
		 */
		pageName: FormControl<string | null | undefined>,
	}
	export function CreateSourcePageDataFormGroup() {
		return new FormGroup<SourcePageDataFormProperties>({
			firstFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(14), Validators.maxLength(14)]),
			pageName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
		});

	}

	export enum CaseSourceDataStatus { NO_LONGER_AVAILABLE_IN_COURT = 0, SOURCE_DEPRECATED = 1, _null = 2 }


	/** Provides Court Data per State Jurisdiction for an entity. */
	export interface CaseAnalyticsAPI {

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByAreaOfLawAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCaseClassAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCaseTypeAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCaseTypeGroupAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtLocationAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtSystemAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtTypeAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByJurisdictionGeoAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByPartyRoleAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByPartyRoleGroupAPI: string;

		/**
		 * Required
		 * Max length: 16
		 */
		object: string;

		/** Required */
		totalCases: number;
	}

	/** Provides Court Data per State Jurisdiction for an entity. */
	export interface CaseAnalyticsAPIFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByAreaOfLawAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCaseClassAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCaseTypeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCaseTypeGroupAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtLocationAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtSystemAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByCourtTypeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByJurisdictionGeoAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByPartyRoleAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByPartyRoleGroupAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 */
		object: FormControl<string | null | undefined>,

		/** Required */
		totalCases: FormControl<number | null | undefined>,
	}
	export function CreateCaseAnalyticsAPIFormGroup() {
		return new FormGroup<CaseAnalyticsAPIFormProperties>({
			caseCountAnalyticsByAreaOfLawAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCaseClassAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCaseTypeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCaseTypeGroupAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCourtAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCourtLocationAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCourtSystemAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByCourtTypeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByJurisdictionGeoAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByPartyRoleAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByPartyRoleGroupAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(16)]),
			totalCases: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseClass {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;
	}
	export interface CaseClassFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseClassFormGroup() {
		return new FormGroup<CaseClassFormProperties>({
			caseClassId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export interface CaseClassCoverage {

		/** Required */
		caseClass: CaseClass;

		/**
		 * Total Cases for a specific CourtLocation.
		 * Required
		 */
		caseCount: number;

		/**
		 * Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocationy.
		 * Required
		 */
		caseDocumentInLibraryCount: number;

		/**
		 * Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocation in last 30 days.
		 * Required
		 */
		caseDocumentInLibraryInLastThirtyDaysCount: number;

		/**
		 * Cases in last 30 days that were added to UniCourt for a specific CourtLocation
		 * Required
		 */
		casesInLastThirtyDaysCount: number;

		/**
		 * API Link to the Court Service status with filters of court and case class
		 * Required
		 * Max length: 250
		 * Min length: 50
		 */
		courtServiceStatusAPI: string;

		/**
		 * Free Case Documents for a specific CourtLocation.
		 * Required
		 */
		freeCaseDocumentCount: number;

		/**
		 * Free Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.
		 * Required
		 */
		freeCaseDocumentsInLastThirtyDaysCount: number;

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Paid Case Documents for a specific CourtLocation.
		 * Required
		 */
		paidCaseDocumentCount: number;

		/**
		 * Paid Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.
		 * Required
		 */
		paidCaseDocumentsInLastThirtyDaysCount: number;
	}
	export interface CaseClassCoverageFormProperties {

		/**
		 * Total Cases for a specific CourtLocation.
		 * Required
		 */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocationy.
		 * Required
		 */
		caseDocumentInLibraryCount: FormControl<number | null | undefined>,

		/**
		 * Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocation in last 30 days.
		 * Required
		 */
		caseDocumentInLibraryInLastThirtyDaysCount: FormControl<number | null | undefined>,

		/**
		 * Cases in last 30 days that were added to UniCourt for a specific CourtLocation
		 * Required
		 */
		casesInLastThirtyDaysCount: FormControl<number | null | undefined>,

		/**
		 * API Link to the Court Service status with filters of court and case class
		 * Required
		 * Max length: 250
		 * Min length: 50
		 */
		courtServiceStatusAPI: FormControl<string | null | undefined>,

		/**
		 * Free Case Documents for a specific CourtLocation.
		 * Required
		 */
		freeCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Free Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.
		 * Required
		 */
		freeCaseDocumentsInLastThirtyDaysCount: FormControl<number | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Paid Case Documents for a specific CourtLocation.
		 * Required
		 */
		paidCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Paid Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.
		 * Required
		 */
		paidCaseDocumentsInLastThirtyDaysCount: FormControl<number | null | undefined>,
	}
	export function CreateCaseClassCoverageFormGroup() {
		return new FormGroup<CaseClassCoverageFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseDocumentInLibraryCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseDocumentInLibraryInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			casesInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			courtServiceStatusAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(50), Validators.maxLength(250)]),
			freeCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			freeCaseDocumentsInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			paidCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			paidCaseDocumentsInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseClassResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		caseClassArray: Array<CaseClass>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseClassResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseClassResponseFormGroup() {
		return new FormGroup<CaseClassResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2140)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2140)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseCountAnalyticsByAreaOfLaw {

		/** Required */
		areaOfLaw: AreaOfLaw;

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByAreaOfLawFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByAreaOfLawFormGroup() {
		return new FormGroup<CaseCountAnalyticsByAreaOfLawFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
		});

	}


	/** Case Counts by Area Of Law Response. */
	export interface CaseCountAnalyticsByAreaOfLawResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 37
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByAreaOfLaw>;

		/**
		 * Total no. of Area Of Law for this criteria.
		 * Required
		 */
		totalAreaOfLawCount: number;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Area Of Law Response. */
	export interface CaseCountAnalyticsByAreaOfLawResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Area Of Law for this criteria.
		 * Required
		 */
		totalAreaOfLawCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByAreaOfLawResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByAreaOfLawResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(37)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalAreaOfLawCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByCaseClass {

		/** Required */
		caseClass: CaseClass;

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCaseClassFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseClassFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseClassFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
		});

	}


	/** Case Counts by Case Class Response. */
	export interface CaseCountAnalyticsByCaseClassResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 37
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCaseClass>;

		/**
		 * Total no. of Case Class for this criteria.
		 * Required
		 */
		totalCaseClassCount: number;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Case Class Response. */
	export interface CaseCountAnalyticsByCaseClassResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Case Class for this criteria.
		 * Required
		 */
		totalCaseClassCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseClassResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseClassResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(37)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseClassCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByCaseFiledDate {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 9
		 */
		groupedBy: CaseCountAnalyticsByCaseFiledDateGroupedBy;

		/** Required */
		monthInt: number;

		/**
		 * Required
		 * Max length: 9
		 */
		monthString: CaseCountAnalyticsByCaseFiledDateMonthString;

		/**
		 * Required
		 * Max length: 33
		 */
		object: string;

		/**
		 * Required
		 * Max length: 4
		 */
		quarter: CaseCountAnalyticsByCaseFiledDateQuarter;

		/** Required */
		weekOfMonth: number;

		/** Required */
		weekOfYear: number;

		/** Required */
		year: number;
	}
	export interface CaseCountAnalyticsByCaseFiledDateFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 */
		groupedBy: FormControl<CaseCountAnalyticsByCaseFiledDateGroupedBy | null | undefined>,

		/** Required */
		monthInt: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 */
		monthString: FormControl<CaseCountAnalyticsByCaseFiledDateMonthString | null | undefined>,

		/**
		 * Required
		 * Max length: 33
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 4
		 */
		quarter: FormControl<CaseCountAnalyticsByCaseFiledDateQuarter | null | undefined>,

		/** Required */
		weekOfMonth: FormControl<number | null | undefined>,

		/** Required */
		weekOfYear: FormControl<number | null | undefined>,

		/** Required */
		year: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseFiledDateFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseFiledDateFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			groupedBy: new FormControl<CaseCountAnalyticsByCaseFiledDateGroupedBy | null | undefined>(undefined, [Validators.required, Validators.maxLength(9)]),
			monthInt: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			monthString: new FormControl<CaseCountAnalyticsByCaseFiledDateMonthString | null | undefined>(undefined, [Validators.required, Validators.maxLength(9)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(33)]),
			quarter: new FormControl<CaseCountAnalyticsByCaseFiledDateQuarter | null | undefined>(undefined, [Validators.required, Validators.maxLength(4)]),
			weekOfMonth: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			weekOfYear: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CaseCountAnalyticsByCaseFiledDateGroupedBy { Yearly = 0, Quarterly = 1, Monthly = 2, Weekly = 3 }

	export enum CaseCountAnalyticsByCaseFiledDateMonthString { January = 0, February = 1, March = 2, April = 3, May = 4, June = 5, July = 6, August = 7, September = 8, October = 9, November = 10, December = 11, _null = 12 }

	export enum CaseCountAnalyticsByCaseFiledDateQuarter { Q1 = 0, Q2 = 1, Q3 = 2, Q4 = 3, _null = 4 }


	/** Response for Case Count by filing date. */
	export interface CaseCountAnalyticsByCaseFiledDateResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 41
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCaseFiledDate>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Case File Date for this criteria.
		 * Required
		 */
		totalCaseFiledDateCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Response for Case Count by filing date. */
	export interface CaseCountAnalyticsByCaseFiledDateResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 41
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Case File Date for this criteria.
		 * Required
		 */
		totalCaseFiledDateCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseFiledDateResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseFiledDateResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(41)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseFiledDateCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByCaseType {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		caseType: CaseType;

		/**
		 * Required
		 * Max length: 28
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCaseTypeFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 28
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseTypeFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseTypeFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(28)]),
		});

	}

	export interface CaseCountAnalyticsByCaseTypeGroup {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		caseTypeGroup: CaseTypeGroup;

		/**
		 * Required
		 * Max length: 33
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCaseTypeGroupFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 33
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseTypeGroupFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseTypeGroupFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(33)]),
		});

	}

	export interface CaseTypeGroup {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		areaOfLaw: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		areaOfLawId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseClass: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseTypeGroupId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;
	}
	export interface CaseTypeGroupFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		areaOfLaw: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		areaOfLawId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseClass: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseClassId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseTypeGroupId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseTypeGroupFormGroup() {
		return new FormGroup<CaseTypeGroupFormProperties>({
			areaOfLaw: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			areaOfLawId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseClass: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseClassId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseTypeGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
		});

	}


	/** Case Counts by Case Type Group Response. */
	export interface CaseCountAnalyticsByCaseTypeGroupResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 41
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCaseTypeGroup>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Case Type Group for this criteria.
		 * Required
		 */
		totalCaseTypeGroupCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Case Type Group Response. */
	export interface CaseCountAnalyticsByCaseTypeGroupResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 41
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Case Type Group for this criteria.
		 * Required
		 */
		totalCaseTypeGroupCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseTypeGroupResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseTypeGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(41)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseTypeGroupCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Case Counts by Case Types Response. */
	export interface CaseCountAnalyticsByCaseTypeResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 36
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCaseType>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of CaseType for this criteria.
		 * Required
		 */
		totalCaseTypeCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Case Types Response. */
	export interface CaseCountAnalyticsByCaseTypeResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 36
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of CaseType for this criteria.
		 * Required
		 */
		totalCaseTypeCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCaseTypeResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCaseTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(36)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseTypeCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByCourt {

		/** Required */
		Geo: CaseCountAnalyticsByCourtGeo;

		/** Required */
		caseCount: number;

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		court: Court;

		/**
		 * Required
		 * Max length: 25
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCourtFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
		});

	}

	export interface CaseCountAnalyticsByCourtGeo {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: string;

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: string;
	}
	export interface CaseCountAnalyticsByCourtGeoFormProperties {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtGeoFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtGeoFormProperties>({
			latitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
			longitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
		});

	}

	export interface CaseCountAnalyticsByCourtLocation {

		/** Required */
		Geo: CaseCountAnalyticsByCourtLocationGeo;

		/** Required */
		caseCount: number;

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		court: Court;

		/** Required */
		courtLocation: CourtLocation;

		/**
		 * Required
		 * Max length: 33
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCourtLocationFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 33
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtLocationFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtLocationFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(33)]),
		});

	}

	export interface CaseCountAnalyticsByCourtLocationGeo {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: string;

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: string;
	}
	export interface CaseCountAnalyticsByCourtLocationGeoFormProperties {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtLocationGeoFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtLocationGeoFormProperties>({
			latitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
			longitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
		});

	}


	/** Case Counts by Court Location Response. */
	export interface CaseCountAnalyticsByCourtLocationResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 41
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCourtLocation>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Court Location for this criteria.
		 * Required
		 */
		totalCourtLocationCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Court Location Response. */
	export interface CaseCountAnalyticsByCourtLocationResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 41
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Court Location for this criteria.
		 * Required
		 */
		totalCourtLocationCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtLocationResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtLocationResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(41)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCourtLocationCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Case Counts by Court. */
	export interface CaseCountAnalyticsByCourtResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 33
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCourt>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Court for this criteria.
		 * Required
		 */
		totalCourtCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Court. */
	export interface CaseCountAnalyticsByCourtResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 33
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Court for this criteria.
		 * Required
		 */
		totalCourtCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(33)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCourtCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByCourtSystem {

		/** Required */
		Geo: CaseCountAnalyticsByCourtSystemGeo;

		/** Required */
		caseCount: number;

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		courtSystem: CourtSystem;

		/**
		 * Required
		 * Max length: 31
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCourtSystemFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 31
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtSystemFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtSystemFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(31)]),
		});

	}

	export interface CaseCountAnalyticsByCourtSystemGeo {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: string;

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: string;
	}
	export interface CaseCountAnalyticsByCourtSystemGeoFormProperties {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtSystemGeoFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtSystemGeoFormProperties>({
			latitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
			longitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
		});

	}

	export interface CourtSystem {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtSystemId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtType: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtTypeId: string;

		/**
		 * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: string;
	}
	export interface CourtSystemFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtSystemId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtType: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtTypeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCourtSystemFormGroup() {
		return new FormGroup<CourtSystemFormProperties>({
			courtSystemId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			courtType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			courtTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(11), Validators.maxLength(11)]),
		});

	}


	/** Case Counts by Court System. */
	export interface CaseCountAnalyticsByCourtSystemResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 39
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCourtSystem>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Court System for this criteria.
		 * Required
		 */
		totalCourtSystemCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Court System. */
	export interface CaseCountAnalyticsByCourtSystemResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 39
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Court System for this criteria.
		 * Required
		 */
		totalCourtSystemCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtSystemResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtSystemResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(39)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCourtSystemCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByCourtType {

		/** Required */
		Geo: CaseCountAnalyticsByCourtTypeGeo;

		/** Required */
		caseCount: number;

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		courtType: CourtType;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByCourtTypeFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtTypeFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtTypeFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
		});

	}

	export interface CaseCountAnalyticsByCourtTypeGeo {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: string;

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: string;
	}
	export interface CaseCountAnalyticsByCourtTypeGeoFormProperties {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtTypeGeoFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtTypeGeoFormProperties>({
			latitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
			longitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
		});

	}

	export interface CourtType {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtTypeId: string;

		/**
		 * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;
	}
	export interface CourtTypeFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtTypeId: FormControl<string | null | undefined>,

		/**
		 * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCourtTypeFormGroup() {
		return new FormGroup<CourtTypeFormProperties>({
			courtTypeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}


	/** Case Counts by Court Type. */
	export interface CaseCountAnalyticsByCourtTypeResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 37
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByCourtType>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Court Type for this criteria.
		 * Required
		 */
		totalCourtTypeCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Court Type. */
	export interface CaseCountAnalyticsByCourtTypeResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Court Type for this criteria.
		 * Required
		 */
		totalCourtTypeCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByCourtTypeResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByCourtTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(37)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCourtTypeCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByJurisdictionGeo {

		/** Required */
		Geo: CaseCountAnalyticsByJurisdictionGeoGeo;

		/** Required */
		caseCount: number;

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		jurisdictionGeo: JurisdictionGeo;

		/**
		 * Required
		 * Max length: 35
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByJurisdictionGeoFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 35
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByJurisdictionGeoFormGroup() {
		return new FormGroup<CaseCountAnalyticsByJurisdictionGeoFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(35)]),
		});

	}

	export interface CaseCountAnalyticsByJurisdictionGeoGeo {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: string;

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: string;
	}
	export interface CaseCountAnalyticsByJurisdictionGeoGeoFormProperties {

		/**
		 * Required
		 * Max length: 15
		 */
		latitude: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 */
		longitude: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByJurisdictionGeoGeoFormGroup() {
		return new FormGroup<CaseCountAnalyticsByJurisdictionGeoGeoFormProperties>({
			latitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
			longitude: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
		});

	}

	export interface JurisdictionGeo {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		city: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		country: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		county: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtsForJurisdictionGeoAPI: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		fipsCode: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		jurisdictionGeoId: string;

		/**
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		state: string;

		/** Required */
		zipCodeArray: Array<string>;
	}
	export interface JurisdictionGeoFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		county: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		courtsForJurisdictionGeoAPI: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		fipsCode: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		jurisdictionGeoId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateJurisdictionGeoFormGroup() {
		return new FormGroup<JurisdictionGeoFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			county: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			courtsForJurisdictionGeoAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			fipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			jurisdictionGeoId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(15)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}


	/** Case Counts by Juridiction Geo Response. */
	export interface CaseCountAnalyticsByJurisdictionGeoResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 43
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByJurisdictionGeo>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of Jurisdiction for this criteria.
		 * Required
		 */
		totalJurisdictionGeoCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}

	/** Case Counts by Juridiction Geo Response. */
	export interface CaseCountAnalyticsByJurisdictionGeoResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 43
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of Jurisdiction for this criteria.
		 * Required
		 */
		totalJurisdictionGeoCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByJurisdictionGeoResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByJurisdictionGeoResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(43)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalJurisdictionGeoCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByNormAttorney {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normAttorneyName: string;

		/**
		 * Required
		 * Max length: 32
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByNormAttorneyFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normAttorneyName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 32
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormAttorneyFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormAttorneyFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normAttorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normAttorneyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(32)]),
		});

	}

	export interface CaseCountAnalyticsByNormAttorneyResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 40
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByNormAttorney>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of NormAttorney for this criteria.
		 * Required
		 */
		totalNormAttorneyCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseCountAnalyticsByNormAttorneyResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 40
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of NormAttorney for this criteria.
		 * Required
		 */
		totalNormAttorneyCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormAttorneyResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormAttorneyResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalNormAttorneyCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByNormJudge {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normJudgeName: string;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByNormJudgeFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normJudgeName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormJudgeFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormJudgeFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normJudgeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normJudgeName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
		});

	}

	export interface CaseCountAnalyticsByNormJudgeResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 37
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByNormJudge>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of NormJudge for this criteria.
		 * Required
		 */
		totalNormJudgeCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseCountAnalyticsByNormJudgeResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of NormJudge for this criteria.
		 * Required
		 */
		totalNormJudgeCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormJudgeResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormJudgeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(37)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalNormJudgeCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByNormLawFirm {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normLawFirmName: string;

		/**
		 * Required
		 * Max length: 31
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByNormLawFirmFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normLawFirmName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 31
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormLawFirmFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormLawFirmFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normLawFirmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normLawFirmName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(31)]),
		});

	}

	export interface CaseCountAnalyticsByNormLawFirmResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 39
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByNormLawFirm>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of NormLawFirm for this criteria.
		 * Required
		 */
		totalNormLawFirmCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseCountAnalyticsByNormLawFirmResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 39
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of NormLawFirm for this criteria.
		 * Required
		 */
		totalNormLawFirmCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormLawFirmResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormLawFirmResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(39)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalNormLawFirmCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByNormParty {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normPartyName: string;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;
	}
	export interface CaseCountAnalyticsByNormPartyFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for this criteria.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normPartyName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormPartyFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormPartyFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normPartyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normPartyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
		});

	}

	export interface CaseCountAnalyticsByNormPartyResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 37
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByNormParty>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of NormParty for this criteria.
		 * Required
		 */
		totalNormPartyCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseCountAnalyticsByNormPartyResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of NormParty for this criteria.
		 * Required
		 */
		totalNormPartyCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByNormPartyResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByNormPartyResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(37)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalNormPartyCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseCountAnalyticsByPartyRole {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for the entity involving the search criteria. TBD.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;

		/** Required */
		partyRole: PartyRole;
	}
	export interface CaseCountAnalyticsByPartyRoleFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for the entity involving the search criteria. TBD.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByPartyRoleFormGroup() {
		return new FormGroup<CaseCountAnalyticsByPartyRoleFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
		});

	}

	export interface CaseCountAnalyticsByPartyRoleGroup {

		/** Required */
		caseCount: number;

		/**
		 * Link to cases for the entity involving the search criteria. TBD.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 34
		 */
		object: string;

		/** Required */
		partyRoleGroup: PartyRoleGroup;
	}
	export interface CaseCountAnalyticsByPartyRoleGroupFormProperties {

		/** Required */
		caseCount: FormControl<number | null | undefined>,

		/**
		 * Link to cases for the entity involving the search criteria. TBD.
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 34
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByPartyRoleGroupFormGroup() {
		return new FormGroup<CaseCountAnalyticsByPartyRoleGroupFormProperties>({
			caseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(34)]),
		});

	}

	export interface PartyRoleGroup {

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		description: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyRoleGroupId: string;
	}
	export interface PartyRoleGroupFormProperties {

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		partyRoleGroupId: FormControl<string | null | undefined>,
	}
	export function CreatePartyRoleGroupFormGroup() {
		return new FormGroup<PartyRoleGroupFormProperties>({
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(14), Validators.maxLength(14)]),
			partyRoleGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}


	/** Case Count by Party Type Group Response. */
	export interface CaseCountAnalyticsByPartyRoleGroupResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 42
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByPartyRoleGroup>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;

		/**
		 * Total no. of Party Role Group for this criteria.
		 * Required
		 */
		totalPartyRoleGroupCount: number;
	}

	/** Case Count by Party Type Group Response. */
	export interface CaseCountAnalyticsByPartyRoleGroupResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 42
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,

		/**
		 * Total no. of Party Role Group for this criteria.
		 * Required
		 */
		totalPartyRoleGroupCount: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByPartyRoleGroupResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByPartyRoleGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(42)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPartyRoleGroupCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Case Count by Party Type Response. */
	export interface CaseCountAnalyticsByPartyRoleResponse {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 37
		 */
		object: string;

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: string;

		/** Required */
		results: Array<CaseCountAnalyticsByPartyRole>;

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: number;

		/**
		 * Total no. of Party Role for this criteria.
		 * Required
		 */
		totalPartyRoleCount: number;
	}

	/** Case Count by Party Type Response. */
	export interface CaseCountAnalyticsByPartyRoleResponseFormProperties {

		/**
		 * Next page of results if applicable.
		 * Required
		 * Max length: 2173
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Link to previous page of results.
		 * Required
		 * Max length: 2172
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total no. of Cases for this criteria.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Total no. of pages.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,

		/**
		 * Total no. of Party Role for this criteria.
		 * Required
		 */
		totalPartyRoleCount: FormControl<number | null | undefined>,
	}
	export function CreateCaseCountAnalyticsByPartyRoleResponseFormGroup() {
		return new FormGroup<CaseCountAnalyticsByPartyRoleResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2173)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(37)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2172)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPartyRoleCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseDocumentOrderCallback {

		/**
		 * Date when the job is run.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		callbackGeneratedDate: Date;

		/** Required */
		caseDocument: CaseDocument;

		/**
		 * UniCourt's Case Document ID.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: string;

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		caseDocumentOrderCallbackAPI: string;

		/**
		 * Unique Id for the Case Document Order Callback.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentOrderCallbackId: string;

		/**
		 * Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		 * Required
		 */
		exception: Exception;

		/** Required */
		file: ExportFile;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: string;

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: CaseDocumentOrderCallbackStatus;
	}
	export interface CaseDocumentOrderCallbackFormProperties {

		/**
		 * Date when the job is run.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		callbackGeneratedDate: FormControl<Date | null | undefined>,

		/**
		 * UniCourt's Case Document ID.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		caseDocumentOrderCallbackAPI: FormControl<string | null | undefined>,

		/**
		 * Unique Id for the Case Document Order Callback.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentOrderCallbackId: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: FormControl<CaseDocumentOrderCallbackStatus | null | undefined>,
	}
	export function CreateCaseDocumentOrderCallbackFormGroup() {
		return new FormGroup<CaseDocumentOrderCallbackFormProperties>({
			callbackGeneratedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			caseDocumentId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseDocumentOrderCallbackAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			caseDocumentOrderCallbackId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			status: new FormControl<CaseDocumentOrderCallbackStatus | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(11)]),
		});

	}


	/** Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing. */
	export interface Exception {

		/**
		 * Indicates the type of error occured.
		 * Required
		 * Max length: 75
		 * Min length: 1
		 */
		code: string;

		/**
		 * Describes what went wrong.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		details: string;

		/**
		 * Indicates the error message that describes the error code.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		message: string;

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;
	}

	/** Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing. */
	export interface ExceptionFormProperties {

		/**
		 * Indicates the type of error occured.
		 * Required
		 * Max length: 75
		 * Min length: 1
		 */
		code: FormControl<string | null | undefined>,

		/**
		 * Describes what went wrong.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		details: FormControl<string | null | undefined>,

		/**
		 * Indicates the error message that describes the error code.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateExceptionFormGroup() {
		return new FormGroup<ExceptionFormProperties>({
			code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(75)]),
			details: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export interface ExportFile {

		/**
		 * Expiry date-time for the fileUrl provided in this object.
		 * Required
		 * Max length: 40
		 * Min length: 10
		 */
		expiryDate: Date;

		/**
		 * Link to download the file.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		fileUrl: string;

		/**
		 * Name of the file.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: string;
	}
	export interface ExportFileFormProperties {

		/**
		 * Expiry date-time for the fileUrl provided in this object.
		 * Required
		 * Max length: 40
		 * Min length: 10
		 */
		expiryDate: FormControl<Date | null | undefined>,

		/**
		 * Link to download the file.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		fileUrl: FormControl<string | null | undefined>,

		/**
		 * Name of the file.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateExportFileFormGroup() {
		return new FormGroup<ExportFileFormProperties>({
			expiryDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(40)]),
			fileUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(10)]),
		});

	}

	export enum CaseDocumentOrderCallbackStatus { COMPLETE = 0, FAILURE = 1, IN_PROGRESS = 2 }

	export interface CaseDocumentOrderCallbackListResponse {

		/**
		 * Array of case document order callback objects.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 100
		 */
		callbackArray: Array<CaseDocumentOrderCallback>;

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 37
		 * Min length: 37
		 */
		object: string;

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of case document order callback objects available.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseDocumentOrderCallbackListResponseFormProperties {

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 37
		 * Min length: 37
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of case document order callback objects available.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseDocumentOrderCallbackListResponseFormGroup() {
		return new FormGroup<CaseDocumentOrderCallbackListResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(37), Validators.maxLength(37)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** **Applicable for PACER cases.** */
	export interface CaseDocumentOrderPacerOptions {

		/**
		 * PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		 * Max length: 32
		 * Min length: 0
		 */
		pacerClientCode?: string | null;

		/**
		 * Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: string;
	}

	/** **Applicable for PACER cases.** */
	export interface CaseDocumentOrderPacerOptionsFormProperties {

		/**
		 * PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		 * Max length: 32
		 * Min length: 0
		 */
		pacerClientCode: FormControl<string | null | undefined>,

		/**
		 * Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: FormControl<string | null | undefined>,
	}
	export function CreateCaseDocumentOrderPacerOptionsFormGroup() {
		return new FormGroup<CaseDocumentOrderPacerOptionsFormProperties>({
			pacerClientCode: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0), Validators.maxLength(32)]),
			pacerUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(40)]),
		});

	}

	export interface CaseDocumentOrderRequest {

		/**
		 * Document ID which you want to order.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: string;

		/**
		 * Flag value to determine if the document order is a preview order or no.
		 * Required
		 */
		isPreviewOnly: boolean;

		/** **Applicable for PACER cases.** */
		pacerOptions?: CaseDocumentOrderPacerOptions;
	}
	export interface CaseDocumentOrderRequestFormProperties {

		/**
		 * Document ID which you want to order.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: FormControl<string | null | undefined>,

		/**
		 * Flag value to determine if the document order is a preview order or no.
		 * Required
		 */
		isPreviewOnly: FormControl<boolean | null | undefined>,
	}
	export function CreateCaseDocumentOrderRequestFormGroup() {
		return new FormGroup<CaseDocumentOrderRequestFormProperties>({
			caseDocumentId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			isPreviewOnly: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseExportCallback {

		/**
		 * Date when the job is run.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		callbackGeneratedDate: Date;

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		caseExportCallbackAPI: string;

		/**
		 * Unique Id for the Case Export Callback.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseExportCallbackId: string;

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		 * Required
		 */
		exception: Exception;

		/** Required */
		file: ExportFile;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: CaseDocumentOrderCallbackStatus;
	}
	export interface CaseExportCallbackFormProperties {

		/**
		 * Date when the job is run.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		callbackGeneratedDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		caseExportCallbackAPI: FormControl<string | null | undefined>,

		/**
		 * Unique Id for the Case Export Callback.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseExportCallbackId: FormControl<string | null | undefined>,

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: FormControl<CaseDocumentOrderCallbackStatus | null | undefined>,
	}
	export function CreateCaseExportCallbackFormGroup() {
		return new FormGroup<CaseExportCallbackFormProperties>({
			callbackGeneratedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			caseExportCallbackAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			caseExportCallbackId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			status: new FormControl<CaseDocumentOrderCallbackStatus | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(11)]),
		});

	}

	export interface CaseExportCallbackListResponse {

		/**
		 * Array of case export callback objects.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 100
		 */
		callbackArray: Array<CaseExportCallback>;

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 30
		 * Min length: 30
		 */
		object: string;

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of case export callback objects available.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseExportCallbackListResponseFormProperties {

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 30
		 * Min length: 30
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of case export callback objects available.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseExportCallbackListResponseFormGroup() {
		return new FormGroup<CaseExportCallbackListResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(30), Validators.maxLength(30)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseRelationshipTypeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		caseRelationshipTypeArray: Array<CaseRelationshipType>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2153
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 28
		 * Min length: 28
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2152
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseRelationshipTypeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2153
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 28
		 * Min length: 28
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2152
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseRelationshipTypeResponseFormGroup() {
		return new FormGroup<CaseRelationshipTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2153)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(28), Validators.maxLength(28)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2152)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseSearchResponse {

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseSearchId: string;

		/**
		 * Required
		 * Max length: 10
		 */
		caseSearchResultArray: Array<CaseSearchResult>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2138
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2138
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: string;

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseSearchResponseFormProperties {

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseSearchId: FormControl<string | null | undefined>,

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2138
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2138
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: FormControl<string | null | undefined>,

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseSearchResponseFormGroup() {
		return new FormGroup<CaseSearchResponseFormProperties>({
			caseSearchId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2138)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2138)]),
			q: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(2048)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(11)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
		});

	}

	export interface CaseSearchResult {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * Required
		 * Max length: 250
		 */
		caseName: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseNumber: string;

		/** Required */
		caseStatus: CaseStatus;

		/** Required */
		caseType: CaseType;

		/** Required */
		court: Court;

		/** Required */
		courtLocation: CourtLocation;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		filedDate: Date;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/** Required */
		matchedObjectArray: Array<MatchedObject>;

		/**
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: string;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		participantsLastFetchDate: Date;
	}
	export interface CaseSearchResultFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		caseName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		filedDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		participantsLastFetchDate: FormControl<Date | null | undefined>,
	}
	export function CreateCaseSearchResultFormGroup() {
		return new FormGroup<CaseSearchResultFormProperties>({
			caseAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			caseName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			caseNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			filedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(16), Validators.maxLength(16)]),
			participantsLastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface MatchedObject {

		/**
		 * Required
		 * Max length: 10000
		 * Min length: 1
		 */
		highlightSnippet: string;

		/**
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		matchedObjectAPI: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		matchedObjectAttribute: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		matchedObjectId: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		matchedObjectName: string;

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;
	}
	export interface MatchedObjectFormProperties {

		/**
		 * Required
		 * Max length: 10000
		 * Min length: 1
		 */
		highlightSnippet: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		matchedObjectAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		matchedObjectAttribute: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		matchedObjectId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		matchedObjectName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateMatchedObjectFormGroup() {
		return new FormGroup<MatchedObjectFormProperties>({
			highlightSnippet: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(10000)]),
			matchedObjectAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			matchedObjectAttribute: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			matchedObjectId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(18)]),
			matchedObjectName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
		});

	}

	export interface CaseStatusGroup {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseStatusGroupId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: string;
	}
	export interface CaseStatusGroupFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseStatusGroupId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseStatusGroupFormGroup() {
		return new FormGroup<CaseStatusGroupFormProperties>({
			caseStatusGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(15)]),
		});

	}

	export interface CaseStatusGroupResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		caseStatusGroupArray: Array<CaseStatusGroup>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2148
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2147
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseStatusGroupResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2148
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2147
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseStatusGroupResponseFormGroup() {
		return new FormGroup<CaseStatusGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2148)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2147)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseStatusResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		caseStatusArray: Array<CaseStatus>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2143
		 * Min length: 18
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2142
		 * Min length: 18
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseStatusResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2143
		 * Min length: 18
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2142
		 * Min length: 18
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseStatusResponseFormGroup() {
		return new FormGroup<CaseStatusResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(2143)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(2142)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseTrack {

		/** Required */
		case: Case;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: string;

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/** Required */
		lastTrackedDetails: LastTrackedDetails;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: string;

		/**
		 * Applicable for PACER cases.
		 * Required
		 */
		pacerOptions: CaseUpdatePacerOptionsResponse;

		/** Required */
		schedule: Schedule;
	}
	export interface CaseTrackFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: FormControl<string | null | undefined>,

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseTrackFormGroup() {
		return new FormGroup<CaseTrackFormProperties>({
			caseAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export interface LastTrackedDetails {

		/**
		 * The date and time when the case was tracked for this account.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastTrackDate: Date;

		/**
		 * Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		 * Required
		 */
		lastTrackException: Exception;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * Applicable for PACER cases.
		 * Required
		 */
		pacerOptions: CaseUpdatePacerOptionsResponse;
	}
	export interface LastTrackedDetailsFormProperties {

		/**
		 * The date and time when the case was tracked for this account.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastTrackDate: FormControl<Date | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateLastTrackedDetailsFormGroup() {
		return new FormGroup<LastTrackedDetailsFormProperties>({
			lastTrackDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}


	/** Applicable for PACER cases. */
	export interface CaseUpdatePacerOptionsResponse {

		/**
		 * Currently this option is only applicable for Federal PACER cases. The default behavior of the Case Update is to fetch the Docket Report from PACER which includes the parties and attorneys too.
		 * However if you need to fetch information for other pages in PACER you will need to specify it here.
		 * - associatedCases:
		 * > This will fetch the Associated Cases page in PACER if available. This page consists of related cases especially applicable for Multi-District Litigation cases and Member Cases. Including this option will internally link all related cases in our system. Data from this page will be available via the Related Cases API.
		 * - caseSummary:
		 * > This will fetch the Case Summary page in PACER if available. This page consists of additional case info which is not present in the Docket Report page. Data from this page will be structured and available as response in the Case API’s ```additional_info``` field.
		 * - listOfCreditors:
		 * > This page will fetch the “List Of Creditors” page for PACER Bankruptcy cases of case type "bk". Note that this page cannot be extracted for Bankruptcy cases of case type "ap" (Adversary Proceedings). This page consists of the Creditor information like the name and address of the Creditors. Data from this page will be structured and available as response in the Case API.
		 * Required
		 */
		CaseUpdatePacerOptionsResponseAdditionalPageArray: Array<CaseUpdatePacerOptionsResponseAdditionalPageArray>;

		/**
		 * **Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**
		 * **Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**
		 * **With this option you can choose when to fetch parties for case based on when was it last fetched.**
		 * You can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.
		 * 2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Required
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchParticipantsIfOlderThanDays: number;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 30
		 * Min length: 30
		 */
		object: string;

		/**
		 * PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		 * Required
		 * Max length: 32
		 * Min length: 0
		 */
		pacerClientCode: string;

		/**
		 * **Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: string;

		/**
		 * This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.
		 * Only one of the two values is allowed:
		 * -   fetchNewDocketEntries:
		 * >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.
		 * -   fetchAllDocketEntries:
		 * >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		refreshType: CaseUpdatePacerOptionsResponseRefreshType;
	}

	/** Applicable for PACER cases. */
	export interface CaseUpdatePacerOptionsResponseFormProperties {

		/**
		 * **Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**
		 * **Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**
		 * **With this option you can choose when to fetch parties for case based on when was it last fetched.**
		 * You can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.
		 * 2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Required
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchParticipantsIfOlderThanDays: FormControl<number | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 30
		 * Min length: 30
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		 * Required
		 * Max length: 32
		 * Min length: 0
		 */
		pacerClientCode: FormControl<string | null | undefined>,

		/**
		 * **Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: FormControl<string | null | undefined>,

		/**
		 * This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.
		 * Only one of the two values is allowed:
		 * -   fetchNewDocketEntries:
		 * >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.
		 * -   fetchAllDocketEntries:
		 * >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		refreshType: FormControl<CaseUpdatePacerOptionsResponseRefreshType | null | undefined>,
	}
	export function CreateCaseUpdatePacerOptionsResponseFormGroup() {
		return new FormGroup<CaseUpdatePacerOptionsResponseFormProperties>({
			fetchParticipantsIfOlderThanDays: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(100)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(30), Validators.maxLength(30)]),
			pacerClientCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0), Validators.maxLength(32)]),
			pacerUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(40)]),
			refreshType: new FormControl<CaseUpdatePacerOptionsResponseRefreshType | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
		});

	}

	export interface CaseUpdatePacerOptionsResponseAdditionalPageArray {

		/**
		 * You can limit how often this page information is fetched to reduce your PACER fees.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.
		 * 2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchIfOlderThanDays?: number | null;

		/**
		 * Max length: 15
		 * Min length: 11
		 */
		page?: CaseUpdatePacerOptionsResponseAdditionalPageArrayPage | null;
	}
	export interface CaseUpdatePacerOptionsResponseAdditionalPageArrayFormProperties {

		/**
		 * You can limit how often this page information is fetched to reduce your PACER fees.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.
		 * 2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchIfOlderThanDays: FormControl<number | null | undefined>,

		/**
		 * Max length: 15
		 * Min length: 11
		 */
		page: FormControl<CaseUpdatePacerOptionsResponseAdditionalPageArrayPage | null | undefined>,
	}
	export function CreateCaseUpdatePacerOptionsResponseAdditionalPageArrayFormGroup() {
		return new FormGroup<CaseUpdatePacerOptionsResponseAdditionalPageArrayFormProperties>({
			fetchIfOlderThanDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(100)]),
			page: new FormControl<CaseUpdatePacerOptionsResponseAdditionalPageArrayPage | null | undefined>(undefined, [Validators.minLength(11), Validators.maxLength(15)]),
		});

	}

	export enum CaseUpdatePacerOptionsResponseAdditionalPageArrayPage { associatedCases = 0, caseSummary = 1, listOfCreditors = 2 }

	export enum CaseUpdatePacerOptionsResponseRefreshType { fetchNewDocketEntries = 0, fetchAllDocketEntries = 1 }

	export interface Schedule {

		/**
		 * [] -> if schedule type is daily <br>
		 * 1-7 -> if schedule type is weekly <br>
		 * 1-31 -> if schedule type is monthly
		 * Required
		 */
		days: Array<number>;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: string;

		/**
		 * Required
		 * Max length: 7
		 * Min length: 5
		 */
		type: ScheduleType;
	}
	export interface ScheduleFormProperties {

		/**
		 * Name of the object.
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 7
		 * Min length: 5
		 */
		type: FormControl<ScheduleType | null | undefined>,
	}
	export function CreateScheduleFormGroup() {
		return new FormGroup<ScheduleFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),
			type: new FormControl<ScheduleType | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(7)]),
		});

	}

	export enum ScheduleType { daily = 0, weekly = 1, monthly = 2 }

	export interface CaseTrackListResponse {

		/**
		 * Array of cases tracked.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 100
		 */
		caseTrackPreviewArray: Array<CaseTrackPreview>;

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of case track available.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseTrackListResponseFormProperties {

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of case track available.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseTrackListResponseFormGroup() {
		return new FormGroup<CaseTrackListResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseTrackPreview {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: string;

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/**
		 * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/** Required */
		lastTrackedDetails: LastTrackedDetails;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: string;

		/**
		 * Applicable for PACER cases.
		 * Required
		 */
		pacerOptions: CaseUpdatePacerOptionsResponse;

		/** Required */
		schedule: Schedule;
	}
	export interface CaseTrackPreviewFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: FormControl<string | null | undefined>,

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCaseTrackPreviewFormGroup() {
		return new FormGroup<CaseTrackPreviewFormProperties>({
			caseAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(16), Validators.maxLength(16)]),
		});

	}

	export interface CaseTrackRequest {

		/** Required */
		caseTrackParams: CaseUpdateRequest;

		/** Required */
		schedule: CaseTrackSchedule;
	}
	export interface CaseTrackRequestFormProperties {
	}
	export function CreateCaseTrackRequestFormGroup() {
		return new FormGroup<CaseTrackRequestFormProperties>({
		});

	}

	export interface CaseUpdateRequest {

		/**
		 * UniCourt's Case Id for update.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/** Applicable for PACER cases. */
		pacerOptions?: CaseUpdatePacerOptions;
	}
	export interface CaseUpdateRequestFormProperties {

		/**
		 * UniCourt's Case Id for update.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,
	}
	export function CreateCaseUpdateRequestFormGroup() {
		return new FormGroup<CaseUpdateRequestFormProperties>({
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}


	/** Applicable for PACER cases. */
	export interface CaseUpdatePacerOptions {

		/**
		 * Currently this option is only applicable for Federal PACER cases. The default behavior of the Case Update is to fetch the Docket Report from PACER which includes the parties and attorneys too.
		 * However if you need to fetch information for other pages in PACER you will need to specify it here.
		 * - associatedCases:
		 * > This will fetch the Associated Cases page in PACER if available. This page consists of related cases especially applicable for Multi-District Litigation cases and Member Cases. Including this option will internally link all related cases in our system. Data from this page will be available via the Related Cases API.
		 * - caseSummary:
		 * > This will fetch the Case Summary page in PACER if available. This page consists of additional case info which is not present in the Docket Report page. Data from this page will be structured and available as response in the Case API’s ```additional_info``` field.
		 * - listOfCreditors:
		 * > This page will fetch the “List Of Creditors” page for PACER Bankruptcy cases of case type "bk". Note that this page cannot be extracted for Bankruptcy cases of case type "ap" (Adversary Proceedings). This page consists of the Creditor information like the name and address of the Creditors. Data from this page will be structured and available as response in the Case API.
		 */
		CaseUpdatePacerOptionsAdditionalPageArray?: Array<CaseUpdatePacerOptionsAdditionalPageArray>;

		/**
		 * **Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**
		 * **Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**
		 * **With this option you can choose when to fetch parties for case based on when was it last fetched.**
		 * You can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.
		 * 2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchParticipantsIfOlderThanDays?: number | null;

		/**
		 * PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		 * Max length: 32
		 * Min length: 0
		 */
		pacerClientCode?: string | null;

		/**
		 * **Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: string;

		/**
		 * This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.
		 * Only one of the two values is allowed:
		 * -   fetchNewDocketEntries:
		 * >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.
		 * -   fetchAllDocketEntries:
		 * >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.
		 * Max length: 21
		 * Min length: 21
		 */
		refreshType?: CaseUpdatePacerOptionsResponseRefreshType | null;
	}

	/** Applicable for PACER cases. */
	export interface CaseUpdatePacerOptionsFormProperties {

		/**
		 * **Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**
		 * **Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**
		 * **With this option you can choose when to fetch parties for case based on when was it last fetched.**
		 * You can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.
		 * 2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchParticipantsIfOlderThanDays: FormControl<number | null | undefined>,

		/**
		 * PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		 * Max length: 32
		 * Min length: 0
		 */
		pacerClientCode: FormControl<string | null | undefined>,

		/**
		 * **Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: FormControl<string | null | undefined>,

		/**
		 * This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.
		 * Only one of the two values is allowed:
		 * -   fetchNewDocketEntries:
		 * >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.
		 * -   fetchAllDocketEntries:
		 * >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.
		 * Max length: 21
		 * Min length: 21
		 */
		refreshType: FormControl<CaseUpdatePacerOptionsResponseRefreshType | null | undefined>,
	}
	export function CreateCaseUpdatePacerOptionsFormGroup() {
		return new FormGroup<CaseUpdatePacerOptionsFormProperties>({
			fetchParticipantsIfOlderThanDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(100)]),
			pacerClientCode: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0), Validators.maxLength(32)]),
			pacerUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(40)]),
			refreshType: new FormControl<CaseUpdatePacerOptionsResponseRefreshType | null | undefined>(undefined, [Validators.minLength(21), Validators.maxLength(21)]),
		});

	}

	export interface CaseUpdatePacerOptionsAdditionalPageArray {

		/**
		 * You can limit how often this page information is fetched to reduce your PACER fees.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.
		 * 2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchIfOlderThanDays?: number | null;

		/**
		 * Max length: 15
		 * Min length: 11
		 */
		page?: CaseUpdatePacerOptionsResponseAdditionalPageArrayPage | null;
	}
	export interface CaseUpdatePacerOptionsAdditionalPageArrayFormProperties {

		/**
		 * You can limit how often this page information is fetched to reduce your PACER fees.
		 * Min days is 0 and Max days is 100.
		 * Example:
		 * 1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.
		 * 2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.
		 * Minimum: 0
		 * Maximum: 100
		 */
		fetchIfOlderThanDays: FormControl<number | null | undefined>,

		/**
		 * Max length: 15
		 * Min length: 11
		 */
		page: FormControl<CaseUpdatePacerOptionsResponseAdditionalPageArrayPage | null | undefined>,
	}
	export function CreateCaseUpdatePacerOptionsAdditionalPageArrayFormGroup() {
		return new FormGroup<CaseUpdatePacerOptionsAdditionalPageArrayFormProperties>({
			fetchIfOlderThanDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(100)]),
			page: new FormControl<CaseUpdatePacerOptionsResponseAdditionalPageArrayPage | null | undefined>(undefined, [Validators.minLength(11), Validators.maxLength(15)]),
		});

	}

	export interface CaseTrackSchedule {

		/**
		 * [] -> if schedule type is daily <br>
		 * 1-7 -> if schedule type is weekly <br>
		 * 1-31 -> if schedule type is monthly
		 * Required
		 */
		days: Array<number>;

		/**
		 * Required
		 * Max length: 7
		 * Min length: 5
		 */
		type: ScheduleType;
	}
	export interface CaseTrackScheduleFormProperties {

		/**
		 * Required
		 * Max length: 7
		 * Min length: 5
		 */
		type: FormControl<ScheduleType | null | undefined>,
	}
	export function CreateCaseTrackScheduleFormGroup() {
		return new FormGroup<CaseTrackScheduleFormProperties>({
			type: new FormControl<ScheduleType | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(7)]),
		});

	}

	export interface CaseTypeGroupResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		caseTypeGroupArray: Array<CaseTypeGroup>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2144
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2143
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseTypeGroupResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2144
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2143
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseTypeGroupResponseFormGroup() {
		return new FormGroup<CaseTypeGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2144)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2143)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseTypeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		caseTypeArray: Array<CaseType>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2139
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2138
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CaseTypeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2139
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2138
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseTypeResponseFormGroup() {
		return new FormGroup<CaseTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2139)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(16), Validators.maxLength(16)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2138)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CaseUpdate {

		/** Required */
		case: Case;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: string;

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		 * Required
		 */
		exception: Exception;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: string;

		/**
		 * Applicable for PACER cases.
		 * Required
		 */
		pacerOptions: CaseUpdatePacerOptionsResponse;

		/**
		 * The date and time when the case was last requested for update
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		requestedDate: Date;

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: CaseDocumentOrderCallbackStatus;
	}
	export interface CaseUpdateFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: FormControl<string | null | undefined>,

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 10
		 * Min length: 10
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * The date and time when the case was last requested for update
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		requestedDate: FormControl<Date | null | undefined>,

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: FormControl<CaseDocumentOrderCallbackStatus | null | undefined>,
	}
	export function CreateCaseUpdateFormGroup() {
		return new FormGroup<CaseUpdateFormProperties>({
			caseAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(10)]),
			requestedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			status: new FormControl<CaseDocumentOrderCallbackStatus | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(11)]),
		});

	}

	export interface CaseUpdateListResponse {

		/**
		 * Array of case update objects.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 100
		 */
		caseUpdatePreviewArray: Array<CaseUpdatePreview>;

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of case update objects available.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: number;
	}
	export interface CaseUpdateListResponseFormProperties {

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of case update objects available.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCaseUpdateListResponseFormGroup() {
		return new FormGroup<CaseUpdateListResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CaseUpdatePreview {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: string;

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: string;

		/**
		 * Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		 * Required
		 */
		exception: Exception;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Applicable for PACER cases.
		 * Required
		 */
		pacerOptions: CaseUpdatePacerOptionsResponse;

		/**
		 * The date and time when the case was last requested for update
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		requestedDate: Date;

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: CaseDocumentOrderCallbackStatus;
	}
	export interface CaseUpdatePreviewFormProperties {

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		caseAPI: FormControl<string | null | undefined>,

		/**
		 * Unique Id for a Case in UniCourt.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseId: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * The date and time when the case was last requested for update
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		requestedDate: FormControl<Date | null | undefined>,

		/**
		 * Status of the request.
		 * Required
		 * Max length: 11
		 * Min length: 7
		 */
		status: FormControl<CaseDocumentOrderCallbackStatus | null | undefined>,
	}
	export function CreateCaseUpdatePreviewFormGroup() {
		return new FormGroup<CaseUpdatePreviewFormProperties>({
			caseAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			caseId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			requestedDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			status: new FormControl<CaseDocumentOrderCallbackStatus | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(11)]),
		});

	}

	export interface CauseOfActionAdditionalDataResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		causeOfActionAdditionalDataArray: Array<CauseOfActionAdditionalData>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2160
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 35
		 * Min length: 35
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CauseOfActionAdditionalDataResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2160
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 35
		 * Min length: 35
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCauseOfActionAdditionalDataResponseFormGroup() {
		return new FormGroup<CauseOfActionAdditionalDataResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2160)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(35), Validators.maxLength(35)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2159)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CauseOfActionGroup {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionGroupId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;
	}
	export interface CauseOfActionGroupFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		causeOfActionGroupId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateCauseOfActionGroupFormGroup() {
		return new FormGroup<CauseOfActionGroupFormProperties>({
			causeOfActionGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}

	export interface CauseOfActionGroupResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		causeOfActionGroupArray: Array<CauseOfActionGroup>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2151
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2150
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CauseOfActionGroupResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2151
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2150
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCauseOfActionGroupResponseFormGroup() {
		return new FormGroup<CauseOfActionGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2151)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(26), Validators.maxLength(26)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2150)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CauseOfActionResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		causeOfActionArray: Array<CauseOfAction>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2146
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2145
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CauseOfActionResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2146
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2145
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCauseOfActionResponseFormGroup() {
		return new FormGroup<CauseOfActionResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2146)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2145)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface ChargeAdditionalDataResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		chargeAdditionalDataArray: Array<ChargeAdditionalData>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2153
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 28
		 * Min length: 28
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2152
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface ChargeAdditionalDataResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2153
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 28
		 * Min length: 28
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2152
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateChargeAdditionalDataResponseFormGroup() {
		return new FormGroup<ChargeAdditionalDataResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2153)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(28), Validators.maxLength(28)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2152)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface ChargeDegreeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		chargeDegreeArray: Array<ChargeDegree>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2160
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface ChargeDegreeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2160
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 20
		 * Min length: 20
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateChargeDegreeResponseFormGroup() {
		return new FormGroup<ChargeDegreeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2160)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(20)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2159)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface ChargeGroup {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeGroupId: string;

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: Date;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: string;
	}
	export interface ChargeGroupFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		chargeGroupId: FormControl<string | null | undefined>,

		/**
		 * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		createdDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 11
		 * Min length: 11
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateChargeGroupFormGroup() {
		return new FormGroup<ChargeGroupFormProperties>({
			chargeGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			createdDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(11), Validators.maxLength(11)]),
		});

	}

	export interface ChargeGroupResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		chargeGroupArray: Array<ChargeGroup>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface ChargeGroupResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateChargeGroupResponseFormGroup() {
		return new FormGroup<ChargeGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2142)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2141)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface ChargeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		chargeArray: Array<Charge>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2137
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2136
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface ChargeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2137
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 14
		 * Min length: 14
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2136
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateChargeResponseFormGroup() {
		return new FormGroup<ChargeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2137)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(14), Validators.maxLength(14)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2136)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface ChargeSeverityResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		chargeSeverityArray: Array<ChargeSeverity>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2160
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface ChargeSeverityResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2160
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2159
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateChargeSeverityResponseFormGroup() {
		return new FormGroup<ChargeSeverityResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2160)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2159)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CourtCoverage {

		/** Required */
		caseClassCoverageArray: Array<CaseClassCoverage>;

		/** Required */
		court: Court;

		/**
		 * Date when it was last updated.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdateCountDate: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;

		/**
		 * Total Cases for a specific court.
		 * Required
		 */
		totalCaseCount: number;

		/**
		 * Count of total Case Documents added in UniCourt Library.
		 * Required
		 */
		totalCaseDocumentInLibraryCount: number;

		/**
		 * Count of total Case Documents added in UniCourt Library in last 30 days
		 * Required
		 */
		totalCaseDocumentInLibraryInLastThirtyDaysCount: number;

		/**
		 * Total Cases in last 30 days that were added to UniCourt
		 * Required
		 */
		totalCasesInLastThirtyDaysCount: number;

		/**
		 * Total Free Case Documents for a specific court.
		 * Required
		 */
		totalFreeCaseDocumentCount: number;

		/**
		 * Total Free Case Documents in last 30 days that were added to UniCourt
		 * Required
		 */
		totalFreeCaseDocumentsInLastThirtyDaysCount: number;

		/**
		 * Total Paid Case Documents for a specific court.
		 * Required
		 */
		totalPaidCaseDocumentCount: number;

		/**
		 * Total Paid Case Documents in last 30 days that were added to UniCourt
		 * Required
		 */
		totalPaidCaseDocumentsInLastThirtyDaysCount: number;
	}
	export interface CourtCoverageFormProperties {

		/**
		 * Date when it was last updated.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdateCountDate: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Total Cases for a specific court.
		 * Required
		 */
		totalCaseCount: FormControl<number | null | undefined>,

		/**
		 * Count of total Case Documents added in UniCourt Library.
		 * Required
		 */
		totalCaseDocumentInLibraryCount: FormControl<number | null | undefined>,

		/**
		 * Count of total Case Documents added in UniCourt Library in last 30 days
		 * Required
		 */
		totalCaseDocumentInLibraryInLastThirtyDaysCount: FormControl<number | null | undefined>,

		/**
		 * Total Cases in last 30 days that were added to UniCourt
		 * Required
		 */
		totalCasesInLastThirtyDaysCount: FormControl<number | null | undefined>,

		/**
		 * Total Free Case Documents for a specific court.
		 * Required
		 */
		totalFreeCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Total Free Case Documents in last 30 days that were added to UniCourt
		 * Required
		 */
		totalFreeCaseDocumentsInLastThirtyDaysCount: FormControl<number | null | undefined>,

		/**
		 * Total Paid Case Documents for a specific court.
		 * Required
		 */
		totalPaidCaseDocumentCount: FormControl<number | null | undefined>,

		/**
		 * Total Paid Case Documents in last 30 days that were added to UniCourt
		 * Required
		 */
		totalPaidCaseDocumentsInLastThirtyDaysCount: FormControl<number | null | undefined>,
	}
	export function CreateCourtCoverageFormGroup() {
		return new FormGroup<CourtCoverageFormProperties>({
			lastUpdateCountDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
			totalCaseCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseDocumentInLibraryCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCaseDocumentInLibraryInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCasesInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalFreeCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalFreeCaseDocumentsInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPaidCaseDocumentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPaidCaseDocumentsInLastThirtyDaysCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CourtLocationResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		courtLocationArray: Array<CourtLocation>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2144
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2143
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CourtLocationResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2144
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2143
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCourtLocationResponseFormGroup() {
		return new FormGroup<CourtLocationResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2144)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2143)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CourtResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		courtArray: Array<Court>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2136
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2135
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CourtResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2136
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2135
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCourtResponseFormGroup() {
		return new FormGroup<CourtResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2136)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2135)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CourtServiceStatus {

		/**
		 * All the Case class ids associated to the service status
		 * Required
		 */
		caseClassIdArray: Array<string>;

		/** Required */
		caseDocumentOrderServiceStatus: ServiceStatus;

		/** Required */
		caseTrackServiceStatus: ServiceStatus;

		/** Required */
		caseUpdateServiceStatus: ServiceStatus;

		/**
		 * All the court ids associated to the service status
		 * Required
		 */
		courtIdArray: Array<string>;

		/**
		 * All the court location ids associated to the service status
		 * Required
		 */
		courtLocationIdArray: Array<string>;

		/**
		 * Court Service Status Object ID
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtServiceStatusId: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * Date when the service status was last fetched.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		serviceStatusAsOn: string;
	}
	export interface CourtServiceStatusFormProperties {

		/**
		 * Court Service Status Object ID
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		courtServiceStatusId: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Date when the service status was last fetched.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		serviceStatusAsOn: FormControl<string | null | undefined>,
	}
	export function CreateCourtServiceStatusFormGroup() {
		return new FormGroup<CourtServiceStatusFormProperties>({
			courtServiceStatusId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			serviceStatusAsOn: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface ServiceStatus {

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: string;

		/**
		 * Status Details of Case Update Services Status.
		 * Required
		 */
		serviceDetails: ServiceStatusServiceDetails;

		/** Required */
		serviceStatusDownDetails: ServiceStatusDownDetails;

		/**
		 * Status of Case Update Services Status.
		 * Required
		 */
		serviceUp: boolean;
	}
	export interface ServiceStatusFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 13
		 * Min length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Status Details of Case Update Services Status.
		 * Required
		 */
		serviceDetails: FormControl<ServiceStatusServiceDetails | null | undefined>,

		/**
		 * Status of Case Update Services Status.
		 * Required
		 */
		serviceUp: FormControl<boolean | null | undefined>,
	}
	export function CreateServiceStatusFormGroup() {
		return new FormGroup<ServiceStatusFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),
			serviceDetails: new FormControl<ServiceStatusServiceDetails | null | undefined>(undefined, [Validators.required]),
			serviceUp: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ServiceStatusServiceDetails { acceptingCaseUpdates = 0, notAcceptingCaseUpdates = 1, acceptingCaseTrack = 2, notAcceptingCaseTrack = 3, acceptingAutoDocOrders = 4, acceptingManualDocOrders = 5, notAcceptingAutoDocOrdersLimitExceeded = 6, notAcceptingManualDocOrdersLimitExceeded = 7, notAcceptingDocOrders = 8 }

	export interface ServiceStatusDownDetails {

		/**
		 * Details of the reason.
		 * Required
		 * Max length: 1000
		 */
		details: string;

		/**
		 * Estimated Time this Service could be Up again for the use.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		eta: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 24
		 * Min length: 24
		 */
		object: string;

		/**
		 * This field determines the reason behind status being down. Following are the possible reason for the service to be down:
		 * underMaintenance: It means that the site is under scheduled maintenance.
		 * notIntegrated: When an court with specific case type is not integrated in UniCourt.
		 * brokenIntegration: Due to some updates made to the court site our existing Integration has broken and will require a fix to be made to support this court again for a spcific case type category.
		 * sourceMigrated: When a source is migrated from one site to another for a specific case type category.
		 * Required
		 */
		reason: ServiceStatusDownDetailsReason;
	}
	export interface ServiceStatusDownDetailsFormProperties {

		/**
		 * Details of the reason.
		 * Required
		 * Max length: 1000
		 */
		details: FormControl<string | null | undefined>,

		/**
		 * Estimated Time this Service could be Up again for the use.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		eta: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 24
		 * Min length: 24
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * This field determines the reason behind status being down. Following are the possible reason for the service to be down:
		 * underMaintenance: It means that the site is under scheduled maintenance.
		 * notIntegrated: When an court with specific case type is not integrated in UniCourt.
		 * brokenIntegration: Due to some updates made to the court site our existing Integration has broken and will require a fix to be made to support this court again for a spcific case type category.
		 * sourceMigrated: When a source is migrated from one site to another for a specific case type category.
		 * Required
		 */
		reason: FormControl<ServiceStatusDownDetailsReason | null | undefined>,
	}
	export function CreateServiceStatusDownDetailsFormGroup() {
		return new FormGroup<ServiceStatusDownDetailsFormProperties>({
			details: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			eta: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(24), Validators.maxLength(24)]),
			reason: new FormControl<ServiceStatusDownDetailsReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ServiceStatusDownDetailsReason { underMaintenance = 0, notIntegrated = 1, brokenIntegration = 2, sourceMigrated = 3 }

	export interface CourtServiceStatusResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		courtServiceStatusArray: Array<CourtServiceStatus>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2153
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2152
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CourtServiceStatusResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2153
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2152
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCourtServiceStatusResponseFormGroup() {
		return new FormGroup<CourtServiceStatusResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2153)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(26), Validators.maxLength(26)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2152)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CourtSystemResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		courtSystemArray: Array<CourtSystem>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CourtSystemResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCourtSystemResponseFormGroup() {
		return new FormGroup<CourtSystemResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2142)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2141)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface CourtTypeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		courtTypeArray: Array<CourtType>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2139
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface CourtTypeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2140
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2139
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateCourtTypeResponseFormGroup() {
		return new FormGroup<CourtTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2140)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2139)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface DailyUsageResponse {

		/**
		 * Total number of API calls billed for the billing cycle.
		 * Required
		 */
		apiCallsBillable: DailyUsageResponseApiCallsBillable;

		/**
		 * Total number of callbackFailures including caseUpdate, caseDocumentOrder and caseExport for the billing cycle.
		 * Required
		 */
		apiCallsCredited: DailyUsageResponseApiCallsCredited;

		/**
		 * Total API calls made for the billing cycle.
		 * Required
		 */
		apiCallsMade: DailyUsageResponseApiCallsMade;

		/**
		 * Api Usage made.
		 * Required
		 */
		apiUsage: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * End time of the usage.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		usageEndTime: Date;

		/**
		 * Start time of the usage.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		usageStartTime: Date;
	}
	export interface DailyUsageResponseFormProperties {

		/**
		 * Api Usage made.
		 * Required
		 */
		apiUsage: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * End time of the usage.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		usageEndTime: FormControl<Date | null | undefined>,

		/**
		 * Start time of the usage.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		usageStartTime: FormControl<Date | null | undefined>,
	}
	export function CreateDailyUsageResponseFormGroup() {
		return new FormGroup<DailyUsageResponseFormProperties>({
			apiUsage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			usageEndTime: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			usageStartTime: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface DailyUsageResponseApiCallsBillable {

		/**
		 * Total API calls billed  for the billing cycle
		 * Required
		 */
		count: number;

		/**
		 * Last Updated date and time for the field apiCallsBillable
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: Date;
	}
	export interface DailyUsageResponseApiCallsBillableFormProperties {

		/**
		 * Total API calls billed  for the billing cycle
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Last Updated date and time for the field apiCallsBillable
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: FormControl<Date | null | undefined>,
	}
	export function CreateDailyUsageResponseApiCallsBillableFormGroup() {
		return new FormGroup<DailyUsageResponseApiCallsBillableFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastUpdated: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface DailyUsageResponseApiCallsCredited {

		/**
		 * Total API calls credited back for the billing cycle
		 * Required
		 */
		count: number;

		/**
		 * Last Updated date and time for the field apiCallsCredited
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: Date;
	}
	export interface DailyUsageResponseApiCallsCreditedFormProperties {

		/**
		 * Total API calls credited back for the billing cycle
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Last Updated date and time for the field apiCallsCredited
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: FormControl<Date | null | undefined>,
	}
	export function CreateDailyUsageResponseApiCallsCreditedFormGroup() {
		return new FormGroup<DailyUsageResponseApiCallsCreditedFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastUpdated: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface DailyUsageResponseApiCallsMade {

		/**
		 * Total API calls made for the billing cycle
		 * Required
		 */
		count: number;

		/**
		 * Last Updated date and time for the field apiCallsMade
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: Date;
	}
	export interface DailyUsageResponseApiCallsMadeFormProperties {

		/**
		 * Total API calls made for the billing cycle
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Last Updated date and time for the field apiCallsMade
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastUpdated: FormControl<Date | null | undefined>,
	}
	export function CreateDailyUsageResponseApiCallsMadeFormGroup() {
		return new FormGroup<DailyUsageResponseApiCallsMadeFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lastUpdated: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface DocumentDownload {

		/**
		 * API call to download the document again if the above fileUrl is expired.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		caseDocumentDownloadAPI: string;

		/**
		 * Requested Document ID.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: string;

		/**
		 * Expiry date-time for the fileUrl provided in this object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		expiryDate: string;

		/**
		 * Link to download the file.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		fileUrl: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: string;
	}
	export interface DocumentDownloadFormProperties {

		/**
		 * API call to download the document again if the above fileUrl is expired.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		caseDocumentDownloadAPI: FormControl<string | null | undefined>,

		/**
		 * Requested Document ID.
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		caseDocumentId: FormControl<string | null | undefined>,

		/**
		 * Expiry date-time for the fileUrl provided in this object.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		expiryDate: FormControl<string | null | undefined>,

		/**
		 * Link to download the file.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		fileUrl: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 16
		 * Min length: 16
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateDocumentDownloadFormGroup() {
		return new FormGroup<DocumentDownloadFormProperties>({
			caseDocumentDownloadAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			caseDocumentId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			expiryDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			fileUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(16), Validators.maxLength(16)]),
		});

	}

	export interface InvalidateAccessTokenRequest {

		/**
		 * Your Client ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 32
		 * Min length: 32
		 */
		clientId: string;

		/**
		 * Your Client Secret ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 64
		 * Min length: 64
		 */
		clientSecret: string;

		/**
		 * The Token ID of token being invalidated
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		tokenId: string;
	}
	export interface InvalidateAccessTokenRequestFormProperties {

		/**
		 * Your Client ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 32
		 * Min length: 32
		 */
		clientId: FormControl<string | null | undefined>,

		/**
		 * Your Client Secret ID obtainable by logging into your UniCourt account.
		 * Required
		 * Max length: 64
		 * Min length: 64
		 */
		clientSecret: FormControl<string | null | undefined>,

		/**
		 * The Token ID of token being invalidated
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		tokenId: FormControl<string | null | undefined>,
	}
	export function CreateInvalidateAccessTokenRequestFormGroup() {
		return new FormGroup<InvalidateAccessTokenRequestFormProperties>({
			clientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(32), Validators.maxLength(32)]),
			clientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(64), Validators.maxLength(64)]),
			tokenId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
		});

	}

	export interface JudgeAnalyticsAPI {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: string;

		/**
		 * Link to Details for the Judge.
		 * Required
		 * Max length: 255
		 */
		normJudgeAPI: string;

		/**
		 * Required
		 * Max length: 17
		 */
		object: string;
	}
	export interface JudgeAnalyticsAPIFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: FormControl<string | null | undefined>,

		/**
		 * Link to Details for the Judge.
		 * Required
		 * Max length: 255
		 */
		normJudgeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateJudgeAnalyticsAPIFormGroup() {
		return new FormGroup<JudgeAnalyticsAPIFormProperties>({
			associatedNormAttorneysAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormLawFirmsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormPartiesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normJudgeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(17)]),
		});

	}

	export interface JudgeTypeResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		judgeTypeArray: Array<JudgeType>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface JudgeTypeResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateJudgeTypeResponseFormGroup() {
		return new FormGroup<JudgeTypeResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2142)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2141)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface JurisdictionGeoResponse {

		/**
		 * Required
		 * Max length: 100
		 */
		jurisdictionGeoArray: Array<JurisdictionGeo>;

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2147
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2146
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface JurisdictionGeoResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2147
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2146
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateJurisdictionGeoResponseFormGroup() {
		return new FormGroup<JurisdictionGeoResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2147)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2146)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface LawFirmAnalyticsAPI {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgeAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: string;

		/**
		 * Link to Details for the Law Firm.
		 * Required
		 * Max length: 255
		 */
		normLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 19
		 */
		object: string;
	}
	export interface LawFirmAnalyticsAPIFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgeAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormPartiesAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Link to Details for the Law Firm.
		 * Required
		 * Max length: 255
		 */
		normLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateLawFirmAnalyticsAPIFormGroup() {
		return new FormGroup<LawFirmAnalyticsAPIFormProperties>({
			associatedNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormJudgeAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormPartiesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(19)]),
		});

	}


	/** Norm Attorney */
	export interface NormAttorney {

		/** Required */
		attorneyAnalyticsAPI: AttorneyAnalyticsAPI;

		/** Required */
		barRecordArray: Array<BarRecord>;

		/**
		 * Provides Court Data per State Jurisdiction for an entity.
		 * Required
		 */
		caseAnalyticsAPI: CaseAnalyticsAPI;

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/** Required */
		hasAssociatedPublicData: boolean;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: string;

		/**
		 * Required
		 * Max length: 12
		 */
		object: string;

		/** Required */
		similarNormAttorneyArray: Array<SimilarNormAttorney>;
	}

	/** Norm Attorney */
	export interface NormAttorneyFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/** Required */
		hasAssociatedPublicData: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 12
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormAttorneyFormGroup() {
		return new FormGroup<NormAttorneyFormProperties>({
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			hasAssociatedPublicData: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normAttorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(12)]),
		});

	}

	export interface SimilarNormAttorney {

		/** Required */
		barRecordPreviewArray: Array<BarRecordPreview>;

		/**
		 * Required
		 * Max length: 500
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: string;

		/** Required */
		normAttorneySimilarityScore: number;

		/**
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;
	}
	export interface SimilarNormAttorneyFormProperties {

		/**
		 * Required
		 * Max length: 500
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		normAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneyId: FormControl<string | null | undefined>,

		/** Required */
		normAttorneySimilarityScore: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateSimilarNormAttorneyFormGroup() {
		return new FormGroup<SimilarNormAttorneyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(500)]),
			normAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normAttorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normAttorneySimilarityScore: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
		});

	}

	export interface NormAttorneySearchResponse {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2120
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneySearchId: string;

		/**
		 * Required
		 * Max length: 10
		 */
		normAttorneySearchResultArray: Array<NormAttorneySearchResult>;

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: string;

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2119
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: string;

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface NormAttorneySearchResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2120
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normAttorneySearchId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 26
		 * Min length: 26
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2119
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: FormControl<string | null | undefined>,

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateNormAttorneySearchResponseFormGroup() {
		return new FormGroup<NormAttorneySearchResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2120)]),
			normAttorneySearchId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(26), Validators.maxLength(26)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2119)]),
			q: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(2048)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(11)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
		});

	}

	export interface NormAttorneySearchResult {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		hasAssociatedPublicData: boolean;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/** Required */
		matchedObjectArray: Array<MatchedObject>;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normAttorneyDetailsAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normAttorneyId: string;

		/**
		 * Required
		 * Max length: 24
		 * Min length: 24
		 */
		object: string;
	}
	export interface NormAttorneySearchResultFormProperties {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 5
		 * Min length: 4
		 */
		hasAssociatedPublicData: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normAttorneyDetailsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normAttorneyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 24
		 * Min length: 24
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormAttorneySearchResultFormGroup() {
		return new FormGroup<NormAttorneySearchResultFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			hasAssociatedPublicData: new FormControl<boolean | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(5)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normAttorneyDetailsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normAttorneyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(24), Validators.maxLength(24)]),
		});

	}

	export interface NormCorporateGroup {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normCorporateGroupId: string;

		/**
		 * Required
		 * Max length: 500
		 */
		normCorporateGroupName: string;

		/**
		 * Required
		 * Max length: 18
		 */
		object: string;
	}
	export interface NormCorporateGroupFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normCorporateGroupId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		normCorporateGroupName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormCorporateGroupFormGroup() {
		return new FormGroup<NormCorporateGroupFormProperties>({
			normCorporateGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normCorporateGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(18)]),
		});

	}


	/** Norm Judge */
	export interface NormJudge {

		/**
		 * Provides Court Data per State Jurisdiction for an entity.
		 * Required
		 */
		caseAnalyticsAPI: CaseAnalyticsAPI;

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/** Required */
		hasAssociatedPublicData: boolean;

		/** Required */
		judgeAnalyticsAPI: JudgeAnalyticsAPI;

		/** Required */
		judicialDataArray: Array<NormJudgePublicData>;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: string;

		/**
		 * Required
		 * Max length: 9
		 */
		object: string;
	}

	/** Norm Judge */
	export interface NormJudgeFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/** Required */
		hasAssociatedPublicData: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormJudgeFormGroup() {
		return new FormGroup<NormJudgeFormProperties>({
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			hasAssociatedPublicData: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normJudgeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(9)]),
		});

	}


	/** This contains the Judge Public details that is obtained from various sources. */
	export interface NormJudgePublicData {

		/**
		 * American Bar Association (ABA) Rating of the Judge.
		 * Required
		 */
		abaRatings: NormJudgePublicDataAbaRatings;

		/**
		 * Other Names of the Judge.
		 * Required
		 */
		aliasArray: Array<string>;

		/** Required */
		bio: NormJudgePublicDataBio;

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/**
		 * The Education History of the judge.
		 * Required
		 * Max length: 250
		 */
		NormJudgePublicDataEducationArray: Array<NormJudgePublicDataEducationArray>;

		/**
		 * Required
		 * Max length: 25
		 */
		firstFetchDate: Date;

		/**
		 * The judicial source of the Judge
		 * Required
		 */
		judicialSource: NormJudgePublicDataJudicialSource;

		/**
		 * The judicial status of the Judge
		 * Required
		 * Max length: 50
		 */
		judicialStatus: string;

		/**
		 * Required
		 * Max length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Last Fetch Date of the Judge Update.
		 * Required
		 * Max length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/**
		 * Name changes of the Judge. Change in the official name. Other names go to Alias array.
		 * Required
		 */
		NormJudgePublicDataNameHistoryArray: Array<NormJudgePublicDataNameHistoryArray>;

		/**
		 * Required
		 * Max length: 19
		 */
		object: string;

		/**
		 * The non-judicial career history of the judge.
		 * Required
		 */
		professionalCareerArray: Array<string>;

		/**
		 * Judicial History of the Judge.
		 * Required
		 */
		serviceHistoryArray: Array<ServiceHistory>;
	}

	/** This contains the Judge Public details that is obtained from various sources. */
	export interface NormJudgePublicDataFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * The judicial status of the Judge
		 * Required
		 * Max length: 50
		 */
		judicialStatus: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Last Fetch Date of the Judge Update.
		 * Required
		 * Max length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 19
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormJudgePublicDataFormGroup() {
		return new FormGroup<NormJudgePublicDataFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			judicialStatus: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(19)]),
		});

	}

	export interface NormJudgePublicDataAbaRatings {

		/**
		 * rating
		 * Required
		 * Max length: 50
		 */
		rating: string;

		/**
		 * Year when Rating was recieved.
		 * Required
		 */
		year: number;
	}
	export interface NormJudgePublicDataAbaRatingsFormProperties {

		/**
		 * rating
		 * Required
		 * Max length: 50
		 */
		rating: FormControl<string | null | undefined>,

		/**
		 * Year when Rating was recieved.
		 * Required
		 */
		year: FormControl<number | null | undefined>,
	}
	export function CreateNormJudgePublicDataAbaRatingsFormGroup() {
		return new FormGroup<NormJudgePublicDataAbaRatingsFormProperties>({
			rating: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface NormJudgePublicDataBio {

		/**
		 * The Birth City of the Judge.
		 * Required
		 * Max length: 50
		 */
		birthCity: string;

		/**
		 * The Date of Birth of the Judge.
		 * Required
		 * Max length: 25
		 */
		birthDate: Date;

		/**
		 * The Birth State of the Judge.
		 * Required
		 * Max length: 50
		 */
		birthState: string;

		/**
		 * The Death City of the Judge.
		 * Required
		 * Max length: 50
		 */
		deathCity: string;

		/**
		 * The Date of the Death of the Judge.
		 * Required
		 * Max length: 25
		 */
		deathDate: Date;

		/**
		 * The Death State of the Judge.
		 * Required
		 * Max length: 50
		 */
		deathState: string;

		/**
		 * Ethnic Group of the Judge.
		 * Required
		 * Max length: 50
		 */
		ethnicity: string;

		/**
		 * The Political Affiliation of the Judge.
		 * Required
		 * Max length: 50
		 */
		politicalAffiliation: string;
	}
	export interface NormJudgePublicDataBioFormProperties {

		/**
		 * The Birth City of the Judge.
		 * Required
		 * Max length: 50
		 */
		birthCity: FormControl<string | null | undefined>,

		/**
		 * The Date of Birth of the Judge.
		 * Required
		 * Max length: 25
		 */
		birthDate: FormControl<Date | null | undefined>,

		/**
		 * The Birth State of the Judge.
		 * Required
		 * Max length: 50
		 */
		birthState: FormControl<string | null | undefined>,

		/**
		 * The Death City of the Judge.
		 * Required
		 * Max length: 50
		 */
		deathCity: FormControl<string | null | undefined>,

		/**
		 * The Date of the Death of the Judge.
		 * Required
		 * Max length: 25
		 */
		deathDate: FormControl<Date | null | undefined>,

		/**
		 * The Death State of the Judge.
		 * Required
		 * Max length: 50
		 */
		deathState: FormControl<string | null | undefined>,

		/**
		 * Ethnic Group of the Judge.
		 * Required
		 * Max length: 50
		 */
		ethnicity: FormControl<string | null | undefined>,

		/**
		 * The Political Affiliation of the Judge.
		 * Required
		 * Max length: 50
		 */
		politicalAffiliation: FormControl<string | null | undefined>,
	}
	export function CreateNormJudgePublicDataBioFormGroup() {
		return new FormGroup<NormJudgePublicDataBioFormProperties>({
			birthCity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			birthDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			birthState: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			deathCity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			deathDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			deathState: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			ethnicity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			politicalAffiliation: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}

	export interface NormJudgePublicDataEducationArray {

		/**
		 * The Degree Awarded to the Judge
		 * Required
		 * Max length: 250
		 */
		degree: string;

		/**
		 * The University which awarded the degree to the Judge.
		 * Required
		 * Max length: 250
		 */
		school: string;

		/**
		 * The year when the degree was awarded.
		 * Required
		 */
		year: number;
	}
	export interface NormJudgePublicDataEducationArrayFormProperties {

		/**
		 * The Degree Awarded to the Judge
		 * Required
		 * Max length: 250
		 */
		degree: FormControl<string | null | undefined>,

		/**
		 * The University which awarded the degree to the Judge.
		 * Required
		 * Max length: 250
		 */
		school: FormControl<string | null | undefined>,

		/**
		 * The year when the degree was awarded.
		 * Required
		 */
		year: FormControl<number | null | undefined>,
	}
	export function CreateNormJudgePublicDataEducationArrayFormGroup() {
		return new FormGroup<NormJudgePublicDataEducationArrayFormProperties>({
			degree: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			school: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface NormJudgePublicDataJudicialSource {

		/**
		 * Name of the Judicial Data Source
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Type of acquisition of the data source
		 * Required
		 * Max length: 7
		 */
		type: NormJudgePublicDataJudicialSourceType;

		/**
		 * URL of the data source, if type is Website
		 * Required
		 * Max length: 150
		 */
		url: string;
	}
	export interface NormJudgePublicDataJudicialSourceFormProperties {

		/**
		 * Name of the Judicial Data Source
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Type of acquisition of the data source
		 * Required
		 * Max length: 7
		 */
		type: FormControl<NormJudgePublicDataJudicialSourceType | null | undefined>,

		/**
		 * URL of the data source, if type is Website
		 * Required
		 * Max length: 150
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNormJudgePublicDataJudicialSourceFormGroup() {
		return new FormGroup<NormJudgePublicDataJudicialSourceFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			type: new FormControl<NormJudgePublicDataJudicialSourceType | null | undefined>(undefined, [Validators.required, Validators.maxLength(7)]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(150)]),
		});

	}

	export enum NormJudgePublicDataJudicialSourceType { Website = 0, Other = 1 }

	export interface NormJudgePublicDataNameHistoryArray {

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/** Required */
		isVisible: boolean;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 5
		 */
		prefix: string;

		/**
		 * Required
		 * Max length: 5
		 */
		suffix: string;
	}
	export interface NormJudgePublicDataNameHistoryArrayFormProperties {

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/** Required */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 5
		 */
		prefix: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 5
		 */
		suffix: FormControl<string | null | undefined>,
	}
	export function CreateNormJudgePublicDataNameHistoryArrayFormGroup() {
		return new FormGroup<NormJudgePublicDataNameHistoryArrayFormProperties>({
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			prefix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(5)]),
			suffix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(5)]),
		});

	}


	/** A timeline of courts where the judge has been employed. */
	export interface ServiceHistory {

		/**
		 * The President-in-charge of the Judges appointment.
		 * Required
		 * Max length: 100
		 */
		appointedBy: string;

		/**
		 * The year in which the Judge began practicing in his current service.
		 * Required
		 * Max length: 25
		 */
		fromDate: Date;

		/**
		 * The year in which the Judge began practicing in his current service.
		 * Required
		 */
		fromYear: number;

		/**
		 * Boolean indicating if the service history  is visible or not.
		 * Required
		 */
		isVisible: boolean;

		/**
		 * Required
		 * Max length: 14
		 */
		object: string;

		/**
		 * The reason for the Judges termination for the current position.
		 * Required
		 * Max length: 50
		 */
		reasonForTermination: string;

		/**
		 * The court served by the Judge. The court is taken from source.
		 * Required
		 * Max length: 250
		 */
		sourceCourt: string;

		/**
		 * Title held by the Judge.
		 * Required
		 * Max length: 50
		 */
		title: string;

		/**
		 * The year in which the Judge stoped practicing in his current service.
		 * Required
		 * Max length: 25
		 */
		toDate: Date;

		/**
		 * The year in which the Judge stoped practicing in his current service.
		 * Required
		 */
		toYear: number;
	}

	/** A timeline of courts where the judge has been employed. */
	export interface ServiceHistoryFormProperties {

		/**
		 * The President-in-charge of the Judges appointment.
		 * Required
		 * Max length: 100
		 */
		appointedBy: FormControl<string | null | undefined>,

		/**
		 * The year in which the Judge began practicing in his current service.
		 * Required
		 * Max length: 25
		 */
		fromDate: FormControl<Date | null | undefined>,

		/**
		 * The year in which the Judge began practicing in his current service.
		 * Required
		 */
		fromYear: FormControl<number | null | undefined>,

		/**
		 * Boolean indicating if the service history  is visible or not.
		 * Required
		 */
		isVisible: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 14
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * The reason for the Judges termination for the current position.
		 * Required
		 * Max length: 50
		 */
		reasonForTermination: FormControl<string | null | undefined>,

		/**
		 * The court served by the Judge. The court is taken from source.
		 * Required
		 * Max length: 250
		 */
		sourceCourt: FormControl<string | null | undefined>,

		/**
		 * Title held by the Judge.
		 * Required
		 * Max length: 50
		 */
		title: FormControl<string | null | undefined>,

		/**
		 * The year in which the Judge stoped practicing in his current service.
		 * Required
		 * Max length: 25
		 */
		toDate: FormControl<Date | null | undefined>,

		/**
		 * The year in which the Judge stoped practicing in his current service.
		 * Required
		 */
		toYear: FormControl<number | null | undefined>,
	}
	export function CreateServiceHistoryFormGroup() {
		return new FormGroup<ServiceHistoryFormProperties>({
			appointedBy: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			fromDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			fromYear: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			isVisible: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(14)]),
			reasonForTermination: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			sourceCourt: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			toDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			toYear: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface NormJudgeSearchResponse {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2117
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeSearchId: string;

		/**
		 * Required
		 * Max length: 10
		 */
		normJudgeSearchResultArray: Array<NormJudgeSearchResult>;

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2116
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: string;

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface NormJudgeSearchResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2117
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normJudgeSearchId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2116
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: FormControl<string | null | undefined>,

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateNormJudgeSearchResponseFormGroup() {
		return new FormGroup<NormJudgeSearchResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2117)]),
			normJudgeSearchId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2116)]),
			q: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(2048)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(11)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
		});

	}

	export interface NormJudgeSearchResult {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/** Required */
		matchedObjectArray: Array<MatchedObject>;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normJudgeDetailsAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normJudgeId: string;

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;
	}
	export interface NormJudgeSearchResultFormProperties {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normJudgeDetailsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normJudgeId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormJudgeSearchResultFormGroup() {
		return new FormGroup<NormJudgeSearchResultFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normJudgeDetailsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normJudgeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
		});

	}


	/** Schema for Norm Law Firm containing Organization sub-field. */
	export interface NormLawFirm {

		/**
		 * Provides Court Data per State Jurisdiction for an entity.
		 * Required
		 */
		caseAnalyticsAPI: CaseAnalyticsAPI;

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/** Required */
		lawFirmAnalyticsAPI: LawFirmAnalyticsAPI;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: string;

		/** Required */
		normOrganizationData: NormOrganization;

		/**
		 * Required
		 * Max length: 11
		 */
		object: string;
	}

	/** Schema for Norm Law Firm containing Organization sub-field. */
	export interface NormLawFirmFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 11
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormLawFirmFormGroup() {
		return new FormGroup<NormLawFirmFormProperties>({
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normLawFirmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(11)]),
		});

	}

	export interface NormOrganization {

		/**
		 * Required
		 * Max length: 15
		 */
		cik: string;

		/** Required */
		isInvolvedInLitigation: boolean;

		/**
		 * Required
		 * Max length: 250
		 */
		lei: string;

		/**
		 * Required
		 * Max length: 250
		 */
		naics: string;

		/**
		 * Required
		 * Max length: 250
		 */
		naicsDescription: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/** Required */
		normCorporateGroupArray: Array<NormCorporateGroup>;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normOrganizationId: string;

		/**
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: string;

		/**
		 * Required
		 * Max length: 16
		 */
		object: string;

		/**
		 * Required
		 * Max length: 100
		 */
		organizationType: NormOrganizationOrganizationType;

		/**
		 * Required
		 * Max length: 10
		 */
		sic: string;

		/**
		 * Required
		 * Max length: 100
		 */
		sicDescription: string;

		/** Required */
		sosDataArray: Array<SOSData>;

		/**
		 * Required
		 * Max length: 250
		 */
		NormOrganizationTickerArray: Array<NormOrganizationTickerArray>;
	}
	export interface NormOrganizationFormProperties {

		/**
		 * Required
		 * Max length: 15
		 */
		cik: FormControl<string | null | undefined>,

		/** Required */
		isInvolvedInLitigation: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		lei: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		naics: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		naicsDescription: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normOrganizationId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 100
		 */
		organizationType: FormControl<NormOrganizationOrganizationType | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		sic: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 100
		 */
		sicDescription: FormControl<string | null | undefined>,
	}
	export function CreateNormOrganizationFormGroup() {
		return new FormGroup<NormOrganizationFormProperties>({
			cik: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(15)]),
			isInvolvedInLitigation: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lei: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			naics: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			naicsDescription: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normOrganizationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			normPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(16)]),
			organizationType: new FormControl<NormOrganizationOrganizationType | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			sic: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			sicDescription: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
		});

	}

	export enum NormOrganizationOrganizationType { Business = 0, GovernmentAgency = 1 }

	export interface SOSData {

		/** Required */
		associatedSoSPersonArray: Array<AssociatedSoSPerson>;

		/**
		 * Contact object data schema.
		 * Required
		 */
		contact: Contact;

		/** Required */
		domesticRegistration: boolean;

		/**
		 * Required
		 * Max length: 16
		 */
		fein: string;

		/**
		 * Required
		 * Max length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 */
		inactivationDate: Date;

		/** Required */
		isActive: boolean;

		/**
		 * Required
		 * Max length: 25
		 */
		lastFetchDate: Date;

		/**
		 * Last Fetch Date of Organization with Updates.
		 * Required
		 * Max length: 25
		 */
		lastFetchDateWithUpdates: Date;

		/** Required */
		nameChangesArray: Array<SOSNameChange>;

		/**
		 * Required
		 * Max length: 7
		 */
		object: string;

		/**
		 * Required
		 * Max length: 25
		 */
		registeredDate: Date;

		/** Required */
		sosAssociatedNormOrganizationArray: Array<SOSAssociatedNormOrganization>;

		/**
		 * Required
		 * Max length: 50
		 */
		sosNumber: string;

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: string;

		/**
		 * Required
		 * Max length: 10
		 */
		status: SOSDataStatus;
	}
	export interface SOSDataFormProperties {

		/** Required */
		domesticRegistration: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 */
		fein: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		inactivationDate: FormControl<Date | null | undefined>,

		/** Required */
		isActive: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Last Fetch Date of Organization with Updates.
		 * Required
		 * Max length: 25
		 */
		lastFetchDateWithUpdates: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 7
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		registeredDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 50
		 */
		sosNumber: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 2
		 */
		stateCode: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 10
		 */
		status: FormControl<SOSDataStatus | null | undefined>,
	}
	export function CreateSOSDataFormGroup() {
		return new FormGroup<SOSDataFormProperties>({
			domesticRegistration: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			fein: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(16)]),
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			inactivationDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			isActive: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			lastFetchDateWithUpdates: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(7)]),
			registeredDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			sosNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2)]),
			status: new FormControl<SOSDataStatus | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
		});

	}

	export interface SOSNameChange {

		/**
		 * Required
		 * Max length: 25
		 */
		fromDate: Date;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 13
		 */
		object: string;

		/**
		 * Required
		 * Max length: 25
		 */
		toDate: Date;
	}
	export interface SOSNameChangeFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		fromDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 13
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		toDate: FormControl<Date | null | undefined>,
	}
	export function CreateSOSNameChangeFormGroup() {
		return new FormGroup<SOSNameChangeFormProperties>({
			fromDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(13)]),
			toDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
		});

	}

	export interface SOSAssociatedNormOrganization {

		/**
		 * Required
		 * Max length: 25
		 */
		fromDate: Date;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 */
		normOrganizationAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normOrganizationId: string;

		/**
		 * Required
		 * Max length: 29
		 */
		object: string;

		/**
		 * Required
		 * Max length: 6
		 */
		relationshipType: SOSAssociatedNormOrganizationRelationshipType;

		/**
		 * Required
		 * Max length: 25
		 */
		toDate: Date;
	}
	export interface SOSAssociatedNormOrganizationFormProperties {

		/**
		 * Required
		 * Max length: 25
		 */
		fromDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		normOrganizationAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normOrganizationId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 29
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 6
		 */
		relationshipType: FormControl<SOSAssociatedNormOrganizationRelationshipType | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 */
		toDate: FormControl<Date | null | undefined>,
	}
	export function CreateSOSAssociatedNormOrganizationFormGroup() {
		return new FormGroup<SOSAssociatedNormOrganizationFormProperties>({
			fromDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normOrganizationAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normOrganizationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(29)]),
			relationshipType: new FormControl<SOSAssociatedNormOrganizationRelationshipType | null | undefined>(undefined, [Validators.required, Validators.maxLength(6)]),
			toDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.maxLength(25)]),
		});

	}

	export enum SOSAssociatedNormOrganizationRelationshipType { Parent = 0, Child = 1 }

	export enum SOSDataStatus { Active = 0 }

	export interface NormOrganizationTickerArray {

		/**
		 * Required
		 * Max length: 250
		 */
		exchange: string;

		/** Required */
		symbols: Array<string>;
	}
	export interface NormOrganizationTickerArrayFormProperties {

		/**
		 * Required
		 * Max length: 250
		 */
		exchange: FormControl<string | null | undefined>,
	}
	export function CreateNormOrganizationTickerArrayFormGroup() {
		return new FormGroup<NormOrganizationTickerArrayFormProperties>({
			exchange: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export interface NormLawFirmSearchResponse {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2119
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmSearchId: string;

		/**
		 * Required
		 * Max length: 10
		 */
		normLawFirmSearchResultArray: Array<NormLawFirmSearchResult>;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: string;

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2118
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: string;

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface NormLawFirmSearchResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2119
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normLawFirmSearchId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2118
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: FormControl<string | null | undefined>,

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateNormLawFirmSearchResponseFormGroup() {
		return new FormGroup<NormLawFirmSearchResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2119)]),
			normLawFirmSearchId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2118)]),
			q: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(2048)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(11)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
		});

	}

	export interface NormLawFirmSearchResult {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/** Required */
		matchedObjectArray: Array<MatchedObject>;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normLawFirmDetailsAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normLawFirmId: string;

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;
	}
	export interface NormLawFirmSearchResultFormProperties {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normLawFirmDetailsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normLawFirmId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateNormLawFirmSearchResultFormGroup() {
		return new FormGroup<NormLawFirmSearchResultFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normLawFirmDetailsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normLawFirmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
		});

	}


	/** Norm Party */
	export interface NormParty {

		/**
		 * Provides Court Data per State Jurisdiction for an entity.
		 * Required
		 */
		caseAnalyticsAPI: CaseAnalyticsAPI;

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: string;

		/**
		 * * Only applicable if the Party is an Individual.
		 * Required
		 */
		individualData: NormPartyIndividualData;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;

		/** Required */
		normOrganizationData: NormOrganization;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: string;

		/**
		 * Required
		 * Max length: 9
		 */
		object: string;

		/** Required */
		partyAnalyticsAPI: PartyAnalyticsAPI;

		/**
		 * Required
		 * Max length: 12
		 */
		partyClassificationType: NormPartyPartyClassificationType;

		/** Required */
		relatedNormPartyArray: Array<RelatedNormParty>;
	}

	/** Norm Party */
	export interface NormPartyFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		caseSearchAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 9
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 12
		 */
		partyClassificationType: FormControl<NormPartyPartyClassificationType | null | undefined>,
	}
	export function CreateNormPartyFormGroup() {
		return new FormGroup<NormPartyFormProperties>({
			caseSearchAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			normPartyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(9)]),
			partyClassificationType: new FormControl<NormPartyPartyClassificationType | null | undefined>(undefined, [Validators.required, Validators.maxLength(12)]),
		});

	}

	export interface NormPartyIndividualData {

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: string;

		/**
		 * Required
		 * Max length: 500
		 */
		name: string;
	}
	export interface NormPartyIndividualDataFormProperties {

		/**
		 * Required
		 * Max length: 500
		 */
		firstName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		lastName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		middleName: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 500
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateNormPartyIndividualDataFormGroup() {
		return new FormGroup<NormPartyIndividualDataFormProperties>({
			firstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			lastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			middleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(500)]),
		});

	}

	export interface PartyAnalyticsAPI {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: string;

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: string;

		/**
		 * Link to Details for the Party.
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: string;

		/**
		 * Required
		 * Max length: 17
		 */
		object: string;
	}
	export interface PartyAnalyticsAPIFormProperties {

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormAttorneysAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormJudgesAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		associatedNormLawFirmsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormAttorneyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormLawFirmAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 */
		caseCountAnalyticsByOpposingNormPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Link to Details for the Party.
		 * Required
		 * Max length: 255
		 */
		normPartyAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePartyAnalyticsAPIFormGroup() {
		return new FormGroup<PartyAnalyticsAPIFormProperties>({
			associatedNormAttorneysAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormJudgesAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			associatedNormLawFirmsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormAttorneyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormLawFirmAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			caseCountAnalyticsByOpposingNormPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			normPartyAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(17)]),
		});

	}

	export enum NormPartyPartyClassificationType { Individual = 0, Organization = 1 }

	export interface RelatedNormParty {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: string;

		/**
		 * Required
		 * Max length: 16
		 */
		object: string;

		/**
		 * Required
		 * Max length: 250
		 */
		relationshipType: RelatedNormPartyRelationshipType;
	}
	export interface RelatedNormPartyFormProperties {

		/**
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 16
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 250
		 */
		relationshipType: FormControl<RelatedNormPartyRelationshipType | null | undefined>,
	}
	export function CreateRelatedNormPartyFormGroup() {
		return new FormGroup<RelatedNormPartyFormProperties>({
			normPartyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(16)]),
			relationshipType: new FormControl<RelatedNormPartyRelationshipType | null | undefined>(undefined, [Validators.required, Validators.maxLength(250)]),
		});

	}

	export enum RelatedNormPartyRelationshipType { Parent = 0, Child = 1, Same_Corporate_Group = 2 }

	export interface NormPartySearchResponse {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2117
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartySearchId: string;

		/**
		 * Required
		 * Max length: 10
		 */
		normPartySearchResultArray: Array<NormPartySearchResult>;

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2116
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: string;

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface NormPartySearchResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2117
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		normPartySearchId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2116
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Query been sent by client
		 * Required
		 * Max length: 2048
		 * Min length: 3
		 */
		q: FormControl<string | null | undefined>,

		/**
		 * The number of matches that were found in the index.
		 * Required
		 * Max length: 11
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total pages for matches that were found in the index.
		 * Required
		 * Max length: 4
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreateNormPartySearchResponseFormGroup() {
		return new FormGroup<NormPartySearchResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2117)]),
			normPartySearchId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2116)]),
			q: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(2048)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(11)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4)]),
		});

	}

	export interface NormPartySearchResult {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: Date;

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: Date;

		/** Required */
		matchedObjectArray: Array<MatchedObject>;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normPartyDetailsAPI: string;

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normPartyId: string;

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: string;

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		partyClassificationType: string;
	}
	export interface NormPartySearchResultFormProperties {

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		firstFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		lastFetchDate: FormControl<Date | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		normPartyDetailsAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 18
		 * Min length: 17
		 */
		normPartyId: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 21
		 * Min length: 21
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		partyClassificationType: FormControl<string | null | undefined>,
	}
	export function CreateNormPartySearchResultFormGroup() {
		return new FormGroup<NormPartySearchResultFormProperties>({
			firstFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			lastFetchDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normPartyDetailsAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			normPartyId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(18)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(21), Validators.maxLength(21)]),
			partyClassificationType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface PACERCaseSearchContent {

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;

		/**
		 * This parameter represents the bankruptcy chapter of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclBankruptcyChapter: string;

		/**
		 * Sequentially generated number that identifies the case.
		 * Required
		 */
		pclCaseId: number;

		/**
		 * Link to case in the case management/electronic case files (CM/ECF) system at the court.
		 * Required
		 * Max length: 255
		 */
		pclCaseLink: string;

		/**
		 * The sequence number of the case.
		 * Required
		 */
		pclCaseNumber: number;

		/**
		 * Case Number.
		 * Required
		 * Max length: 50
		 */
		pclCaseNumberFull: string;

		/**
		 * The divisional office in which the case was filed.
		 * Required
		 * Max length: 2
		 */
		pclCaseOffice: string;

		/**
		 * Title of the case.
		 * Required
		 * Max length: 255
		 */
		pclCaseTitle: string;

		/**
		 * Code that identifies the type of case.
		 * Required
		 * Max length: 6
		 */
		pclCaseType: string;

		/**
		 * The year in which the case falls. Could be two or four digit.
		 * Required
		 */
		pclCaseYear: number;

		/**
		 * This parameter represents the civil cto number of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilCtoNumber: string;

		/**
		 * This parameter represents the civil disposition date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclCivilDateDisposition: string;

		/**
		 * This parameter represents the civil initiated date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclCivilDateInitiated: string;

		/**
		 * This parameter represents the civil terminated date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclCivilDateTerminated: string;

		/**
		 * This parameter represents the civil stat disposition of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilStatDisposition: string;

		/**
		 * This parameter represents the civil stat initiated of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilStatInitiated: string;

		/**
		 * This parameter represents the civil stat terminated of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilStatTerminated: string;

		/**
		 * This parameter represents the civil transferee of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilTransferee: string;

		/**
		 * The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B
		 * Required
		 * Max length: 6
		 */
		pclCourtId: string;

		/**
		 * This parameter represents the date discharged of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateDischarged: string;

		/**
		 * This parameter represents the date dismissed of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateDismissed: string;

		/**
		 * Filing date of the case.
		 * Required
		 * Max length: 10
		 */
		pclDateFiled: string;

		/**
		 * This parameter represents the date reopened of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateReopened: string;

		/**
		 * This parameter represents the date termed of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateTermed: string;

		/**
		 * This parameter represents the disposition of the case when it is present
		 * Required
		 * Max length: 100
		 */
		pclDisposition: string;

		/**
		 * This parameter represents the disposition method of the case when it is present
		 * Required
		 * Max length: 100
		 */
		pclDispositionMethod: string;

		/**
		 * This parameter represents the joint bankruptcy flag of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclJointBankruptcyFlag: string;

		/**
		 * This parameter represents the joint discharged date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclJointDischargedDate: string;

		/**
		 * This parameter represents the joint dismissed date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclJointDismissedDate: string;

		/**
		 * This parameter represents the joint disposition method of the case when it is present
		 * Required
		 * Max length: 100
		 */
		pclJointDispositionMethod: string;

		/**
		 * JPML Case Seed number.
		 * Required
		 */
		pclJpmlNumber: number;

		/**
		 * Link to case in the case management/electronic case files (CM/ECF) system at the court.
		 * Required
		 */
		pclJurisdictionType: PACERCaseSearchContentPclJurisdictionType;

		/**
		 * Which court does this mdl belongs too.
		 * Required
		 * Max length: 10
		 */
		pclMdlCourtId: string;

		/**
		 * This parameter represents the mdl date ordered of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclMdlDateOrdered: string;

		/**
		 * This parameter represents the mdl date received of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclMdlDateReceived: string;

		/**
		 * This parameter represents the mdl extension of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlExtension: string;

		/**
		 * This parameter represents the mdl judge lastname of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlJudgeLastName: string;

		/**
		 * This parameter represents the mdl lit type of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlLittype: string;

		/**
		 * This parameter represents the mdl status of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlStatus: string;

		/**
		 * This parameter represents the mdl transferee of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlTransferee: string;

		/**
		 * This parameter represents the mdl transferee district of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlTransfereeDistrict: string;

		/**
		 * This parameter represents the nature of suit of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclNatureOfSuit: string;
	}
	export interface PACERCaseSearchContentFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the bankruptcy chapter of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclBankruptcyChapter: FormControl<string | null | undefined>,

		/**
		 * Sequentially generated number that identifies the case.
		 * Required
		 */
		pclCaseId: FormControl<number | null | undefined>,

		/**
		 * Link to case in the case management/electronic case files (CM/ECF) system at the court.
		 * Required
		 * Max length: 255
		 */
		pclCaseLink: FormControl<string | null | undefined>,

		/**
		 * The sequence number of the case.
		 * Required
		 */
		pclCaseNumber: FormControl<number | null | undefined>,

		/**
		 * Case Number.
		 * Required
		 * Max length: 50
		 */
		pclCaseNumberFull: FormControl<string | null | undefined>,

		/**
		 * The divisional office in which the case was filed.
		 * Required
		 * Max length: 2
		 */
		pclCaseOffice: FormControl<string | null | undefined>,

		/**
		 * Title of the case.
		 * Required
		 * Max length: 255
		 */
		pclCaseTitle: FormControl<string | null | undefined>,

		/**
		 * Code that identifies the type of case.
		 * Required
		 * Max length: 6
		 */
		pclCaseType: FormControl<string | null | undefined>,

		/**
		 * The year in which the case falls. Could be two or four digit.
		 * Required
		 */
		pclCaseYear: FormControl<number | null | undefined>,

		/**
		 * This parameter represents the civil cto number of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilCtoNumber: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil disposition date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclCivilDateDisposition: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil initiated date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclCivilDateInitiated: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil terminated date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclCivilDateTerminated: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil stat disposition of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilStatDisposition: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil stat initiated of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilStatInitiated: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil stat terminated of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilStatTerminated: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the civil transferee of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclCivilTransferee: FormControl<string | null | undefined>,

		/**
		 * The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B
		 * Required
		 * Max length: 6
		 */
		pclCourtId: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the date discharged of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateDischarged: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the date dismissed of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateDismissed: FormControl<string | null | undefined>,

		/**
		 * Filing date of the case.
		 * Required
		 * Max length: 10
		 */
		pclDateFiled: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the date reopened of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateReopened: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the date termed of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclDateTermed: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the disposition of the case when it is present
		 * Required
		 * Max length: 100
		 */
		pclDisposition: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the disposition method of the case when it is present
		 * Required
		 * Max length: 100
		 */
		pclDispositionMethod: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the joint bankruptcy flag of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclJointBankruptcyFlag: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the joint discharged date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclJointDischargedDate: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the joint dismissed date of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclJointDismissedDate: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the joint disposition method of the case when it is present
		 * Required
		 * Max length: 100
		 */
		pclJointDispositionMethod: FormControl<string | null | undefined>,

		/**
		 * JPML Case Seed number.
		 * Required
		 */
		pclJpmlNumber: FormControl<number | null | undefined>,

		/**
		 * Link to case in the case management/electronic case files (CM/ECF) system at the court.
		 * Required
		 */
		pclJurisdictionType: FormControl<PACERCaseSearchContentPclJurisdictionType | null | undefined>,

		/**
		 * Which court does this mdl belongs too.
		 * Required
		 * Max length: 10
		 */
		pclMdlCourtId: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl date ordered of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclMdlDateOrdered: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl date received of the case when it is present
		 * Required
		 * Max length: 10
		 */
		pclMdlDateReceived: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl extension of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlExtension: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl judge lastname of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlJudgeLastName: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl lit type of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlLittype: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl status of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlStatus: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl transferee of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlTransferee: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the mdl transferee district of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclMdlTransfereeDistrict: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the nature of suit of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclNatureOfSuit: FormControl<string | null | undefined>,
	}
	export function CreatePACERCaseSearchContentFormGroup() {
		return new FormGroup<PACERCaseSearchContentFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
			pclBankruptcyChapter: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCaseId: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclCaseLink: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pclCaseNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclCaseNumberFull: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCaseOffice: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2)]),
			pclCaseTitle: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pclCaseType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(6)]),
			pclCaseYear: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclCivilCtoNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCivilDateDisposition: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclCivilDateInitiated: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclCivilDateTerminated: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclCivilStatDisposition: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCivilStatInitiated: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCivilStatTerminated: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCivilTransferee: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCourtId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(6)]),
			pclDateDischarged: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclDateDismissed: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclDateFiled: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclDateReopened: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclDateTermed: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclDisposition: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			pclDispositionMethod: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			pclJointBankruptcyFlag: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclJointDischargedDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclJointDismissedDate: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclJointDispositionMethod: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			pclJpmlNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclJurisdictionType: new FormControl<PACERCaseSearchContentPclJurisdictionType | null | undefined>(undefined, [Validators.required]),
			pclMdlCourtId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclMdlDateOrdered: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclMdlDateReceived: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclMdlExtension: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclMdlJudgeLastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclMdlLittype: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclMdlStatus: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclMdlTransferee: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclMdlTransfereeDistrict: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclNatureOfSuit: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}

	export enum PACERCaseSearchContentPclJurisdictionType { Appellate = 0, Bankruptcy = 1, Criminal = 2, Civil = 3, 'Multi-district Litigation' = 4 }

	export interface PACERCaseSearchResults {

		/**
		 * This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: boolean;

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;

		/** Required */
		pacerContent: PACERCaseSearchContent;

		/** Required */
		uniCourtContent: CaseSearchResult;
	}
	export interface PACERCaseSearchResultsFormProperties {

		/**
		 * This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: FormControl<boolean | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePACERCaseSearchResultsFormGroup() {
		return new FormGroup<PACERCaseSearchResultsFormProperties>({
			hasOnlyMetaInfo: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
		});

	}

	export interface PACERImportCase {

		/**
		 * Court Fee charged for the Find Case request. This is only applicable for Appeal Cases.
		 * Required
		 */
		courtFee: number;

		/**
		 * Name of the object
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: string;

		/** Required */
		pacerImportCaseResultsArray: Array<PACERImportCaseResults>;
	}
	export interface PACERImportCaseFormProperties {

		/**
		 * Court Fee charged for the Find Case request. This is only applicable for Appeal Cases.
		 * Required
		 */
		courtFee: FormControl<number | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePACERImportCaseFormGroup() {
		return new FormGroup<PACERImportCaseFormProperties>({
			courtFee: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(15)]),
		});

	}

	export interface PACERImportCaseResults {

		/**
		 * This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: boolean;

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;

		/** Required */
		uniCourtContent: CaseSearchResult;
	}
	export interface PACERImportCaseResultsFormProperties {

		/**
		 * This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: FormControl<boolean | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePACERImportCaseResultsFormGroup() {
		return new FormGroup<PACERImportCaseResultsFormProperties>({
			hasOnlyMetaInfo: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
		});

	}

	export interface PACERPartySearchContent {

		/**
		 * Name of the object
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;

		/**
		 * Sequentially generated number that identifies the case.
		 * Required
		 */
		pclCaseId: number;

		/**
		 * The sequence number of the case.
		 * Required
		 */
		pclCaseNumber: number;

		/**
		 * Case Number.
		 * Required
		 * Max length: 50
		 */
		pclCaseNumberFull: string;

		/**
		 * The divisional office in which the case was filed.
		 * Required
		 * Max length: 2
		 */
		pclCaseOffice: string;

		/**
		 * Title of the case.
		 * Required
		 * Max length: 255
		 */
		pclCaseTitle: string;

		/**
		 * Code that identifies the type of case.
		 * Required
		 * Max length: 6
		 */
		pclCaseType: string;

		/**
		 * The year in which the case falls. Could be two or four digit.
		 * Required
		 */
		pclCaseYear: number;

		/** Required */
		pclCourtCase: PACERCaseSearchContent;

		/**
		 * The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B
		 * Required
		 * Max length: 6
		 */
		pclCourtId: string;

		/**
		 * Filing date of the case.
		 * Required
		 * Max length: 10
		 */
		pclDateFiled: string;

		/**
		 * This parameter represents the first name of the case when it is present
		 * Required
		 * Max length: 255
		 */
		pclFirstName: string;

		/**
		 * This parameter represents the generation of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclGeneration: string;

		/**
		 * Link to case in the case management/electronic case files (CM/ECF) system at the court.
		 * Required
		 */
		pclJurisdictionType: PACERCaseSearchContentPclJurisdictionType;

		/**
		 * This parameter represents the last name of the case when it is present
		 * Required
		 * Max length: 255
		 */
		pclLastName: string;

		/**
		 * This parameter represents the middle name of the case when it is present
		 * Required
		 * Max length: 255
		 */
		pclMiddleName: string;

		/**
		 * This parameter represents the party role of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclPartyRole: string;

		/**
		 * This parameter represents the party type of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclPartyType: string;
	}
	export interface PACERPartySearchContentFormProperties {

		/**
		 * Name of the object
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Sequentially generated number that identifies the case.
		 * Required
		 */
		pclCaseId: FormControl<number | null | undefined>,

		/**
		 * The sequence number of the case.
		 * Required
		 */
		pclCaseNumber: FormControl<number | null | undefined>,

		/**
		 * Case Number.
		 * Required
		 * Max length: 50
		 */
		pclCaseNumberFull: FormControl<string | null | undefined>,

		/**
		 * The divisional office in which the case was filed.
		 * Required
		 * Max length: 2
		 */
		pclCaseOffice: FormControl<string | null | undefined>,

		/**
		 * Title of the case.
		 * Required
		 * Max length: 255
		 */
		pclCaseTitle: FormControl<string | null | undefined>,

		/**
		 * Code that identifies the type of case.
		 * Required
		 * Max length: 6
		 */
		pclCaseType: FormControl<string | null | undefined>,

		/**
		 * The year in which the case falls. Could be two or four digit.
		 * Required
		 */
		pclCaseYear: FormControl<number | null | undefined>,

		/**
		 * The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B
		 * Required
		 * Max length: 6
		 */
		pclCourtId: FormControl<string | null | undefined>,

		/**
		 * Filing date of the case.
		 * Required
		 * Max length: 10
		 */
		pclDateFiled: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the first name of the case when it is present
		 * Required
		 * Max length: 255
		 */
		pclFirstName: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the generation of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclGeneration: FormControl<string | null | undefined>,

		/**
		 * Link to case in the case management/electronic case files (CM/ECF) system at the court.
		 * Required
		 */
		pclJurisdictionType: FormControl<PACERCaseSearchContentPclJurisdictionType | null | undefined>,

		/**
		 * This parameter represents the last name of the case when it is present
		 * Required
		 * Max length: 255
		 */
		pclLastName: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the middle name of the case when it is present
		 * Required
		 * Max length: 255
		 */
		pclMiddleName: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the party role of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclPartyRole: FormControl<string | null | undefined>,

		/**
		 * This parameter represents the party type of the case when it is present
		 * Required
		 * Max length: 50
		 */
		pclPartyType: FormControl<string | null | undefined>,
	}
	export function CreatePACERPartySearchContentFormGroup() {
		return new FormGroup<PACERPartySearchContentFormProperties>({
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
			pclCaseId: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclCaseNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclCaseNumberFull: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclCaseOffice: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(2)]),
			pclCaseTitle: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pclCaseType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(6)]),
			pclCaseYear: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pclCourtId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(6)]),
			pclDateFiled: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			pclFirstName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pclGeneration: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclJurisdictionType: new FormControl<PACERCaseSearchContentPclJurisdictionType | null | undefined>(undefined, [Validators.required]),
			pclLastName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pclMiddleName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pclPartyRole: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			pclPartyType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}

	export interface PACERPartySearchResults {

		/**
		 * This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: boolean;

		/**
		 * Name of the object
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: string;

		/** Required */
		pacerContent: PACERPartySearchContent;

		/** Required */
		uniCourtContent: CaseSearchResult;
	}
	export interface PACERPartySearchResultsFormProperties {

		/**
		 * This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		 * Required
		 */
		hasOnlyMetaInfo: FormControl<boolean | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 23
		 * Min length: 23
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreatePACERPartySearchResultsFormGroup() {
		return new FormGroup<PACERPartySearchResultsFormProperties>({
			hasOnlyMetaInfo: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(23), Validators.maxLength(23)]),
		});

	}

	export interface PACERSearchPageInfo {

		/**
		 * Indicates if the current page is the first page.
		 * Required
		 */
		first: boolean;

		/**
		 * Indicates if the current page is the last page.
		 * Required
		 */
		last: boolean;

		/**
		 * Current Page number.
		 * Required
		 */
		number: number;

		/**
		 * Number of records returned.
		 * Required
		 */
		numberOfElements: number;

		/**
		 * Name of the object
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: string;

		/**
		 * Number of results obtained in a page..
		 * Required
		 */
		size: number;

		/**
		 * Total number of records available
		 * Required
		 */
		totalElements: number;

		/**
		 * Total pages of data available.
		 * Required
		 */
		totalPages: number;
	}
	export interface PACERSearchPageInfoFormProperties {

		/**
		 * Indicates if the current page is the first page.
		 * Required
		 */
		first: FormControl<boolean | null | undefined>,

		/**
		 * Indicates if the current page is the last page.
		 * Required
		 */
		last: FormControl<boolean | null | undefined>,

		/**
		 * Current Page number.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/**
		 * Number of records returned.
		 * Required
		 */
		numberOfElements: FormControl<number | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 19
		 * Min length: 19
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Number of results obtained in a page..
		 * Required
		 */
		size: FormControl<number | null | undefined>,

		/**
		 * Total number of records available
		 * Required
		 */
		totalElements: FormControl<number | null | undefined>,

		/**
		 * Total pages of data available.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePACERSearchPageInfoFormGroup() {
		return new FormGroup<PACERSearchPageInfoFormProperties>({
			first: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			numberOfElements: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(19), Validators.maxLength(19)]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalElements: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PACERSearchReceipt {

		/**
		 * No of pages that was billed for the given PACER search.
		 * Required
		 */
		billablePages: number;

		/**
		 * client code added if any was set.
		 * Required
		 * Max length: 100
		 */
		clientCode: string;

		/**
		 * PACER Account ID.
		 * Required
		 * Max length: 100
		 */
		csoId: number;

		/**
		 * Description of the search made.
		 * Required
		 * Max length: 100
		 */
		description: string;

		/**
		 * Firm ID.
		 * Required
		 * Max length: 100
		 */
		firmId: string;

		/**
		 * ID which is used for PACER login.
		 * Required
		 * Max length: 40
		 */
		loginId: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: string;

		/**
		 * Report ID for the search made.
		 * Required
		 * Max length: 100
		 */
		reportId: string;

		/**
		 * Details of the search made for this request.
		 * Required
		 * Max length: 255
		 */
		search: string;

		/**
		 * PACER Search Fee.
		 * Required
		 * Max length: 5
		 * Min length: 3
		 */
		searchFee: string;

		/**
		 * Date when the transaction was made at the pacer court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		transactionDate: Date;
	}
	export interface PACERSearchReceiptFormProperties {

		/**
		 * No of pages that was billed for the given PACER search.
		 * Required
		 */
		billablePages: FormControl<number | null | undefined>,

		/**
		 * client code added if any was set.
		 * Required
		 * Max length: 100
		 */
		clientCode: FormControl<string | null | undefined>,

		/**
		 * PACER Account ID.
		 * Required
		 * Max length: 100
		 */
		csoId: FormControl<number | null | undefined>,

		/**
		 * Description of the search made.
		 * Required
		 * Max length: 100
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Firm ID.
		 * Required
		 * Max length: 100
		 */
		firmId: FormControl<string | null | undefined>,

		/**
		 * ID which is used for PACER login.
		 * Required
		 * Max length: 40
		 */
		loginId: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 18
		 * Min length: 18
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Report ID for the search made.
		 * Required
		 * Max length: 100
		 */
		reportId: FormControl<string | null | undefined>,

		/**
		 * Details of the search made for this request.
		 * Required
		 * Max length: 255
		 */
		search: FormControl<string | null | undefined>,

		/**
		 * PACER Search Fee.
		 * Required
		 * Max length: 5
		 * Min length: 3
		 */
		searchFee: FormControl<string | null | undefined>,

		/**
		 * Date when the transaction was made at the pacer court site.
		 * Required
		 * Max length: 25
		 * Min length: 25
		 */
		transactionDate: FormControl<Date | null | undefined>,
	}
	export function CreatePACERSearchReceiptFormGroup() {
		return new FormGroup<PACERSearchReceiptFormProperties>({
			billablePages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			clientCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			csoId: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			firmId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			loginId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(18), Validators.maxLength(18)]),
			reportId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			search: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			searchFee: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(5)]),
			transactionDate: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(25), Validators.maxLength(25)]),
		});

	}

	export interface PCLCase {

		/**
		 * Link to next page of the PCL Search Results.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: string;

		/** Required */
		pacerPageInfo: PACERSearchPageInfo;

		/** Required */
		pacerReceipt: PACERSearchReceipt;

		/** Required */
		pacerSearchResultsArray: Array<PACERCaseSearchResults>;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of records available for this Search.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects the current PCL Search.
		 * Required
		 */
		totalPages: number;
	}
	export interface PCLCaseFormProperties {

		/**
		 * Link to next page of the PCL Search Results.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of records available for this Search.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects the current PCL Search.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePCLCaseFormGroup() {
		return new FormGroup<PCLCaseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(7)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PCLParty {

		/**
		 * Link to next page of the PCL Search Results.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: string;

		/**
		 * Name of the object
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: string;

		/** Required */
		pacerPageInfo: PACERSearchPageInfo;

		/** Required */
		pacerReceipt: PACERSearchReceipt;

		/** Required */
		pacerSearchResultsArray: Array<PACERPartySearchResults>;

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Total number of records available for this Search.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects the current PCL Search.
		 * Required
		 */
		totalPages: number;
	}
	export interface PCLPartyFormProperties {

		/**
		 * Link to next page of the PCL Search Results.
		 * Required
		 * Max length: 255
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object
		 * Required
		 * Max length: 8
		 * Min length: 8
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Total number of records available for this Search.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects the current PCL Search.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePCLPartyFormGroup() {
		return new FormGroup<PCLPartyFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PacerCredential {

		/**
		 * Pacer Client Code.
		 * Required
		 * Max length: 32
		 * Min length: 0
		 */
		defaultPacerClientCode: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: string;

		/**
		 * Pacer User Id.
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: string;
	}
	export interface PacerCredentialFormProperties {

		/**
		 * Pacer Client Code.
		 * Required
		 * Max length: 32
		 * Min length: 0
		 */
		defaultPacerClientCode: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 15
		 * Min length: 15
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Pacer User Id.
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: FormControl<string | null | undefined>,
	}
	export function CreatePacerCredentialFormGroup() {
		return new FormGroup<PacerCredentialFormProperties>({
			defaultPacerClientCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0), Validators.maxLength(32)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(15)]),
			pacerUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(40)]),
		});

	}

	export interface PacerCredentialListResponse {

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Name of the object.
		 * Required
		 * Max length: 27
		 * Min length: 27
		 */
		object: string;

		/**
		 * Array of pacer credentials.
		 * Required
		 * Minimum items: 0
		 * Maximum items: 100
		 */
		pacerCredentialArray: Array<PacerCredential>;

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: number;

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of pacer credentials available.
		 * Required
		 */
		totalCount: number;

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: number;
	}
	export interface PacerCredentialListResponseFormProperties {

		/**
		 * Link for the next page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Name of the object.
		 * Required
		 * Max length: 27
		 * Min length: 27
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Current page number.
		 * Required
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link for the previous page.
		 * Required
		 * Max length: 1024
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of pacer credentials available.
		 * Required
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages available.
		 * Required
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePacerCredentialListResponseFormGroup() {
		return new FormGroup<PacerCredentialListResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(27), Validators.maxLength(27)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1024)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PacerCredentialRequest {

		/**
		 * Pacer Client Code.
		 * Max length: 32
		 * Min length: 0
		 */
		defaultPacerClientCode?: string | null;

		/**
		 * Pacer User Id.
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: string;

		/**
		 * Password.
		 * Required
		 * Max length: 45
		 * Min length: 8
		 */
		password: string;
	}
	export interface PacerCredentialRequestFormProperties {

		/**
		 * Pacer Client Code.
		 * Max length: 32
		 * Min length: 0
		 */
		defaultPacerClientCode: FormControl<string | null | undefined>,

		/**
		 * Pacer User Id.
		 * Required
		 * Max length: 40
		 * Min length: 6
		 */
		pacerUserId: FormControl<string | null | undefined>,

		/**
		 * Password.
		 * Required
		 * Max length: 45
		 * Min length: 8
		 */
		password: FormControl<string | null | undefined>,
	}
	export function CreatePacerCredentialRequestFormGroup() {
		return new FormGroup<PacerCredentialRequestFormProperties>({
			defaultPacerClientCode: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0), Validators.maxLength(32)]),
			pacerUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(40)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(45)]),
		});

	}

	export interface PartyRoleGroupResponse {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2147
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Required
		 * Max length: 100
		 */
		partyRoleGroupArray: Array<PartyRoleGroup>;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2146
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface PartyRoleGroupResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2147
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 22
		 * Min length: 22
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2146
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePartyRoleGroupResponseFormGroup() {
		return new FormGroup<PartyRoleGroupResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2147)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(22), Validators.maxLength(22)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2146)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}

	export interface PartyRoleResponse {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: string;

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: string;

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: number;

		/**
		 * Required
		 * Max length: 100
		 */
		partyRoleArray: Array<PartyRole>;

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: string;

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: number;

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: number;
	}
	export interface PartyRoleResponseFormProperties {

		/**
		 * Link to next page.
		 * Required
		 * Max length: 2142
		 * Min length: 1
		 */
		nextPageAPI: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 17
		 * Min length: 17
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * Page number for which results where obtained.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		pageNumber: FormControl<number | null | undefined>,

		/**
		 * Link to previous page.
		 * Required
		 * Max length: 2141
		 * Min length: 1
		 */
		previousPageAPI: FormControl<string | null | undefined>,

		/**
		 * Total number of matches found.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalCount: FormControl<number | null | undefined>,

		/**
		 * Total number of pages to obtain all the objects.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		totalPages: FormControl<number | null | undefined>,
	}
	export function CreatePartyRoleResponseFormGroup() {
		return new FormGroup<PartyRoleResponseFormProperties>({
			nextPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2142)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(17), Validators.maxLength(17)]),
			pageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			previousPageAPI: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2141)]),
			totalCount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			totalPages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}


	/** Success object contains its message related to the API request. */
	export interface Success {

		/**
		 * A message indicating that the request was successful.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		message: string;

		/**
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: string;
	}

	/** Success object contains its message related to the API request. */
	export interface SuccessFormProperties {

		/**
		 * A message indicating that the request was successful.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Max length: 7
		 * Min length: 7
		 */
		object: FormControl<string | null | undefined>,
	}
	export function CreateSuccessFormGroup() {
		return new FormGroup<SuccessFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7), Validators.maxLength(7)]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Gets details for a requested Attorney ID.
		 * Retrieve the attorney with the specified attorneyId value.
		 * Get attorney/{attorneyId}
		 * @return {Attorney} The request is recieved.
		 */
		GetAttorneyById(): Observable<Attorney> {
			return this.http.get<Attorney>(this.baseUri + 'attorney/{attorneyId}', {});
		}

		/**
		 * Gets Associated Party details for a requested Attorney ID.
		 * Retrieve the parties represented by the attorney with the specified attorneyId value.
		 * Get attorney/{attorneyId}/associatedParties
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {PartyAttorneyAssociations} The request is recieved.
		 */
		GetAttorneyAssociatedParties(pageNumber: number | null | undefined): Observable<PartyAttorneyAssociations> {
			return this.http.get<PartyAttorneyAssociations>(this.baseUri + 'attorney/{attorneyId}/associatedParties?pageNumber=' + pageNumber, {});
		}

		/**
		 * Specify the billing cycle to know the API usage.
		 * An endpoint to obtain information on API usage for a specific billing cycle.
		 * Get billingCycleUsage/{billingCycle}
		 * @return {BillingCycleUsageResponse} OK
		 */
		GetBillingUsageByBillingCycle(): Observable<BillingCycleUsageResponse> {
			return this.http.get<BillingCycleUsageResponse>(this.baseUri + 'billingCycleUsage/{billingCycle}', {});
		}

		/**
		 * Get all the previous 12 billing cycles.
		 * An endpoint to obtain information on the previous 12 billing cycles.
		 * Get billingCycles
		 * @return {BillingCyclesResponse} OK
		 */
		GetBillingCycles(): Observable<BillingCyclesResponse> {
			return this.http.get<BillingCyclesResponse>(this.baseUri + 'billingCycles', {});
		}

		/**
		 * Get list of callback types with count for a requested Date.
		 * Get list of callback types with count for a requested Date.
		 * Get callbacks
		 * @param {Date} date Date for which fetch the callback type list. By default, the date will be set to current date.
		 * @param {GetCallbacksStatus} status Status of the callbacks. Default status will fetch all callbacks.
		 * @return {CallbackListResponse} OK
		 */
		GetCallbacks(date: Date | null | undefined, status: GetCallbacksStatus | null | undefined): Observable<CallbackListResponse> {
			return this.http.get<CallbackListResponse>(this.baseUri + 'callbacks?date=' + date?.toISOString() + '&status=' + status, {});
		}

		/**
		 * Gets case information for a requested Case ID.
		 * Retrieve the case with the specified caseId value.
		 * Get case/{caseId}
		 * @return {Case} The request is recieved.
		 */
		GetCase(): Observable<Case> {
			return this.http.get<Case>(this.baseUri + 'case/{caseId}', {});
		}

		/**
		 * Gets Attorneys for a requested Case ID.
		 * Retrieve the attorneys in the case with the specified caseId value.
		 * Get case/{caseId}/attorneys
		 * @param {boolean} isVisible Retrieve attorneys in the case with the specified caseId value whose isVisible flag is set to the specified value.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {Attorneys} The request is recieved.
		 */
		GetCaseAttorneys(isVisible: boolean | null | undefined, pageNumber: number | null | undefined): Observable<Attorneys> {
			return this.http.get<Attorneys>(this.baseUri + 'case/{caseId}/attorneys?isVisible=' + isVisible + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Docket Entries for a requested Case ID.
		 * Retrieve the docket entries in the case with the specified caseId value.
		 * Get case/{caseId}/docketEntries
		 * @param {number} docketNumber Retrieve the docket entry witih the specified docket number in the case with the specified caseId value.
		 * @param {GetCaseDocketEntriesSortBy} sortBy Sort the retrieved docket entries in ascending order or descending order of date.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {DocketEntries} The request is recieved.
		 */
		GetCaseDocketEntries(docketNumber: number | null | undefined, sortBy: GetCaseDocketEntriesSortBy | null | undefined, pageNumber: number | null | undefined): Observable<DocketEntries> {
			return this.http.get<DocketEntries>(this.baseUri + 'case/{caseId}/docketEntries?docketNumber=' + docketNumber + '&sortBy=' + sortBy + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Primary Documents of Docket Entries.
		 * Retrieve the primary documents in the case with the specified caseId value.
		 * Get case/{caseId}/docketEntries/primaryDocuments
		 * @param {number} docketNumber Retrieve the primary documents associated with the specified docket number in the case with the specified caseId value.
		 * @param {boolean} inLibrary Retrieve the primary documents in the with the specified inLibrary flag in the case with the specified caseId value.
		 * @param {Date} afterFirstFetchDate Retrieve all primary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
		 * @param {Date} libraryDate Retrieve all primary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {DocketEntryPrimaryDocuments} The request is recieved.
		 */
		GetPrimaryDocumentsForDocketEntries(docketNumber: number, inLibrary: boolean | null | undefined, afterFirstFetchDate: Date | null | undefined, libraryDate: Date | null | undefined, pageNumber: number | null | undefined): Observable<DocketEntryPrimaryDocuments> {
			return this.http.get<DocketEntryPrimaryDocuments>(this.baseUri + 'case/{caseId}/docketEntries/primaryDocuments?docketNumber=' + docketNumber + '&inLibrary=' + inLibrary + '&afterFirstFetchDate=' + afterFirstFetchDate?.toISOString() + '&libraryDate=' + libraryDate?.toISOString() + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Secondary Documents of Docket Entries.
		 * Retrieve the secondary documents in the case with the specified caseId value.
		 * Get case/{caseId}/docketEntries/secondaryDocuments
		 * @param {number} docketNumber Retrieve the secondary documents associated with the specified docket number in the case with the specified caseId value.
		 * @param {boolean} inLibrary Retrieve the secondary documents in the with the specified inLibrary flag in the case with the specified caseId value.
		 * @param {Date} afterFirstFetchDate Retrieve all secondary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
		 * @param {Date} libraryDate Retrieve all secondary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {DocketEntrySecondaryDocuments} The request is recieved.
		 */
		GetSecondaryDocumentsForDocketEntries(docketNumber: number, inLibrary: boolean | null | undefined, afterFirstFetchDate: Date | null | undefined, libraryDate: Date | null | undefined, pageNumber: number | null | undefined): Observable<DocketEntrySecondaryDocuments> {
			return this.http.get<DocketEntrySecondaryDocuments>(this.baseUri + 'case/{caseId}/docketEntries/secondaryDocuments?docketNumber=' + docketNumber + '&inLibrary=' + inLibrary + '&afterFirstFetchDate=' + afterFirstFetchDate?.toISOString() + '&libraryDate=' + libraryDate?.toISOString() + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Documents for a requested Case ID.
		 * Gets Documents for a requested Case ID.
		 * Get case/{caseId}/documents
		 * @param {boolean} inLibrary Filter all the documents those are added to the UniCourt library.
		 * @param {Date} afterFirstFetchDate Get all the documents which were added to the case on or after a specific date.
		 * @param {Date} libraryDate Sort all the documents based on the date when the document was added to the UniCourt Library.
		 * @param {Date} firstFetchDate Sort all the documents based on the date it was fetched from the source site.
		 * @param {GetCaseDocketEntriesSortBy} sortBy Sort documents with document order.
		 * @param {number} pageNumber The page for which the result should be retrieved.
		 * @return {CaseDocuments} The request is recieved.
		 */
		GetCaseDocuments(inLibrary: boolean | null | undefined, afterFirstFetchDate: Date | null | undefined, libraryDate: Date | null | undefined, firstFetchDate: Date | null | undefined, sortBy: GetCaseDocketEntriesSortBy | null | undefined, pageNumber: number | null | undefined): Observable<CaseDocuments> {
			return this.http.get<CaseDocuments>(this.baseUri + 'case/{caseId}/documents?inLibrary=' + inLibrary + '&afterFirstFetchDate=' + afterFirstFetchDate?.toISOString() + '&libraryDate=' + libraryDate?.toISOString() + '&firstFetchDate=' + firstFetchDate?.toISOString() + '&sortBy=' + sortBy + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Hearings for a requested Case ID.
		 * Gets Hearings for a requested Case ID.
		 * Get case/{caseId}/hearings
		 * @param {GetCaseDocketEntriesSortBy} sortBy Specify the sort order of hearings in the case with the specified caseId.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {Hearings} The request is recieved.
		 */
		GetCaseHearings(sortBy: GetCaseDocketEntriesSortBy | null | undefined, pageNumber: number | null | undefined): Observable<Hearings> {
			return this.http.get<Hearings>(this.baseUri + 'case/{caseId}/hearings?sortBy=' + sortBy + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Judges for a requested Case ID.
		 * Retrieve the judges involved in the specified case.
		 * Get case/{caseId}/judges
		 * @param {boolean} isVisible Retrieve attorneys judges in the case with the specified caseId value whose isVisible flag is set to the specified value.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {Judges} The request is recieved.
		 */
		GetCaseJudges(isVisible: boolean | null | undefined, pageNumber: number | null | undefined): Observable<Judges> {
			return this.http.get<Judges>(this.baseUri + 'case/{caseId}/judges?isVisible=' + isVisible + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Parties for a requested Case ID.
		 * Retrieve the parties involved in the case with the specified caseId value.
		 * Get case/{caseId}/parties
		 * @param {boolean} isVisible Retrieve parties in the case with the specified caseId value whose isVisible flag is set to the specified value.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @param {string} partyRoleId Retrieve all parties with the specified partyRoleId value in the case with the specified caseId value.
		 * @param {string} partyRoleGroupId Retrieve all parties with the specified partyRoleGroupId value in the case with the specified caseId value.
		 * @param {string} attorneyRepresentationTypeId Retrieve all parties with the specified attorneyRepresentationTypeId value in the case with the specified caseId value.
		 * @param {PartyPartyClassificationType} partyClassificationType Retrieve all parties with the specified partyClassificationType value in the case with the specified caseId value.
		 * @return {Parties} The request is recieved.
		 */
		GetCaseParties(isVisible: boolean | null | undefined, pageNumber: number | null | undefined, partyRoleId: string | null | undefined, partyRoleGroupId: string | null | undefined, attorneyRepresentationTypeId: string | null | undefined, partyClassificationType: PartyPartyClassificationType | null | undefined): Observable<Parties> {
			return this.http.get<Parties>(this.baseUri + 'case/{caseId}/parties?isVisible=' + isVisible + '&pageNumber=' + pageNumber + '&partyRoleId=' + (partyRoleId == null ? '' : encodeURIComponent(partyRoleId)) + '&partyRoleGroupId=' + (partyRoleGroupId == null ? '' : encodeURIComponent(partyRoleGroupId)) + '&attorneyRepresentationTypeId=' + (attorneyRepresentationTypeId == null ? '' : encodeURIComponent(attorneyRepresentationTypeId)) + '&partyClassificationType=' + partyClassificationType, {});
		}

		/**
		 * Gets Related Cases for a requested Case ID.
		 * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
		 * Get case/{caseId}/relatedCases
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {RelatedCases} The request is recieved.
		 */
		GetCaseRelatedCases(pageNumber: number | null | undefined): Observable<RelatedCases> {
			return this.http.get<RelatedCases>(this.baseUri + 'case/{caseId}/relatedCases?pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Area Of Law.
		 * Get Case Count Analytics by Area Of Law.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by Area Of Law of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByAreaOfLaw
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByAreaOfLawResponse} OK
		 */
		GetCaseCountAnalyticsByAreaOfLaw(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByAreaOfLawResponse> {
			return this.http.get<CaseCountAnalyticsByAreaOfLawResponse>(this.baseUri + 'caseCountAnalyticsByAreaOfLaw?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Case Class.
		 * Get Analytics by Case Class.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by Case Class  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCaseClass
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCaseClassResponse} OK
		 */
		GetCaseCountAnalyticsByCaseClass(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCaseClassResponse> {
			return this.http.get<CaseCountAnalyticsByCaseClassResponse>(this.baseUri + 'caseCountAnalyticsByCaseClass?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Case Filed Date.
		 * Get Case Count Analytics grouped by Filing Date.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by case filed date of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCaseFiledDate
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @param {CaseCountAnalyticsByCaseFiledDateGroupedBy} groupBy GroupBy
		 * @return {CaseCountAnalyticsByCaseFiledDateResponse} OK
		 */
		GetCaseCountAnalyticsByCaseFiledDate(q: string | null | undefined, pageNumber: number, groupBy: CaseCountAnalyticsByCaseFiledDateGroupedBy): Observable<CaseCountAnalyticsByCaseFiledDateResponse> {
			return this.http.get<CaseCountAnalyticsByCaseFiledDateResponse>(this.baseUri + 'caseCountAnalyticsByCaseFiledDate?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&groupBy=' + groupBy, {});
		}

		/**
		 * Case Count Analytics by Case Type.
		 * Get Case Count Analytics by Case Type.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by case types  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCaseType
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCaseTypeResponse} OK
		 */
		GetCaseCountAnalyticsByCaseType(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCaseTypeResponse> {
			return this.http.get<CaseCountAnalyticsByCaseTypeResponse>(this.baseUri + 'caseCountAnalyticsByCaseType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Case Type Group.
		 * Get Analytics by Case Type Group.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by case type catgeory of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCaseTypeGroup
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCaseTypeGroupResponse} OK
		 */
		GetCaseCountAnalyticsByCaseTypeGroup(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCaseTypeGroupResponse> {
			return this.http.get<CaseCountAnalyticsByCaseTypeGroupResponse>(this.baseUri + 'caseCountAnalyticsByCaseTypeGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Court.
		 * Get Case Count Analytics grouped by Court.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by Court of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCourt
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCourtResponse} OK
		 */
		GetCaseCountAnalyticsByCourt(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCourtResponse> {
			return this.http.get<CaseCountAnalyticsByCourtResponse>(this.baseUri + 'caseCountAnalyticsByCourt?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Court Location.
		 * Get Case Count Analytics grouped by Court Location.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by court location  of all cases with court id CORTV4vCEaKrhystBz and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=courtId:"CORTV4vCEaKrhystBz" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCourtLocation
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCourtLocationResponse} OK
		 */
		GetCaseCountAnalyticsByCourtLocation(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCourtLocationResponse> {
			return this.http.get<CaseCountAnalyticsByCourtLocationResponse>(this.baseUri + 'caseCountAnalyticsByCourtLocation?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Court System.
		 * Get Case Count Analytics grouped by Court System.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by court system of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCourtSystem
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCourtSystemResponse} OK
		 */
		GetCaseCountAnalyticsByCourtSystem(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCourtSystemResponse> {
			return this.http.get<CaseCountAnalyticsByCourtSystemResponse>(this.baseUri + 'caseCountAnalyticsByCourtSystem?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by CourtType.
		 * Get Case Count Analytics grouped by Court Type.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by court type  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByCourtType
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByCourtTypeResponse} OK
		 */
		GetCaseCountAnalyticsByCourtType(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByCourtTypeResponse> {
			return this.http.get<CaseCountAnalyticsByCourtTypeResponse>(this.baseUri + 'caseCountAnalyticsByCourtType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Jurisdiction Geo.
		 * Get Case Count Analytics grouped by Jurisdiction Geo.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by jurisdiction geo of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByJurisdictionGeo
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByJurisdictionGeoResponse} OK
		 */
		GetCaseCountAnalyticsByJurisdictionGeo(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByJurisdictionGeoResponse> {
			return this.http.get<CaseCountAnalyticsByJurisdictionGeoResponse>(this.baseUri + 'caseCountAnalyticsByJurisdictionGeo?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Attorney.
		 * Returns Case Analytics by Attorney.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm attorney of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByNormAttorney
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormAttorneyResponse} OK
		 */
		GetCaseCountAnalyticsByNormAttorney(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormAttorneyResponse> {
			return this.http.get<CaseCountAnalyticsByNormAttorneyResponse>(this.baseUri + 'caseCountAnalyticsByNormAttorney?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Judge.
		 * Returns Case Analytics by Judge.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm judge of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByNormJudge
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormJudgeResponse} OK
		 */
		GetCaseCountAnalyticsByNormJudge(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormJudgeResponse> {
			return this.http.get<CaseCountAnalyticsByNormJudgeResponse>(this.baseUri + 'caseCountAnalyticsByNormJudge?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Norm Law Firm.
		 * Returns Case Analytics by Norm Law Firm.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm lawfirm  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByNormLawFirm
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormLawFirmResponse} OK
		 */
		GetCaseCountAnalyticsByNormLawFirm(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormLawFirmResponse> {
			return this.http.get<CaseCountAnalyticsByNormLawFirmResponse>(this.baseUri + 'caseCountAnalyticsByNormLawFirm?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Party.
		 * Returns Case Analytics by Party.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm party of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByNormParty
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormPartyResponse} OK
		 */
		GetCaseCountAnalyticsByNormParty(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormPartyResponse> {
			return this.http.get<CaseCountAnalyticsByNormPartyResponse>(this.baseUri + 'caseCountAnalyticsByNormParty?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Party Role.
		 * Returns Case Analytics by Party Type.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by party role of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByPartyRole
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByPartyRoleResponse} OK
		 */
		GetCaseCountAnalyticsByPartyRole(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByPartyRoleResponse> {
			return this.http.get<CaseCountAnalyticsByPartyRoleResponse>(this.baseUri + 'caseCountAnalyticsByPartyRole?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Party Role Group.
		 * Returns Case Analytics by Party Type Group.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by Party Role Group of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get caseCountAnalyticsByPartyRoleGroup
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByPartyRoleGroupResponse} OK
		 */
		GetCaseCountAnalyticsByPartyRoleGroup(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByPartyRoleGroupResponse> {
			return this.http.get<CaseCountAnalyticsByPartyRoleGroupResponse>(this.baseUri + 'caseCountAnalyticsByPartyRoleGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets details for a requested Document ID.
		 * Gets details for a requested Document ID.
		 * Get caseDocument/{caseDocumentId}
		 * @return {CaseDocument} The request is recieved.
		 */
		GetDocumentById(): Observable<CaseDocument> {
			return this.http.get<CaseDocument>(this.baseUri + 'caseDocument/{caseDocumentId}', {});
		}

		/**
		 * Gets downloadable URL for a requested Document ID.
		 * Gets downloadable URL for a requested Document ID.
		 * Get caseDocumentDownload/{caseDocumentId}
		 * @param {boolean} isPreviewDocument If the document you want to download is a preview of a document.
		 * @return {DocumentDownload} The request is recieved.
		 */
		GetCaseDocumentDownloadById(isPreviewDocument: boolean | null | undefined): Observable<DocumentDownload> {
			return this.http.get<DocumentDownload>(this.baseUri + 'caseDocumentDownload/{caseDocumentId}?isPreviewDocument=' + isPreviewDocument, {});
		}

		/**
		 * Add Case Document Order for requested Document Ids.
		 * Add Case Document Order for requested Document Ids.
		 * Put caseDocumentOrder
		 * @param {CaseDocumentOrderRequest} requestBody If the Case Document Order is for Preview, then the value for ``isPreviewOnly`` should be ``true`` else ``false``.
		 * @return {CaseDocumentOrderCallback} OK
		 */
		OrderCaseDocument(requestBody: CaseDocumentOrderRequest): Observable<CaseDocumentOrderCallback> {
			return this.http.put<CaseDocumentOrderCallback>(this.baseUri + 'caseDocumentOrder', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Case Document Order Callback list for a requested Date.
		 * Get Case Document Order Callback list for a requested Date.
		 * Get caseDocumentOrder/callbacks
		 * @param {Date} date Date for which fetch the Case Document Order Callback list. By default, the date will be set to current date.
		 * @param {GetCallbacksStatus} status Status of Document Order callbacks. Default status will fetch all callbacks.
		 * @param {number} pageNumber Page to fetch the Case Document Order Callback list.<br>
		 *   - Minimum: 1
		 * @return {CaseDocumentOrderCallbackListResponse} OK
		 */
		GetCaseDocumentOrderCallbacks(date: Date | null | undefined, status: GetCallbacksStatus | null | undefined, pageNumber: number | null | undefined): Observable<CaseDocumentOrderCallbackListResponse> {
			return this.http.get<CaseDocumentOrderCallbackListResponse>(this.baseUri + 'caseDocumentOrder/callbacks?date=' + date?.toISOString() + '&status=' + status + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Get Case Document Order Callback for a requested Case Document Order Callback Id.
		 * Get Case Document Order Callback for a requested Case Document Order Callback Id.
		 * Get caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}
		 * @return {CaseDocumentOrderCallback} OK
		 */
		GetCaseDocumentOrderCallbackById(): Observable<CaseDocumentOrderCallback> {
			return this.http.get<CaseDocumentOrderCallback>(this.baseUri + 'caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}', {});
		}

		/**
		 * Get Case Export Callback list for a requested Date.
		 * Retrieve callbacks according to the specified criteria.
		 * Get caseExport/callbacks
		 * @param {Date} date The date for which callbacks are to be retrieved.
		 * @param {GetCallbacksStatus} status The status code of the callbacks to be retrieved.
		 * @param {number} pageNumber The page number of the callbacks to be retrieved.<br>
		 *   - Minimum: 1
		 * @return {CaseExportCallbackListResponse} OK
		 */
		GetCaseExportCallbacks(date: Date | null | undefined, status: GetCallbacksStatus | null | undefined, pageNumber: number | null | undefined): Observable<CaseExportCallbackListResponse> {
			return this.http.get<CaseExportCallbackListResponse>(this.baseUri + 'caseExport/callbacks?date=' + date?.toISOString() + '&status=' + status + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Get Case Export Callback for a requested Case Export Callback Id.
		 * Retrieve the specified case export callback object.
		 * Get caseExport/callbacks/{caseExportCallbackId}
		 * @return {CaseExportCallback} OK
		 */
		GetCaseExportCallbackById(): Observable<CaseExportCallback> {
			return this.http.get<CaseExportCallback>(this.baseUri + 'caseExport/callbacks/{caseExportCallbackId}', {});
		}

		/**
		 * Gets case exported for a requested Case ID.
		 * Retrieve information about the specified case export.
		 * Get caseExport/{caseId}
		 * @return {CaseExportCallback} The request is recieved.
		 */
		ExportCase(): Observable<CaseExportCallback> {
			return this.http.get<CaseExportCallback>(this.baseUri + 'caseExport/{caseId}', {});
		}

		/**
		 * Case search.
		 * This endpoint retrieves cases according to keyword expressions you provide.
		 * <br>
		 * Keyword expressions are constructed according to the rules described below.
		 * <br><br>
		 * This API supports multiple use cases:
		 * - Search for multiple keywords  `Google OR Facebook`.
		 * - Search within particular attributes.
		 * - Relational search using terms and connectors.
		 * - And much more.
		 * ----
		 * ## Allowed Connectors in Keyword Expressions
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find cases containing each of the terms joined by AND connectors.|**personal AND injury**|
		 * | **OR**  |Find cases containing any of the terms joined by OR connectors.|**order OR decision**|
		 * | **NOT** |Find cases that do not contain the specified term.|**personal AND NOT injury**.  Find cases with the word “personal” and not “injury”.|
		 * | **“[phrase]”** |Find the exact phrase placed between the quotation marks.|**"personal injury”**|
		 * | **~**  |Find cases in which the specified words appear near each other. For example, "personal injury" ~ 5 targets cases in which the word "personal" appears within 5 words of the word "injury".|**“personal injury” ~ 5** - Find cases with “personal” within five words of “injury”. |
		 * | **( … )** |Specifies the order in which connectors are to be appliied in a keyword expression.| **personal AND (injury OR fall)** - Find cases with the word personal injury or personal fall.|
		 * <br><br>
		 * ## Fields and Connectors Searching
		 * | Filed | Description  | Example |
		 * | ------| ------|------|
		 * |**caseNumber** |Find cases with the specified case number (i.e., docket number).| **caseNumber:"2020-L-007212"** - Find cases whose case number matches given case number number.|
		 * |**caseName** |Find cases with the specified case title.| **caseName:"THOMAS P. CARNEY, INC. VS BEHLER JAMES Et Al"** - Find cases whose case name matches given terms.|
		 * |**Court**|Find cases in the specified court.|**(Court:(name:(New York)))** - Find cases in New York state.<br>|
		 * |**CaseStatus**|Find cases witih the specified case status.|**(CaseStatus:(name:Disposed))** - All disposed cases.<br>|
		 * |**CaseType**|Find cases of the specified case type. | **(CaseType:(name:Property))** - Cases with case type “property”.|
		 * |**Party** | Find cases involving the specified party.| **(Party:(name:Apple))** - Find cases involving Apple. |
		 * |**partyId**|Find cases involving a party with the specified partyId value.|**(Party:(partyId:"PRTYgu1ffe866484c2"))**|
		 * |**PartyRole** | Find cases in which at least one party has the specified party role. | **(Party:((PartyRole:(name:"plaintiff"))))** - Find cases with party role “plaintiff”.<br><br> **(Party:((PartyRole:(name:defendant)) AND (AttorneyRepresentationType:(name:(Attorney represented)))))** - Find cases where a party is acting as defendant and represented by an attorney.|
		 * |**AttorneyRepresentationType**| Find cases in which at least one party has the specified attorney representation type.|**(Party:(AttorneyRepresentationType:(name:"attorney represented")))** - Find cases where a party is represented by an attorney. |
		 * |**Attorney** | Find cases involving the specified attorney. | **(Attorney:(name:"David Boies"))** - Find cases involving the attorney David Boies. |
		 * |**AttorneyType**|Find cases involving at least one attorney of the specified attorney type.|**(Attorney:((AttorneyType:(name:"Lead Attorney"))))**|
		 * |**Judge** |Find cases involving the specified judge. | **(Judge:(name:"Posner"))** - Find cases involving Judge Posner.|
		 * |**JudgeType**|Find cases involving at least one judge of the specified judge type.|**(Judge:((JudgeType:(name:"Magistrate"))))**|
		 * |**CaseStats**|Find cases with the specified case statistics.|**(CaseStats:(partyCount:[10 TO 100]))** - Find cases involving 10 to 100 parties.<br>**(CaseStats:(attorneyCount:[2 TO 40]))** - Find cases involving 2 to 40 attorneys.<br>**(CaseStats:(judgeCount:[\* TO 2]))** - Find cases involving up to 2 judges. <br>**(CaseStats:(docketEntryCount:[10 TO 100]))** - Find cases having 10 to 100 docket_entries. <br>**(CaseStats:(allCaseDocumentCount:[10 TO 100]))** - Find cases having 10 to 100 documents. |
		 * |**filedDate** | Find cases that were filed on the specified date or within the specified date range. | **filedDate:[2020-03-15 TO 2021-12-01]** - Find the most recently filed cases between March 15, 2020 and December 1, 2021 (inclusive). |
		 * |**lastFetchDate**| Find cases in which UniCourt last checked for updates on the specified date or within the specified date range. |**(lastFetchDate:[now-60d TO \*\])** - Find cases that were updated by UniCourt in the last 60 days. |
		 * |**lastFetchDateWithUpdates**|Find cases in which UniCourt last detected an update on the specified date or within the specified date range.|**(lastFetchDateWithUpdates:[now-6d TO \*\])** - Find cases for the changes found on court site in last 6 days.|
		 * |**participantsLastFetchDate**|Find cases in which information cocnerning participants was last updated on the specified date or within the specified date range.|**(participantsLastFetchDate:[now-6d TO \*\])** - Find cases where the participant's information was updated in last 6 days.|
		 * |**DocketEntry**|Find cases in which at least one docket entry contains the specified text.|**(DocketEntry:(text:(Motion to Compel Responses) AND docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00]))** - Find cases with docket text “Motion to Compel Responses” and action date between 2020-01-01 and 2020-05-01.|
		 * |**docketEntryDate**|Find cases in which at least one docket entry was made on the specified date or within the specified date range.|**(DocketEntry:(docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00])) AND (CaseStats:(allCaseDocumentCount:[0 TO 10]))** - Find cases with docket action date between 2020-01-01 and 2020-05-01 having up to 10 documents associated with it.|
		 * |**HearingDate**| Find cases with at least one hearing scheduled for the specified date or within the specified date range.|**(Hearing:(hearingDate:[now TO now+10d]))** - Find cases where hearing is scheduled in next 10 days.|
		 * |**HearingDate**| Search for cases where hearing is going to happen in 10 to 20days.|**(Hearing:(hearingDate:[now+10d TO now+20d]))** - Find cases where hearing is scheduled in next 10 to 20 days.|
		 * |**JurisdictionGeo**|Find cases in which the law of the specified state governs.|**(JurisdictionGeo:(state:"New York"))**- Find cases where Jurisdiction is New York state.|
		 * |**Party Address Exists**|Find cases with Party addresses.|**(Party:(Contact:(Address:(stateName:\*))))**- Returns only those cases that have addresses for parties.|
		 * |**Document**|Find cases with specific document name and preview is available for the document.|**(CaseDocument:(name:"civil case cover sheet" AND isPreviewAvailable:true))**- Returns cases with document civil case cover sheet and preview is available.|
		 * <br><br>
		 * ---
		 * ## Party Sub Filter Examples
		 * |Example |Explanation |
		 * |---|---|
		 * |**(Party:(name:google AND (PartyRole:(name:"plaintiff"))))**|Find cases involving at least one plaintiff whose name contains the term "Google".|
		 * |**(Party:(name:"OTELIA PEREIDA" AND (AttorneyRepresentationType:(name:"Attorney represented")))) AND (Attorney:(name:"Law Offices of Todd M Friedman"))**|Find cases where the Party is *OTELIA PEREIDA* and is represented by the attorney *Law Offices of Todd M Friedman*.|
		 * ---
		 * ### All query parameters supported for this API can be found in below schema section. Schema -->  CaseSearchQueryObject
		 * Get caseSearch
		 * @param {string} q Query parameter for keyword expressions.</a>
		 * @param {SearchCasesSort} sort Query parameter specifying how results are to be sorted. Results can be sorted according to filedDate or relevancy.
		 * @param {SearchCasesOrder} order Query parameter specifying whether search result are sorted in ascending or descending order.
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {CaseSearchResponse} Success
		 */
		SearchCases(q: string, sort: SearchCasesSort | null | undefined, order: SearchCasesOrder | null | undefined, pageNumber: number | null | undefined): Observable<CaseSearchResponse> {
			return this.http.get<CaseSearchResponse>(this.baseUri + 'caseSearch?q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case search results for a given caseSearchId.
		 * Retrieve the search results corresponding to the specified caseSearchId value.
		 * Get caseSearch/{caseSearchId}
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {CaseSearchResponse} Success
		 */
		SearchCasesById(pageNumber: number | null | undefined): Observable<CaseSearchResponse> {
			return this.http.get<CaseSearchResponse>(this.baseUri + 'caseSearch/{caseSearchId}?pageNumber=' + pageNumber, {});
		}

		/**
		 * Add Case Track for the requested Case Id.
		 * Track the specified case.
		 * Put caseTrack
		 * @return {Success} OK
		 */
		TrackCase(requestBody: CaseTrackRequest): Observable<Success> {
			return this.http.put<Success>(this.baseUri + 'caseTrack', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove Case Track for a specific Case Id.
		 * Remove Case Track for a specific Case Id.
		 * Delete caseTrack/{caseId}
		 * @return {Success} OK
		 */
		RemoveCaseTrackById(): Observable<Success> {
			return this.http.delete<Success>(this.baseUri + 'caseTrack/{caseId}', {});
		}

		/**
		 * Get Case Track for a requested Case Id.
		 * Retrieve case tracking information for the specified caseId value.
		 * Get caseTrack/{caseId}
		 * @return {CaseTrack} OK
		 */
		GetCaseTrackById(): Observable<CaseTrack> {
			return this.http.get<CaseTrack>(this.baseUri + 'caseTrack/{caseId}', {});
		}

		/**
		 * Get Case Track list.
		 * Retrieve a list of all tracked cases.
		 * Get caseTracks
		 * @param {Date} lastFetchDate The lastFetchDate value of the tracked case. The date value should be entered in the format YYYY-MM-DDTHH:MM:SS+ZZ:zz.
		 * @param {Date} lastFetchDateWithUpdates The date on which changes were last found in the case information.
		 * @param {number} pageNumber The page number of the results to be retrieved.<br>
		 *   - Minimum: 1
		 * @return {CaseTrackListResponse} OK
		 */
		GetCaseTracks(lastFetchDate: Date | null | undefined, lastFetchDateWithUpdates: Date | null | undefined, pageNumber: number | null | undefined): Observable<CaseTrackListResponse> {
			return this.http.get<CaseTrackListResponse>(this.baseUri + 'caseTracks?lastFetchDate=' + lastFetchDate?.toISOString() + '&lastFetchDateWithUpdates=' + lastFetchDateWithUpdates?.toISOString() + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Add Case Update for the requested Case Id.
		 * Request case updates for the specified case.
		 * Put caseUpdate
		 * @return {CaseUpdate} OK
		 */
		UpdateCase(requestBody: CaseUpdateRequest): Observable<CaseUpdate> {
			return this.http.put<CaseUpdate>(this.baseUri + 'caseUpdate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Case Updates for a requested CaseId.
		 * Retrieve case updates for the specified case object.
		 * Get caseUpdate/{caseId}
		 * @return {CaseUpdate} OK
		 */
		GetCaseUpdateByCaseId(): Observable<CaseUpdate> {
			return this.http.get<CaseUpdate>(this.baseUri + 'caseUpdate/{caseId}', {});
		}

		/**
		 * Get Case Update  list for a requested Date.
		 * Retrieve case updates for the specified date.
		 * Get caseUpdates
		 * @param {string} caseId The caseId value of the case for which updates should be retrieved.
		 * @param {Date} requestedDate The date for which case updates are to be retrieved.
		 * @param {GetCallbacksStatus} status Status of the case updates to be retrieved.
		 * @param {number} pageNumber The page number of the callbacks to be retrieved.<br>
		 *   - Minimum: 1
		 * @return {CaseUpdateListResponse} OK
		 */
		GetCaseUpdates(caseId: string | null | undefined, requestedDate: Date | null | undefined, status: GetCallbacksStatus | null | undefined, pageNumber: number | null | undefined): Observable<CaseUpdateListResponse> {
			return this.http.get<CaseUpdateListResponse>(this.baseUri + 'caseUpdates?caseId=' + (caseId == null ? '' : encodeURIComponent(caseId)) + '&requestedDate=' + requestedDate?.toISOString() + '&status=' + status + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Gets Court Coverage of all courts of specific type.
		 * Determine whether the specified court is covered by UniCourt.
		 * Get courtCoverage/{courtId}
		 * @return {CourtCoverage} The request is received.
		 */
		GetCourtCoverage(): Observable<CourtCoverage> {
			return this.http.get<CourtCoverage>(this.baseUri + 'courtCoverage/{courtId}', {});
		}

		/**
		 * Get API usage for a requested Date.
		 * An endpoint to obtain information on API usage for a specific day.
		 * Get dailyUsage/{date}
		 * @return {DailyUsageResponse} OK
		 */
		GetDailyUsageByDate(): Observable<DailyUsageResponse> {
			return this.http.get<DailyUsageResponse>(this.baseUri + 'dailyUsage/{date}', {});
		}

		/**
		 * Generate new token to access API.
		 * This endpoint allows you to generate a new access token, which is a required field for all UniCourt API endpoints except for the Authentication API. To generate a new token, you must provide your Client ID and Client Secret ID which you can find by logging into your UniCourt account. At any time, you can have a maximum of 10 active access tokens. The tokens never expire and, if you make a request which would otherwise lead to you having more than 10 active tokens, you will receive an error message.
		 * Post generateNewToken
		 * @param {AccessTokenRequest} requestBody The endpoint accepts your Client ID and Client Secret ID as part of the request.
		 * @return {AccessTokenResponse} OK
		 */
		GenerateNewToken(requestBody: AccessTokenRequest): Observable<AccessTokenResponse> {
			return this.http.post<AccessTokenResponse>(this.baseUri + 'generateNewToken', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * API to invalidate all access tokens.
		 * An endpoint which allows you to invalidate all existing access tokens associated with your UniCourt account.
		 * Put invalidateAllTokens
		 * @param {AccessTokenRequest} requestBody The endpoint accepts your Client ID and Secret Client ID as part of the request.
		 * @return {Success} OK
		 */
		InvalidateAllTokens(requestBody: AccessTokenRequest): Observable<Success> {
			return this.http.put<Success>(this.baseUri + 'invalidateAllTokens', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * API to invalidate the access token.
		 * An endpoint which allows you to invalidate a given access token.
		 * Put invalidateToken
		 * @param {InvalidateAccessTokenRequest} requestBody The endpoint accepts your Client ID, Client Secret ID and the Token ID for the access token you wish to invalidate as part of the request. You can obtain a list of all Token IDs from the /listAllTokenIds endpoint within this API.
		 * @return {Success} OK
		 */
		InvalidateToken(requestBody: InvalidateAccessTokenRequest): Observable<Success> {
			return this.http.put<Success>(this.baseUri + 'invalidateToken', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets details for a requested Judge ID.
		 * Retrieve the judge with the specified judgeId value.
		 * Get judge/{judgeId}
		 * @return {Judge} The request is recieved.
		 */
		GetJudgeById(): Observable<Judge> {
			return this.http.get<Judge>(this.baseUri + 'judge/{judgeId}', {});
		}

		/**
		 * API to list all the access tokens Id.
		 * An endpoint which allows you to view all active access tokens associated with your Client ID and Client Secret ID.
		 * Put listAllTokenIds
		 * @param {AccessTokenRequest} requestBody The endpoint accepts your Client ID and Client Secret ID as part of the request.
		 * @return {AccessTokenIdListResponse} OK
		 */
		ListAllTokenIds(requestBody: AccessTokenRequest): Observable<AccessTokenIdListResponse> {
			return this.http.put<AccessTokenIdListResponse>(this.baseUri + 'listAllTokenIds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * AreaOfLaw Object.
		 * The keyword expression targeting the desired area of law.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject
		 * Get masterData/areaOfLaw
		 * @param {string} q Retrieve one or more areas of law using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {AreaOfLawResponse} Success
		 */
		GetAreasOfLaw(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<AreaOfLawResponse> {
			return this.http.get<AreaOfLawResponse>(this.baseUri + 'masterData/areaOfLaw?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * AreaOfLaw Object for the given AreaOfLaw Id.
		 * Retrieve the specified area of law.
		 * Get masterData/areaOfLaw/{areaOfLawId}
		 * @return {AreaOfLaw} Success
		 */
		GetAreaOfLaw(): Observable<AreaOfLaw> {
			return this.http.get<AreaOfLaw>(this.baseUri + 'masterData/areaOfLaw/{areaOfLawId}', {});
		}

		/**
		 * Attorney Representation Type Object.
		 * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject
		 * Get masterData/attorneyRepresentationType
		 * @param {string} q The keyword expression targeting the attorney representation type.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {AttorneyRepresentationTypeResponse} Success
		 */
		GetAttorneyRepresentationTypes(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<AttorneyRepresentationTypeResponse> {
			return this.http.get<AttorneyRepresentationTypeResponse>(this.baseUri + 'masterData/attorneyRepresentationType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Attorney Representation Type Object for the given attorneyRepresentationTypeId.
		 * Retrieve the specified attorney representation type.
		 * Get masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}
		 * @return {AttorneyRepresentationType} Success
		 */
		GetAttorneyRepresentationType(): Observable<AttorneyRepresentationType> {
			return this.http.get<AttorneyRepresentationType>(this.baseUri + 'masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}', {});
		}

		/**
		 * Attorney Type Object.
		 * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject
		 * Get masterData/attorneyType
		 * @param {string} q The keyword expression targeting the attorney type.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {AttorneyTypeResponse} Success
		 */
		GetAttorneyTypes(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<AttorneyTypeResponse> {
			return this.http.get<AttorneyTypeResponse>(this.baseUri + 'masterData/attorneyType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Attorney Type Object for given Attorney Type Id.
		 * Retrieve a specified attorney type object.
		 * Get masterData/attorneyType/{attorneyTypeId}
		 * @return {AttorneyType} Success
		 */
		GetAttorneyType(): Observable<AttorneyType> {
			return this.http.get<AttorneyType>(this.baseUri + 'masterData/attorneyType/{attorneyTypeId}', {});
		}

		/**
		 * Case Class Object.
		 * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject
		 * Get masterData/caseClass
		 * @param {string} q The keyword expression targeting the desired case class.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CaseClassResponse} Success
		 */
		GetCasesClass(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CaseClassResponse> {
			return this.http.get<CaseClassResponse>(this.baseUri + 'masterData/caseClass?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Case Class Object for the given Case Class Id.
		 * Retrieve the specified case class.
		 * Get masterData/caseClass/{caseClassId}
		 * @return {CaseClass} Success
		 */
		GetCaseClass(): Observable<CaseClass> {
			return this.http.get<CaseClass>(this.baseUri + 'masterData/caseClass/{caseClassId}', {});
		}

		/**
		 * Case Relationship Type Object.
		 * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject
		 * Get masterData/caseRelationshipType
		 * @param {string} q The keyword expression targeting the case relationship type.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CaseRelationshipTypeResponse} Success
		 */
		GetCaseRelationshipTypes(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CaseRelationshipTypeResponse> {
			return this.http.get<CaseRelationshipTypeResponse>(this.baseUri + 'masterData/caseRelationshipType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Case Relationship Type Object for the given caseRelationshipTypeId.
		 * Retrieve the specified case relationship type.
		 * Get masterData/caseRelationshipType/{caseRelationshipTypeId}
		 * @return {CaseRelationshipType} Success
		 */
		GetCaseRelationshipType(): Observable<CaseRelationshipType> {
			return this.http.get<CaseRelationshipType>(this.baseUri + 'masterData/caseRelationshipType/{caseRelationshipTypeId}', {});
		}

		/**
		 * Case Status Object.
		 * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject
		 * Get masterData/caseStatus
		 * @param {string} q The keyword expression targeting the desired case status.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CaseStatusResponse} Success
		 */
		GetCasesStatus(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CaseStatusResponse> {
			return this.http.get<CaseStatusResponse>(this.baseUri + 'masterData/caseStatus?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Returns the caseStatus information for the given caseStatusId.
		 * Retrieve the specified case status.
		 * Get masterData/caseStatus/{caseStatusId}
		 * @return {CaseStatus} Success
		 */
		GetCaseStatus(): Observable<CaseStatus> {
			return this.http.get<CaseStatus>(this.baseUri + 'masterData/caseStatus/{caseStatusId}', {});
		}

		/**
		 * Case Status Group Object.
		 * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject
		 * Get masterData/caseStatusGroup
		 * @param {string} q The keyword expression targeting the desired case status group.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CaseStatusGroupResponse} Success
		 */
		GetCaseStatusGroups(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CaseStatusGroupResponse> {
			return this.http.get<CaseStatusGroupResponse>(this.baseUri + 'masterData/caseStatusGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Returns the caseStatusGroup information for the given caseStatusGroupId.
		 * Retrieve the specified case status group.
		 * Get masterData/caseStatusGroup/{caseStatusGroupId}
		 * @return {CaseStatusGroup} Success
		 */
		GetCaseStatusGroup(): Observable<CaseStatusGroup> {
			return this.http.get<CaseStatusGroup>(this.baseUri + 'masterData/caseStatusGroup/{caseStatusGroupId}', {});
		}

		/**
		 * Case Type Object.
		 * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject
		 * Get masterData/caseType
		 * @param {string} q Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CaseTypeResponse} Success
		 */
		GetCaseTypes(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CaseTypeResponse> {
			return this.http.get<CaseTypeResponse>(this.baseUri + 'masterData/caseType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * CaseType Object for given Case Type Id.
		 * Retrieve the specified case type.
		 * Get masterData/caseType/{caseTypeId}
		 * @return {CaseType} Success
		 */
		GetCaseType(): Observable<CaseType> {
			return this.http.get<CaseType>(this.baseUri + 'masterData/caseType/{caseTypeId}', {});
		}

		/**
		 * CaseTypeGroup Object.
		 * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject
		 * Get masterData/caseTypeGroup
		 * @param {string} q Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CaseTypeGroupResponse} Success
		 */
		GetCaseTypeGroups(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CaseTypeGroupResponse> {
			return this.http.get<CaseTypeGroupResponse>(this.baseUri + 'masterData/caseTypeGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * CaseType Group for the given CaseType Group Id.
		 * Retrieve the specified case type group.
		 * Get masterData/caseTypeGroup/{caseTypeGroupId}
		 * @return {CaseTypeGroup} Success
		 */
		GetCaseTypeGroup(): Observable<CaseTypeGroup> {
			return this.http.get<CaseTypeGroup>(this.baseUri + 'masterData/caseTypeGroup/{caseTypeGroupId}', {});
		}

		/**
		 * CauseOfAction Object.
		 * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject
		 * Get masterData/causeOfAction
		 * @param {string} q The keyword expression targeting the desired cause of action.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CauseOfActionResponse} Success
		 */
		GetCausesOfAction(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CauseOfActionResponse> {
			return this.http.get<CauseOfActionResponse>(this.baseUri + 'masterData/causeOfAction?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * CauseOfAction Object for the given causeOfActionId.
		 * Retrieve the specified cause of action.
		 * Get masterData/causeOfAction/{causeOfActionId}
		 * @return {CauseOfAction} Success
		 */
		GetCauseOfAction(): Observable<CauseOfAction> {
			return this.http.get<CauseOfAction>(this.baseUri + 'masterData/causeOfAction/{causeOfActionId}', {});
		}

		/**
		 * CauseOfActionAdditionaData Object.
		 * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject
		 * Get masterData/causeOfActionAdditionalData
		 * @param {string} q The keyword expression targeting the desired cause of action additional data.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CauseOfActionAdditionalDataResponse} Success
		 */
		GetCausesOfActionAdditionalData(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CauseOfActionAdditionalDataResponse> {
			return this.http.get<CauseOfActionAdditionalDataResponse>(this.baseUri + 'masterData/causeOfActionAdditionalData?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
		 * Retrieve the specified cause of action additional data.
		 * Get masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}
		 * @return {CauseOfActionAdditionalData} Success
		 */
		GetCauseOfActionAdditionalData(): Observable<CauseOfActionAdditionalData> {
			return this.http.get<CauseOfActionAdditionalData>(this.baseUri + 'masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}', {});
		}

		/**
		 * CauseOfActionGroup Object.
		 * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject
		 * Get masterData/causeOfActionGroup
		 * @param {string} q The keyword expression targeting the desired cause of action group.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CauseOfActionGroupResponse} Success
		 */
		GetCausesOfActionGroup(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CauseOfActionGroupResponse> {
			return this.http.get<CauseOfActionGroupResponse>(this.baseUri + 'masterData/causeOfActionGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * CauseOfActionGroup Object for the given causeOfActionGroupId.
		 * Retrieve the specified cause of action group.
		 * Get masterData/causeOfActionGroup/{causeOfActionGroupId}
		 * @return {CauseOfActionGroup} Success
		 */
		GetCauseOfActionGroup(): Observable<CauseOfActionGroup> {
			return this.http.get<CauseOfActionGroup>(this.baseUri + 'masterData/causeOfActionGroup/{causeOfActionGroupId}', {});
		}

		/**
		 * Charge Object.
		 * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject
		 * Get masterData/charge
		 * @param {string} q The keyword expression targeting the desired charge.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {ChargeResponse} Success
		 */
		GetCharges(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<ChargeResponse> {
			return this.http.get<ChargeResponse>(this.baseUri + 'masterData/charge?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Charge Object for the given chargeId.
		 * Retrieve the specified charge.
		 * Get masterData/charge/{chargeId}
		 * @return {Charge} Success
		 */
		GetCharge(): Observable<Charge> {
			return this.http.get<Charge>(this.baseUri + 'masterData/charge/{chargeId}', {});
		}

		/**
		 * Charge Additional Data Object.
		 * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject
		 * Get masterData/chargeAdditionalData
		 * @param {string} q The keyword expression targeting the desired charge additional data.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {ChargeAdditionalDataResponse} Success
		 */
		GetChargesAdditionalData(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<ChargeAdditionalDataResponse> {
			return this.http.get<ChargeAdditionalDataResponse>(this.baseUri + 'masterData/chargeAdditionalData?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Charge Additional Data Object for the given chargeAdditionalDataId.
		 * Retrieve the specified charge additional data.
		 * Get masterData/chargeAdditionalData/{chargeAdditionalDataId}
		 * @return {ChargeAdditionalData} Success
		 */
		GetChargeAdditionalData(): Observable<ChargeAdditionalData> {
			return this.http.get<ChargeAdditionalData>(this.baseUri + 'masterData/chargeAdditionalData/{chargeAdditionalDataId}', {});
		}

		/**
		 * ChargeDegree Object.
		 * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject
		 * Get masterData/chargeDegree
		 * @param {string} q The keyword expression targeting the desired charge degree.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {ChargeDegreeResponse} Success
		 */
		GetChargesDegree(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<ChargeDegreeResponse> {
			return this.http.get<ChargeDegreeResponse>(this.baseUri + 'masterData/chargeDegree?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * ChargeDegree Object for the given chargeDegreeId.
		 * Retrieve the specified charge degree.
		 * Get masterData/chargeDegree/{chargeDegreeId}
		 * @return {ChargeDegree} Success
		 */
		GetChargeDegree(): Observable<ChargeDegree> {
			return this.http.get<ChargeDegree>(this.baseUri + 'masterData/chargeDegree/{chargeDegreeId}', {});
		}

		/**
		 * Charge Group Object.
		 * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject
		 * Get masterData/chargeGroup
		 * @param {string} q The keyword expression targeting the desired charge group.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {ChargeGroupResponse} Success
		 */
		GetChargeGroups(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<ChargeGroupResponse> {
			return this.http.get<ChargeGroupResponse>(this.baseUri + 'masterData/chargeGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Charge Group Object for the given chargeGroupId.
		 * Retrieve the specified charge group.
		 * Get masterData/chargeGroup/{chargeGroupId}
		 * @return {ChargeGroup} Success
		 */
		GetChargeGroup(): Observable<ChargeGroup> {
			return this.http.get<ChargeGroup>(this.baseUri + 'masterData/chargeGroup/{chargeGroupId}', {});
		}

		/**
		 * ChargeSeverity Object.
		 * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject
		 * Get masterData/chargeSeverity
		 * @param {string} q The keyword expression targeting the desired charge severity.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {ChargeSeverityResponse} Success
		 */
		GetChargesSeverity(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<ChargeSeverityResponse> {
			return this.http.get<ChargeSeverityResponse>(this.baseUri + 'masterData/chargeSeverity?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * ChargeSeverity Object for the given chargeSeverityId.
		 * Retrieve the specified charge severity.
		 * Get masterData/chargeSeverity/{chargeSeverityId}
		 * @return {ChargeSeverity} Success
		 */
		GetChargeSeverity(): Observable<ChargeSeverity> {
			return this.http.get<ChargeSeverity>(this.baseUri + 'masterData/chargeSeverity/{chargeSeverityId}', {});
		}

		/**
		 * Court Objects.
		 * Retrieve information about a specified court or courts.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject
		 * Get masterData/court
		 * @param {string} q The keyword expression that sets forth the criteria concerning the court or courts to be retrieved. Keyword expressions should be constructed according to the rules shown above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtResponse} Success
		 */
		GetCourts(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtResponse> {
			return this.http.get<CourtResponse>(this.baseUri + 'masterData/court?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Court Object for given courtId.
		 * Retrieve information about a specified court.
		 * Get masterData/court/{courtId}
		 * @return {Court} Success
		 */
		GetCourt(): Observable<Court> {
			return this.http.get<Court>(this.baseUri + 'masterData/court/{courtId}', {});
		}

		/**
		 * Appeal Court Objects for given courtId.
		 * Retrieve the appeals courts associated with the specified court.
		 * Get masterData/court/{courtId}/appealCourts
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtResponse} Success
		 */
		GetAppealCourtsForCourt(pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtResponse> {
			return this.http.get<CourtResponse>(this.baseUri + 'masterData/court/{courtId}/appealCourts?pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Associated Court Location for given courtId.
		 * Retrieve the court locations associated with the specified court.
		 * Get masterData/court/{courtId}/courtLocations
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtLocationResponse} Success
		 */
		GetCourtLocationsForCourt(pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtLocationResponse> {
			return this.http.get<CourtLocationResponse>(this.baseUri + 'masterData/court/{courtId}/courtLocations?pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Jurisdiction Geo Objects for given courtId.
		 * Retrieve the jurisdiction geography object for the specified court.
		 * Get masterData/court/{courtId}/jurisdictionGeo
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetJurisdictionGeoForCourtSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {JurisdictionGeoResponse} Success
		 */
		GetJurisdictionGeoForCourt(pageNumber: number | null | undefined, sort: GetJurisdictionGeoForCourtSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<JurisdictionGeoResponse> {
			return this.http.get<JurisdictionGeoResponse>(this.baseUri + 'masterData/court/{courtId}/jurisdictionGeo?pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Courthouse Object.
		 * Retrieve the specified court location or court locations.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject
		 * Get masterData/courtLocation
		 * @param {string} q The keyword expression that sets forth the criteria concerning the court location or court locations to target. Keyword expressions should be constructed according to the rules shown above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtLocationResponse} Success
		 */
		GetCourtLocations(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtLocationResponse> {
			return this.http.get<CourtLocationResponse>(this.baseUri + 'masterData/courtLocation?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Courthouse Object for given Court Location Id.
		 * Contains the Court Location Object.
		 * Get masterData/courtLocation/{courtLocationId}
		 * @return {CourtLocation} Success
		 */
		GetCourtLocation(): Observable<CourtLocation> {
			return this.http.get<CourtLocation>(this.baseUri + 'masterData/courtLocation/{courtLocationId}', {});
		}

		/**
		 * Associated Court for given Court Location.
		 * Retrieve the courts associated with the specified court location.
		 * Get masterData/courtLocation/{courtLocationId}/courts
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtResponse} Success
		 */
		GetCourtsForCourtLocation(pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtResponse> {
			return this.http.get<CourtResponse>(this.baseUri + 'masterData/courtLocation/{courtLocationId}/courts?pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Court Service Status Object.
		 * Retrieve the status of one or more courts using a keyword expression.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject
		 * Get masterData/courtServiceStatus
		 * @param {string} q The keyword expression targeting the desired court. Keyword expressions should be constructed according to the rules given above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtServiceStatusResponse} Success
		 */
		GetCourtsServiceStatus(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtServiceStatusResponse> {
			return this.http.get<CourtServiceStatusResponse>(this.baseUri + 'masterData/courtServiceStatus?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Court Service Status Object for the given courtServiceStatusId.
		 * Retrieve the court status of the specified court.
		 * Get masterData/courtServiceStatus/{courtServiceStatusId}
		 * @return {CourtServiceStatus} Success
		 */
		GetCourtServiceStatus(): Observable<CourtServiceStatus> {
			return this.http.get<CourtServiceStatus>(this.baseUri + 'masterData/courtServiceStatus/{courtServiceStatusId}', {});
		}

		/**
		 * Court System Objects.
		 * Retrieve information about the specified court system or court systems.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject
		 * Get masterData/courtSystem
		 * @param {string} q The keyword expression that sets forth the criteria concerning the court system or court systems. Keyword expressions should be constructed according to the rules shown above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtSystemResponse} Success
		 */
		GetCourtSystems(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtSystemResponse> {
			return this.http.get<CourtSystemResponse>(this.baseUri + 'masterData/courtSystem?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Court System Object for given courtSystemId.
		 * Retrieve the specified court system.
		 * Get masterData/courtSystem/{courtSystemId}
		 * @return {CourtSystem} Success
		 */
		GetCourtSystem(): Observable<CourtSystem> {
			return this.http.get<CourtSystem>(this.baseUri + 'masterData/courtSystem/{courtSystemId}', {});
		}

		/**
		 * Court Type Objects.
		 * Retrieve court types recognized by UniCourt.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject
		 * Get masterData/courtType
		 * @param {string} q The keyword expression that sets forth the criteria concerning the court type or court types. Keyword expressions should be constructed according to the rules shown above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {CourtTypeResponse} Success
		 */
		GetCourtTypes(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtTypeResponse> {
			return this.http.get<CourtTypeResponse>(this.baseUri + 'masterData/courtType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Court Type Object for given courtTypeId.
		 * Retrieve the information concerning the specific court type.
		 * Get masterData/courtType/{courtTypeId}
		 * @return {CourtType} Success
		 */
		GetCourtType(): Observable<CourtType> {
			return this.http.get<CourtType>(this.baseUri + 'masterData/courtType/{courtTypeId}', {});
		}

		/**
		 * Judge Type Object.
		 * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject
		 * Get masterData/judgeType
		 * @param {string} q The keyword expression targeting the judge type.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {JudgeTypeResponse} Success
		 */
		GetJudgeTypes(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<JudgeTypeResponse> {
			return this.http.get<JudgeTypeResponse>(this.baseUri + 'masterData/judgeType?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Judge Type Object for the given judgeTypeId.
		 * Retrieve the specified judge type.
		 * Get masterData/judgeType/{judgeTypeId}
		 * @return {JudgeType} Success
		 */
		GetJudgeType(): Observable<JudgeType> {
			return this.http.get<JudgeType>(this.baseUri + 'masterData/judgeType/{judgeTypeId}', {});
		}

		/**
		 * Jurisdiction Geo Object.
		 * Retrieve one or more jurisdiction geographies using a keyword expression.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject
		 * Get masterData/jurisdictionGeo
		 * @param {string} q The keyword expression targeting the desired jurisdiction geography. Keyword expressions should be constructed according to the rules given above.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetJurisdictionGeoForCourtSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {JurisdictionGeoResponse} Success
		 */
		GetJurisdictionsGeo(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetJurisdictionGeoForCourtSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<JurisdictionGeoResponse> {
			return this.http.get<JurisdictionGeoResponse>(this.baseUri + 'masterData/jurisdictionGeo?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Jurisdiction Geo Object for given Jurisdiction Geo Id.
		 * Retrieve the specified jurisdiction geography.
		 * Get masterData/jurisdictionGeo/{jurisdictionGeoId}
		 * @return {JurisdictionGeo} Success
		 */
		GetJurisdictionGeo(): Observable<JurisdictionGeo> {
			return this.http.get<JurisdictionGeo>(this.baseUri + 'masterData/jurisdictionGeo/{jurisdictionGeoId}', {});
		}

		/**
		 * Associated Court for given Jurisdiction Geo.
		 * Returns Associated Court for given Jurisdiction Geo.
		 * Get masterData/jurisdictionGeo/{jurisdictionGeoId}/courts
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort Sort field.
		 * @param {SearchCasesOrder} order Sort order.
		 * @return {CourtResponse} Success
		 */
		GetCourtsForJurisdictionGeo(pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<CourtResponse> {
			return this.http.get<CourtResponse>(this.baseUri + 'masterData/jurisdictionGeo/{jurisdictionGeoId}/courts?pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Party Role Object.
		 * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject
		 * Get masterData/partyRole
		 * @param {string} q The keyword expression targeting the desired party role.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {PartyRoleResponse} Success
		 */
		GetPartyRoles(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<PartyRoleResponse> {
			return this.http.get<PartyRoleResponse>(this.baseUri + 'masterData/partyRole?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Party Role Object.
		 * Retrieve the specified party role.
		 * Get masterData/partyRole/{partyRoleId}
		 * @return {PartyRole} Success
		 */
		GetPartyRole(): Observable<PartyRole> {
			return this.http.get<PartyRole>(this.baseUri + 'masterData/partyRole/{partyRoleId}', {});
		}

		/**
		 * Party Role Group Object.
		 * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		 * ## Logical Operators
		 * | Connector | Description  | Example |
		 * | ------| ------|------|
		 * | **AND** |Find data containing all connected terms.|**google AND facebook**|
		 * | **OR**  |Find data containing any connected term.| **order OR decision**|
		 * | **NOT** |Exclude data.| **google NOT apple**.|
		 * | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		 * | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		 * ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject
		 * Get masterData/partyRoleGroup
		 * @param {string} q The keyword expression targeting the desired party role group.</a>
		 * @param {number} pageNumber The page number of the results to be retrieved.
		 * - minimum: 1
		 * - maximum: 100
		 * @param {GetAreasOfLawSort} sort The field according to which search results are to be sorted.
		 * @param {SearchCasesOrder} order Whether search results are to be shown in ascending or descending order.
		 * @return {PartyRoleGroupResponse} Success
		 */
		GetPartyRoleGroups(q: string | null | undefined, pageNumber: number | null | undefined, sort: GetAreasOfLawSort | null | undefined, order: SearchCasesOrder | null | undefined): Observable<PartyRoleGroupResponse> {
			return this.http.get<PartyRoleGroupResponse>(this.baseUri + 'masterData/partyRoleGroup?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber + '&sort=' + sort + '&order=' + order, {});
		}

		/**
		 * Party Role Group Object.
		 * Retrieve the specified party role group.
		 * Get masterData/partyRoleGroup/{partyRoleGroupId}
		 * @return {PartyRoleGroup} Success
		 */
		GetPartyRoleGroup(): Observable<PartyRoleGroup> {
			return this.http.get<PartyRoleGroup>(this.baseUri + 'masterData/partyRoleGroup/{partyRoleGroupId}', {});
		}

		/**
		 * Norm Attorney Details.
		 * This endpoint retrieves information on the attorney in our normalized attorney database which matches the normAttorneyId specified in the request.
		 * Get normAttorney/{normAttorneyId}
		 * @return {NormAttorney} OK
		 */
		GetNormAttorneyById(): Observable<NormAttorney> {
			return this.http.get<NormAttorney>(this.baseUri + 'normAttorney/{normAttorneyId}', {});
		}

		/**
		 * Judges faced by the Attorney.
		 * This endpoint returns information on all judges which have appeared in cases with the attorney specified by the normAttorneyId. The returned judges are ordered in descending order of number of cases shared with the relevant attorney.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all judges associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normAttorney/{normAttorneyId}/associatedNormJudges
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormJudgeResponse} OK
		 */
		GetNormJudgesAssociatedWithNormAttorney(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormJudgeResponse> {
			return this.http.get<AssociatedNormJudgeResponse>(this.baseUri + 'normAttorney/{normAttorneyId}/associatedNormJudges?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Law Firms the attorney has worked for.
		 * Returns a list of Law Firms the norm Attorney has worked for.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all LawFirms associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normAttorney/{normAttorneyId}/associatedNormLawFirms
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormLawFirmResponse} OK
		 */
		GetNormLawFirmsAssociatedWithNormAttorney(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormLawFirmResponse> {
			return this.http.get<AssociatedNormLawFirmResponse>(this.baseUri + 'normAttorney/{normAttorneyId}/associatedNormLawFirms?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Parties Represented By the Attorney.
		 * Returns a list of Parties the Attorney has represented.
		 * <br><br>
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
		 * | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object.. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all parties associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normAttorney/{normAttorneyId}/associatedNormParties
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormPartyResponse} OK
		 */
		GetNormPartiesAssociatedWithNormAttorney(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormPartyResponse> {
			return this.http.get<AssociatedNormPartyResponse>(this.baseUri + 'normAttorney/{normAttorneyId}/associatedNormParties?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Opposing Norm Attorney.
		 * Returns Case Analytics by Attorney.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normPartyId** | Single Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Single Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDiNU45NWikKVxSH"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm attorney with norm id NATYY29p78c7UoyJJ of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get normAttorney/{normAttorneyId}/caseCountAnalyticsByOpposingNormAttorney
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormAttorneyResponse} OK
		 */
		GetCaseCountAnalyticsByOpposingNormAttorneyForANormAttorney(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormAttorneyResponse> {
			return this.http.get<CaseCountAnalyticsByNormAttorneyResponse>(this.baseUri + 'normAttorney/{normAttorneyId}/caseCountAnalyticsByOpposingNormAttorney?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Attorney search.
		 * ### This endpoint retrieves information, including the normAttorneyId, on all attorneys in our normalized attorney database which match the request parameters. All query parameters supported by this API can be found in the schema section below.
		 * Get normAttorneySearch
		 * @param {string} q The URL encoded query you are searching for.
		 * The query can be as simple as a keyword, but supports many additional options and filters.</a>
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormAttorneySearchResponse} Success
		 */
		SearchNormalizedAttorneys(q: string | null | undefined, pageNumber: number | null | undefined): Observable<NormAttorneySearchResponse> {
			return this.http.get<NormAttorneySearchResponse>(this.baseUri + 'normAttorneySearch?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm attorney search results for a given normAttorneySearchId.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormAttorneySearchQueryObject
		 * Get normAttorneySearch/{normAttorneySearchId}
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormAttorneySearchResponse} Success
		 */
		SearchNormalizedAttorneysById(pageNumber: number | null | undefined): Observable<NormAttorneySearchResponse> {
			return this.http.get<NormAttorneySearchResponse>(this.baseUri + 'normAttorneySearch/{normAttorneySearchId}?pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm Judge Details.
		 * The Judge API allows you to look up Judge Details by normJudgeId.
		 * Get normJudge/{normJudgeId}
		 * @return {NormJudge} OK
		 */
		GetNormJudgeById(): Observable<NormJudge> {
			return this.http.get<NormJudge>(this.baseUri + 'normJudge/{normJudgeId}', {});
		}

		/**
		 * Attorneys Associated with the Judge.
		 * Returns a list of attorneys associated with a judge.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLODj4BBVTho3pKpz","COLOPUfJRhw5yPxgRi")**|
		 * | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all attorneys associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normJudge/{normJudgeId}/associatedNormAttorneys
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormAttorneyResponse} OK
		 */
		GetNormAttorneysAssociatedWithNormJudge(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormAttorneyResponse> {
			return this.http.get<AssociatedNormAttorneyResponse>(this.baseUri + 'normJudge/{normJudgeId}/associatedNormAttorneys?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Law Firms Associated With the Judge.
		 * Returns a list of Law Firms a Judge has heard.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLOPUfJRhw5yPxgRi"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLODj4BBVTho3pKpz","COLOPUfJRhw5yPxgRi")**|
		 * | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all Law Firms associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normJudge/{normJudgeId}/associatedNormLawFirms
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormLawFirmResponse} OK
		 */
		GetNormLawFirmsAssociatedWithNormJudge(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormLawFirmResponse> {
			return this.http.get<AssociatedNormLawFirmResponse>(this.baseUri + 'normJudge/{normJudgeId}/associatedNormLawFirms?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Parties Associated with the Judge.
		 * Returns a list of Parties A Judge has seen.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLODj4BBVTho3pKpz","COLOPUfJRhw5yPxgRi")**|
		 * | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all Parties associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normJudge/{normJudgeId}/associatedNormParties
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormPartyResponse} OK
		 */
		GetNormPartiesAssociatedWithNormJudge(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormPartyResponse> {
			return this.http.get<AssociatedNormPartyResponse>(this.baseUri + 'normJudge/{normJudgeId}/associatedNormParties?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Judge search.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormJudgeSearchQueryObject
		 * Get normJudgeSearch
		 * @param {string} q The URL encoded query you are searching for.
		 * The query can be as simple as a keyword, but supports many additional options and filters.</a>
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormJudgeSearchResponse} Success
		 */
		SearchNormalizedJudges(q: string | null | undefined, pageNumber: number | null | undefined): Observable<NormJudgeSearchResponse> {
			return this.http.get<NormJudgeSearchResponse>(this.baseUri + 'normJudgeSearch?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm judge search results for a given normJudgeSearchId.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormJudgeSearchQueryObject
		 * Get normJudgeSearch/{normJudgeSearchId}
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormJudgeSearchResponse} Success
		 */
		SearchNormalizedJudgesById(pageNumber: number | null | undefined): Observable<NormJudgeSearchResponse> {
			return this.http.get<NormJudgeSearchResponse>(this.baseUri + 'normJudgeSearch/{normJudgeSearchId}?pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm LawFirm Details.
		 * The Law Firm API allows you to look up Law Firms by normLawFirmId.
		 * Get normLawFirm/{normLawFirmId}
		 * @return {NormLawFirm} OK
		 */
		GetNormLawFirmById(): Observable<NormLawFirm> {
			return this.http.get<NormLawFirm>(this.baseUri + 'normLawFirm/{normLawFirmId}', {});
		}

		/**
		 * Attorneys working for the Law Firm.
		 * Returns a list of Attorneys associated to a Law Firm.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId**  | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **caseFiledDate**  | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all attorneys associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normLawFirm/{normLawFirmId}/associatedNormAttorneys
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormAttorneyResponse} OK
		 */
		GetNormAttorneysAssociatedWithNormLawFirm(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormAttorneyResponse> {
			return this.http.get<AssociatedNormAttorneyResponse>(this.baseUri + 'normLawFirm/{normLawFirmId}/associatedNormAttorneys?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Judges Faced By the Law Firm.
		 * Returns list of Judges faced by the Law Firm.
		 * <br><br>
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all judges associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normLawFirm/{normLawFirmId}/associatedNormJudges
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormJudgeResponse} OK
		 */
		GetNormJudgesAssociatedWithNormLawFirm(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormJudgeResponse> {
			return this.http.get<AssociatedNormJudgeResponse>(this.baseUri + 'normLawFirm/{normLawFirmId}/associatedNormJudges?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Parties Represented by the Law Firm.
		 * Returns list of Parties represented by the Law Firm.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all parties associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normLawFirm/{normLawFirmId}/associatedNormParties
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormPartyResponse} OK
		 */
		GetNormPartiesAssociatedWithNormLawFirm(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormPartyResponse> {
			return this.http.get<AssociatedNormPartyResponse>(this.baseUri + 'normLawFirm/{normLawFirmId}/associatedNormParties?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Opposing Norm Law Firm.
		 * Returns Case Analytics by Norm Law Firm.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYp7kmEQtt8jQ3eQ"** |
		 * | **normPartyId** | Single Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm lawfirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get normLawFirm/{normLawFirmId}/caseCountAnalyticsByOpposingNormLawFirm
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormLawFirmResponse} OK
		 */
		GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormLawFirmResponse> {
			return this.http.get<CaseCountAnalyticsByNormLawFirmResponse>(this.baseUri + 'normLawFirm/{normLawFirmId}/caseCountAnalyticsByOpposingNormLawFirm?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Law firm search.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormLawFirmSearchQueryObject
		 * Get normLawFirmSearch
		 * @param {string} q The URL encoded query you are searching for.
		 * The query can be as simple as a keyword, but supports many additional options and filters.</a>
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormLawFirmSearchResponse} Success
		 */
		SearchNormalizedLawFirms(q: string | null | undefined, pageNumber: number | null | undefined): Observable<NormLawFirmSearchResponse> {
			return this.http.get<NormLawFirmSearchResponse>(this.baseUri + 'normLawFirmSearch?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm law firm search result for a given normLawFirmSearchId.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormLawFirmSearchQueryObject
		 * Get normLawFirmSearch/{normLawFirmSearchId}
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormLawFirmSearchResponse} Success
		 */
		SearchNormalizedLawFirmsById(pageNumber: number | null | undefined): Observable<NormLawFirmSearchResponse> {
			return this.http.get<NormLawFirmSearchResponse>(this.baseUri + 'normLawFirmSearch/{normLawFirmSearchId}?pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm Party Details.
		 * The Party Details API allows you to look up Parties by normPartyId.
		 * Get normParty/{normPartyId}
		 * @return {NormParty} OK
		 */
		GetNormPartyById(): Observable<NormParty> {
			return this.http.get<NormParty>(this.baseUri + 'normParty/{normPartyId}', {});
		}

		/**
		 * Attorneys that represented the Party.
		 * Returns a list of  Attorneys the Party has been represented by.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz","CORTYsomR6GiiiPovp")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all attorneys associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normParty/{normPartyId}/associatedNormAttorneys
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormAttorneyResponse} OK
		 */
		GetNormAttorneysAssociatedWithNormParty(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormAttorneyResponse> {
			return this.http.get<AssociatedNormAttorneyResponse>(this.baseUri + 'normParty/{normPartyId}/associatedNormAttorneys?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Judges Faced By the Party.
		 * Returns a list of Judges the party has faced.
		 * <br><br>
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz","CORTYsomR6GiiiPovp")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all judges associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * <br><br>
		 * Get normParty/{normPartyId}/associatedNormJudges
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormJudgeResponse} OK
		 */
		GetNormJudgesAssociatedWithNormParty(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormJudgeResponse> {
			return this.http.get<AssociatedNormJudgeResponse>(this.baseUri + 'normParty/{normPartyId}/associatedNormJudges?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Law Firms that represented the Party.
		 * Returns a list of Law Firms the Party has been represented by.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz","CORTYsomR6GiiiPovp")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get all lawfirms associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get normParty/{normPartyId}/associatedNormLawFirms
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {AssociatedNormLawFirmResponse} OK
		 */
		GetNormLawFirmsAssociatedWithNormParty(q: string | null | undefined, pageNumber: number): Observable<AssociatedNormLawFirmResponse> {
			return this.http.get<AssociatedNormLawFirmResponse>(this.baseUri + 'normParty/{normPartyId}/associatedNormLawFirms?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Case Count Analytics by Opposing Norm Party.
		 * Returns Case Analytics by Opposing Norm Party.
		 * ## Terms and Connectors
		 * | Connector | Schema   | Description  | Example |
		 * | ------| ------| ------|------|
		 * | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		 * | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		 * | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		 * | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		 * | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		 * | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		 * | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		 * | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		 * | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		 * | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		 * | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		 * | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		 * | **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		 * | **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		 * | **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		 * | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		 * | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		 * | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		 * | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		 * <br>
		 * ## Example Query
		 * Query to get case count grouped by norm party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		 * q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		 * Get normParty/{normPartyId}/caseCountAnalyticsByOpposingNormParty
		 * @param {string} q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		 * @param {number} pageNumber Page number.
		 * - minimum: 1
		 * @return {CaseCountAnalyticsByNormPartyResponse} OK
		 */
		GetCaseCountAnalyticsByOpposingNormPartyForANormParty(q: string | null | undefined, pageNumber: number): Observable<CaseCountAnalyticsByNormPartyResponse> {
			return this.http.get<CaseCountAnalyticsByNormPartyResponse>(this.baseUri + 'normParty/{normPartyId}/caseCountAnalyticsByOpposingNormParty?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Party search.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormPartySearchQueryObject
		 * Get normPartySearch
		 * @param {string} q The URL encoded query you are searching for.
		 * The query can be as simple as a keyword, but supports many additional options and filters.</a>
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormPartySearchResponse} Success
		 */
		SearchNormalizedParties(q: string | null | undefined, pageNumber: number | null | undefined): Observable<NormPartySearchResponse> {
			return this.http.get<NormPartySearchResponse>(this.baseUri + 'normPartySearch?q=' + (q == null ? '' : encodeURIComponent(q)) + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Norm party search results for a given normPartySearchId.
		 * ### All query parameters supported for this API can be found in below schema section. Schema --> NormPartySearchQueryObject
		 * Get normPartySearch/{normPartySearchId}
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * - Minimum: 1
		 * - Maximum: 1000
		 * @return {NormPartySearchResponse} Success
		 */
		SearchNormalizedPartiesById(pageNumber: number | null | undefined): Observable<NormPartySearchResponse> {
			return this.http.get<NormPartySearchResponse>(this.baseUri + 'normPartySearch/{normPartySearchId}?pageNumber=' + pageNumber, {});
		}

		/**
		 * Find PACER Case for a requested Case Number and Court.
		 * Import the specified case from PACER.
		 * Workflow:
		 * 1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.
		 * 2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.
		 * Note:
		 * 1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.
		 * 2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
		 * Get pacer/importCaseByCourtUsingCaseNumber
		 * @param {string} pacerUserId The PACER username of the PACER account under which the case should be imported.
		 * @param {string} pacerClientCode The PACER client code under which the case should be imported.
		 * @param {string} caseNumber The case number of the case to be imported.
		 * @param {string} courtId The courtId value of the court from which the case is to be imported.
		 * @return {PACERImportCase} The request is recieved.
		 */
		ImportPacerCaseByCourtUsingCaseNumber(pacerUserId: string, pacerClientCode: string, caseNumber: string, courtId: string): Observable<PACERImportCase> {
			return this.http.get<PACERImportCase>(this.baseUri + 'pacer/importCaseByCourtUsingCaseNumber?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&courtId=' + (courtId == null ? '' : encodeURIComponent(courtId)), {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search all courts within the PACER system for a particular case.
		 * Get pacerCaseLocator/caseSearch/allCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLCase} The request is recieved.
		 */
		AllCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLCase> {
			return this.http.get<PCLCase>(this.baseUri + 'pacerCaseLocator/caseSearch/allCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for PACER cases filed in U.S. Courts of Appeals.
		 * Get pacerCaseLocator/caseSearch/appealCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn  
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} natureOfSuitsArray The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases in U.S. Courts of Appeals. 
		 * 	Scenario: When mulitple nature of suits needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search with the nature of suit 1110 (Insurance) and 1150 (Overpayments & Enforc. of Judgments), My query in the request will look like the example mentioned below. 
		 * 	Example: natureOfSuitsArray=1110&natureOfSuitsArray=1150
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLCase} The request is recieved.
		 */
		AppealCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, natureOfSuitsArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLCase> {
			return this.http.get<PCLCase>(this.baseUri + 'pacerCaseLocator/caseSearch/appealCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + natureOfSuitsArray?.map(z => `natureOfSuitsArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for Bankruptcy Courts.
		 * Search for PACER cases filed in U.S. Bankruptcy Courts.
		 * Get pacerCaseLocator/caseSearch/bankruptcyCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} federalBankruptcyChapterArray The chapter of the U.S. Bankruptcy Code under which the target case was filed. Please see Appendix D for a list of valid chapter numbers. 
		 * 	Scenario: When mulitple Federal Bankruptcy Chapters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search with the Federal Bankruptcy Chapters 7 (Chapter 7) and 11 (Chapter 11), My query in the request will look like the example mentioned below. 
		 * 	Example: federalBankruptcyChapterArray=7&federalBankruptcyChapterArray=11
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseDischargedStartDate The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		 * 	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		 * @param {Date} caseDischargedEndDate The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		 * 	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		 * @param {Date} caseDismissedStartDate The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		 * 	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		 * @param {Date} caseDismissedEndDate The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLCase} The request is recieved.
		 */
		BankruptcyCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, federalBankruptcyChapterArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, caseDischargedStartDate: Date | null | undefined, caseDischargedEndDate: Date | null | undefined, caseDismissedStartDate: Date | null | undefined, caseDismissedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLCase> {
			return this.http.get<PCLCase>(this.baseUri + 'pacerCaseLocator/caseSearch/bankruptcyCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + federalBankruptcyChapterArray?.map(z => `federalBankruptcyChapterArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&caseDischargedStartDate=' + caseDischargedStartDate?.toISOString() + '&caseDischargedEndDate=' + caseDischargedEndDate?.toISOString() + '&caseDismissedStartDate=' + caseDismissedStartDate?.toISOString() + '&caseDismissedEndDate=' + caseDismissedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for civil cases filed in PACER.
		 * Get pacerCaseLocator/caseSearch/civilCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case.
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} natureOfSuitsArray The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases. 
		 * 	Scenario: When mulitple nature of suits needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search with the nature of suit 110 (Insurance) and 140 (Negotiable Instrument), My query in the request will look like the example mentioned below. 
		 * 	Example: natureOfSuitsArray=110&natureOfSuitsArray=140
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLCase} The request is recieved.
		 */
		CivilCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, natureOfSuitsArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLCase> {
			return this.http.get<PCLCase>(this.baseUri + 'pacerCaseLocator/caseSearch/civilCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + natureOfSuitsArray?.map(z => `natureOfSuitsArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for criminal cases in PACER.
		 * Get pacerCaseLocator/caseSearch/criminalCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLCase} The request is recieved.
		 */
		CriminalCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLCase> {
			return this.http.get<PCLCase>(this.baseUri + 'pacerCaseLocator/caseSearch/criminalCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for multidistrict litigation in PACER.
		 * Get pacerCaseLocator/caseSearch/multiDistrictCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} jpmlNumber Master JPML Case Number.
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLCase} The request is recieved.
		 */
		MultiDistrictCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, jpmlNumber: number | null | undefined, pacerCaseId: number | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLCase> {
			return this.http.get<PCLCase>(this.baseUri + 'pacerCaseLocator/caseSearch/multiDistrictCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&jpmlNumber=' + jpmlNumber + '&pacerCaseId=' + pacerCaseId + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for the specified party across all PACER case filings.
		 * Get pacerCaseLocator/partySearch/allCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} lastName The last name (for an individual) or the entity name (for a business entity) of the target party.
		 * @param {string} firstName The first name of the target party.
		 * @param {string} middleName The middle name of the target party.
		 * @param {string} generation The suffix (e.g., Jr., III) of the target party's name.
		 * @param {string} partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {boolean} partyExactNameMatch Specify whether the search string must match the name of the target party exactly.
		 * @param {Array<string>} partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case.
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {number} caseYearFrom Limit the results of the search to those cases from the year specified or later
		 * @param {number} caseYearTo Limit the results of the search to those cases from the year specified or earlier
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario 1: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		 * 	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLParty} The request is recieved.
		 */
		AllCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, lastName: string | null | undefined, firstName: string | null | undefined, middleName: string | null | undefined, generation: string | null | undefined, partyType: string | null | undefined, partyExactNameMatch: boolean | null | undefined, partyRoleArray: Array<string> | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseYearFrom: number | null | undefined, caseYearTo: number | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLParty> {
			return this.http.get<PCLParty>(this.baseUri + 'pacerCaseLocator/partySearch/allCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&lastName=' + (lastName == null ? '' : encodeURIComponent(lastName)) + '&firstName=' + (firstName == null ? '' : encodeURIComponent(firstName)) + '&middleName=' + (middleName == null ? '' : encodeURIComponent(middleName)) + '&generation=' + (generation == null ? '' : encodeURIComponent(generation)) + '&partyType=' + (partyType == null ? '' : encodeURIComponent(partyType)) + '&partyExactNameMatch=' + partyExactNameMatch + '&' + partyRoleArray?.map(z => `partyRoleArray=${encodeURIComponent(z)}`).join('&') + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseYearFrom=' + caseYearFrom + '&caseYearTo=' + caseYearTo + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for the specified party across all PACER appeals cases.
		 * Get pacerCaseLocator/partySearch/appealCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} lastName The last name (for an individual) or the entity name (for a business entity) of the target party.
		 * @param {string} firstName The first name of the target party.
		 * @param {string} middleName The middle name of the target party.
		 * @param {string} generation The suffix (e.g., Jr., III) of the target party's name.
		 * @param {string} partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {boolean} partyExactNameMatch Specify whether the search string must match the name of the target party exactly.
		 * @param {Array<string>} partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {number} caseYearFrom Limit the results of the search to those cases from the year specified or later
		 * @param {number} caseYearTo Limit the results of the search to those cases from the year specified or earlier
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario 1: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		 * 	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLParty} The request is recieved.
		 */
		AppealCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, lastName: string | null | undefined, firstName: string | null | undefined, middleName: string | null | undefined, generation: string | null | undefined, partyType: string | null | undefined, partyExactNameMatch: boolean | null | undefined, partyRoleArray: Array<string> | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseYearFrom: number | null | undefined, caseYearTo: number | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLParty> {
			return this.http.get<PCLParty>(this.baseUri + 'pacerCaseLocator/partySearch/appealCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&lastName=' + (lastName == null ? '' : encodeURIComponent(lastName)) + '&firstName=' + (firstName == null ? '' : encodeURIComponent(firstName)) + '&middleName=' + (middleName == null ? '' : encodeURIComponent(middleName)) + '&generation=' + (generation == null ? '' : encodeURIComponent(generation)) + '&partyType=' + (partyType == null ? '' : encodeURIComponent(partyType)) + '&partyExactNameMatch=' + partyExactNameMatch + '&' + partyRoleArray?.map(z => `partyRoleArray=${encodeURIComponent(z)}`).join('&') + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseYearFrom=' + caseYearFrom + '&caseYearTo=' + caseYearTo + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for the specified party in PACER bankruptcy filings.
		 * Get pacerCaseLocator/partySearch/bankruptcyCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} lastName The last name (for an individual) or the entity name (for a business entity) of the target party.
		 * @param {string} firstName The first name of the target party.
		 * @param {string} middleName The middle name of the target party.
		 * @param {string} generation The suffix (e.g., Jr., III) of the target party's name.
		 * @param {string} partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {boolean} partyExactNameMatch Specify whether the search string must match the name of the target party exactly.
		 * @param {Array<string>} partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {number} caseYearFrom Limit the results of the search to those cases from the year specified or later
		 * @param {number} caseYearTo Limit the results of the search to those cases from the year specified or earlier
		 * @param {string} ssnOrEin The Social Security number or the federal Employer Identification Number of the target party. Either number can be entered with or without dashes.
		 * @param {string} fourDigitSsn The last four digits of the Social Security number of the target party.
		 * 	Note: When specified, a last name/entity name must also be specified.
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseDischargedStartDate The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		 * 	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		 * @param {Date} caseDischargedEndDate The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		 * 	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		 * @param {Date} caseDismissedStartDate The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		 * 	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		 * @param {Date} caseDismissedEndDate The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario 1: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		 * 	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLParty} The request is recieved.
		 */
		BankruptcyCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, lastName: string | null | undefined, firstName: string | null | undefined, middleName: string | null | undefined, generation: string | null | undefined, partyType: string | null | undefined, partyExactNameMatch: boolean | null | undefined, partyRoleArray: Array<string> | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseYearFrom: number | null | undefined, caseYearTo: number | null | undefined, ssnOrEin: string | null | undefined, fourDigitSsn: string | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, caseDischargedStartDate: Date | null | undefined, caseDischargedEndDate: Date | null | undefined, caseDismissedStartDate: Date | null | undefined, caseDismissedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLParty> {
			return this.http.get<PCLParty>(this.baseUri + 'pacerCaseLocator/partySearch/bankruptcyCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&lastName=' + (lastName == null ? '' : encodeURIComponent(lastName)) + '&firstName=' + (firstName == null ? '' : encodeURIComponent(firstName)) + '&middleName=' + (middleName == null ? '' : encodeURIComponent(middleName)) + '&generation=' + (generation == null ? '' : encodeURIComponent(generation)) + '&partyType=' + (partyType == null ? '' : encodeURIComponent(partyType)) + '&partyExactNameMatch=' + partyExactNameMatch + '&' + partyRoleArray?.map(z => `partyRoleArray=${encodeURIComponent(z)}`).join('&') + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseYearFrom=' + caseYearFrom + '&caseYearTo=' + caseYearTo + '&ssnOrEin=' + (ssnOrEin == null ? '' : encodeURIComponent(ssnOrEin)) + '&fourDigitSsn=' + (fourDigitSsn == null ? '' : encodeURIComponent(fourDigitSsn)) + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&caseDischargedStartDate=' + caseDischargedStartDate?.toISOString() + '&caseDischargedEndDate=' + caseDischargedEndDate?.toISOString() + '&caseDismissedStartDate=' + caseDismissedStartDate?.toISOString() + '&caseDismissedEndDate=' + caseDismissedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for the specified party in civil cases filed in PACER.
		 * Get pacerCaseLocator/partySearch/civilCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} lastName The last name (for an individual) or the entity name (for a business entity) of the target party.
		 * @param {string} firstName The first name of the target party.
		 * @param {string} middleName The middle name of the target party.
		 * @param {string} generation The name suffix (e.g., III, MD).
		 * @param {string} partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {boolean} partyExactNameMatch Specify whether the search string must match the name of the target party exactly.
		 * @param {Array<string>} partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {number} caseYearFrom Limit the results of the search to those cases from the year specified or later
		 * @param {number} caseYearTo Limit the results of the search to those cases from the year specified or earlier
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario 1: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		 * 	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLParty} The request is recieved.
		 */
		CivilCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, lastName: string | null | undefined, firstName: string | null | undefined, middleName: string | null | undefined, generation: string | null | undefined, partyType: string | null | undefined, partyExactNameMatch: boolean | null | undefined, partyRoleArray: Array<string> | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseYearFrom: number | null | undefined, caseYearTo: number | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLParty> {
			return this.http.get<PCLParty>(this.baseUri + 'pacerCaseLocator/partySearch/civilCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&lastName=' + (lastName == null ? '' : encodeURIComponent(lastName)) + '&firstName=' + (firstName == null ? '' : encodeURIComponent(firstName)) + '&middleName=' + (middleName == null ? '' : encodeURIComponent(middleName)) + '&generation=' + (generation == null ? '' : encodeURIComponent(generation)) + '&partyType=' + (partyType == null ? '' : encodeURIComponent(partyType)) + '&partyExactNameMatch=' + partyExactNameMatch + '&' + partyRoleArray?.map(z => `partyRoleArray=${encodeURIComponent(z)}`).join('&') + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseYearFrom=' + caseYearFrom + '&caseYearTo=' + caseYearTo + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for the specified party in PACER criminal cases.
		 * Get pacerCaseLocator/partySearch/criminalCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} lastName The last name (for an individual) or the entity name (for a business entity) of the target party.
		 * @param {string} firstName The first name of the target party.
		 * @param {string} middleName The middle name of the target party.
		 * @param {string} generation The suffix (e.g., Jr., III) of the target party's name.
		 * @param {string} partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {boolean} partyExactNameMatch Specify whether the search string must match the name of the target party exactly.
		 * @param {Array<string>} partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {number} caseYearFrom Limit the results of the search to those cases from the year specified or later
		 * @param {number} caseYearTo Limit the results of the search to those cases from the year specified or earlier
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario 1: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		 * 	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLParty} The request is recieved.
		 */
		CriminalCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, pacerCaseId: number | null | undefined, lastName: string | null | undefined, firstName: string | null | undefined, middleName: string | null | undefined, generation: string | null | undefined, partyType: string | null | undefined, partyExactNameMatch: boolean | null | undefined, partyRoleArray: Array<string> | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseYearFrom: number | null | undefined, caseYearTo: number | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLParty> {
			return this.http.get<PCLParty>(this.baseUri + 'pacerCaseLocator/partySearch/criminalCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&pacerCaseId=' + pacerCaseId + '&lastName=' + (lastName == null ? '' : encodeURIComponent(lastName)) + '&firstName=' + (firstName == null ? '' : encodeURIComponent(firstName)) + '&middleName=' + (middleName == null ? '' : encodeURIComponent(middleName)) + '&generation=' + (generation == null ? '' : encodeURIComponent(generation)) + '&partyType=' + (partyType == null ? '' : encodeURIComponent(partyType)) + '&partyExactNameMatch=' + partyExactNameMatch + '&' + partyRoleArray?.map(z => `partyRoleArray=${encodeURIComponent(z)}`).join('&') + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseYearFrom=' + caseYearFrom + '&caseYearTo=' + caseYearTo + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * PACER Case Locator Search API for All Courts.
		 * Search for the specified party in multidistrict litigation in PACER.
		 * Get pacerCaseLocator/partySearch/multiDistrictCourts
		 * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
		 * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
		 * @param {string} caseNumber The case number of the target case. You may use the following case-number formats: 
		 * 	yy-nnnnn 
		 * 	yy-tp-nnnnn 
		 * 	yy tp nnnnn 
		 * 	yytpnnnnn 
		 * 	o:yy-nnnnn 
		 * 	o:yy-tp-nnnnn 
		 * 	o:yy tp nnnnn 
		 * 	o:yytpnnnnn 
		 * where: 
		 * yy  case year (may be 2 or 4 digits) 
		 * nnnnn  case number (up to 5 digits) 
		 * tp  case type (up to 2 characters) 
		 * o  office where the case was filed (1 digit).
		 * @param {number} jpmlNumber Master JPML Case Number.
		 * @param {number} pacerCaseId The PACER-assigned identifier of the target case.
		 * @param {string} lastName The last name (for an individual) or the entity name (for a business entity) of the target party.
		 * @param {string} firstName The first name of the target party.
		 * @param {string} middleName The middle name of the target party.
		 * @param {string} generation The suffix (e.g., Jr., III) of the target party's name.
		 * @param {string} partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {boolean} partyExactNameMatch Specify whether the search string must match the name of the target party exactly.
		 * @param {Array<string>} partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		 * @param {string} caseTitle The title of the target case. 
		 * 	Examples: 
		 * 	A search for case title john doe v will result in all cases with the case title John Doe v. 
		 * 	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		 * @param {number} caseOffice The divisional office in which the case was filed.
		 * @param {number} caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345
		 * @param {number} caseYear The two- or four-digit year in which the target case was filed.
		 * @param {Array<string>} caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		 * 	Scenario: When mulitple case types needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		 * 	Example: caseTypeArray=cv&caseTypeArray=cr
		 * @param {Array<string>} courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		 * 	Scenario: When mulitple court region ids needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		 * 	Example: courtRegionIdArray=cac&courtRegionIdArray=cae
		 * @param {number} caseYearFrom Limit the results of the search to those cases from the year specified or later
		 * @param {number} caseYearTo Limit the results of the search to those cases from the year specified or earlier
		 * @param {Date} caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {Date} caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		 * @param {string} sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		 * 	Scenario 1: When mulitple sort paramters needs to be requested. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		 * 	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		 * 	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		 * 	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		 * @param {AllCourtsPacerCaseLocatorCaseSearchCaseStatus} caseStatus Whether the target case is marked as 'open' or 'closed' within PACER.
		 * @param {number} pageNumber The page number of the search results to be retrieved.
		 * @return {PCLParty} The request is recieved.
		 */
		MultiDistrictCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber: string | null | undefined, jpmlNumber: number | null | undefined, pacerCaseId: number | null | undefined, lastName: string | null | undefined, firstName: string | null | undefined, middleName: string | null | undefined, generation: string | null | undefined, partyType: string | null | undefined, partyExactNameMatch: boolean | null | undefined, partyRoleArray: Array<string> | null | undefined, caseTitle: string | null | undefined, caseOffice: number | null | undefined, caseSequenceNumber: number | null | undefined, caseYear: number | null | undefined, caseTypeArray: Array<string> | null | undefined, courtRegionIdArray: Array<string> | null | undefined, caseYearFrom: number | null | undefined, caseYearTo: number | null | undefined, caseFiledStartDate: Date | null | undefined, caseFiledEndDate: Date | null | undefined, caseTerminatedStartDate: Date | null | undefined, caseTerminatedEndDate: Date | null | undefined, sortParameterQuery: string | null | undefined, caseStatus: AllCourtsPacerCaseLocatorCaseSearchCaseStatus | null | undefined, pageNumber: number | null | undefined): Observable<PCLParty> {
			return this.http.get<PCLParty>(this.baseUri + 'pacerCaseLocator/partySearch/multiDistrictCourts?pacerUserId=' + (pacerUserId == null ? '' : encodeURIComponent(pacerUserId)) + '&pacerClientCode=' + (pacerClientCode == null ? '' : encodeURIComponent(pacerClientCode)) + '&caseNumber=' + (caseNumber == null ? '' : encodeURIComponent(caseNumber)) + '&jpmlNumber=' + jpmlNumber + '&pacerCaseId=' + pacerCaseId + '&lastName=' + (lastName == null ? '' : encodeURIComponent(lastName)) + '&firstName=' + (firstName == null ? '' : encodeURIComponent(firstName)) + '&middleName=' + (middleName == null ? '' : encodeURIComponent(middleName)) + '&generation=' + (generation == null ? '' : encodeURIComponent(generation)) + '&partyType=' + (partyType == null ? '' : encodeURIComponent(partyType)) + '&partyExactNameMatch=' + partyExactNameMatch + '&' + partyRoleArray?.map(z => `partyRoleArray=${encodeURIComponent(z)}`).join('&') + '&caseTitle=' + (caseTitle == null ? '' : encodeURIComponent(caseTitle)) + '&caseOffice=' + caseOffice + '&caseSequenceNumber=' + caseSequenceNumber + '&caseYear=' + caseYear + '&' + caseTypeArray?.map(z => `caseTypeArray=${encodeURIComponent(z)}`).join('&') + '&' + courtRegionIdArray?.map(z => `courtRegionIdArray=${encodeURIComponent(z)}`).join('&') + '&caseYearFrom=' + caseYearFrom + '&caseYearTo=' + caseYearTo + '&caseFiledStartDate=' + caseFiledStartDate?.toISOString() + '&caseFiledEndDate=' + caseFiledEndDate?.toISOString() + '&caseTerminatedStartDate=' + caseTerminatedStartDate?.toISOString() + '&caseTerminatedEndDate=' + caseTerminatedEndDate?.toISOString() + '&sortParameterQuery=' + (sortParameterQuery == null ? '' : encodeURIComponent(sortParameterQuery)) + '&caseStatus=' + caseStatus + '&pageNumber=' + pageNumber, {});
		}

		/**
		 * Get Pacer Credential List.
		 * List registered PACER credentials.
		 * Get pacerCredential
		 * @param {number} pageNumber The page number of the PACER credentials to be retrieved.<br>
		 *   - Minimum: 1
		 * @return {PacerCredentialListResponse} OK
		 */
		GetPacerCredential(pageNumber: number | null | undefined): Observable<PacerCredentialListResponse> {
			return this.http.get<PacerCredentialListResponse>(this.baseUri + 'pacerCredential?pageNumber=' + pageNumber, {});
		}

		/**
		 * Add Pacer Credential.
		 * Register PACER credentials with UniCourt.
		 * Put pacerCredential
		 * @return {Success} OK
		 */
		AddPacerCredential(requestBody: PacerCredentialRequest): Observable<Success> {
			return this.http.put<Success>(this.baseUri + 'pacerCredential', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove Pacer credential for a specific Pacer User Id.
		 * De-register the PACER credentials for the specified PACER username.
		 * Delete pacerCredential/{pacerUserId}
		 * @return {Success} OK
		 */
		RemovePacerCredentialById(): Observable<Success> {
			return this.http.delete<Success>(this.baseUri + 'pacerCredential/{pacerUserId}', {});
		}

		/**
		 * Get Pacer Credential for a requested pacer User Id.
		 * Retrieve the PACER credentials for the specified PACER username.
		 * Get pacerCredential/{pacerUserId}
		 * @return {PacerCredential} OK
		 */
		GetPacerCredentialById(): Observable<PacerCredential> {
			return this.http.get<PacerCredential>(this.baseUri + 'pacerCredential/{pacerUserId}', {});
		}

		/**
		 * Gets details for a requested Party ID.
		 * Retrieve the party with the specified partyId value.
		 * Get party/{partyId}
		 * @return {Party} The request is recieved.
		 */
		GetPartyById(): Observable<Party> {
			return this.http.get<Party>(this.baseUri + 'party/{partyId}', {});
		}

		/**
		 * Gets Associated Attorney details for a requested Party ID.
		 * Retrieve the attorneys in the case with the specified partyId value.
		 * Get party/{partyId}/associatedAttorneys
		 * @param {number} pageNumber Query parameter specifying the page number of the search results to be retrieved.
		 * @return {PartyAttorneyAssociations} The request is recieved.
		 */
		GetPartyAssociatedAttorneys(pageNumber: number | null | undefined): Observable<PartyAttorneyAssociations> {
			return this.http.get<PartyAttorneyAssociations>(this.baseUri + 'party/{partyId}/associatedAttorneys?pageNumber=' + pageNumber, {});
		}
	}

	export enum GetCallbacksStatus { IN_PROGRESS = 0, COMPLETE = 1, FAILURE = 2 }

	export enum GetCaseDocketEntriesSortBy { 'latest to oldest' = 0, 'oldest to latest' = 1 }

	export enum SearchCasesSort { filedDate = 0, relevancy = 1 }

	export enum SearchCasesOrder { asc = 0, desc = 1 }

	export enum GetAreasOfLawSort { name = 0 }

	export enum GetJurisdictionGeoForCourtSort { state = 0 }

	export enum AllCourtsPacerCaseLocatorCaseSearchCaseStatus { open = 0, closed = 1 }

}

