import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Get the directions, path, distance and travel time between a series of geographic points
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
		 * Get directions.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route
		 */
		Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'directions.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, path, distance and travel time between a series of geographic points
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
		 * Post directions.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route
		 */
		Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'directions.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between two geographic points
		 * Represents the distance and time of the shortest or fastest path between given start and end points.
		 * Get distance.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Distance and time of the shortest or fastest route
		 */
		Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'distance.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between two geographic points
		 * Represents the distance and time of the shortest or fastest path between given start and end points.
		 * Post distance.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Distance and time of the shortest or fastest route
		 */
		Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'distance.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between each pair of geographic points
		 * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		 * Get distance/betweenPairs.{outputFormat}
		 * @param {DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat} outputFormat Format of representation
		 * @param {string} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
		 * @param {string} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
		 * @param {DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @param {number} maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
		 * @return {void} A list of routes and their route distances/times.
		 */
		DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs(outputFormat: DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat, fromPoints: string, toPoints: string, outputSRS: DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, maxPairs: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'distance/betweenPairs.' + outputFormat + '?fromPoints=' + (fromPoints == null ? '' : encodeURIComponent(fromPoints)) + '&toPoints=' + (toPoints == null ? '' : encodeURIComponent(toPoints)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)) + '&maxPairs=' + maxPairs, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between each pair of geographic points
		 * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		 * Post distance/betweenPairs.{outputFormat}
		 * @param {DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat} outputFormat Format of representation
		 * @param {string} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
		 * @param {string} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
		 * @param {DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @param {number} maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
		 * @return {void} A list of routes and their route distances/times.
		 */
		DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs(outputFormat: DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat, fromPoints: string, toPoints: string, outputSRS: DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, maxPairs: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'distance/betweenPairs.' + outputFormat + '?fromPoints=' + (fromPoints == null ? '' : encodeURIComponent(fromPoints)) + '&toPoints=' + (toPoints == null ? '' : encodeURIComponent(toPoints)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)) + '&maxPairs=' + maxPairs, null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
		 * Get optimalDirections.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.
		 */
		OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'optimalDirections.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
		 * Post optimalDirections.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.
		 */
		OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'optimalDirections.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		 * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time
		 * Get optimalRoute.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time
		 */
		OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'optimalRoute.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		 * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
		 * Post optimalRoute.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.
		 */
		OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'optimalRoute.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the path, distance and travel time between a series of geographic points
		 * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
		 * Get route.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br> Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route
		 */
		Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'route.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the path, distance and travel time between a series of geographic points
		 * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
		 * Post route.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route
		 */
		Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'route.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
		 * Get truck/directions.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route
		 */
		TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'truck/directions.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, path, distance and travel time between a series of geographic points
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
		 * Post truck/directions.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route
		 */
		TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'truck/directions.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between two geographic points for a commercial vehicle
		 * Represents the distance and time of the shortest or fastest path between given start and end points.
		 * Get truck/distance.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Distance and time of the shortest or fastest route
		 */
		TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'truck/distance.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between two geographic points
		 * Represents the distance and time of the shortest or fastest path between given start and end points.
		 * Post truck/distance.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Distance and time of the shortest or fastest route
		 */
		TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'truck/distance.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between each pair of geographic points for a commercial vehicle
		 * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		 * Get truck/distance/betweenPairs.{outputFormat}
		 * @param {DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat} outputFormat Format of representation
		 * @param {string} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
		 * @param {string} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
		 * @param {TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @param {number} maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
		 * @return {void} A list of routes and their route distances/times.
		 */
		TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs(outputFormat: DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat, fromPoints: string, toPoints: string, outputSRS: TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, maxPairs: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'truck/distance/betweenPairs.' + outputFormat + '?fromPoints=' + (fromPoints == null ? '' : encodeURIComponent(fromPoints)) + '&toPoints=' + (toPoints == null ? '' : encodeURIComponent(toPoints)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)) + '&maxPairs=' + maxPairs, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get distance and travel time between each pair of geographic points
		 * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		 * Post truck/distance/betweenPairs.{outputFormat}
		 * @param {DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat} outputFormat Format of representation
		 * @param {string} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
		 * @param {string} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
		 * @param {TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @param {number} maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
		 * @return {void} A list of routes and their route distances/times.
		 */
		TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs(outputFormat: DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat, fromPoints: string, toPoints: string, outputSRS: TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, maxPairs: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'truck/distance/betweenPairs.' + outputFormat + '?fromPoints=' + (fromPoints == null ? '' : encodeURIComponent(fromPoints)) + '&toPoints=' + (toPoints == null ? '' : encodeURIComponent(toPoints)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)) + '&maxPairs=' + maxPairs, null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
		 * Get truck/optimalDirections.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.
		 */
		TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'truck/optimalDirections.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
		 * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
		 * Post truck/optimalDirections.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.
		 */
		TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'truck/optimalDirections.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
		 * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time for a commercial vehicle.
		 * Get truck/optimalRoute.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time
		 */
		TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'truck/optimalRoute.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		 * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
		 * Post truck/optimalRoute.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start and end points.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.
		 */
		TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'truck/optimalRoute.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the path, distance and travel time between a series of geographic points for a commercial vehicle
		 * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points for a commercial vehicle.
		 * Get truck/route.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br> Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route
		 */
		TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'truck/route.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the path, distance and travel time between a series of geographic points
		 * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
		 * Post truck/route.{outputFormat}
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat} outputFormat Format of representation
		 * @param {string} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
		 * @param {TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria} criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
		 * @param {Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit} distanceUnit distance unit of measure (e.g., km, mi). Default is km.
		 * @param {boolean} roundTrip If true, route ends at start point. Default is false.
		 * @param {Date} departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
		 * @param {boolean} correctSide If true, route starts and ends on same side of road as start/end point.Default is false.
		 * @param {number} truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
		 * @param {string} partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
		 * @param {string} disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
		 * @param {string} routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
		 * @return {void} Geometry, distance, and time of the shortest or fastest route
		 */
		TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription(outputFormat: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat, points: string, outputSRS: TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS | null | undefined, criteria: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria | null | undefined, distanceUnit: Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit | null | undefined, roundTrip: boolean | null | undefined, departure: Date | null | undefined, correctSide: boolean | null | undefined, truckRouteMultiplier: number | null | undefined, partition: string | null | undefined, disable: string | null | undefined, routeDescription: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'truck/route.' + outputFormat + '?points=' + (points == null ? '' : encodeURIComponent(points)) + '&outputSRS=' + outputSRS + '&criteria=' + criteria + '&distanceUnit=' + distanceUnit + '&roundTrip=' + roundTrip + '&departure=' + departure?.toISOString() + '&correctSide=' + correctSide + '&truckRouteMultiplier=' + truckRouteMultiplier + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&disable=' + (disable == null ? '' : encodeURIComponent(disable)) + '&routeDescription=' + (routeDescription == null ? '' : encodeURIComponent(routeDescription)), null, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}
	}

	export enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat { json = 'json', kml = 'kml', html = 'html' }

	export enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria { shortest = 'shortest', fastest = 'fastest' }

	export enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit { km = 'km', mi = 'mi' }

	export enum Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat { json = 'json', html = 'html' }

	export enum DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

	export enum TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS { _4326 = 0, _4269 = 1, _3005 = 2, _26907 = 3, _26908 = 4, _26909 = 5, _26910 = 6, _26911 = 7 }

}

