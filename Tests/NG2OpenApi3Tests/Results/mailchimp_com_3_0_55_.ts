import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Information about subscribers in an Automation email queue. */
	export interface PostAutomationsIdEmailsIdQueueBody {

		/**
		 * The list member's email address.
		 * Required
		 */
		email_address: string;
	}

	/** Information about subscribers in an Automation email queue. */
	export interface PostAutomationsIdEmailsIdQueueBodyFormProperties {

		/**
		 * The list member's email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsIdEmailsIdQueueBodyFormGroup() {
		return new FormGroup<PostAutomationsIdEmailsIdQueueBodyFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A folder used to organize campaigns. */
	export interface PostCampaignFoldersBody {

		/**
		 * Name to associate with the folder.
		 * Required
		 */
		name: string;
	}

	/** A folder used to organize campaigns. */
	export interface PostCampaignFoldersBodyFormProperties {

		/**
		 * Name to associate with the folder.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignFoldersBodyFormGroup() {
		return new FormGroup<PostCampaignFoldersBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about a specific product variant. */
	export interface PostEcommerceStoresIdProductsIdVariantsBody {

		/** The backorders of a product variant. */
		backorders?: string | null;

		/**
		 * A unique identifier for the product variant.
		 * Required
		 */
		id: string;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/**
		 * The title of a product variant.
		 * Required
		 */
		title: string;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}

	/** Information about a specific product variant. */
	export interface PostEcommerceStoresIdProductsIdVariantsBodyFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product variant.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/**
		 * The title of a product variant.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsIdVariantsBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsIdVariantsBodyFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An individual folder listed in the File Manager. */
	export interface PostFileManagerFoldersBody {

		/**
		 * The name of the folder.
		 * Required
		 */
		name: string;
	}

	/** An individual folder listed in the File Manager. */
	export interface PostFileManagerFoldersBodyFormProperties {

		/**
		 * The name of the folder.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostFileManagerFoldersBodyFormGroup() {
		return new FormGroup<PostFileManagerFoldersBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application. */
	export interface PostListsIdInterestCategoriesBody {

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order?: number | null;

		/**
		 * The text description of this category. This field appears on signup forms and is often phrased as a question.
		 * Required
		 */
		title: string;

		/**
		 * Determines how this category’s interests appear on signup forms.
		 * Required
		 */
		type: PostListsIdInterestCategoriesBodyType;
	}

	/** Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application. */
	export interface PostListsIdInterestCategoriesBodyFormProperties {

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order: FormControl<number | null | undefined>,

		/**
		 * The text description of this category. This field appears on signup forms and is often phrased as a question.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/**
		 * Determines how this category’s interests appear on signup forms.
		 * Required
		 */
		type: FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>,
	}
	export function CreatePostListsIdInterestCategoriesBodyFormGroup() {
		return new FormGroup<PostListsIdInterestCategoriesBodyFormProperties>({
			display_order: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PostListsIdInterestCategoriesBodyType { checkboxes = 0, dropdown = 1, radio = 2, hidden = 3 }


	/** Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application. */
	export interface PostListsIdInterestCategoriesIdInterestsBody {

		/** The display order for interests. */
		display_order?: number | null;

		/**
		 * The name of the interest. This can be shown publicly on a subscription form.
		 * Required
		 */
		name: string;
	}

	/** Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application. */
	export interface PostListsIdInterestCategoriesIdInterestsBodyFormProperties {

		/** The display order for interests. */
		display_order: FormControl<number | null | undefined>,

		/**
		 * The name of the interest. This can be shown publicly on a subscription form.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdInterestCategoriesIdInterestsBodyFormGroup() {
		return new FormGroup<PostListsIdInterestCategoriesIdInterestsBodyFormProperties>({
			display_order: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A specific note for a specific member. */
	export interface PostListsIdMembersIdNotesBody {

		/** The content of the note. Note length is limited to 1,000 characters. */
		note?: string | null;
	}

	/** A specific note for a specific member. */
	export interface PostListsIdMembersIdNotesBodyFormProperties {

		/** The content of the note. Note length is limited to 1,000 characters. */
		note: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersIdNotesBodyFormGroup() {
		return new FormGroup<PostListsIdMembersIdNotesBodyFormProperties>({
			note: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configure a webhook for the given list. */
	export interface PostListsIdWebhooksBody {

		/** The events that can trigger the webhook and whether they are enabled. */
		events?: PostListsIdWebhooksBodyEvents;

		/** The possible sources of any events that can trigger the webhook and whether they are enabled. */
		sources?: PostListsIdWebhooksBodySources;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}

	/** Configure a webhook for the given list. */
	export interface PostListsIdWebhooksBodyFormProperties {

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdWebhooksBodyFormGroup() {
		return new FormGroup<PostListsIdWebhooksBodyFormProperties>({
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdWebhooksBodyEvents {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile?: boolean | null;

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe?: boolean | null;

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail?: boolean | null;
	}
	export interface PostListsIdWebhooksBodyEventsFormProperties {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdWebhooksBodyEventsFormGroup() {
		return new FormGroup<PostListsIdWebhooksBodyEventsFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			cleaned: new FormControl<boolean | null | undefined>(undefined),
			profile: new FormControl<boolean | null | undefined>(undefined),
			subscribe: new FormControl<boolean | null | undefined>(undefined),
			unsubscribe: new FormControl<boolean | null | undefined>(undefined),
			upemail: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdWebhooksBodySources {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin?: boolean | null;

		/** Whether the webhook is triggered by actions initiated via the API. */
		api?: boolean | null;

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user?: boolean | null;
	}
	export interface PostListsIdWebhooksBodySourcesFormProperties {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by actions initiated via the API. */
		api: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdWebhooksBodySourcesFormGroup() {
		return new FormGroup<PostListsIdWebhooksBodySourcesFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			api: new FormControl<boolean | null | undefined>(undefined),
			user: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A folder used to organize templates. */
	export interface PostTemplateFoldersBody {

		/**
		 * The name of the folder.
		 * Required
		 */
		name: string;
	}

	/** A folder used to organize templates. */
	export interface PostTemplateFoldersBodyFormProperties {

		/**
		 * The name of the folder.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostTemplateFoldersBodyFormGroup() {
		return new FormGroup<PostTemplateFoldersBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about a specific template. */
	export interface PostTemplatesBody {

		/** The id of the folder the template is currently in. */
		folder_id?: string | null;

		/**
		 * The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API.
		 * Required
		 */
		html: string;

		/**
		 * The name of the template.
		 * Required
		 */
		name: string;
	}

	/** Information about a specific template. */
	export interface PostTemplatesBodyFormProperties {

		/** The id of the folder the template is currently in. */
		folder_id: FormControl<string | null | undefined>,

		/**
		 * The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API.
		 * Required
		 */
		html: FormControl<string | null | undefined>,

		/**
		 * The name of the template.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostTemplatesBodyFormGroup() {
		return new FormGroup<PostTemplatesBodyFormProperties>({
			folder_id: new FormControl<string | null | undefined>(undefined),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * List api root resources
		 * Get links to all other resources available in the API.
		 * Get 
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetRootReturn} 
		 */
		GetRoot(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined): Observable<GetRootReturn> {
			return this.http.get<GetRootReturn>(this.baseUri + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List account exports
		 * Get a list of account exports for a given account.
		 * Get account-exports
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetAccountExportsReturn} 
		 */
		GetAccountExports(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetAccountExportsReturn> {
			return this.http.get<GetAccountExportsReturn>(this.baseUri + 'account-exports?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add export
		 * Create a new account export in your Mailchimp account.
		 * Post account-exports
		 * @return {PostAccountExportReturn} 
		 */
		PostAccountExport(requestBody: PostAccountExportPostBody): Observable<PostAccountExportReturn> {
			return this.http.post<PostAccountExportReturn>(this.baseUri + 'account-exports', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get account export info
		 * Get information about a specific account export.
		 * Get account-exports/{export_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} export_id The unique id for the account export.
		 * @return {GetAccountExportIdReturn} 
		 */
		GetAccountExportId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, export_id: string): Observable<GetAccountExportIdReturn> {
			return this.http.get<GetAccountExportIdReturn>(this.baseUri + 'account-exports/' + (export_id == null ? '' : encodeURIComponent(export_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Get latest chimp chatter
		 * Return the Chimp Chatter for this account ordered by most recent.
		 * Get activity-feed/chimp-chatter
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetActivityFeedChimpChatterReturn} ChimpChatter Collection
		 */
		GetActivityFeedChimpChatter(count: number | null | undefined, offset: number | null | undefined): Observable<GetActivityFeedChimpChatterReturn> {
			return this.http.get<GetActivityFeedChimpChatterReturn>(this.baseUri + 'activity-feed/chimp-chatter?count=' + count + '&offset=' + offset, {});
		}

		/**
		 * List authorized apps
		 * Get a list of an account's registered, connected applications.
		 * Get authorized-apps
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetAuthorizedAppsReturn} 
		 */
		GetAuthorizedApps(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetAuthorizedAppsReturn> {
			return this.http.get<GetAuthorizedAppsReturn>(this.baseUri + 'authorized-apps?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get authorized app info
		 * Get information about a specific authorized application.
		 * Get authorized-apps/{app_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} app_id The unique id for the connected authorized application.
		 * @return {GetAuthorizedAppsIdReturn} 
		 */
		GetAuthorizedAppsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, app_id: string): Observable<GetAuthorizedAppsIdReturn> {
			return this.http.get<GetAuthorizedAppsIdReturn>(this.baseUri + 'authorized-apps/' + (app_id == null ? '' : encodeURIComponent(app_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List automations
		 * Get a summary of an account's classic automations.
		 * Get automations
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {Date} before_create_time Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} since_create_time Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} before_start_time Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} since_start_time Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {GetAutomationsStatus} status Restrict the results to automations with the specified status.
		 * @return {GetAutomationsReturn} 
		 */
		GetAutomations(count: number | null | undefined, offset: number | null | undefined, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, before_create_time: Date | null | undefined, since_create_time: Date | null | undefined, before_start_time: Date | null | undefined, since_start_time: Date | null | undefined, status: GetAutomationsStatus | null | undefined): Observable<GetAutomationsReturn> {
			return this.http.get<GetAutomationsReturn>(this.baseUri + 'automations?count=' + count + '&offset=' + offset + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&before_create_time=' + before_create_time?.toISOString() + '&since_create_time=' + since_create_time?.toISOString() + '&before_start_time=' + before_start_time?.toISOString() + '&since_start_time=' + since_start_time?.toISOString() + '&status=' + status, {});
		}

		/**
		 * Add automation
		 * Create a new classic automation in your Mailchimp account.
		 * Post automations
		 * @return {PostAutomationsReturn} 
		 */
		PostAutomations(requestBody: PostAutomationsPostBody): Observable<PostAutomationsReturn> {
			return this.http.post<PostAutomationsReturn>(this.baseUri + 'automations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get automation info
		 * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.
		 * Get automations/{workflow_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {GetAutomationsIdReturn} 
		 */
		GetAutomationsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, workflow_id: string): Observable<GetAutomationsIdReturn> {
			return this.http.get<GetAutomationsIdReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Archive automation
		 * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.
		 * Post automations/{workflow_id}/actions/archive
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {void} 
		 */
		ArchiveAutomations(workflow_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/actions/archive', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Pause automation emails
		 * Pause all emails in a specific classic automation workflow.
		 * Post automations/{workflow_id}/actions/pause-all-emails
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {void} 
		 */
		PostAutomationsIdActionsPauseAllEmails(workflow_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/actions/pause-all-emails', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Start automation emails
		 * Start all emails in a classic automation workflow.
		 * Post automations/{workflow_id}/actions/start-all-emails
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {void} 
		 */
		PostAutomationsIdActionsStartAllEmails(workflow_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/actions/start-all-emails', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List automated emails
		 * Get a summary of the emails in a classic automation workflow.
		 * Get automations/{workflow_id}/emails
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {GetAutomationsIdEmailsReturn} 
		 */
		GetAutomationsIdEmails(workflow_id: string): Observable<GetAutomationsIdEmailsReturn> {
			return this.http.get<GetAutomationsIdEmailsReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails', {});
		}

		/**
		 * Delete workflow email
		 * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
		 * Delete automations/{workflow_id}/emails/{workflow_email_id}
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {void} 
		 */
		DeleteAutomationsIdEmailsId(workflow_id: string, workflow_email_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get workflow email info
		 * Get information about an individual classic automation workflow email.
		 * Get automations/{workflow_id}/emails/{workflow_email_id}
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {GetAutomationsIdEmailsIdReturn} 
		 */
		GetAutomationsIdEmailsId(workflow_id: string, workflow_email_id: string): Observable<GetAutomationsIdEmailsIdReturn> {
			return this.http.get<GetAutomationsIdEmailsIdReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)), {});
		}

		/**
		 * Update workflow email
		 * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
		 * Patch automations/{workflow_id}/emails/{workflow_email_id}
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {PatchAutomationEmailWorkflowIdReturn} 
		 */
		PatchAutomationEmailWorkflowId(workflow_id: string, workflow_email_id: string, requestBody: PatchAutomationEmailWorkflowIdPatchBody): Observable<PatchAutomationEmailWorkflowIdReturn> {
			return this.http.patch<PatchAutomationEmailWorkflowIdReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Pause automated email
		 * Pause an automated email.
		 * Post automations/{workflow_id}/emails/{workflow_email_id}/actions/pause
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {void} 
		 */
		PostAutomationsIdEmailsIdActionsPause(workflow_id: string, workflow_email_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)) + '/actions/pause', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Start automated email
		 * Start an automated email.
		 * Post automations/{workflow_id}/emails/{workflow_email_id}/actions/start
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {void} 
		 */
		PostAutomationsIdEmailsIdActionsStart(workflow_id: string, workflow_email_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)) + '/actions/start', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List automated email subscribers
		 * Get information about a classic automation email queue.
		 * Get automations/{workflow_id}/emails/{workflow_email_id}/queue
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {GetAutomationsIdEmailsIdQueueReturn} 
		 */
		GetAutomationsIdEmailsIdQueue(workflow_id: string, workflow_email_id: string): Observable<GetAutomationsIdEmailsIdQueueReturn> {
			return this.http.get<GetAutomationsIdEmailsIdQueueReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)) + '/queue', {});
		}

		/**
		 * Add subscriber to workflow email
		 * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
		 * Post automations/{workflow_id}/emails/{workflow_email_id}/queue
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @return {PostAutomationsIdEmailsIdQueueReturn} 
		 */
		PostAutomationsIdEmailsIdQueue(workflow_id: string, workflow_email_id: string, requestBody: PostAutomationsIdEmailsIdQueueBody): Observable<PostAutomationsIdEmailsIdQueueReturn> {
			return this.http.post<PostAutomationsIdEmailsIdQueueReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)) + '/queue', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get automated email subscriber
		 * Get information about a specific subscriber in a classic automation email queue.
		 * Get automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} workflow_email_id The unique id for the Automation workflow email.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {GetAutomationsIdEmailsIdQueueIdReturn} 
		 */
		GetAutomationsIdEmailsIdQueueId(workflow_id: string, workflow_email_id: string, subscriber_hash: string): Observable<GetAutomationsIdEmailsIdQueueIdReturn> {
			return this.http.get<GetAutomationsIdEmailsIdQueueIdReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/emails/' + (workflow_email_id == null ? '' : encodeURIComponent(workflow_email_id)) + '/queue/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)), {});
		}

		/**
		 * List subscribers removed from workflow
		 * Get information about subscribers who were removed from a classic automation workflow.
		 * Get automations/{workflow_id}/removed-subscribers
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {GetAutomationsIdRemovedSubscribersReturn} 
		 */
		GetAutomationsIdRemovedSubscribers(workflow_id: string): Observable<GetAutomationsIdRemovedSubscribersReturn> {
			return this.http.get<GetAutomationsIdRemovedSubscribersReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/removed-subscribers', {});
		}

		/**
		 * Remove subscriber from workflow
		 * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.
		 * Post automations/{workflow_id}/removed-subscribers
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @return {PostAutomationsIdRemovedSubscribersReturn} 
		 */
		PostAutomationsIdRemovedSubscribers(workflow_id: string, requestBody: PostAutomationsIdEmailsIdQueueBody): Observable<PostAutomationsIdRemovedSubscribersReturn> {
			return this.http.post<PostAutomationsIdRemovedSubscribersReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/removed-subscribers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get subscriber removed from workflow
		 * Get information about a specific subscriber who was removed from a classic automation workflow.
		 * Get automations/{workflow_id}/removed-subscribers/{subscriber_hash}
		 * @param {string} workflow_id The unique id for the Automation workflow.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {GetAutomationsIdRemovedSubscribersIdReturn} 
		 */
		GetAutomationsIdRemovedSubscribersId(workflow_id: string, subscriber_hash: string): Observable<GetAutomationsIdRemovedSubscribersIdReturn> {
			return this.http.get<GetAutomationsIdRemovedSubscribersIdReturn>(this.baseUri + 'automations/' + (workflow_id == null ? '' : encodeURIComponent(workflow_id)) + '/removed-subscribers/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)), {});
		}

		/**
		 * List batch webhooks
		 * Get all webhooks that have been configured for batches.
		 * Get batch-webhooks
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetBatchWebhooksReturn} 
		 */
		GetBatchWebhooks(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetBatchWebhooksReturn> {
			return this.http.get<GetBatchWebhooksReturn>(this.baseUri + 'batch-webhooks?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add batch webhook
		 * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.
		 * Post batch-webhooks
		 * @return {PostBatchWebhooksReturn} 
		 */
		PostBatchWebhooks(requestBody: PostBatchWebhooksPostBody): Observable<PostBatchWebhooksReturn> {
			return this.http.post<PostBatchWebhooksReturn>(this.baseUri + 'batch-webhooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete batch webhook
		 * Remove a batch webhook. Webhooks will no longer be sent to the given URL.
		 * Delete batch-webhooks/{batch_webhook_id}
		 * @param {string} batch_webhook_id The unique id for the batch webhook.
		 * @return {void} 
		 */
		DeleteBatchWebhookId(batch_webhook_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'batch-webhooks/' + (batch_webhook_id == null ? '' : encodeURIComponent(batch_webhook_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get batch webhook info
		 * Get information about a specific batch webhook.
		 * Get batch-webhooks/{batch_webhook_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} batch_webhook_id The unique id for the batch webhook.
		 * @return {GetBatchWebhookReturn} 
		 */
		GetBatchWebhook(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, batch_webhook_id: string): Observable<GetBatchWebhookReturn> {
			return this.http.get<GetBatchWebhookReturn>(this.baseUri + 'batch-webhooks/' + (batch_webhook_id == null ? '' : encodeURIComponent(batch_webhook_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update batch webhook
		 * Update a webhook that will fire whenever any batch request completes processing.
		 * Patch batch-webhooks/{batch_webhook_id}
		 * @param {string} batch_webhook_id The unique id for the batch webhook.
		 * @return {PatchBatchWebhooksReturn} 
		 */
		PatchBatchWebhooks(batch_webhook_id: string, requestBody: PatchBatchWebhooksPatchBody): Observable<PatchBatchWebhooksReturn> {
			return this.http.patch<PatchBatchWebhooksReturn>(this.baseUri + 'batch-webhooks/' + (batch_webhook_id == null ? '' : encodeURIComponent(batch_webhook_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List batch requests
		 * Get a summary of batch requests that have been made.
		 * Get batches
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetBatchesReturn} 
		 */
		GetBatches(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetBatchesReturn> {
			return this.http.get<GetBatchesReturn>(this.baseUri + 'batches?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Start batch operation
		 * Begin processing a batch operations request.
		 * Post batches
		 * @return {PostBatchesReturn} 
		 */
		PostBatches(requestBody: PostBatchesPostBody): Observable<PostBatchesReturn> {
			return this.http.post<PostBatchesReturn>(this.baseUri + 'batches', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete batch request
		 * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
		 * Delete batches/{batch_id}
		 * @param {string} batch_id The unique id for the batch operation.
		 * @return {void} 
		 */
		DeleteBatchesId(batch_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'batches/' + (batch_id == null ? '' : encodeURIComponent(batch_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get batch operation status
		 * Get the status of a batch request.
		 * Get batches/{batch_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} batch_id The unique id for the batch operation.
		 * @return {GetBatchesIdReturn} 
		 */
		GetBatchesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, batch_id: string): Observable<GetBatchesIdReturn> {
			return this.http.get<GetBatchesIdReturn>(this.baseUri + 'batches/' + (batch_id == null ? '' : encodeURIComponent(batch_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List campaign folders
		 * Get all folders used to organize campaigns.
		 * Get campaign-folders
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetCampaignFoldersReturn} 
		 */
		GetCampaignFolders(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetCampaignFoldersReturn> {
			return this.http.get<GetCampaignFoldersReturn>(this.baseUri + 'campaign-folders?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add campaign folder
		 * Create a new campaign folder.
		 * Post campaign-folders
		 * @return {PostCampaignFoldersReturn} 
		 */
		PostCampaignFolders(requestBody: PostCampaignFoldersBody): Observable<PostCampaignFoldersReturn> {
			return this.http.post<PostCampaignFoldersReturn>(this.baseUri + 'campaign-folders', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete campaign folder
		 * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.
		 * Delete campaign-folders/{folder_id}
		 * @param {string} folder_id The unique id for the campaign folder.
		 * @return {void} 
		 */
		DeleteCampaignFoldersId(folder_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'campaign-folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get campaign folder
		 * Get information about a specific folder used to organize campaigns.
		 * Get campaign-folders/{folder_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} folder_id The unique id for the campaign folder.
		 * @return {GetCampaignFoldersIdReturn} 
		 */
		GetCampaignFoldersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, folder_id: string): Observable<GetCampaignFoldersIdReturn> {
			return this.http.get<GetCampaignFoldersIdReturn>(this.baseUri + 'campaign-folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update campaign folder
		 * Update a specific folder used to organize campaigns.
		 * Patch campaign-folders/{folder_id}
		 * @param {string} folder_id The unique id for the campaign folder.
		 * @return {PatchCampaignFoldersIdReturn} 
		 */
		PatchCampaignFoldersId(folder_id: string, requestBody: PostCampaignFoldersBody): Observable<PatchCampaignFoldersIdReturn> {
			return this.http.patch<PatchCampaignFoldersIdReturn>(this.baseUri + 'campaign-folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List campaigns
		 * Get all campaigns in an account.
		 * Get campaigns
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {GetCampaignsType} type The campaign type.
		 * @param {GetCampaignsStatus} status The status of the campaign.
		 * @param {Date} before_send_time Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} since_send_time Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} before_create_time Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} since_create_time Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} list_id The unique id for the list.
		 * @param {string} folder_id The unique folder id.
		 * @param {string} member_id Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.
		 * @param {GetCampaignsSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetCampaignsReturn} 
		 */
		GetCampaigns(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, type: GetCampaignsType | null | undefined, status: GetCampaignsStatus | null | undefined, before_send_time: Date | null | undefined, since_send_time: Date | null | undefined, before_create_time: Date | null | undefined, since_create_time: Date | null | undefined, list_id: string | null | undefined, folder_id: string | null | undefined, member_id: string | null | undefined, sort_field: GetCampaignsSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetCampaignsReturn> {
			return this.http.get<GetCampaignsReturn>(this.baseUri + 'campaigns?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + type + '&status=' + status + '&before_send_time=' + before_send_time?.toISOString() + '&since_send_time=' + since_send_time?.toISOString() + '&before_create_time=' + before_create_time?.toISOString() + '&since_create_time=' + since_create_time?.toISOString() + '&list_id=' + (list_id == null ? '' : encodeURIComponent(list_id)) + '&folder_id=' + (folder_id == null ? '' : encodeURIComponent(folder_id)) + '&member_id=' + (member_id == null ? '' : encodeURIComponent(member_id)) + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Add campaign
		 * Create a new Mailchimp campaign.
		 * Post campaigns
		 * @return {PostCampaignsReturn} 
		 */
		PostCampaigns(requestBody: PostCampaignsPostBody): Observable<PostCampaignsReturn> {
			return this.http.post<PostCampaignsReturn>(this.baseUri + 'campaigns', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete campaign
		 * Remove a campaign from your Mailchimp account.
		 * Delete campaigns/{campaign_id}
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		DeleteCampaignsId(campaign_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get campaign info
		 * Get information about a specific campaign.
		 * Get campaigns/{campaign_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetCampaignsIdReturn} 
		 */
		GetCampaignsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetCampaignsIdReturn> {
			return this.http.get<GetCampaignsIdReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update campaign settings
		 * Update some or all of the settings for a specific campaign.
		 * Patch campaigns/{campaign_id}
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {PatchCampaignsIdReturn} 
		 */
		PatchCampaignsId(campaign_id: string, requestBody: PatchCampaignsIdPatchBody): Observable<PatchCampaignsIdReturn> {
			return this.http.patch<PatchCampaignsIdReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Cancel campaign
		 * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
		 * Post campaigns/{campaign_id}/actions/cancel-send
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsCancelSend(campaign_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/cancel-send', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Resend campaign
		 * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.
		 * Post campaigns/{campaign_id}/actions/create-resend
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {PostCampaignsIdActionsCreateResendReturn} 
		 */
		PostCampaignsIdActionsCreateResend(campaign_id: string): Observable<PostCampaignsIdActionsCreateResendReturn> {
			return this.http.post<PostCampaignsIdActionsCreateResendReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/create-resend', null, {});
		}

		/**
		 * Pause rss campaign
		 * Pause an RSS-Driven campaign.
		 * Post campaigns/{campaign_id}/actions/pause
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsPause(campaign_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/pause', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Replicate campaign
		 * Replicate a campaign in saved or send status.
		 * Post campaigns/{campaign_id}/actions/replicate
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {PostCampaignsIdActionsReplicateReturn} 
		 */
		PostCampaignsIdActionsReplicate(campaign_id: string): Observable<PostCampaignsIdActionsReplicateReturn> {
			return this.http.post<PostCampaignsIdActionsReplicateReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/replicate', null, {});
		}

		/**
		 * Resume rss campaign
		 * Resume an RSS-Driven campaign.
		 * Post campaigns/{campaign_id}/actions/resume
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsResume(campaign_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/resume', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule campaign
		 * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
		 * Post campaigns/{campaign_id}/actions/schedule
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsSchedule(campaign_id: string, requestBody: PostCampaignsIdActionsSchedulePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/schedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Send campaign
		 * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
		 * Post campaigns/{campaign_id}/actions/send
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsSend(campaign_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/send', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Send test email
		 * Send a test email.
		 * Post campaigns/{campaign_id}/actions/test
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsTest(campaign_id: string, requestBody: PostCampaignsIdActionsTestPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/test', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Unschedule campaign
		 * Unschedule a scheduled campaign that hasn't started sending.
		 * Post campaigns/{campaign_id}/actions/unschedule
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {void} 
		 */
		PostCampaignsIdActionsUnschedule(campaign_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/actions/unschedule', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get campaign content
		 * Get the the HTML and plain-text content for a campaign.
		 * Get campaigns/{campaign_id}/content
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetCampaignsIdContentReturn} 
		 */
		GetCampaignsIdContent(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetCampaignsIdContentReturn> {
			return this.http.get<GetCampaignsIdContentReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/content?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Set campaign content
		 * Set the content for a campaign.
		 * Put campaigns/{campaign_id}/content
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {PutCampaignsIdContentReturn} 
		 */
		PutCampaignsIdContent(campaign_id: string, requestBody: PutCampaignsIdContentPutBody): Observable<PutCampaignsIdContentReturn> {
			return this.http.put<PutCampaignsIdContentReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/content', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List campaign feedback
		 * Get team feedback while you're working together on a Mailchimp campaign.
		 * Get campaigns/{campaign_id}/feedback
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetCampaignsIdFeedbackReturn} 
		 */
		GetCampaignsIdFeedback(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetCampaignsIdFeedbackReturn> {
			return this.http.get<GetCampaignsIdFeedbackReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/feedback?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Add campaign feedback
		 * Add feedback on a specific campaign.
		 * Post campaigns/{campaign_id}/feedback
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {PostCampaignsIdFeedbackReturn} 
		 */
		PostCampaignsIdFeedback(campaign_id: string, requestBody: PostCampaignsIdFeedbackPostBody): Observable<PostCampaignsIdFeedbackReturn> {
			return this.http.post<PostCampaignsIdFeedbackReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/feedback', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete campaign feedback message
		 * Remove a specific feedback message for a campaign.
		 * Delete campaigns/{campaign_id}/feedback/{feedback_id}
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} feedback_id The unique id for the feedback message.
		 * @return {void} 
		 */
		DeleteCampaignsIdFeedbackId(campaign_id: string, feedback_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/feedback/' + (feedback_id == null ? '' : encodeURIComponent(feedback_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get campaign feedback message
		 * Get a specific feedback message from a campaign.
		 * Get campaigns/{campaign_id}/feedback/{feedback_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} feedback_id The unique id for the feedback message.
		 * @return {GetCampaignsIdFeedbackIdReturn} 
		 */
		GetCampaignsIdFeedbackId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, feedback_id: string): Observable<GetCampaignsIdFeedbackIdReturn> {
			return this.http.get<GetCampaignsIdFeedbackIdReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/feedback/' + (feedback_id == null ? '' : encodeURIComponent(feedback_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update campaign feedback message
		 * Update a specific feedback message for a campaign.
		 * Patch campaigns/{campaign_id}/feedback/{feedback_id}
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} feedback_id The unique id for the feedback message.
		 * @return {PatchCampaignsIdFeedbackIdReturn} 
		 */
		PatchCampaignsIdFeedbackId(campaign_id: string, feedback_id: string, requestBody: PatchCampaignsIdFeedbackIdPatchBody): Observable<PatchCampaignsIdFeedbackIdReturn> {
			return this.http.patch<PatchCampaignsIdFeedbackIdReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/feedback/' + (feedback_id == null ? '' : encodeURIComponent(feedback_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get campaign send checklist
		 * Review the send checklist for a campaign, and resolve any issues before sending.
		 * Get campaigns/{campaign_id}/send-checklist
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetCampaignsIdSendChecklistReturn} 
		 */
		GetCampaignsIdSendChecklist(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetCampaignsIdSendChecklistReturn> {
			return this.http.get<GetCampaignsIdSendChecklistReturn>(this.baseUri + 'campaigns/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/send-checklist?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List connected sites
		 * Get all connected sites in an account.
		 * Get connected-sites
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetConnectedSitesReturn} 
		 */
		GetConnectedSites(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetConnectedSitesReturn> {
			return this.http.get<GetConnectedSitesReturn>(this.baseUri + 'connected-sites?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add connected site
		 * Create a new Mailchimp connected site.
		 * Post connected-sites
		 * @return {PostConnectedSitesReturn} 
		 */
		PostConnectedSites(requestBody: PostConnectedSitesPostBody): Observable<PostConnectedSitesReturn> {
			return this.http.post<PostConnectedSitesReturn>(this.baseUri + 'connected-sites', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete connected site
		 * Remove a connected site from your Mailchimp account.
		 * Delete connected-sites/{connected_site_id}
		 * @param {string} connected_site_id The unique identifier for the site.
		 * @return {void} 
		 */
		DeleteConnectedSitesId(connected_site_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'connected-sites/' + (connected_site_id == null ? '' : encodeURIComponent(connected_site_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get connected site
		 * Get information about a specific connected site.
		 * Get connected-sites/{connected_site_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} connected_site_id The unique identifier for the site.
		 * @return {GetConnectedSitesIdReturn} 
		 */
		GetConnectedSitesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, connected_site_id: string): Observable<GetConnectedSitesIdReturn> {
			return this.http.get<GetConnectedSitesIdReturn>(this.baseUri + 'connected-sites/' + (connected_site_id == null ? '' : encodeURIComponent(connected_site_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Verify connected site script
		 * Verify that the connected sites script has been installed, either via the script URL or fragment.
		 * Post connected-sites/{connected_site_id}/actions/verify-script-installation
		 * @param {string} connected_site_id The unique identifier for the site.
		 * @return {void} 
		 */
		PostConnectedSitesIdActionsVerifyScriptInstallation(connected_site_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'connected-sites/' + (connected_site_id == null ? '' : encodeURIComponent(connected_site_id)) + '/actions/verify-script-installation', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List conversations
		 * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
		 * Get conversations
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {GetConversationsHas_unread_messages} has_unread_messages Whether the conversation has any unread messages.
		 * @param {string} list_id The unique id for the list.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetConversationsReturn} 
		 */
		GetConversations(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, has_unread_messages: GetConversationsHas_unread_messages | null | undefined, list_id: string | null | undefined, campaign_id: string | null | undefined): Observable<GetConversationsReturn> {
			return this.http.get<GetConversationsReturn>(this.baseUri + 'conversations?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&has_unread_messages=' + has_unread_messages + '&list_id=' + (list_id == null ? '' : encodeURIComponent(list_id)) + '&campaign_id=' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)), {});
		}

		/**
		 * Get conversation
		 * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
		 * Get conversations/{conversation_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} conversation_id The unique id for the conversation.
		 * @return {GetConversationsIdReturn} 
		 */
		GetConversationsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, conversation_id: string): Observable<GetConversationsIdReturn> {
			return this.http.get<GetConversationsIdReturn>(this.baseUri + 'conversations/' + (conversation_id == null ? '' : encodeURIComponent(conversation_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List messages
		 * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
		 * Get conversations/{conversation_id}/messages
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} conversation_id The unique id for the conversation.
		 * @param {GetConversationsHas_unread_messages} is_read Whether a conversation message has been marked as read.
		 * @param {Date} before_timestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} since_timestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @return {GetConversationsIdMessagesReturn} 
		 */
		GetConversationsIdMessages(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, conversation_id: string, is_read: GetConversationsHas_unread_messages | null | undefined, before_timestamp: Date | null | undefined, since_timestamp: Date | null | undefined): Observable<GetConversationsIdMessagesReturn> {
			return this.http.get<GetConversationsIdMessagesReturn>(this.baseUri + 'conversations/' + (conversation_id == null ? '' : encodeURIComponent(conversation_id)) + '/messages?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&is_read=' + is_read + '&before_timestamp=' + before_timestamp?.toISOString() + '&since_timestamp=' + since_timestamp?.toISOString(), {});
		}

		/**
		 * Get message
		 * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
		 * Get conversations/{conversation_id}/messages/{message_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} conversation_id The unique id for the conversation.
		 * @param {string} message_id The unique id for the conversation message.
		 * @return {GetConversationsIdMessagesIdReturn} 
		 */
		GetConversationsIdMessagesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, conversation_id: string, message_id: string): Observable<GetConversationsIdMessagesIdReturn> {
			return this.http.get<GetConversationsIdMessagesIdReturn>(this.baseUri + 'conversations/' + (conversation_id == null ? '' : encodeURIComponent(conversation_id)) + '/messages/' + (message_id == null ? '' : encodeURIComponent(message_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Customer Journeys API trigger for a contact
		 * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.
		 * Post customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger
		 * @param {number} journey_id The id for the Journey.
		 * @param {number} step_id The id for the Step.
		 * @return {void} 
		 */
		PostCustomerJourneysJourneysIdStepsIdActionsTrigger(journey_id: number, step_id: number, requestBody: PostCustomerJourneysJourneysIdStepsIdActionsTriggerPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'customer-journeys/journeys/' + journey_id + '/steps/' + step_id + '/actions/trigger', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List account orders
		 * Get information about an account's orders.
		 * Get ecommerce/orders
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id Restrict results to orders with a specific `campaign_id` value.
		 * @param {string} outreach_id Restrict results to orders with a specific `outreach_id` value.
		 * @param {string} customer_id Restrict results to orders made by a specific customer.
		 * @param {boolean} has_outreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
		 * @return {GetEcommerceOrdersReturn} 
		 */
		GetEcommerceOrders(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string | null | undefined, outreach_id: string | null | undefined, customer_id: string | null | undefined, has_outreach: boolean | null | undefined): Observable<GetEcommerceOrdersReturn> {
			return this.http.get<GetEcommerceOrdersReturn>(this.baseUri + 'ecommerce/orders?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&campaign_id=' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '&outreach_id=' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '&customer_id=' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '&has_outreach=' + has_outreach, {});
		}

		/**
		 * List stores
		 * Get information about all stores in the account.
		 * Get ecommerce/stores
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetEcommerceStoresReturn} 
		 */
		GetEcommerceStores(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetEcommerceStoresReturn> {
			return this.http.get<GetEcommerceStoresReturn>(this.baseUri + 'ecommerce/stores?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add store
		 * Add a new store to your Mailchimp account.
		 * Post ecommerce/stores
		 * @return {PostEcommerceStoresReturn} 
		 */
		PostEcommerceStores(requestBody: PostEcommerceStoresPostBody): Observable<PostEcommerceStoresReturn> {
			return this.http.post<PostEcommerceStoresReturn>(this.baseUri + 'ecommerce/stores', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete store
		 * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
		 * Delete ecommerce/stores/{store_id}
		 * @param {string} store_id The store id.
		 * @return {void} 
		 */
		DeleteEcommerceStoresId(store_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get store info
		 * Get information about a specific store.
		 * Get ecommerce/stores/{store_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @return {GetEcommerceStoresIdReturn} 
		 */
		GetEcommerceStoresId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string): Observable<GetEcommerceStoresIdReturn> {
			return this.http.get<GetEcommerceStoresIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update store
		 * Update a store.
		 * Patch ecommerce/stores/{store_id}
		 * @param {string} store_id The store id.
		 * @return {PatchEcommerceStoresIdReturn} 
		 */
		PatchEcommerceStoresId(store_id: string, requestBody: PatchEcommerceStoresIdPatchBody): Observable<PatchEcommerceStoresIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List carts
		 * Get information about a store's carts.
		 * Get ecommerce/stores/{store_id}/carts
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @return {GetEcommerceStoresIdCartsReturn} 
		 */
		GetEcommerceStoresIdCarts(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string): Observable<GetEcommerceStoresIdCartsReturn> {
			return this.http.get<GetEcommerceStoresIdCartsReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add cart
		 * Add a new cart to a store.
		 * Post ecommerce/stores/{store_id}/carts
		 * @param {string} store_id The store id.
		 * @return {PostEcommerceStoresIdCartsReturn} 
		 */
		PostEcommerceStoresIdCarts(store_id: string, requestBody: PostEcommerceStoresIdCartsPostBody): Observable<PostEcommerceStoresIdCartsReturn> {
			return this.http.post<PostEcommerceStoresIdCartsReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete cart
		 * Delete a cart.
		 * Delete ecommerce/stores/{store_id}/carts/{cart_id}
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdCartsId(store_id: string, cart_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get cart info
		 * Get information about a specific cart.
		 * Get ecommerce/stores/{store_id}/carts/{cart_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @return {GetEcommerceStoresIdCartsIdReturn} 
		 */
		GetEcommerceStoresIdCartsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, cart_id: string): Observable<GetEcommerceStoresIdCartsIdReturn> {
			return this.http.get<GetEcommerceStoresIdCartsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update cart
		 * Update a specific cart.
		 * Patch ecommerce/stores/{store_id}/carts/{cart_id}
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @return {PatchEcommerceStoresIdCartsIdReturn} 
		 */
		PatchEcommerceStoresIdCartsId(store_id: string, cart_id: string, requestBody: PatchEcommerceStoresIdCartsIdPatchBody): Observable<PatchEcommerceStoresIdCartsIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdCartsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List cart line items
		 * Get information about a cart's line items.
		 * Get ecommerce/stores/{store_id}/carts/{cart_id}/lines
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @return {GetEcommerceStoresIdCartsIdLinesReturn} 
		 */
		GetEcommerceStoresIdCartsIdLines(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string, cart_id: string): Observable<GetEcommerceStoresIdCartsIdLinesReturn> {
			return this.http.get<GetEcommerceStoresIdCartsIdLinesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)) + '/lines?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add cart line item
		 * Add a new line item to an existing cart.
		 * Post ecommerce/stores/{store_id}/carts/{cart_id}/lines
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @return {PostEcommerceStoresIdCartsIdLinesReturn} 
		 */
		PostEcommerceStoresIdCartsIdLines(store_id: string, cart_id: string, requestBody: PostEcommerceStoresIdCartsIdLinesPostBody): Observable<PostEcommerceStoresIdCartsIdLinesReturn> {
			return this.http.post<PostEcommerceStoresIdCartsIdLinesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)) + '/lines', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete cart line item
		 * Delete a specific cart line item.
		 * Delete ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @param {string} line_id The id for the line item of a cart.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdCartsLinesId(store_id: string, cart_id: string, line_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)) + '/lines/' + (line_id == null ? '' : encodeURIComponent(line_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get cart line item
		 * Get information about a specific cart line item.
		 * Get ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @param {string} line_id The id for the line item of a cart.
		 * @return {GetEcommerceStoresIdCartsIdLinesIdReturn} 
		 */
		GetEcommerceStoresIdCartsIdLinesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, cart_id: string, line_id: string): Observable<GetEcommerceStoresIdCartsIdLinesIdReturn> {
			return this.http.get<GetEcommerceStoresIdCartsIdLinesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)) + '/lines/' + (line_id == null ? '' : encodeURIComponent(line_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update cart line item
		 * Update a specific cart line item.
		 * Patch ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}
		 * @param {string} store_id The store id.
		 * @param {string} cart_id The id for the cart.
		 * @param {string} line_id The id for the line item of a cart.
		 * @return {PatchEcommerceStoresIdCartsIdLinesIdReturn} 
		 */
		PatchEcommerceStoresIdCartsIdLinesId(store_id: string, cart_id: string, line_id: string, requestBody: PatchEcommerceStoresIdCartsIdLinesIdPatchBody): Observable<PatchEcommerceStoresIdCartsIdLinesIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdCartsIdLinesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/carts/' + (cart_id == null ? '' : encodeURIComponent(cart_id)) + '/lines/' + (line_id == null ? '' : encodeURIComponent(line_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List customers
		 * Get information about a store's customers.
		 * Get ecommerce/stores/{store_id}/customers
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @param {string} email_address Restrict the response to customers with the email address.
		 * @return {GetEcommerceStoresIdCustomersReturn} 
		 */
		GetEcommerceStoresIdCustomers(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string, email_address: string | null | undefined): Observable<GetEcommerceStoresIdCustomersReturn> {
			return this.http.get<GetEcommerceStoresIdCustomersReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/customers?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&email_address=' + (email_address == null ? '' : encodeURIComponent(email_address)), {});
		}

		/**
		 * Add customer
		 * Add a new customer to a store.
		 * Post ecommerce/stores/{store_id}/customers
		 * @param {string} store_id The store id.
		 * @return {PostEcommerceStoresIdCustomersReturn} 
		 */
		PostEcommerceStoresIdCustomers(store_id: string, requestBody: PostEcommerceStoresIdCustomersPostBody): Observable<PostEcommerceStoresIdCustomersReturn> {
			return this.http.post<PostEcommerceStoresIdCustomersReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/customers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete customer
		 * Delete a customer from a store.
		 * Delete ecommerce/stores/{store_id}/customers/{customer_id}
		 * @param {string} store_id The store id.
		 * @param {string} customer_id The id for the customer of a store.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdCustomersId(store_id: string, customer_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get customer info
		 * Get information about a specific customer.
		 * Get ecommerce/stores/{store_id}/customers/{customer_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} customer_id The id for the customer of a store.
		 * @return {GetEcommerceStoresIdCustomersIdReturn} 
		 */
		GetEcommerceStoresIdCustomersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, customer_id: string): Observable<GetEcommerceStoresIdCustomersIdReturn> {
			return this.http.get<GetEcommerceStoresIdCustomersIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update customer
		 * Update a customer.
		 * Patch ecommerce/stores/{store_id}/customers/{customer_id}
		 * @param {string} store_id The store id.
		 * @param {string} customer_id The id for the customer of a store.
		 * @return {PatchEcommerceStoresIdCustomersIdReturn} 
		 */
		PatchEcommerceStoresIdCustomersId(store_id: string, customer_id: string, requestBody: PatchEcommerceStoresIdCustomersIdPatchBody): Observable<PatchEcommerceStoresIdCustomersIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdCustomersIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Add or update customer
		 * Add or update a customer.
		 * Put ecommerce/stores/{store_id}/customers/{customer_id}
		 * @param {string} store_id The store id.
		 * @param {string} customer_id The id for the customer of a store.
		 * @return {PutEcommerceStoresIdCustomersIdReturn} 
		 */
		PutEcommerceStoresIdCustomersId(store_id: string, customer_id: string, requestBody: PutEcommerceStoresIdCustomersIdPutBody): Observable<PutEcommerceStoresIdCustomersIdReturn> {
			return this.http.put<PutEcommerceStoresIdCustomersIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List orders
		 * Get information about a store's orders.
		 * Get ecommerce/stores/{store_id}/orders
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @param {string} customer_id Restrict results to orders made by a specific customer.
		 * @param {boolean} has_outreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
		 * @param {string} campaign_id Restrict results to orders with a specific `campaign_id` value.
		 * @param {string} outreach_id Restrict results to orders with a specific `outreach_id` value.
		 * @return {GetEcommerceStoresIdOrdersReturn} 
		 */
		GetEcommerceStoresIdOrders(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string, customer_id: string | null | undefined, has_outreach: boolean | null | undefined, campaign_id: string | null | undefined, outreach_id: string | null | undefined): Observable<GetEcommerceStoresIdOrdersReturn> {
			return this.http.get<GetEcommerceStoresIdOrdersReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&customer_id=' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '&has_outreach=' + has_outreach + '&campaign_id=' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '&outreach_id=' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)), {});
		}

		/**
		 * Add order
		 * Add a new order to a store.
		 * Post ecommerce/stores/{store_id}/orders
		 * @param {string} store_id The store id.
		 * @return {PostEcommerceStoresIdOrdersReturn} 
		 */
		PostEcommerceStoresIdOrders(store_id: string, requestBody: PostEcommerceStoresIdOrdersPostBody): Observable<PostEcommerceStoresIdOrdersReturn> {
			return this.http.post<PostEcommerceStoresIdOrdersReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete order
		 * Delete an order.
		 * Delete ecommerce/stores/{store_id}/orders/{order_id}
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdOrdersId(store_id: string, order_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get order info
		 * Get information about a specific order.
		 * Get ecommerce/stores/{store_id}/orders/{order_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @return {GetEcommerceStoresIdOrdersIdReturn} 
		 */
		GetEcommerceStoresIdOrdersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, order_id: string): Observable<GetEcommerceStoresIdOrdersIdReturn> {
			return this.http.get<GetEcommerceStoresIdOrdersIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update order
		 * Update a specific order.
		 * Patch ecommerce/stores/{store_id}/orders/{order_id}
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @return {PatchEcommerceStoresIdOrdersIdReturn} 
		 */
		PatchEcommerceStoresIdOrdersId(store_id: string, order_id: string, requestBody: PatchEcommerceStoresIdOrdersIdPatchBody): Observable<PatchEcommerceStoresIdOrdersIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdOrdersIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List order line items
		 * Get information about an order's line items.
		 * Get ecommerce/stores/{store_id}/orders/{order_id}/lines
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @return {GetEcommerceStoresIdOrdersIdLinesReturn} 
		 */
		GetEcommerceStoresIdOrdersIdLines(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string, order_id: string): Observable<GetEcommerceStoresIdOrdersIdLinesReturn> {
			return this.http.get<GetEcommerceStoresIdOrdersIdLinesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '/lines?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add order line item
		 * Add a new line item to an existing order.
		 * Post ecommerce/stores/{store_id}/orders/{order_id}/lines
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @return {PostEcommerceStoresIdOrdersIdLinesReturn} 
		 */
		PostEcommerceStoresIdOrdersIdLines(store_id: string, order_id: string, requestBody: PostEcommerceStoresIdOrdersIdLinesPostBody): Observable<PostEcommerceStoresIdOrdersIdLinesReturn> {
			return this.http.post<PostEcommerceStoresIdOrdersIdLinesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '/lines', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete order line item
		 * Delete a specific order line item.
		 * Delete ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @param {string} line_id The id for the line item of an order.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdOrdersIdLinesId(store_id: string, order_id: string, line_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '/lines/' + (line_id == null ? '' : encodeURIComponent(line_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get order line item
		 * Get information about a specific order line item.
		 * Get ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @param {string} line_id The id for the line item of an order.
		 * @return {GetEcommerceStoresIdOrdersIdLinesIdReturn} 
		 */
		GetEcommerceStoresIdOrdersIdLinesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, order_id: string, line_id: string): Observable<GetEcommerceStoresIdOrdersIdLinesIdReturn> {
			return this.http.get<GetEcommerceStoresIdOrdersIdLinesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '/lines/' + (line_id == null ? '' : encodeURIComponent(line_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update order line item
		 * Update a specific order line item.
		 * Patch ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}
		 * @param {string} store_id The store id.
		 * @param {string} order_id The id for the order in a store.
		 * @param {string} line_id The id for the line item of an order.
		 * @return {PatchEcommerceStoresIdOrdersIdLinesIdReturn} 
		 */
		PatchEcommerceStoresIdOrdersIdLinesId(store_id: string, order_id: string, line_id: string, requestBody: PatchEcommerceStoresIdOrdersIdLinesIdPatchBody): Observable<PatchEcommerceStoresIdOrdersIdLinesIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdOrdersIdLinesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '/lines/' + (line_id == null ? '' : encodeURIComponent(line_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List product
		 * Get information about a store's products.
		 * Get ecommerce/stores/{store_id}/products
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @return {GetEcommerceStoresIdProductsReturn} 
		 */
		GetEcommerceStoresIdProducts(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string): Observable<GetEcommerceStoresIdProductsReturn> {
			return this.http.get<GetEcommerceStoresIdProductsReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add product
		 * Add a new product to a store.
		 * Post ecommerce/stores/{store_id}/products
		 * @param {string} store_id The store id.
		 * @return {PostEcommerceStoresIdProductsReturn} 
		 */
		PostEcommerceStoresIdProducts(store_id: string, requestBody: PostEcommerceStoresIdProductsPostBody): Observable<PostEcommerceStoresIdProductsReturn> {
			return this.http.post<PostEcommerceStoresIdProductsReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete product
		 * Delete a product.
		 * Delete ecommerce/stores/{store_id}/products/{product_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdProductsId(store_id: string, product_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get product info
		 * Get information about a specific product.
		 * Get ecommerce/stores/{store_id}/products/{product_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {GetEcommerceStoresIdProductsIdReturn} 
		 */
		GetEcommerceStoresIdProductsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, product_id: string): Observable<GetEcommerceStoresIdProductsIdReturn> {
			return this.http.get<GetEcommerceStoresIdProductsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update product
		 * Update a specific product.
		 * Patch ecommerce/stores/{store_id}/products/{product_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {PatchEcommerceStoresIdProductsIdReturn} 
		 */
		PatchEcommerceStoresIdProductsId(store_id: string, product_id: string, requestBody: PatchEcommerceStoresIdProductsIdPatchBody): Observable<PatchEcommerceStoresIdProductsIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdProductsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List product images
		 * Get information about a product's images.
		 * Get ecommerce/stores/{store_id}/products/{product_id}/images
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {GetEcommerceStoresIdProductsIdImagesReturn} 
		 */
		GetEcommerceStoresIdProductsIdImages(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string, product_id: string): Observable<GetEcommerceStoresIdProductsIdImagesReturn> {
			return this.http.get<GetEcommerceStoresIdProductsIdImagesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/images?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add product image
		 * Add a new image to the product.
		 * Post ecommerce/stores/{store_id}/products/{product_id}/images
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {PostEcommerceStoresIdProductsIdImagesReturn} 
		 */
		PostEcommerceStoresIdProductsIdImages(store_id: string, product_id: string, requestBody: PostEcommerceStoresIdProductsIdImagesPostBody): Observable<PostEcommerceStoresIdProductsIdImagesReturn> {
			return this.http.post<PostEcommerceStoresIdProductsIdImagesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/images', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete product image
		 * Delete a product image.
		 * Delete ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} image_id The id for the product image.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdProductsIdImagesId(store_id: string, product_id: string, image_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/images/' + (image_id == null ? '' : encodeURIComponent(image_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get product image info
		 * Get information about a specific product image.
		 * Get ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} image_id The id for the product image.
		 * @return {GetEcommerceStoresIdProductsIdImagesIdReturn} 
		 */
		GetEcommerceStoresIdProductsIdImagesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, product_id: string, image_id: string): Observable<GetEcommerceStoresIdProductsIdImagesIdReturn> {
			return this.http.get<GetEcommerceStoresIdProductsIdImagesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/images/' + (image_id == null ? '' : encodeURIComponent(image_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update product image
		 * Update a product image.
		 * Patch ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} image_id The id for the product image.
		 * @return {PatchEcommerceStoresIdProductsIdImagesIdReturn} 
		 */
		PatchEcommerceStoresIdProductsIdImagesId(store_id: string, product_id: string, image_id: string, requestBody: PatchEcommerceStoresIdProductsIdImagesIdPatchBody): Observable<PatchEcommerceStoresIdProductsIdImagesIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdProductsIdImagesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/images/' + (image_id == null ? '' : encodeURIComponent(image_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List product variants
		 * Get information about a product's variants.
		 * Get ecommerce/stores/{store_id}/products/{product_id}/variants
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {GetEcommerceStoresIdProductsIdVariantsReturn} 
		 */
		GetEcommerceStoresIdProductsIdVariants(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string, product_id: string): Observable<GetEcommerceStoresIdProductsIdVariantsReturn> {
			return this.http.get<GetEcommerceStoresIdProductsIdVariantsReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/variants?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add product variant
		 * Add a new variant to the product.
		 * Post ecommerce/stores/{store_id}/products/{product_id}/variants
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @return {PostEcommerceStoresIdProductsIdVariantsReturn} 
		 */
		PostEcommerceStoresIdProductsIdVariants(store_id: string, product_id: string, requestBody: PostEcommerceStoresIdProductsIdVariantsBody): Observable<PostEcommerceStoresIdProductsIdVariantsReturn> {
			return this.http.post<PostEcommerceStoresIdProductsIdVariantsReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/variants', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete product variant
		 * Delete a product variant.
		 * Delete ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} variant_id The id for the product variant.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdProductsIdVariantsId(store_id: string, product_id: string, variant_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/variants/' + (variant_id == null ? '' : encodeURIComponent(variant_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get product variant info
		 * Get information about a specific product variant.
		 * Get ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} variant_id The id for the product variant.
		 * @return {GetEcommerceStoresIdProductsIdVariantsIdReturn} 
		 */
		GetEcommerceStoresIdProductsIdVariantsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, product_id: string, variant_id: string): Observable<GetEcommerceStoresIdProductsIdVariantsIdReturn> {
			return this.http.get<GetEcommerceStoresIdProductsIdVariantsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/variants/' + (variant_id == null ? '' : encodeURIComponent(variant_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update product variant
		 * Update a product variant.
		 * Patch ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} variant_id The id for the product variant.
		 * @return {PatchEcommerceStoresIdProductsIdVariantsIdReturn} 
		 */
		PatchEcommerceStoresIdProductsIdVariantsId(store_id: string, product_id: string, variant_id: string, requestBody: PatchEcommerceStoresIdProductsIdVariantsIdPatchBody): Observable<PatchEcommerceStoresIdProductsIdVariantsIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdProductsIdVariantsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/variants/' + (variant_id == null ? '' : encodeURIComponent(variant_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Add or update product variant
		 * Add or update a product variant.
		 * Put ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}
		 * @param {string} store_id The store id.
		 * @param {string} product_id The id for the product of a store.
		 * @param {string} variant_id The id for the product variant.
		 * @return {PutEcommerceStoresIdProductsIdVariantsIdReturn} 
		 */
		PutEcommerceStoresIdProductsIdVariantsId(store_id: string, product_id: string, variant_id: string, requestBody: PostEcommerceStoresIdProductsIdVariantsBody): Observable<PutEcommerceStoresIdProductsIdVariantsIdReturn> {
			return this.http.put<PutEcommerceStoresIdProductsIdVariantsIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/products/' + (product_id == null ? '' : encodeURIComponent(product_id)) + '/variants/' + (variant_id == null ? '' : encodeURIComponent(variant_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List promo rules
		 * Get information about a store's promo rules.
		 * Get ecommerce/stores/{store_id}/promo-rules
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} store_id The store id.
		 * @return {GetEcommerceStoresIdPromorulesReturn} 
		 */
		GetEcommerceStoresIdPromorules(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, store_id: string): Observable<GetEcommerceStoresIdPromorulesReturn> {
			return this.http.get<GetEcommerceStoresIdPromorulesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add promo rule
		 * Add a new promo rule to a store.
		 * Post ecommerce/stores/{store_id}/promo-rules
		 * @param {string} store_id The store id.
		 * @return {PostEcommerceStoresIdPromorulesReturn} 
		 */
		PostEcommerceStoresIdPromorules(store_id: string, requestBody: PostEcommerceStoresIdPromorulesPostBody): Observable<PostEcommerceStoresIdPromorulesReturn> {
			return this.http.post<PostEcommerceStoresIdPromorulesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete promo rule
		 * Delete a promo rule from a store.
		 * Delete ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdPromorulesId(store_id: string, promo_rule_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get promo rule
		 * Get information about a specific promo rule.
		 * Get ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @return {GetEcommerceStoresIdPromorulesIdReturn} 
		 */
		GetEcommerceStoresIdPromorulesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, promo_rule_id: string): Observable<GetEcommerceStoresIdPromorulesIdReturn> {
			return this.http.get<GetEcommerceStoresIdPromorulesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update promo rule
		 * Update a promo rule.
		 * Patch ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @return {PatchEcommerceStoresIdPromorulesIdReturn} 
		 */
		PatchEcommerceStoresIdPromorulesId(store_id: string, promo_rule_id: string, requestBody: PatchEcommerceStoresIdPromorulesIdPatchBody): Observable<PatchEcommerceStoresIdPromorulesIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdPromorulesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List promo codes
		 * Get information about a store's promo codes.
		 * Get ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @param {string} store_id The store id.
		 * @return {GetEcommerceStoresIdPromocodesReturn} 
		 */
		GetEcommerceStoresIdPromocodes(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, promo_rule_id: string, store_id: string): Observable<GetEcommerceStoresIdPromocodesReturn> {
			return this.http.get<GetEcommerceStoresIdPromocodesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)) + '/promo-codes?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add promo code
		 * Add a new promo code to a store.
		 * Post ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @return {PostEcommerceStoresIdPromocodesReturn} 
		 */
		PostEcommerceStoresIdPromocodes(store_id: string, promo_rule_id: string, requestBody: PostEcommerceStoresIdPromocodesPostBody): Observable<PostEcommerceStoresIdPromocodesReturn> {
			return this.http.post<PostEcommerceStoresIdPromocodesReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)) + '/promo-codes', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete promo code
		 * Delete a promo code from a store.
		 * Delete ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @param {string} promo_code_id The id for the promo code of a store.
		 * @return {void} 
		 */
		DeleteEcommerceStoresIdPromocodesId(store_id: string, promo_rule_id: string, promo_code_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)) + '/promo-codes/' + (promo_code_id == null ? '' : encodeURIComponent(promo_code_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get promo code
		 * Get information about a specific promo code.
		 * Get ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @param {string} promo_code_id The id for the promo code of a store.
		 * @return {GetEcommerceStoresIdPromocodesIdReturn} 
		 */
		GetEcommerceStoresIdPromocodesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, store_id: string, promo_rule_id: string, promo_code_id: string): Observable<GetEcommerceStoresIdPromocodesIdReturn> {
			return this.http.get<GetEcommerceStoresIdPromocodesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)) + '/promo-codes/' + (promo_code_id == null ? '' : encodeURIComponent(promo_code_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update promo code
		 * Update a promo code.
		 * Patch ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}
		 * @param {string} store_id The store id.
		 * @param {string} promo_rule_id The id for the promo rule of a store.
		 * @param {string} promo_code_id The id for the promo code of a store.
		 * @return {PatchEcommerceStoresIdPromocodesIdReturn} 
		 */
		PatchEcommerceStoresIdPromocodesId(store_id: string, promo_rule_id: string, promo_code_id: string, requestBody: PatchEcommerceStoresIdPromocodesIdPatchBody): Observable<PatchEcommerceStoresIdPromocodesIdReturn> {
			return this.http.patch<PatchEcommerceStoresIdPromocodesIdReturn>(this.baseUri + 'ecommerce/stores/' + (store_id == null ? '' : encodeURIComponent(store_id)) + '/promo-rules/' + (promo_rule_id == null ? '' : encodeURIComponent(promo_rule_id)) + '/promo-codes/' + (promo_code_id == null ? '' : encodeURIComponent(promo_code_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List facebook ads
		 * Get list of Facebook ads.
		 * Get facebook-ads
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {GetAllFacebookAdsSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetAllFacebookAdsReturn} List of Facebook Ad Instances
		 */
		GetAllFacebookAds(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, sort_field: GetAllFacebookAdsSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetAllFacebookAdsReturn> {
			return this.http.get<GetAllFacebookAdsReturn>(this.baseUri + 'facebook-ads?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Get facebook ad info
		 * Get details of a Facebook ad.
		 * Get facebook-ads/{outreach_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetFacebookAdsIdReturn} Facebook Ad Instance
		 */
		GetFacebookAdsId(fields: Array<string> | null | undefined, outreach_id: string, exclude_fields: Array<string> | null | undefined): Observable<GetFacebookAdsIdReturn> {
			return this.http.get<GetFacebookAdsIdReturn>(this.baseUri + 'facebook-ads/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List stored files
		 * Get a list of available images and files stored in the File Manager for the account.
		 * Get file-manager/files
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} type The file type for the File Manager file.
		 * @param {string} created_by The Mailchimp account user who created the File Manager file.
		 * @param {string} before_created_at Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} since_created_at Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {GetFileManagerFilesSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetFileManagerFilesReturn} 
		 */
		GetFileManagerFiles(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, type: string | null | undefined, created_by: string | null | undefined, before_created_at: string | null | undefined, since_created_at: string | null | undefined, sort_field: GetFileManagerFilesSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetFileManagerFilesReturn> {
			return this.http.get<GetFileManagerFilesReturn>(this.baseUri + 'file-manager/files?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + (type == null ? '' : encodeURIComponent(type)) + '&created_by=' + (created_by == null ? '' : encodeURIComponent(created_by)) + '&before_created_at=' + (before_created_at == null ? '' : encodeURIComponent(before_created_at)) + '&since_created_at=' + (since_created_at == null ? '' : encodeURIComponent(since_created_at)) + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Add file
		 * Upload a new image or file to the File Manager.
		 * Post file-manager/files
		 * @return {PostFileManagerFilesReturn} 
		 */
		PostFileManagerFiles(requestBody: PostFileManagerFilesPostBody): Observable<PostFileManagerFilesReturn> {
			return this.http.post<PostFileManagerFilesReturn>(this.baseUri + 'file-manager/files', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete file
		 * Remove a specific file from the File Manager.
		 * Delete file-manager/files/{file_id}
		 * @param {string} file_id The unique id for the File Manager file.
		 * @return {void} 
		 */
		DeleteFileManagerFilesId(file_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'file-manager/files/' + (file_id == null ? '' : encodeURIComponent(file_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get file
		 * Get information about a specific file in the File Manager.
		 * Get file-manager/files/{file_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} file_id The unique id for the File Manager file.
		 * @return {GetFileManagerFilesIdReturn} 
		 */
		GetFileManagerFilesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, file_id: string): Observable<GetFileManagerFilesIdReturn> {
			return this.http.get<GetFileManagerFilesIdReturn>(this.baseUri + 'file-manager/files/' + (file_id == null ? '' : encodeURIComponent(file_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update file
		 * Update a file in the File Manager.
		 * Patch file-manager/files/{file_id}
		 * @param {string} file_id The unique id for the File Manager file.
		 * @return {PatchFileManagerFilesIdReturn} 
		 */
		PatchFileManagerFilesId(file_id: string, requestBody: PatchFileManagerFilesIdPatchBody): Observable<PatchFileManagerFilesIdReturn> {
			return this.http.patch<PatchFileManagerFilesIdReturn>(this.baseUri + 'file-manager/files/' + (file_id == null ? '' : encodeURIComponent(file_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List folders
		 * Get a list of all folders in the File Manager.
		 * Get file-manager/folders
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} created_by The Mailchimp account user who created the File Manager file.
		 * @param {string} before_created_at Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} since_created_at Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @return {GetFileManagerFoldersReturn} 
		 */
		GetFileManagerFolders(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, created_by: string | null | undefined, before_created_at: string | null | undefined, since_created_at: string | null | undefined): Observable<GetFileManagerFoldersReturn> {
			return this.http.get<GetFileManagerFoldersReturn>(this.baseUri + 'file-manager/folders?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&created_by=' + (created_by == null ? '' : encodeURIComponent(created_by)) + '&before_created_at=' + (before_created_at == null ? '' : encodeURIComponent(before_created_at)) + '&since_created_at=' + (since_created_at == null ? '' : encodeURIComponent(since_created_at)), {});
		}

		/**
		 * Add folder
		 * Create a new folder in the File Manager.
		 * Post file-manager/folders
		 * @return {PostFileManagerFoldersReturn} 
		 */
		PostFileManagerFolders(requestBody: PostFileManagerFoldersBody): Observable<PostFileManagerFoldersReturn> {
			return this.http.post<PostFileManagerFoldersReturn>(this.baseUri + 'file-manager/folders', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete folder
		 * Delete a specific folder in the File Manager.
		 * Delete file-manager/folders/{folder_id}
		 * @param {string} folder_id The unique id for the File Manager folder.
		 * @return {void} 
		 */
		DeleteFileManagerFoldersId(folder_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'file-manager/folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get folder
		 * Get information about a specific folder in the File Manager.
		 * Get file-manager/folders/{folder_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} folder_id The unique id for the File Manager folder.
		 * @return {GetFileManagerFoldersIdReturn} 
		 */
		GetFileManagerFoldersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, folder_id: string): Observable<GetFileManagerFoldersIdReturn> {
			return this.http.get<GetFileManagerFoldersIdReturn>(this.baseUri + 'file-manager/folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update folder
		 * Update a specific File Manager folder.
		 * Patch file-manager/folders/{folder_id}
		 * @param {string} folder_id The unique id for the File Manager folder.
		 * @return {PatchFileManagerFoldersIdReturn} 
		 */
		PatchFileManagerFoldersId(folder_id: string, requestBody: PostFileManagerFoldersBody): Observable<PatchFileManagerFoldersIdReturn> {
			return this.http.patch<PatchFileManagerFoldersIdReturn>(this.baseUri + 'file-manager/folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List stored files
		 * Get a list of available images and files stored in this folder.
		 * Get file-manager/folders/{folder_id}/files
		 * @param {string} folder_id The unique id for the File Manager folder.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} type The file type for the File Manager file.
		 * @param {string} created_by The Mailchimp account user who created the File Manager file.
		 * @param {string} before_created_at Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} since_created_at Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {GetFileManagerFilesSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetFileManagerFoldersFilesReturn} 
		 */
		GetFileManagerFoldersFiles(folder_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, type: string | null | undefined, created_by: string | null | undefined, before_created_at: string | null | undefined, since_created_at: string | null | undefined, sort_field: GetFileManagerFilesSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetFileManagerFoldersFilesReturn> {
			return this.http.get<GetFileManagerFoldersFilesReturn>(this.baseUri + 'file-manager/folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)) + '/files&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + (type == null ? '' : encodeURIComponent(type)) + '&created_by=' + (created_by == null ? '' : encodeURIComponent(created_by)) + '&before_created_at=' + (before_created_at == null ? '' : encodeURIComponent(before_created_at)) + '&since_created_at=' + (since_created_at == null ? '' : encodeURIComponent(since_created_at)) + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * List landing pages
		 * Get all landing pages.
		 * Get landing-pages
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @param {GetAllLandingPagesSort_field} sort_field Returns files sorted by the specified field.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @return {GetAllLandingPagesReturn} Landing Pages Collection
		 */
		GetAllLandingPages(sort_dir: GetCampaignsSort_dir | null | undefined, sort_field: GetAllLandingPagesSort_field | null | undefined, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined): Observable<GetAllLandingPagesReturn> {
			return this.http.get<GetAllLandingPagesReturn>(this.baseUri + 'landing-pages?sort_dir=' + sort_dir + '&sort_field=' + sort_field + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count, {});
		}

		/**
		 * Add landing page
		 * Create a new Mailchimp landing page.
		 * Post landing-pages
		 * @param {boolean} use_default_list Will create the Landing Page using the account's Default List instead of requiring a list_id.
		 * @return {PostAllLandingPagesReturn} 
		 */
		PostAllLandingPages(use_default_list: boolean | null | undefined, requestBody: PostAllLandingPagesPostBody): Observable<PostAllLandingPagesReturn> {
			return this.http.post<PostAllLandingPagesReturn>(this.baseUri + 'landing-pages?use_default_list=' + use_default_list, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete landing page
		 * Delete a landing page.
		 * Delete landing-pages/{page_id}
		 * @param {string} page_id The unique id for the page.
		 * @return {void} 
		 */
		DeleteLandingPageId(page_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'landing-pages/' + (page_id == null ? '' : encodeURIComponent(page_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get landing page info
		 * Get information about a specific page.
		 * Get landing-pages/{page_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} page_id The unique id for the page.
		 * @return {GetLandingPageIdReturn} Landing Pages Instance
		 */
		GetLandingPageId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, page_id: string): Observable<GetLandingPageIdReturn> {
			return this.http.get<GetLandingPageIdReturn>(this.baseUri + 'landing-pages/' + (page_id == null ? '' : encodeURIComponent(page_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update landing page
		 * Update a landing page.
		 * Patch landing-pages/{page_id}
		 * @param {string} page_id The unique id for the page.
		 * @return {PatchLandingPageIdReturn} 
		 */
		PatchLandingPageId(page_id: string, requestBody: PatchLandingPageIdPatchBody): Observable<PatchLandingPageIdReturn> {
			return this.http.patch<PatchLandingPageIdReturn>(this.baseUri + 'landing-pages/' + (page_id == null ? '' : encodeURIComponent(page_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Publish landing page
		 * Publish a landing page that is in draft, unpublished, or has been previously published and edited.
		 * Post landing-pages/{page_id}/actions/publish
		 * @param {string} page_id The unique id for the page.
		 * @return {void} 
		 */
		PostLandingPageIdActionsPublish(page_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'landing-pages/' + (page_id == null ? '' : encodeURIComponent(page_id)) + '/actions/publish', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Unpublish landing page
		 * Unpublish a landing page that is in draft or has been published.
		 * Post landing-pages/{page_id}/actions/unpublish
		 * @param {string} page_id The unique id for the page.
		 * @return {void} 
		 */
		PostLandingPageIdActionsUnpublish(page_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'landing-pages/' + (page_id == null ? '' : encodeURIComponent(page_id)) + '/actions/unpublish', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get landing page content
		 * Get the the HTML for your landing page.
		 * Get landing-pages/{page_id}/content
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} page_id The unique id for the page.
		 * @return {GetLandingPageIdContentReturn} 
		 */
		GetLandingPageIdContent(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, page_id: string): Observable<GetLandingPageIdContentReturn> {
			return this.http.get<GetLandingPageIdContentReturn>(this.baseUri + 'landing-pages/' + (page_id == null ? '' : encodeURIComponent(page_id)) + '/content?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Get lists info
		 * Get information about all lists in the account.
		 * Get lists
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} before_date_created Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} since_date_created Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} before_campaign_last_sent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} since_campaign_last_sent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} email Restrict results to lists that include a specific subscriber's email address.
		 * @param {GetListsSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @param {boolean} has_ecommerce_store Restrict results to lists that contain an active, connected, undeleted ecommerce store.
		 * @param {boolean} include_total_contacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.
		 * @return {GetListsReturn} 
		 */
		GetLists(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, before_date_created: string | null | undefined, since_date_created: string | null | undefined, before_campaign_last_sent: string | null | undefined, since_campaign_last_sent: string | null | undefined, email: string | null | undefined, sort_field: GetListsSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined, has_ecommerce_store: boolean | null | undefined, include_total_contacts: boolean | null | undefined): Observable<GetListsReturn> {
			return this.http.get<GetListsReturn>(this.baseUri + 'lists?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&before_date_created=' + (before_date_created == null ? '' : encodeURIComponent(before_date_created)) + '&since_date_created=' + (since_date_created == null ? '' : encodeURIComponent(since_date_created)) + '&before_campaign_last_sent=' + (before_campaign_last_sent == null ? '' : encodeURIComponent(before_campaign_last_sent)) + '&since_campaign_last_sent=' + (since_campaign_last_sent == null ? '' : encodeURIComponent(since_campaign_last_sent)) + '&email=' + (email == null ? '' : encodeURIComponent(email)) + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir + '&has_ecommerce_store=' + has_ecommerce_store + '&include_total_contacts=' + include_total_contacts, {});
		}

		/**
		 * Add list
		 * Create a new list in your Mailchimp account.
		 * Post lists
		 * @return {PostListsReturn} 
		 */
		PostLists(requestBody: PostListsPostBody): Observable<PostListsReturn> {
			return this.http.post<PostListsReturn>(this.baseUri + 'lists', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete list
		 * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.
		 * Delete lists/{list_id}
		 * @param {string} list_id The unique ID for the list.
		 * @return {void} 
		 */
		DeleteListsId(list_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get list info
		 * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.
		 * Get lists/{list_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @param {boolean} include_total_contacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.
		 * @return {GetListsIdReturn} 
		 */
		GetListsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string, include_total_contacts: boolean | null | undefined): Observable<GetListsIdReturn> {
			return this.http.get<GetListsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&include_total_contacts=' + include_total_contacts, {});
		}

		/**
		 * Update lists
		 * Update the settings for a specific list.
		 * Patch lists/{list_id}
		 * @param {string} list_id The unique ID for the list.
		 * @return {PatchListsIdReturn} 
		 */
		PatchListsId(list_id: string, requestBody: PatchListsIdPatchBody): Observable<PatchListsIdReturn> {
			return this.http.patch<PatchListsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Batch subscribe or unsubscribe
		 * Batch subscribe or unsubscribe list members.
		 * Post lists/{list_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {boolean} skip_merge_validation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
		 * @param {boolean} skip_duplicate_check If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.
		 * @return {PostListsIdReturn} 
		 */
		PostListsId(list_id: string, skip_merge_validation: boolean | null | undefined, skip_duplicate_check: boolean | null | undefined, requestBody: PostListsIdPostBody): Observable<PostListsIdReturn> {
			return this.http.post<PostListsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '&skip_merge_validation=' + skip_merge_validation + '&skip_duplicate_check=' + skip_duplicate_check, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List abuse reports
		 * Get all abuse reports for a specific list.
		 * Get lists/{list_id}/abuse-reports
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} list_id The unique ID for the list.
		 * @return {GetListsIdAbuseReportsReturn} 
		 */
		GetListsIdAbuseReports(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, list_id: string): Observable<GetListsIdAbuseReportsReturn> {
			return this.http.get<GetListsIdAbuseReportsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/abuse-reports?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get abuse report
		 * Get details about a specific abuse report.
		 * Get lists/{list_id}/abuse-reports/{report_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} report_id The id for the abuse report.
		 * @return {GetListsIdAbuseReportsIdReturn} 
		 */
		GetListsIdAbuseReportsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, list_id: string, report_id: string): Observable<GetListsIdAbuseReportsIdReturn> {
			return this.http.get<GetListsIdAbuseReportsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/abuse-reports/' + (report_id == null ? '' : encodeURIComponent(report_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * List recent activity
		 * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.
		 * Get lists/{list_id}/activity
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @return {GetListsIdActivityReturn} 
		 */
		GetListsIdActivity(count: number | null | undefined, offset: number | null | undefined, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string): Observable<GetListsIdActivityReturn> {
			return this.http.get<GetListsIdActivityReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/activity?count=' + count + '&offset=' + offset + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List top email clients
		 * Get a list of the top email clients based on user-agent strings.
		 * Get lists/{list_id}/clients
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @return {GetListsIdClientsReturn} 
		 */
		GetListsIdClients(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string): Observable<GetListsIdClientsReturn> {
			return this.http.get<GetListsIdClientsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/clients?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List growth history data
		 * Get a month-by-month summary of a specific list's growth activity.
		 * Get lists/{list_id}/growth-history
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} list_id The unique ID for the list.
		 * @param {GetListsIdGrowthHistorySort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetListsIdGrowthHistoryReturn} 
		 */
		GetListsIdGrowthHistory(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, list_id: string, sort_field: GetListsIdGrowthHistorySort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetListsIdGrowthHistoryReturn> {
			return this.http.get<GetListsIdGrowthHistoryReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/growth-history?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Get growth history by month
		 * Get a summary of a specific list's growth activity for a specific month and year.
		 * Get lists/{list_id}/growth-history/{month}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} month A specific month of list growth history.
		 * @return {GetListsIdGrowthHistoryIdReturn} 
		 */
		GetListsIdGrowthHistoryId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string, month: string): Observable<GetListsIdGrowthHistoryIdReturn> {
			return this.http.get<GetListsIdGrowthHistoryIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/growth-history/' + (month == null ? '' : encodeURIComponent(month)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List interest categories
		 * Get information about a list's interest categories.
		 * Get lists/{list_id}/interest-categories
		 * @param {string} list_id The unique ID for the list.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} type Restrict results a type of interest group
		 * @return {GetListsIdInterestCategoriesReturn} 
		 */
		GetListsIdInterestCategories(list_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, type: string | null | undefined): Observable<GetListsIdInterestCategoriesReturn> {
			return this.http.get<GetListsIdInterestCategoriesReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + (type == null ? '' : encodeURIComponent(type)), {});
		}

		/**
		 * Add interest category
		 * Create a new interest category.
		 * Post lists/{list_id}/interest-categories
		 * @param {string} list_id The unique ID for the list.
		 * @return {PostListsIdInterestCategoriesReturn} 
		 */
		PostListsIdInterestCategories(list_id: string, requestBody: PostListsIdInterestCategoriesBody): Observable<PostListsIdInterestCategoriesReturn> {
			return this.http.post<PostListsIdInterestCategoriesReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete interest category
		 * Delete a specific interest category.
		 * Delete lists/{list_id}/interest-categories/{interest_category_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @return {void} 
		 */
		DeleteListsIdInterestCategoriesId(list_id: string, interest_category_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get interest category info
		 * Get information about a specific interest category.
		 * Get lists/{list_id}/interest-categories/{interest_category_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetListsIdInterestCategoriesIdReturn} 
		 */
		GetListsIdInterestCategoriesId(list_id: string, interest_category_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined): Observable<GetListsIdInterestCategoriesIdReturn> {
			return this.http.get<GetListsIdInterestCategoriesIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update interest category
		 * Update a specific interest category.
		 * Patch lists/{list_id}/interest-categories/{interest_category_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @return {PatchListsIdInterestCategoriesIdReturn} 
		 */
		PatchListsIdInterestCategoriesId(list_id: string, interest_category_id: string, requestBody: PostListsIdInterestCategoriesBody): Observable<PatchListsIdInterestCategoriesIdReturn> {
			return this.http.patch<PatchListsIdInterestCategoriesIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List interests in category
		 * Get a list of this category's interests.
		 * Get lists/{list_id}/interest-categories/{interest_category_id}/interests
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetListsIdInterestCategoriesIdInterestsReturn} 
		 */
		GetListsIdInterestCategoriesIdInterests(list_id: string, interest_category_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetListsIdInterestCategoriesIdInterestsReturn> {
			return this.http.get<GetListsIdInterestCategoriesIdInterestsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '/interests&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add interest in category
		 * Create a new interest or 'group name' for a specific category.
		 * Post lists/{list_id}/interest-categories/{interest_category_id}/interests
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @return {PostListsIdInterestCategoriesIdInterestsReturn} 
		 */
		PostListsIdInterestCategoriesIdInterests(list_id: string, interest_category_id: string, requestBody: PostListsIdInterestCategoriesIdInterestsBody): Observable<PostListsIdInterestCategoriesIdInterestsReturn> {
			return this.http.post<PostListsIdInterestCategoriesIdInterestsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '/interests', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete interest in category
		 * Delete interests or group names in a specific category.
		 * Delete lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @param {string} interest_id The specific interest or 'group name'.
		 * @return {void} 
		 */
		DeleteListsIdInterestCategoriesIdInterestsId(list_id: string, interest_category_id: string, interest_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '/interests/' + (interest_id == null ? '' : encodeURIComponent(interest_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get interest in category
		 * Get interests or 'group names' for a specific category.
		 * Get lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @param {string} interest_id The specific interest or 'group name'.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetListsIdInterestCategoriesIdInterestsIdReturn} 
		 */
		GetListsIdInterestCategoriesIdInterestsId(list_id: string, interest_category_id: string, interest_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined): Observable<GetListsIdInterestCategoriesIdInterestsIdReturn> {
			return this.http.get<GetListsIdInterestCategoriesIdInterestsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '/interests/' + (interest_id == null ? '' : encodeURIComponent(interest_id)) + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update interest in category
		 * Update interests or 'group names' for a specific category.
		 * Patch lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} interest_category_id The unique ID for the interest category.
		 * @param {string} interest_id The specific interest or 'group name'.
		 * @return {PatchListsIdInterestCategoriesIdInterestsIdReturn} 
		 */
		PatchListsIdInterestCategoriesIdInterestsId(list_id: string, interest_category_id: string, interest_id: string, requestBody: PostListsIdInterestCategoriesIdInterestsBody): Observable<PatchListsIdInterestCategoriesIdInterestsIdReturn> {
			return this.http.patch<PatchListsIdInterestCategoriesIdInterestsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/interest-categories/' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '/interests/' + (interest_id == null ? '' : encodeURIComponent(interest_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List locations
		 * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.
		 * Get lists/{list_id}/locations
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @return {GetListsIdLocationsReturn} 
		 */
		GetListsIdLocations(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string): Observable<GetListsIdLocationsReturn> {
			return this.http.get<GetListsIdLocationsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/locations?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List members info
		 * Get information about members in a specific Mailchimp list.
		 * Get lists/{list_id}/members
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} email_type The email type.
		 * @param {GetListsIdMembersStatus} status The subscriber's status.
		 * @param {string} since_timestamp_opt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} before_timestamp_opt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} since_last_changed Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} before_last_changed Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} unique_email_id A unique identifier for the email address across all Mailchimp lists.
		 * @param {boolean} vip_only A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.
		 * @param {string} interest_category_id The unique id for the interest category.
		 * @param {string} interest_ids Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.
		 * @param {GetListsIdMembersInterest_match} interest_match Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. "any" will match a member with any of the interest supplied, "all" will only match members with every interest supplied, and "none" will match members without any of the interest supplied.
		 * @param {GetListsIdMembersSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @param {boolean} since_last_campaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.
		 * @param {string} unsubscribed_since Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.
		 * @return {GetListsIdMembersReturn} 
		 */
		GetListsIdMembers(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, list_id: string, email_type: string | null | undefined, status: GetListsIdMembersStatus | null | undefined, since_timestamp_opt: string | null | undefined, before_timestamp_opt: string | null | undefined, since_last_changed: string | null | undefined, before_last_changed: string | null | undefined, unique_email_id: string | null | undefined, vip_only: boolean | null | undefined, interest_category_id: string | null | undefined, interest_ids: string | null | undefined, interest_match: GetListsIdMembersInterest_match | null | undefined, sort_field: GetListsIdMembersSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined, since_last_campaign: boolean | null | undefined, unsubscribed_since: string | null | undefined): Observable<GetListsIdMembersReturn> {
			return this.http.get<GetListsIdMembersReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&email_type=' + (email_type == null ? '' : encodeURIComponent(email_type)) + '&status=' + status + '&since_timestamp_opt=' + (since_timestamp_opt == null ? '' : encodeURIComponent(since_timestamp_opt)) + '&before_timestamp_opt=' + (before_timestamp_opt == null ? '' : encodeURIComponent(before_timestamp_opt)) + '&since_last_changed=' + (since_last_changed == null ? '' : encodeURIComponent(since_last_changed)) + '&before_last_changed=' + (before_last_changed == null ? '' : encodeURIComponent(before_last_changed)) + '&unique_email_id=' + (unique_email_id == null ? '' : encodeURIComponent(unique_email_id)) + '&vip_only=' + vip_only + '&interest_category_id=' + (interest_category_id == null ? '' : encodeURIComponent(interest_category_id)) + '&interest_ids=' + (interest_ids == null ? '' : encodeURIComponent(interest_ids)) + '&interest_match=' + interest_match + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir + '&since_last_campaign=' + since_last_campaign + '&unsubscribed_since=' + (unsubscribed_since == null ? '' : encodeURIComponent(unsubscribed_since)), {});
		}

		/**
		 * Add member to list
		 * Add a new member to the list.
		 * Post lists/{list_id}/members
		 * @param {string} list_id The unique ID for the list.
		 * @param {boolean} skip_merge_validation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
		 * @return {PostListsIdMembersReturn} 
		 */
		PostListsIdMembers(list_id: string, skip_merge_validation: boolean | null | undefined, requestBody: PostListsIdMembersPostBody): Observable<PostListsIdMembersReturn> {
			return this.http.post<PostListsIdMembersReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members&skip_merge_validation=' + skip_merge_validation, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Archive list member
		 * Archive a list member. To permanently delete, use the delete-permanent action.
		 * Delete lists/{list_id}/members/{subscriber_hash}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @return {void} 
		 */
		DeleteListsIdMembersId(list_id: string, subscriber_hash: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get member info
		 * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.
		 * Get lists/{list_id}/members/{subscriber_hash}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @return {GetListsIdMembersIdReturn} 
		 */
		GetListsIdMembersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string, subscriber_hash: string): Observable<GetListsIdMembersIdReturn> {
			return this.http.get<GetListsIdMembersIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update list member
		 * Update information for a specific list member.
		 * Patch lists/{list_id}/members/{subscriber_hash}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {boolean} skip_merge_validation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
		 * @return {PatchListsIdMembersIdReturn} 
		 */
		PatchListsIdMembersId(list_id: string, subscriber_hash: string, skip_merge_validation: boolean | null | undefined, requestBody: PatchListsIdMembersIdPatchBody): Observable<PatchListsIdMembersIdReturn> {
			return this.http.patch<PatchListsIdMembersIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '&skip_merge_validation=' + skip_merge_validation, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Add or update list member
		 * Add or update a list member.
		 * Put lists/{list_id}/members/{subscriber_hash}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {boolean} skip_merge_validation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.
		 * @return {PutListsIdMembersIdReturn} 
		 */
		PutListsIdMembersId(list_id: string, subscriber_hash: string, skip_merge_validation: boolean | null | undefined, requestBody: PutListsIdMembersIdPutBody): Observable<PutListsIdMembersIdReturn> {
			return this.http.put<PutListsIdMembersIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '&skip_merge_validation=' + skip_merge_validation, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete list member
		 * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.
		 * Post lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {void} 
		 */
		PostListsIdMembersHashActionsDeletePermanent(list_id: string, subscriber_hash: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/actions/delete-permanent', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * View recent activity 50
		 * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.
		 * Get lists/{list_id}/members/{subscriber_hash}/activity
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} action A comma seperated list of actions to return.
		 * @return {GetListsIdMembersIdActivityReturn} 
		 */
		GetListsIdMembersIdActivity(list_id: string, subscriber_hash: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, action: Array<string> | null | undefined): Observable<GetListsIdMembersIdActivityReturn> {
			return this.http.get<GetListsIdMembersIdActivityReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/activity&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&' + action?.map(z => `action=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * View recent activity
		 * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.
		 * Get lists/{list_id}/members/{subscriber_hash}/activity-feed
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {Array<string>} activity_filters A comma-separated list of activity filters that correspond to a set of activity types, e.g "?activity_filters=open,bounce,click".
		 * @return {GetListsIdMembersIdActivityFeedReturn} 
		 */
		GetListsIdMembersIdActivityFeed(list_id: string, subscriber_hash: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, activity_filters: Array<string> | null | undefined): Observable<GetListsIdMembersIdActivityFeedReturn> {
			return this.http.get<GetListsIdMembersIdActivityFeedReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/activity-feed&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&' + activity_filters?.map(z => `activity_filters=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List member events
		 * Get events for a contact.
		 * Get lists/{list_id}/members/{subscriber_hash}/events
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetListsIdMembersIdEventsReturn} 
		 */
		GetListsIdMembersIdEvents(list_id: string, subscriber_hash: string, count: number | null | undefined, offset: number | null | undefined, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined): Observable<GetListsIdMembersIdEventsReturn> {
			return this.http.get<GetListsIdMembersIdEventsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/events&count=' + count + '&offset=' + offset + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Add event
		 * Add an event for a list member.
		 * Post lists/{list_id}/members/{subscriber_hash}/events
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @return {void} 
		 */
		PostListMemberEvents(list_id: string, subscriber_hash: string, requestBody: PostListMemberEventsPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/events', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List member goal events
		 * Get the last 50 Goal events for a member on a specific list.
		 * Get lists/{list_id}/members/{subscriber_hash}/goals
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetListsIdMembersIdGoalsReturn} 
		 */
		GetListsIdMembersIdGoals(list_id: string, subscriber_hash: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined): Observable<GetListsIdMembersIdGoalsReturn> {
			return this.http.get<GetListsIdMembersIdGoalsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/goals&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List recent member notes
		 * Get recent notes for a specific list member.
		 * Get lists/{list_id}/members/{subscriber_hash}/notes
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @param {GetListsIdMembersIdNotesSort_field} sort_field Returns notes sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetListsIdMembersIdNotesReturn} 
		 */
		GetListsIdMembersIdNotes(list_id: string, subscriber_hash: string, sort_field: GetListsIdMembersIdNotesSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetListsIdMembersIdNotesReturn> {
			return this.http.get<GetListsIdMembersIdNotesReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/notes&sort_field=' + sort_field + '&sort_dir=' + sort_dir + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add member note
		 * Add a new note for a specific subscriber.
		 * Post lists/{list_id}/members/{subscriber_hash}/notes
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {PostListsIdMembersIdNotesReturn} 
		 */
		PostListsIdMembersIdNotes(list_id: string, subscriber_hash: string, requestBody: PostListsIdMembersIdNotesBody): Observable<PostListsIdMembersIdNotesReturn> {
			return this.http.post<PostListsIdMembersIdNotesReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/notes', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete note
		 * Delete a specific note for a specific list member.
		 * Delete lists/{list_id}/members/{subscriber_hash}/notes/{note_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {string} note_id The id for the note.
		 * @return {void} 
		 */
		DeleteListsIdMembersIdNotesId(list_id: string, subscriber_hash: string, note_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/notes/' + (note_id == null ? '' : encodeURIComponent(note_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get member note
		 * Get a specific note for a specific list member.
		 * Get lists/{list_id}/members/{subscriber_hash}/notes/{note_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {string} note_id The id for the note.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetListsIdMembersIdNotesIdReturn} 
		 */
		GetListsIdMembersIdNotesId(list_id: string, subscriber_hash: string, note_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined): Observable<GetListsIdMembersIdNotesIdReturn> {
			return this.http.get<GetListsIdMembersIdNotesIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/notes/' + (note_id == null ? '' : encodeURIComponent(note_id)) + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update note
		 * Update a specific note for a specific list member.
		 * Patch lists/{list_id}/members/{subscriber_hash}/notes/{note_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {string} note_id The id for the note.
		 * @return {PatchListsIdMembersIdNotesIdReturn} 
		 */
		PatchListsIdMembersIdNotesId(list_id: string, subscriber_hash: string, note_id: string, requestBody: PostListsIdMembersIdNotesBody): Observable<PatchListsIdMembersIdNotesIdReturn> {
			return this.http.patch<PatchListsIdMembersIdNotesIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/notes/' + (note_id == null ? '' : encodeURIComponent(note_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List member tags
		 * Get the tags on a list member.
		 * Get lists/{list_id}/members/{subscriber_hash}/tags
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetListMemberTagsReturn} 
		 */
		GetListMemberTags(list_id: string, subscriber_hash: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetListMemberTagsReturn> {
			return this.http.get<GetListMemberTagsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/tags&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add or remove member tags
		 * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.
		 * Post lists/{list_id}/members/{subscriber_hash}/tags
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {void} 
		 */
		PostListMemberTags(list_id: string, subscriber_hash: string, requestBody: PostListMemberTagsPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '/tags', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List merge fields
		 * Get a list of all merge fields for an audience.
		 * Get lists/{list_id}/merge-fields
		 * @param {string} list_id The unique ID for the list.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} type The merge field type.
		 * @param {boolean} required Whether it's a required merge field.
		 * @return {GetListsIdMergeFieldsReturn} 
		 */
		GetListsIdMergeFields(list_id: string, fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, type: string | null | undefined, required: boolean | null | undefined): Observable<GetListsIdMergeFieldsReturn> {
			return this.http.get<GetListsIdMergeFieldsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/merge-fields&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + (type == null ? '' : encodeURIComponent(type)) + '&required=' + required, {});
		}

		/**
		 * Add merge field
		 * Add a new merge field for a specific audience.
		 * Post lists/{list_id}/merge-fields
		 * @param {string} list_id The unique ID for the list.
		 * @return {PostListsIdMergeFieldsReturn} 
		 */
		PostListsIdMergeFields(list_id: string, requestBody: PostListsIdMergeFieldsPostBody): Observable<PostListsIdMergeFieldsReturn> {
			return this.http.post<PostListsIdMergeFieldsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/merge-fields', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete merge field
		 * Delete a specific merge field.
		 * Delete lists/{list_id}/merge-fields/{merge_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} merge_id The id for the merge field.
		 * @return {void} 
		 */
		DeleteListsIdMergeFieldsId(list_id: string, merge_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/merge-fields/' + (merge_id == null ? '' : encodeURIComponent(merge_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get merge field
		 * Get information about a specific merge field.
		 * Get lists/{list_id}/merge-fields/{merge_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} merge_id The id for the merge field.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @return {GetListsIdMergeFieldsIdReturn} 
		 */
		GetListsIdMergeFieldsId(list_id: string, merge_id: string, exclude_fields: Array<string> | null | undefined, fields: Array<string> | null | undefined): Observable<GetListsIdMergeFieldsIdReturn> {
			return this.http.get<GetListsIdMergeFieldsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/merge-fields/' + (merge_id == null ? '' : encodeURIComponent(merge_id)) + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update merge field
		 * Update a specific merge field.
		 * Patch lists/{list_id}/merge-fields/{merge_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} merge_id The id for the merge field.
		 * @return {PatchListsIdMergeFieldsIdReturn} 
		 */
		PatchListsIdMergeFieldsId(list_id: string, merge_id: string, requestBody: PatchListsIdMergeFieldsIdPatchBody): Observable<PatchListsIdMergeFieldsIdReturn> {
			return this.http.patch<PatchListsIdMergeFieldsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/merge-fields/' + (merge_id == null ? '' : encodeURIComponent(merge_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List segments
		 * Get information about all available segments for a specific list.
		 * Get lists/{list_id}/segments
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} type Limit results based on segment type.
		 * @param {string} since_created_at Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} before_created_at Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {boolean} include_cleaned Include cleaned members in response
		 * @param {boolean} include_transactional Include transactional members in response
		 * @param {boolean} include_unsubscribed Include unsubscribed members in response
		 * @param {string} since_updated_at Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} before_updated_at Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @return {PreviewASegmentReturn} 
		 */
		PreviewASegment(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, list_id: string, type: string | null | undefined, since_created_at: string | null | undefined, before_created_at: string | null | undefined, include_cleaned: boolean | null | undefined, include_transactional: boolean | null | undefined, include_unsubscribed: boolean | null | undefined, since_updated_at: string | null | undefined, before_updated_at: string | null | undefined): Observable<PreviewASegmentReturn> {
			return this.http.get<PreviewASegmentReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + (type == null ? '' : encodeURIComponent(type)) + '&since_created_at=' + (since_created_at == null ? '' : encodeURIComponent(since_created_at)) + '&before_created_at=' + (before_created_at == null ? '' : encodeURIComponent(before_created_at)) + '&include_cleaned=' + include_cleaned + '&include_transactional=' + include_transactional + '&include_unsubscribed=' + include_unsubscribed + '&since_updated_at=' + (since_updated_at == null ? '' : encodeURIComponent(since_updated_at)) + '&before_updated_at=' + (before_updated_at == null ? '' : encodeURIComponent(before_updated_at)), {});
		}

		/**
		 * Add segment
		 * Create a new segment in a specific list.
		 * Post lists/{list_id}/segments
		 * @param {string} list_id The unique ID for the list.
		 * @return {PostListsIdSegmentsReturn} 
		 */
		PostListsIdSegments(list_id: string, requestBody: PostListsIdSegmentsPostBody): Observable<PostListsIdSegmentsReturn> {
			return this.http.post<PostListsIdSegmentsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete segment
		 * Delete a specific segment in a list.
		 * Delete lists/{list_id}/segments/{segment_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @return {void} 
		 */
		DeleteListsIdSegmentsId(list_id: string, segment_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get segment info
		 * Get information about a specific segment.
		 * Get lists/{list_id}/segments/{segment_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @param {boolean} include_cleaned Include cleaned members in response
		 * @param {boolean} include_transactional Include transactional members in response
		 * @param {boolean} include_unsubscribed Include unsubscribed members in response
		 * @return {GetListsIdSegmentsIdReturn} 
		 */
		GetListsIdSegmentsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, list_id: string, segment_id: string, include_cleaned: boolean | null | undefined, include_transactional: boolean | null | undefined, include_unsubscribed: boolean | null | undefined): Observable<GetListsIdSegmentsIdReturn> {
			return this.http.get<GetListsIdSegmentsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&include_cleaned=' + include_cleaned + '&include_transactional=' + include_transactional + '&include_unsubscribed=' + include_unsubscribed, {});
		}

		/**
		 * Update segment
		 * Update a specific segment in a list.
		 * Patch lists/{list_id}/segments/{segment_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @return {PatchListsIdSegmentsIdReturn} 
		 */
		PatchListsIdSegmentsId(list_id: string, segment_id: string, requestBody: PatchListsIdSegmentsIdPatchBody): Observable<PatchListsIdSegmentsIdReturn> {
			return this.http.patch<PatchListsIdSegmentsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Batch add or remove members
		 * Batch add/remove list members to static segment
		 * Post lists/{list_id}/segments/{segment_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @return {PostListsIdSegmentsIdReturn} 
		 */
		PostListsIdSegmentsId(list_id: string, segment_id: string, requestBody: PostListsIdSegmentsIdPostBody): Observable<PostListsIdSegmentsIdReturn> {
			return this.http.post<PostListsIdSegmentsIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List members in segment
		 * Get information about members in a saved segment.
		 * Get lists/{list_id}/segments/{segment_id}/members
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @param {boolean} include_cleaned Include cleaned members in response
		 * @param {boolean} include_transactional Include transactional members in response
		 * @param {boolean} include_unsubscribed Include unsubscribed members in response
		 * @return {GetListsIdSegmentsIdMembersReturn} 
		 */
		GetListsIdSegmentsIdMembers(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, list_id: string, segment_id: string, include_cleaned: boolean | null | undefined, include_transactional: boolean | null | undefined, include_unsubscribed: boolean | null | undefined): Observable<GetListsIdSegmentsIdMembersReturn> {
			return this.http.get<GetListsIdSegmentsIdMembersReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)) + '/members?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&include_cleaned=' + include_cleaned + '&include_transactional=' + include_transactional + '&include_unsubscribed=' + include_unsubscribed, {});
		}

		/**
		 * Add member to segment
		 * Add a member to a static segment.
		 * Post lists/{list_id}/segments/{segment_id}/members
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @return {PostListsIdSegmentsIdMembersReturn} 
		 */
		PostListsIdSegmentsIdMembers(list_id: string, segment_id: string, requestBody: PostListsIdSegmentsIdMembersPostBody): Observable<PostListsIdSegmentsIdMembersReturn> {
			return this.http.post<PostListsIdSegmentsIdMembersReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)) + '/members', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove list member from segment
		 * Remove a member from the specified static segment.
		 * Delete lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} segment_id The unique id for the segment.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {void} 
		 */
		DeleteListsIdSegmentsIdMembersId(list_id: string, segment_id: string, subscriber_hash: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * List signup forms
		 * Get signup forms for a specific list.
		 * Get lists/{list_id}/signup-forms
		 * @param {string} list_id The unique ID for the list.
		 * @return {GetListsIdSignupFormsReturn} 
		 */
		GetListsIdSignupForms(list_id: string): Observable<GetListsIdSignupFormsReturn> {
			return this.http.get<GetListsIdSignupFormsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/signup-forms', {});
		}

		/**
		 * Customize signup form
		 * Customize a list's default signup form.
		 * Post lists/{list_id}/signup-forms
		 * @param {string} list_id The unique ID for the list.
		 * @return {PostListsIdSignupFormsReturn} 
		 */
		PostListsIdSignupForms(list_id: string, requestBody: PostListsIdSignupFormsPostBody): Observable<PostListsIdSignupFormsReturn> {
			return this.http.post<PostListsIdSignupFormsReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/signup-forms', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get information about all surveys for a list
		 * Get information about all available surveys for a specific list.
		 * Get lists/{list_id}/surveys
		 * @param {string} list_id The unique ID for the list.
		 * @return {void} 
		 */
		GetListsIdSurveys(list_id: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/surveys', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get survey
		 * Get details about a specific survey.
		 * Get lists/{list_id}/surveys/{survey_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} survey_id The ID of the survey.
		 * @return {void} 
		 */
		GetListsIdSurveysId(list_id: string, survey_id: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/surveys/' + (survey_id == null ? '' : encodeURIComponent(survey_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a Survey Campaign
		 * Utilize the List ID and Survey ID to generate a Campaign that links to your survey.
		 * Post lists/{list_id}/surveys/{survey_id}/actions/create-email
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} survey_id The ID of the survey.
		 * @return {PostListsIdSurveysIdActionsCreateEmailReturn} Campaign Instance
		 */
		PostListsIdSurveysIdActionsCreateEmail(list_id: string, survey_id: string): Observable<PostListsIdSurveysIdActionsCreateEmailReturn> {
			return this.http.post<PostListsIdSurveysIdActionsCreateEmailReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/surveys/' + (survey_id == null ? '' : encodeURIComponent(survey_id)) + '/actions/create-email', null, {});
		}

		/**
		 * Publish a Survey
		 * Publish a survey that is in draft, unpublished, or has been previously published and edited.
		 * Post lists/{list_id}/surveys/{survey_id}/actions/publish
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} survey_id The ID of the survey.
		 * @return {void} Survey Published
		 */
		PostListsIdSurveysIdActionsPublish(list_id: string, survey_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/surveys/' + (survey_id == null ? '' : encodeURIComponent(survey_id)) + '/actions/publish', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Unpublish a Survey
		 * Unpublish a survey that has been published.
		 * Post lists/{list_id}/surveys/{survey_id}/actions/unpublish
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} survey_id The ID of the survey.
		 * @return {void} Survey Instance
		 */
		PostListsIdSurveysIdActionsUnpublish(list_id: string, survey_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/surveys/' + (survey_id == null ? '' : encodeURIComponent(survey_id)) + '/actions/unpublish', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Search for tags on a list by name.
		 * Search for tags on a list by name. If no name is provided, will return all tags on the list.
		 * Get lists/{list_id}/tag-search
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.
		 * @return {SearchTagsByNameReturn} 
		 */
		SearchTagsByName(list_id: string, name: string | null | undefined): Observable<SearchTagsByNameReturn> {
			return this.http.get<SearchTagsByNameReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/tag-search&name=' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * List webhooks
		 * Get information about all webhooks for a specific list.
		 * Get lists/{list_id}/webhooks
		 * @param {string} list_id The unique ID for the list.
		 * @return {GetListsIdWebhooksReturn} 
		 */
		GetListsIdWebhooks(list_id: string): Observable<GetListsIdWebhooksReturn> {
			return this.http.get<GetListsIdWebhooksReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/webhooks', {});
		}

		/**
		 * Add webhook
		 * Create a new webhook for a specific list.
		 * Post lists/{list_id}/webhooks
		 * @param {string} list_id The unique ID for the list.
		 * @return {PostListsIdWebhooksReturn} 
		 */
		PostListsIdWebhooks(list_id: string, requestBody: PostListsIdWebhooksBody): Observable<PostListsIdWebhooksReturn> {
			return this.http.post<PostListsIdWebhooksReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/webhooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete webhook
		 * Delete a specific webhook in a list.
		 * Delete lists/{list_id}/webhooks/{webhook_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} webhook_id The webhook's id.
		 * @return {void} 
		 */
		DeleteListsIdWebhooksId(list_id: string, webhook_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/webhooks/' + (webhook_id == null ? '' : encodeURIComponent(webhook_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get webhook info
		 * Get information about a specific webhook.
		 * Get lists/{list_id}/webhooks/{webhook_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} webhook_id The webhook's id.
		 * @return {GetListsIdWebhooksIdReturn} 
		 */
		GetListsIdWebhooksId(list_id: string, webhook_id: string): Observable<GetListsIdWebhooksIdReturn> {
			return this.http.get<GetListsIdWebhooksIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/webhooks/' + (webhook_id == null ? '' : encodeURIComponent(webhook_id)), {});
		}

		/**
		 * Update webhook
		 * Update the settings for an existing webhook.
		 * Patch lists/{list_id}/webhooks/{webhook_id}
		 * @param {string} list_id The unique ID for the list.
		 * @param {string} webhook_id The webhook's id.
		 * @return {PatchListsIdWebhooksIdReturn} 
		 */
		PatchListsIdWebhooksId(list_id: string, webhook_id: string, requestBody: PostListsIdWebhooksBody): Observable<PatchListsIdWebhooksIdReturn> {
			return this.http.patch<PatchListsIdWebhooksIdReturn>(this.baseUri + 'lists/' + (list_id == null ? '' : encodeURIComponent(list_id)) + '/webhooks/' + (webhook_id == null ? '' : encodeURIComponent(webhook_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Ping
		 * A health check for the API that won't return any account-specific information.
		 * Get ping
		 * @return {GetPingReturn} 
		 */
		GetPing(): Observable<GetPingReturn> {
			return this.http.get<GetPingReturn>(this.baseUri + 'ping', {});
		}

		/**
		 * List facebook ads reports
		 * Get reports of Facebook ads.
		 * Get reporting/facebook-ads
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {GetAllFacebookAdsSort_field} sort_field Returns files sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetReportingFacebookAdsReturn} List of Facebook Ad Report Instances
		 */
		GetReportingFacebookAds(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, sort_field: GetAllFacebookAdsSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetReportingFacebookAdsReturn> {
			return this.http.get<GetReportingFacebookAdsReturn>(this.baseUri + 'reporting/facebook-ads?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Get facebook ad report
		 * Get report of a Facebook ad.
		 * Get reporting/facebook-ads/{outreach_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetReportingFacebookAdsIdReturn} Facebook Ad report Instance
		 */
		GetReportingFacebookAdsId(fields: Array<string> | null | undefined, outreach_id: string, exclude_fields: Array<string> | null | undefined): Observable<GetReportingFacebookAdsIdReturn> {
			return this.http.get<GetReportingFacebookAdsIdReturn>(this.baseUri + 'reporting/facebook-ads/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List facebook ecommerce report
		 * Get breakdown of product activity for an outreach.
		 * Get reporting/facebook-ads/{outreach_id}/ecommerce-product-activity
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} outreach_id The outreach id.
		 * @param {GetReportingFacebookAdsIdEcommerceProductActivitySort_field} sort_field Returns files sorted by the specified field.
		 * @return {GetReportingFacebookAdsIdEcommerceProductActivityReturn} Ecommerce Product Activity Instance
		 */
		GetReportingFacebookAdsIdEcommerceProductActivity(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, outreach_id: string, sort_field: GetReportingFacebookAdsIdEcommerceProductActivitySort_field | null | undefined): Observable<GetReportingFacebookAdsIdEcommerceProductActivityReturn> {
			return this.http.get<GetReportingFacebookAdsIdEcommerceProductActivityReturn>(this.baseUri + 'reporting/facebook-ads/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '/ecommerce-product-activity?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&sort_field=' + sort_field, {});
		}

		/**
		 * List landing pages reports
		 * Get reports of landing pages.
		 * Get reporting/landing-pages
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetReportingLandingPagesReturn} List of Landing Page Report Instances
		 */
		GetReportingLandingPages(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetReportingLandingPagesReturn> {
			return this.http.get<GetReportingLandingPagesReturn>(this.baseUri + 'reporting/landing-pages?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get landing page report
		 * Get report of a landing page.
		 * Get reporting/landing-pages/{outreach_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @return {GetReportingLandingPagesIdReturn} Landing Page Report Instance
		 */
		GetReportingLandingPagesId(fields: Array<string> | null | undefined, outreach_id: string, exclude_fields: Array<string> | null | undefined): Observable<GetReportingLandingPagesIdReturn> {
			return this.http.get<GetReportingLandingPagesIdReturn>(this.baseUri + 'reporting/landing-pages/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List survey reports
		 * Get reports for surveys.
		 * Get reporting/surveys
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetReportingSurveysReturn} List of Survey Report Instances
		 */
		GetReportingSurveys(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetReportingSurveysReturn> {
			return this.http.get<GetReportingSurveysReturn>(this.baseUri + 'reporting/surveys?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get survey report
		 * Get report for a survey.
		 * Get reporting/surveys/{outreach_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @return {GetReportingSurveysIdReturn} Survey Report Instance
		 */
		GetReportingSurveysId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, outreach_id: string): Observable<GetReportingSurveysIdReturn> {
			return this.http.get<GetReportingSurveysIdReturn>(this.baseUri + 'reporting/surveys/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List survey question reports
		 * Get reports for survey questions.
		 * Get reporting/surveys/{outreach_id}/questions
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @return {GetReportingSurveysIdQuestionsReturn} List of Survey Question Report Instances
		 */
		GetReportingSurveysIdQuestions(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, outreach_id: string): Observable<GetReportingSurveysIdQuestionsReturn> {
			return this.http.get<GetReportingSurveysIdQuestionsReturn>(this.baseUri + 'reporting/surveys/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '/questions?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Get survey question report
		 * Get report for a survey question.
		 * Get reporting/surveys/{outreach_id}/questions/{question_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @param {string} question_id The ID of the survey question.
		 * @return {GetReportingSurveysIdQuestionsIdReturn} Survey Question Report Instance
		 */
		GetReportingSurveysIdQuestionsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, outreach_id: string, question_id: string): Observable<GetReportingSurveysIdQuestionsIdReturn> {
			return this.http.get<GetReportingSurveysIdQuestionsIdReturn>(this.baseUri + 'reporting/surveys/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '/questions/' + (question_id == null ? '' : encodeURIComponent(question_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List answers for question
		 * Get answers for a survey question.
		 * Get reporting/surveys/{outreach_id}/questions/{question_id}/answers
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @param {string} question_id The ID of the survey question.
		 * @param {GetReportingSurveysIdQuestionsIdAnswersRespondent_familiarity_is} respondent_familiarity_is Filter survey responses by familiarity of the respondents.
		 * @return {GetReportingSurveysIdQuestionsIdAnswersReturn} List of Survey Question Answers
		 */
		GetReportingSurveysIdQuestionsIdAnswers(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, outreach_id: string, question_id: string, respondent_familiarity_is: GetReportingSurveysIdQuestionsIdAnswersRespondent_familiarity_is | null | undefined): Observable<GetReportingSurveysIdQuestionsIdAnswersReturn> {
			return this.http.get<GetReportingSurveysIdQuestionsIdAnswersReturn>(this.baseUri + 'reporting/surveys/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '/questions/' + (question_id == null ? '' : encodeURIComponent(question_id)) + '/answers?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&respondent_familiarity_is=' + respondent_familiarity_is, {});
		}

		/**
		 * List survey responses
		 * Get responses to a survey.
		 * Get reporting/surveys/{outreach_id}/responses
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} outreach_id The outreach id.
		 * @param {number} answered_question The ID of the question that was answered.
		 * @param {string} chose_answer The ID of the option chosen to filter responses on.
		 * @param {GetReportingSurveysIdQuestionsIdAnswersRespondent_familiarity_is} respondent_familiarity_is Filter survey responses by familiarity of the respondents.
		 * @return {GetReportingSurveysIdResponsesReturn} List of survey responses
		 */
		GetReportingSurveysIdResponses(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, outreach_id: string, answered_question: number | null | undefined, chose_answer: string | null | undefined, respondent_familiarity_is: GetReportingSurveysIdQuestionsIdAnswersRespondent_familiarity_is | null | undefined): Observable<GetReportingSurveysIdResponsesReturn> {
			return this.http.get<GetReportingSurveysIdResponsesReturn>(this.baseUri + 'reporting/surveys/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '/responses?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&answered_question=' + answered_question + '&chose_answer=' + (chose_answer == null ? '' : encodeURIComponent(chose_answer)) + '&respondent_familiarity_is=' + respondent_familiarity_is, {});
		}

		/**
		 * Get survey response
		 * Get a single survey response.
		 * Get reporting/surveys/{outreach_id}/responses/{response_id}
		 * @param {string} outreach_id The outreach id.
		 * @param {string} response_id The ID of the survey response.
		 * @return {GetReportingSurveysIdResponsesIdReturn} Get a single survey response.
		 */
		GetReportingSurveysIdResponsesId(outreach_id: string, response_id: string): Observable<GetReportingSurveysIdResponsesIdReturn> {
			return this.http.get<GetReportingSurveysIdResponsesIdReturn>(this.baseUri + 'reporting/surveys/' + (outreach_id == null ? '' : encodeURIComponent(outreach_id)) + '/responses/' + (response_id == null ? '' : encodeURIComponent(response_id)), {});
		}

		/**
		 * List campaign reports
		 * Get campaign reports.
		 * Get reports
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {GetCampaignsType} type The campaign type.
		 * @param {Date} before_send_time Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {Date} since_send_time Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @return {GetReportsReturn} 
		 */
		GetReports(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, type: GetCampaignsType | null | undefined, before_send_time: Date | null | undefined, since_send_time: Date | null | undefined): Observable<GetReportsReturn> {
			return this.http.get<GetReportsReturn>(this.baseUri + 'reports?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&type=' + type + '&before_send_time=' + before_send_time?.toISOString() + '&since_send_time=' + since_send_time?.toISOString(), {});
		}

		/**
		 * Get campaign report
		 * Get report details for a specific sent campaign.
		 * Get reports/{campaign_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdReturn} 
		 */
		GetReportsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetReportsIdReturn> {
			return this.http.get<GetReportsIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List abuse reports
		 * Get a list of abuse complaints for a specific campaign.
		 * Get reports/{campaign_id}/abuse-reports
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdAbuseReportsIdReturn} 
		 */
		GetReportsIdAbuseReportsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetReportsIdAbuseReportsIdReturn> {
			return this.http.get<GetReportsIdAbuseReportsIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/abuse-reports?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Get abuse report
		 * Get information about a specific abuse report for a campaign.
		 * Get reports/{campaign_id}/abuse-reports/{report_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} report_id The id for the abuse report.
		 * @return {GetReportsIdAbuseReportsIdIdReturn} 
		 */
		GetReportsIdAbuseReportsIdId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, report_id: string): Observable<GetReportsIdAbuseReportsIdIdReturn> {
			return this.http.get<GetReportsIdAbuseReportsIdIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/abuse-reports/' + (report_id == null ? '' : encodeURIComponent(report_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List campaign feedback
		 * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
		 * Get reports/{campaign_id}/advice
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdAdviceReturn} 
		 */
		GetReportsIdAdvice(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetReportsIdAdviceReturn> {
			return this.http.get<GetReportsIdAdviceReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/advice?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List campaign details
		 * Get information about clicks on specific links in your Mailchimp campaigns.
		 * Get reports/{campaign_id}/click-details
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {GetReportsIdClickDetailsSort_field} sort_field Returns click reports sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetReportsIdClickDetailsReturn} 
		 */
		GetReportsIdClickDetails(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string, sort_field: GetReportsIdClickDetailsSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetReportsIdClickDetailsReturn> {
			return this.http.get<GetReportsIdClickDetailsReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/click-details?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Get campaign link details
		 * Get click details for a specific link in a campaign.
		 * Get reports/{campaign_id}/click-details/{link_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} link_id The id for the link.
		 * @return {GetReportsIdClickDetailsIdReturn} 
		 */
		GetReportsIdClickDetailsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, link_id: string): Observable<GetReportsIdClickDetailsIdReturn> {
			return this.http.get<GetReportsIdClickDetailsIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/click-details/' + (link_id == null ? '' : encodeURIComponent(link_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List clicked link subscribers
		 * Get information about list members who clicked on a specific link in a campaign.
		 * Get reports/{campaign_id}/click-details/{link_id}/members
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} link_id The id for the link.
		 * @return {GetReportsIdClickDetailsIdMembersReturn} 
		 */
		GetReportsIdClickDetailsIdMembers(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string, link_id: string): Observable<GetReportsIdClickDetailsIdMembersReturn> {
			return this.http.get<GetReportsIdClickDetailsIdMembersReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/click-details/' + (link_id == null ? '' : encodeURIComponent(link_id)) + '/members?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get clicked link subscriber
		 * Get information about a specific subscriber who clicked a link in a specific campaign.
		 * Get reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} link_id The id for the link.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {GetReportsIdClickDetailsIdMembersIdReturn} 
		 */
		GetReportsIdClickDetailsIdMembersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, link_id: string, subscriber_hash: string): Observable<GetReportsIdClickDetailsIdMembersIdReturn> {
			return this.http.get<GetReportsIdClickDetailsIdMembersIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/click-details/' + (link_id == null ? '' : encodeURIComponent(link_id)) + '/members/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List domain performance stats
		 * Get statistics for the top-performing email domains in a campaign.
		 * Get reports/{campaign_id}/domain-performance
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdDomainPerformanceReturn} 
		 */
		GetReportsIdDomainPerformance(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetReportsIdDomainPerformanceReturn> {
			return this.http.get<GetReportsIdDomainPerformanceReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/domain-performance?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List campaign product activity
		 * Get breakdown of product activity for a campaign
		 * Get reports/{campaign_id}/ecommerce-product-activity
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {GetReportingFacebookAdsIdEcommerceProductActivitySort_field} sort_field Returns files sorted by the specified field.
		 * @return {GetReportsIdEcommerceProductActivityReturn} Ecommerce Product Activity Instance
		 */
		GetReportsIdEcommerceProductActivity(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string, sort_field: GetReportingFacebookAdsIdEcommerceProductActivitySort_field | null | undefined): Observable<GetReportsIdEcommerceProductActivityReturn> {
			return this.http.get<GetReportsIdEcommerceProductActivityReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/ecommerce-product-activity?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&sort_field=' + sort_field, {});
		}

		/**
		 * List EepURL activity
		 * Get a summary of social activity for the campaign, tracked by EepURL.
		 * Get reports/{campaign_id}/eepurl
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdEepurlReturn} 
		 */
		GetReportsIdEepurl(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetReportsIdEepurlReturn> {
			return this.http.get<GetReportsIdEepurlReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/eepurl?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List email activity
		 * Get a list of member's subscriber activity in a specific campaign.
		 * Get reports/{campaign_id}/email-activity
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @return {GetReportsIdEmailActivityReturn} 
		 */
		GetReportsIdEmailActivity(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string, since: string | null | undefined): Observable<GetReportsIdEmailActivityReturn> {
			return this.http.get<GetReportsIdEmailActivityReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/email-activity?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&since=' + (since == null ? '' : encodeURIComponent(since)), {});
		}

		/**
		 * Get subscriber email activity
		 * Get a specific list member's activity in a campaign including opens, clicks, and bounces.
		 * Get reports/{campaign_id}/email-activity/{subscriber_hash}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @param {string} since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @return {GetReportsIdEmailActivityIdReturn} 
		 */
		GetReportsIdEmailActivityId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, subscriber_hash: string, since: string | null | undefined): Observable<GetReportsIdEmailActivityIdReturn> {
			return this.http.get<GetReportsIdEmailActivityIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/email-activity/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&since=' + (since == null ? '' : encodeURIComponent(since)), {});
		}

		/**
		 * List top open activities
		 * Get top open locations for a specific campaign.
		 * Get reports/{campaign_id}/locations
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetReportsIdLocationsReturn} 
		 */
		GetReportsIdLocations(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, count: number | null | undefined, offset: number | null | undefined): Observable<GetReportsIdLocationsReturn> {
			return this.http.get<GetReportsIdLocationsReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/locations?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * List campaign open details
		 * Get detailed information about any campaign emails that were opened by a list member.
		 * Get reports/{campaign_id}/open-details
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {GetReportsIdOpenDetailsSort_field} sort_field Returns open reports sorted by the specified field.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetReportsIdOpenDetailsReturn} 
		 */
		GetReportsIdOpenDetails(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string, since: string | null | undefined, sort_field: GetReportsIdOpenDetailsSort_field | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetReportsIdOpenDetailsReturn> {
			return this.http.get<GetReportsIdOpenDetailsReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/open-details?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&since=' + (since == null ? '' : encodeURIComponent(since)) + '&sort_field=' + sort_field + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Get opened campaign subscriber
		 * Get information about a specific subscriber who opened a campaign.
		 * Get reports/{campaign_id}/open-details/{subscriber_hash}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {GetReportsIdOpenDetailsIdMembersIdReturn} 
		 */
		GetReportsIdOpenDetailsIdMembersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, subscriber_hash: string): Observable<GetReportsIdOpenDetailsIdMembersIdReturn> {
			return this.http.get<GetReportsIdOpenDetailsIdMembersIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/open-details/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List campaign recipients
		 * Get information about campaign recipients.
		 * Get reports/{campaign_id}/sent-to
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdSentToReturn} 
		 */
		GetReportsIdSentTo(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string): Observable<GetReportsIdSentToReturn> {
			return this.http.get<GetReportsIdSentToReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/sent-to?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get campaign recipient info
		 * Get information about a specific campaign recipient.
		 * Get reports/{campaign_id}/sent-to/{subscriber_hash}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {GetReportsIdSentToIdReturn} 
		 */
		GetReportsIdSentToId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, subscriber_hash: string): Observable<GetReportsIdSentToIdReturn> {
			return this.http.get<GetReportsIdSentToIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/sent-to/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List child campaign reports
		 * Get a list of reports with child campaigns for a specific parent campaign.
		 * Get reports/{campaign_id}/sub-reports
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdSubReportsIdReturn} 
		 */
		GetReportsIdSubReportsId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string): Observable<GetReportsIdSubReportsIdReturn> {
			return this.http.get<GetReportsIdSubReportsIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/sub-reports?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List unsubscribed members
		 * Get information about members who have unsubscribed from a specific campaign.
		 * Get reports/{campaign_id}/unsubscribed
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @return {GetReportsIdUnsubscribedReturn} 
		 */
		GetReportsIdUnsubscribed(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, campaign_id: string): Observable<GetReportsIdUnsubscribedReturn> {
			return this.http.get<GetReportsIdUnsubscribedReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/unsubscribed?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Get unsubscribed member
		 * Get information about a specific list member who unsubscribed from a campaign.
		 * Get reports/{campaign_id}/unsubscribed/{subscriber_hash}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} campaign_id The unique id for the campaign.
		 * @param {string} subscriber_hash The MD5 hash of the lowercase version of the list member's email address.
		 * @return {GetReportsIdUnsubscribedIdReturn} 
		 */
		GetReportsIdUnsubscribedId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, campaign_id: string, subscriber_hash: string): Observable<GetReportsIdUnsubscribedIdReturn> {
			return this.http.get<GetReportsIdUnsubscribedIdReturn>(this.baseUri + 'reports/' + (campaign_id == null ? '' : encodeURIComponent(campaign_id)) + '/unsubscribed/' + (subscriber_hash == null ? '' : encodeURIComponent(subscriber_hash)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Search campaigns
		 * Search all campaigns for the specified query terms.
		 * Get search-campaigns
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} query The search query used to filter results.
		 * @return {GetSearchCampaignsReturn} 
		 */
		GetSearchCampaigns(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, query: string): Observable<GetSearchCampaignsReturn> {
			return this.http.get<GetSearchCampaignsReturn>(this.baseUri + 'search-campaigns?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&query=' + (query == null ? '' : encodeURIComponent(query)), {});
		}

		/**
		 * Search members
		 * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.
		 * Get search-members
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.
		 * @param {string} list_id The unique id for the list.
		 * @return {GetSearchMembersReturn} 
		 */
		GetSearchMembers(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, query: string, list_id: string | null | undefined): Observable<GetSearchMembersReturn> {
			return this.http.get<GetSearchMembersReturn>(this.baseUri + 'search-members?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&query=' + (query == null ? '' : encodeURIComponent(query)) + '&list_id=' + (list_id == null ? '' : encodeURIComponent(list_id)), {});
		}

		/**
		 * List template folders
		 * Get all folders used to organize templates.
		 * Get template-folders
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @return {GetTemplateFoldersReturn} 
		 */
		GetTemplateFolders(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined): Observable<GetTemplateFoldersReturn> {
			return this.http.get<GetTemplateFoldersReturn>(this.baseUri + 'template-folders?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset, {});
		}

		/**
		 * Add template folder
		 * Create a new template folder.
		 * Post template-folders
		 * @return {PostTemplateFoldersReturn} 
		 */
		PostTemplateFolders(requestBody: PostTemplateFoldersBody): Observable<PostTemplateFoldersReturn> {
			return this.http.post<PostTemplateFoldersReturn>(this.baseUri + 'template-folders', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete template folder
		 * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.
		 * Delete template-folders/{folder_id}
		 * @param {string} folder_id The unique id for the template folder.
		 * @return {void} 
		 */
		DeleteTemplateFoldersId(folder_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'template-folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get template folder
		 * Get information about a specific folder used to organize templates.
		 * Get template-folders/{folder_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} folder_id The unique id for the template folder.
		 * @return {GetTemplateFoldersIdReturn} 
		 */
		GetTemplateFoldersId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, folder_id: string): Observable<GetTemplateFoldersIdReturn> {
			return this.http.get<GetTemplateFoldersIdReturn>(this.baseUri + 'template-folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update template folder
		 * Update a specific folder used to organize templates.
		 * Patch template-folders/{folder_id}
		 * @param {string} folder_id The unique id for the template folder.
		 * @return {PatchTemplateFoldersIdReturn} 
		 */
		PatchTemplateFoldersId(folder_id: string, requestBody: PostTemplateFoldersBody): Observable<PatchTemplateFoldersIdReturn> {
			return this.http.patch<PatchTemplateFoldersIdReturn>(this.baseUri + 'template-folders/' + (folder_id == null ? '' : encodeURIComponent(folder_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List templates
		 * Get a list of an account's available templates.
		 * Get templates
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {number} count The number of records to return. Default value is 10. Maximum value is 1000
		 * @param {number} offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
		 * @param {string} created_by The Mailchimp account user who created the template.
		 * @param {string} since_date_created Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} before_date_created Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
		 * @param {string} type Limit results based on template type.
		 * @param {string} category Limit results based on category.
		 * @param {string} folder_id The unique folder id.
		 * @param {GetTemplatesSort_field} sort_field Returns user templates sorted by the specified field.
		 * @param {GetTemplatesContent_type} content_type Limit results based on how the template's content is put together. Only templates of type `user` can be filtered by `content_type`. If you want to retrieve saved templates created with the legacy email editor, then filter `content_type` to `template`. If you'd rather pull your saved templates for the new editor, filter to `multichannel`. For code your own templates, filter to `html`.
		 * @param {GetCampaignsSort_dir} sort_dir Determines the order direction for sorted results.
		 * @return {GetTemplatesReturn} 
		 */
		GetTemplates(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, count: number | null | undefined, offset: number | null | undefined, created_by: string | null | undefined, since_date_created: string | null | undefined, before_date_created: string | null | undefined, type: string | null | undefined, category: string | null | undefined, folder_id: string | null | undefined, sort_field: GetTemplatesSort_field | null | undefined, content_type: GetTemplatesContent_type | null | undefined, sort_dir: GetCampaignsSort_dir | null | undefined): Observable<GetTemplatesReturn> {
			return this.http.get<GetTemplatesReturn>(this.baseUri + 'templates?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&') + '&count=' + count + '&offset=' + offset + '&created_by=' + (created_by == null ? '' : encodeURIComponent(created_by)) + '&since_date_created=' + (since_date_created == null ? '' : encodeURIComponent(since_date_created)) + '&before_date_created=' + (before_date_created == null ? '' : encodeURIComponent(before_date_created)) + '&type=' + (type == null ? '' : encodeURIComponent(type)) + '&category=' + (category == null ? '' : encodeURIComponent(category)) + '&folder_id=' + (folder_id == null ? '' : encodeURIComponent(folder_id)) + '&sort_field=' + sort_field + '&content_type=' + content_type + '&sort_dir=' + sort_dir, {});
		}

		/**
		 * Add template
		 * Create a new template for the account. Only Classic templates are supported.
		 * Post templates
		 * @return {PostTemplatesReturn} 
		 */
		PostTemplates(requestBody: PostTemplatesBody): Observable<PostTemplatesReturn> {
			return this.http.post<PostTemplatesReturn>(this.baseUri + 'templates', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete template
		 * Delete a specific template.
		 * Delete templates/{template_id}
		 * @param {string} template_id The unique id for the template.
		 * @return {void} 
		 */
		DeleteTemplatesId(template_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'templates/' + (template_id == null ? '' : encodeURIComponent(template_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get template info
		 * Get information about a specific template.
		 * Get templates/{template_id}
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} template_id The unique id for the template.
		 * @return {GetTemplatesIdReturn} 
		 */
		GetTemplatesId(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, template_id: string): Observable<GetTemplatesIdReturn> {
			return this.http.get<GetTemplatesIdReturn>(this.baseUri + 'templates/' + (template_id == null ? '' : encodeURIComponent(template_id)) + '?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Update template
		 * Update the name, HTML, or `folder_id` of an existing template.
		 * Patch templates/{template_id}
		 * @param {string} template_id The unique id for the template.
		 * @return {PatchTemplatesIdReturn} 
		 */
		PatchTemplatesId(template_id: string, requestBody: PostTemplatesBody): Observable<PatchTemplatesIdReturn> {
			return this.http.patch<PatchTemplatesIdReturn>(this.baseUri + 'templates/' + (template_id == null ? '' : encodeURIComponent(template_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * View default content
		 * Get the sections that you can edit in a template, including each section's default content.
		 * Get templates/{template_id}/default-content
		 * @param {Array<string>} fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
		 * @param {Array<string>} exclude_fields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
		 * @param {string} template_id The unique id for the template.
		 * @return {GetTemplatesIdDefaultContentReturn} 
		 */
		GetTemplatesIdDefaultContent(fields: Array<string> | null | undefined, exclude_fields: Array<string> | null | undefined, template_id: string): Observable<GetTemplatesIdDefaultContentReturn> {
			return this.http.get<GetTemplatesIdDefaultContentReturn>(this.baseUri + 'templates/' + (template_id == null ? '' : encodeURIComponent(template_id)) + '/default-content?' + fields?.map(z => `fields=${encodeURIComponent(z)}`).join('&') + '&' + exclude_fields?.map(z => `exclude_fields=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * List sending domains
		 * Get all of the sending domains on the account.
		 * Get verified-domains
		 * @return {GetVerifiedDomainsReturn} The domains on the account.
		 */
		GetVerifiedDomains(): Observable<GetVerifiedDomainsReturn> {
			return this.http.get<GetVerifiedDomainsReturn>(this.baseUri + 'verified-domains', {});
		}

		/**
		 * Add domain to account
		 * Add a domain to the account.
		 * Post verified-domains
		 * @return {CreateVerifiedDomainReturn} The newly-created domain.
		 */
		CreateVerifiedDomain(requestBody: CreateVerifiedDomainPostBody): Observable<CreateVerifiedDomainReturn> {
			return this.http.post<CreateVerifiedDomainReturn>(this.baseUri + 'verified-domains', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete domain
		 * Delete a verified domain from the account.
		 * Delete verified-domains/{domain_name}
		 * @param {string} domain_name The domain name.
		 * @return {void} 
		 */
		DeleteVerifiedDomain(domain_name: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'verified-domains/' + (domain_name == null ? '' : encodeURIComponent(domain_name)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get domain info
		 * Get the details for a single domain on the account.
		 * Get verified-domains/{domain_name}
		 * @param {string} domain_name The domain name.
		 * @return {GetVerifiedDomainReturn} 
		 */
		GetVerifiedDomain(domain_name: string): Observable<GetVerifiedDomainReturn> {
			return this.http.get<GetVerifiedDomainReturn>(this.baseUri + 'verified-domains/' + (domain_name == null ? '' : encodeURIComponent(domain_name)), {});
		}

		/**
		 * Verify domain
		 * Verify a domain for sending.
		 * Post verified-domains/{domain_name}/actions/verify
		 * @param {string} domain_name The domain name.
		 * @return {VerifyDomainReturn} The domain being verified for sending.
		 */
		VerifyDomain(domain_name: string, requestBody: VerifyDomainPostBody): Observable<VerifyDomainReturn> {
			return this.http.post<VerifyDomainReturn>(this.baseUri + 'verified-domains/' + (domain_name == null ? '' : encodeURIComponent(domain_name)) + '/actions/verify', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

	export interface GetRootReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetRootReturn_links?: Array<GetRootReturn_links>;

		/** The Mailchimp account ID. */
		account_id?: string | null;

		/** The user-specified industry associated with the account. */
		account_industry?: string | null;

		/** The name of the account. */
		account_name?: string | null;

		/** The timezone currently set for the account. */
		account_timezone?: string | null;

		/** URL of the avatar for the user. */
		avatar_url?: string | null;

		/** Information about the account contact. */
		contact?: GetRootReturnContact;

		/** The account email address. */
		email?: string | null;

		/** The first name tied to the account. */
		first_name?: string | null;

		/** Date of first payment for monthly plans. */
		first_payment?: Date | null;

		/** The [average campaign statistics](https://mailchimp.com/resources/research/email-marketing-benchmarks/?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs) for all campaigns in the account's specified industry. */
		industry_stats?: GetRootReturnIndustry_stats;

		/** The date and time of the last login for this account in ISO 8601 format. */
		last_login?: Date | null;

		/** The last name tied to the account. */
		last_name?: string | null;

		/** The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account. */
		login_id?: string | null;

		/** The date and time that the account was created in ISO 8601 format. */
		member_since?: Date | null;

		/** The type of pricing plan the account is on. */
		pricing_plan_type?: GetRootReturnPricing_plan_type | null;

		/** Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/). */
		pro_enabled?: boolean | null;

		/** The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account. */
		role?: string | null;

		/** The total number of subscribers across all lists in the account. */
		total_subscribers?: number | null;

		/** The username tied to the account. */
		username?: string | null;
	}
	export interface GetRootReturnFormProperties {

		/** The Mailchimp account ID. */
		account_id: FormControl<string | null | undefined>,

		/** The user-specified industry associated with the account. */
		account_industry: FormControl<string | null | undefined>,

		/** The name of the account. */
		account_name: FormControl<string | null | undefined>,

		/** The timezone currently set for the account. */
		account_timezone: FormControl<string | null | undefined>,

		/** URL of the avatar for the user. */
		avatar_url: FormControl<string | null | undefined>,

		/** The account email address. */
		email: FormControl<string | null | undefined>,

		/** The first name tied to the account. */
		first_name: FormControl<string | null | undefined>,

		/** Date of first payment for monthly plans. */
		first_payment: FormControl<Date | null | undefined>,

		/** The date and time of the last login for this account in ISO 8601 format. */
		last_login: FormControl<Date | null | undefined>,

		/** The last name tied to the account. */
		last_name: FormControl<string | null | undefined>,

		/** The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account. */
		login_id: FormControl<string | null | undefined>,

		/** The date and time that the account was created in ISO 8601 format. */
		member_since: FormControl<Date | null | undefined>,

		/** The type of pricing plan the account is on. */
		pricing_plan_type: FormControl<GetRootReturnPricing_plan_type | null | undefined>,

		/** Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/). */
		pro_enabled: FormControl<boolean | null | undefined>,

		/** The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account. */
		role: FormControl<string | null | undefined>,

		/** The total number of subscribers across all lists in the account. */
		total_subscribers: FormControl<number | null | undefined>,

		/** The username tied to the account. */
		username: FormControl<string | null | undefined>,
	}
	export function CreateGetRootReturnFormGroup() {
		return new FormGroup<GetRootReturnFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			account_industry: new FormControl<string | null | undefined>(undefined),
			account_name: new FormControl<string | null | undefined>(undefined),
			account_timezone: new FormControl<string | null | undefined>(undefined),
			avatar_url: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			first_payment: new FormControl<Date | null | undefined>(undefined),
			last_login: new FormControl<Date | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			login_id: new FormControl<string | null | undefined>(undefined),
			member_since: new FormControl<Date | null | undefined>(undefined),
			pricing_plan_type: new FormControl<GetRootReturnPricing_plan_type | null | undefined>(undefined),
			pro_enabled: new FormControl<boolean | null | undefined>(undefined),
			role: new FormControl<string | null | undefined>(undefined),
			total_subscribers: new FormControl<number | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetRootReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetRootReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetRootReturn_linksFormGroup() {
		return new FormGroup<GetRootReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetRootReturn_linksMethod { GET = 0, POST = 1, PUT = 2, PATCH = 3, DELETE = 4, OPTIONS = 5, HEAD = 6 }

	export interface GetRootReturnContact {

		/** The street address for the account contact. */
		addr1?: string | null;

		/** The street address for the account contact. */
		addr2?: string | null;

		/** The city for the account contact. */
		city?: string | null;

		/** The company name for the account. */
		company?: string | null;

		/** The country for the account contact. */
		country?: string | null;

		/** The state for the account contact. */
		state?: string | null;

		/** The zip code for the account contact. */
		zip?: string | null;
	}
	export interface GetRootReturnContactFormProperties {

		/** The street address for the account contact. */
		addr1: FormControl<string | null | undefined>,

		/** The street address for the account contact. */
		addr2: FormControl<string | null | undefined>,

		/** The city for the account contact. */
		city: FormControl<string | null | undefined>,

		/** The company name for the account. */
		company: FormControl<string | null | undefined>,

		/** The country for the account contact. */
		country: FormControl<string | null | undefined>,

		/** The state for the account contact. */
		state: FormControl<string | null | undefined>,

		/** The zip code for the account contact. */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateGetRootReturnContactFormGroup() {
		return new FormGroup<GetRootReturnContactFormProperties>({
			addr1: new FormControl<string | null | undefined>(undefined),
			addr2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetRootReturnIndustry_stats {

		/** The average bounce rate for all campaigns in the account's specified industry. */
		bounce_rate?: number | null;

		/** The average unique click rate for all campaigns in the account's specified industry. */
		click_rate?: number | null;

		/** The average unique open rate for all campaigns in the account's specified industry. */
		open_rate?: number | null;
	}
	export interface GetRootReturnIndustry_statsFormProperties {

		/** The average bounce rate for all campaigns in the account's specified industry. */
		bounce_rate: FormControl<number | null | undefined>,

		/** The average unique click rate for all campaigns in the account's specified industry. */
		click_rate: FormControl<number | null | undefined>,

		/** The average unique open rate for all campaigns in the account's specified industry. */
		open_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetRootReturnIndustry_statsFormGroup() {
		return new FormGroup<GetRootReturnIndustry_statsFormProperties>({
			bounce_rate: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetRootReturnPricing_plan_type { monthly = 0, pay_as_you_go = 1, forever_free = 2 }

	export interface GetAccountExportsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAccountExportsReturn_links?: Array<GetAccountExportsReturn_links>;

		/** An array of objects, each representing an account export. */
		GetAccountExportsReturnExports?: Array<GetAccountExportsReturnExports>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetAccountExportsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetAccountExportsReturnFormGroup() {
		return new FormGroup<GetAccountExportsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAccountExportsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAccountExportsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAccountExportsReturn_linksFormGroup() {
		return new FormGroup<GetAccountExportsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAccountExportsReturnExports {

		/** A list of link types and descriptions for the API schema documents. */
		GetAccountExportsReturnExports_links?: Array<GetAccountExportsReturnExports_links>;

		/** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
		download_url?: string | null;

		/** The ID for the export. */
		export_id?: number | null;

		/** If finished, the finish time for the export. */
		finished?: Date | null;

		/** The size of the uncompressed export in bytes. */
		size_in_bytes?: number | null;

		/** Start time for the export. */
		started?: Date | null;
	}
	export interface GetAccountExportsReturnExportsFormProperties {

		/** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
		download_url: FormControl<string | null | undefined>,

		/** The ID for the export. */
		export_id: FormControl<number | null | undefined>,

		/** If finished, the finish time for the export. */
		finished: FormControl<Date | null | undefined>,

		/** The size of the uncompressed export in bytes. */
		size_in_bytes: FormControl<number | null | undefined>,

		/** Start time for the export. */
		started: FormControl<Date | null | undefined>,
	}
	export function CreateGetAccountExportsReturnExportsFormGroup() {
		return new FormGroup<GetAccountExportsReturnExportsFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined),
			export_id: new FormControl<number | null | undefined>(undefined),
			finished: new FormControl<Date | null | undefined>(undefined),
			size_in_bytes: new FormControl<number | null | undefined>(undefined),
			started: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetAccountExportsReturnExports_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAccountExportsReturnExports_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAccountExportsReturnExports_linksFormGroup() {
		return new FormGroup<GetAccountExportsReturnExports_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAccountExportPostBody {

		/**
		 * The stages of an account export to include.
		 * Required
		 */
		include_stages: Array<string>;

		/** An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit. */
		since_timestamp?: Date | null;
	}
	export interface PostAccountExportPostBodyFormProperties {

		/** An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit. */
		since_timestamp: FormControl<Date | null | undefined>,
	}
	export function CreatePostAccountExportPostBodyFormGroup() {
		return new FormGroup<PostAccountExportPostBodyFormProperties>({
			since_timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostAccountExportReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostAccountExportReturn_links?: Array<PostAccountExportReturn_links>;

		/** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
		download_url?: string | null;

		/** The ID for the export. */
		export_id?: number | null;

		/** If finished, the finish time for the export. */
		finished?: Date | null;

		/** The size of the uncompressed export in bytes. */
		size_in_bytes?: number | null;

		/** Start time for the export. */
		started?: Date | null;
	}
	export interface PostAccountExportReturnFormProperties {

		/** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
		download_url: FormControl<string | null | undefined>,

		/** The ID for the export. */
		export_id: FormControl<number | null | undefined>,

		/** If finished, the finish time for the export. */
		finished: FormControl<Date | null | undefined>,

		/** The size of the uncompressed export in bytes. */
		size_in_bytes: FormControl<number | null | undefined>,

		/** Start time for the export. */
		started: FormControl<Date | null | undefined>,
	}
	export function CreatePostAccountExportReturnFormGroup() {
		return new FormGroup<PostAccountExportReturnFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined),
			export_id: new FormControl<number | null | undefined>(undefined),
			finished: new FormControl<Date | null | undefined>(undefined),
			size_in_bytes: new FormControl<number | null | undefined>(undefined),
			started: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostAccountExportReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostAccountExportReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostAccountExportReturn_linksFormGroup() {
		return new FormGroup<PostAccountExportReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAccountExportIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAccountExportIdReturn_links?: Array<GetAccountExportIdReturn_links>;

		/** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
		download_url?: string | null;

		/** The ID for the export. */
		export_id?: number | null;

		/** If finished, the finish time for the export. */
		finished?: Date | null;

		/** The size of the uncompressed export in bytes. */
		size_in_bytes?: number | null;

		/** Start time for the export. */
		started?: Date | null;
	}
	export interface GetAccountExportIdReturnFormProperties {

		/** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
		download_url: FormControl<string | null | undefined>,

		/** The ID for the export. */
		export_id: FormControl<number | null | undefined>,

		/** If finished, the finish time for the export. */
		finished: FormControl<Date | null | undefined>,

		/** The size of the uncompressed export in bytes. */
		size_in_bytes: FormControl<number | null | undefined>,

		/** Start time for the export. */
		started: FormControl<Date | null | undefined>,
	}
	export function CreateGetAccountExportIdReturnFormGroup() {
		return new FormGroup<GetAccountExportIdReturnFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined),
			export_id: new FormControl<number | null | undefined>(undefined),
			finished: new FormControl<Date | null | undefined>(undefined),
			size_in_bytes: new FormControl<number | null | undefined>(undefined),
			started: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetAccountExportIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAccountExportIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAccountExportIdReturn_linksFormGroup() {
		return new FormGroup<GetAccountExportIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetActivityFeedChimpChatterReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetActivityFeedChimpChatterReturn_links?: Array<GetActivityFeedChimpChatterReturn_links>;

		/** An array of Chimp Chatter messages. There's a maximum of 200 messages present for an account. */
		GetActivityFeedChimpChatterReturnChimp_chatter?: Array<GetActivityFeedChimpChatterReturnChimp_chatter>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetActivityFeedChimpChatterReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetActivityFeedChimpChatterReturnFormGroup() {
		return new FormGroup<GetActivityFeedChimpChatterReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetActivityFeedChimpChatterReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetActivityFeedChimpChatterReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetActivityFeedChimpChatterReturn_linksFormGroup() {
		return new FormGroup<GetActivityFeedChimpChatterReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetActivityFeedChimpChatterReturnChimp_chatter {

		/** If it exists, campaign ID for the associated campaign */
		campaign_id?: string | null;

		/** If it exists, list ID for the associated list */
		list_id?: string | null;
		message?: string | null;
		title?: string | null;

		/** The type of activity */
		type?: GetActivityFeedChimpChatterReturnChimp_chatterType | null;

		/** The date and time this activity was updated. */
		update_time?: Date | null;

		/** URL to a report that includes this activity */
		url?: string | null;
	}
	export interface GetActivityFeedChimpChatterReturnChimp_chatterFormProperties {

		/** If it exists, campaign ID for the associated campaign */
		campaign_id: FormControl<string | null | undefined>,

		/** If it exists, list ID for the associated list */
		list_id: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		title: FormControl<string | null | undefined>,

		/** The type of activity */
		type: FormControl<GetActivityFeedChimpChatterReturnChimp_chatterType | null | undefined>,

		/** The date and time this activity was updated. */
		update_time: FormControl<Date | null | undefined>,

		/** URL to a report that includes this activity */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetActivityFeedChimpChatterReturnChimp_chatterFormGroup() {
		return new FormGroup<GetActivityFeedChimpChatterReturnChimp_chatterFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetActivityFeedChimpChatterReturnChimp_chatterType | null | undefined>(undefined),
			update_time: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetActivityFeedChimpChatterReturnChimp_chatterType { 'lists:new-subscriber' = 0, 'lists:unsubscribes' = 1, 'lists:profile-updates' = 2, 'campaigns:facebook-likes' = 3, 'campaigns:forward-to-friend' = 4, 'lists:imports' = 5 }

	export interface GetAuthorizedAppsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAuthorizedAppsReturn_links?: Array<GetAuthorizedAppsReturn_links>;

		/** An array of objects, each representing an authorized application. */
		GetAuthorizedAppsReturnApps?: Array<GetAuthorizedAppsReturnApps>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetAuthorizedAppsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetAuthorizedAppsReturnFormGroup() {
		return new FormGroup<GetAuthorizedAppsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAuthorizedAppsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAuthorizedAppsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAuthorizedAppsReturn_linksFormGroup() {
		return new FormGroup<GetAuthorizedAppsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAuthorizedAppsReturnApps {

		/** A list of link types and descriptions for the API schema documents. */
		GetAuthorizedAppsReturnApps_links?: Array<GetAuthorizedAppsReturnApps_links>;

		/** A short description of the application. */
		description?: string | null;

		/** The ID for the application. */
		id?: number | null;

		/** The name of the application. */
		name?: string | null;

		/** An array of usernames for users who have linked the app. */
		users?: Array<string>;
	}
	export interface GetAuthorizedAppsReturnAppsFormProperties {

		/** A short description of the application. */
		description: FormControl<string | null | undefined>,

		/** The ID for the application. */
		id: FormControl<number | null | undefined>,

		/** The name of the application. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetAuthorizedAppsReturnAppsFormGroup() {
		return new FormGroup<GetAuthorizedAppsReturnAppsFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAuthorizedAppsReturnApps_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAuthorizedAppsReturnApps_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAuthorizedAppsReturnApps_linksFormGroup() {
		return new FormGroup<GetAuthorizedAppsReturnApps_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAuthorizedAppsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAuthorizedAppsIdReturn_links?: Array<GetAuthorizedAppsIdReturn_links>;

		/** A short description of the application. */
		description?: string | null;

		/** The ID for the application. */
		id?: number | null;

		/** The name of the application. */
		name?: string | null;

		/** An array of usernames for users who have linked the app. */
		users?: Array<string>;
	}
	export interface GetAuthorizedAppsIdReturnFormProperties {

		/** A short description of the application. */
		description: FormControl<string | null | undefined>,

		/** The ID for the application. */
		id: FormControl<number | null | undefined>,

		/** The name of the application. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetAuthorizedAppsIdReturnFormGroup() {
		return new FormGroup<GetAuthorizedAppsIdReturnFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAuthorizedAppsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAuthorizedAppsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAuthorizedAppsIdReturn_linksFormGroup() {
		return new FormGroup<GetAuthorizedAppsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetAutomationsStatus { save = 0, paused = 1, sending = 2 }

	export interface GetAutomationsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsReturn_links?: Array<GetAutomationsReturn_links>;

		/** An array of objects, each representing an Automation workflow. */
		GetAutomationsReturnAutomations?: Array<GetAutomationsReturnAutomations>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetAutomationsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsReturnFormGroup() {
		return new FormGroup<GetAutomationsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomations {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsReturnAutomations_links?: Array<GetAutomationsReturnAutomations_links>;

		/** The date and time the Automation was created in ISO 8601 format. */
		create_time?: Date | null;

		/** The total number of emails sent for the Automation. */
		emails_sent?: number | null;

		/** A string that identifies the Automation. */
		id?: string | null;

		/** List settings for the Automation. */
		recipients?: GetAutomationsReturnAutomationsRecipients;

		/** A summary of opens and clicks for sent campaigns. */
		report_summary?: GetAutomationsReturnAutomationsReport_summary;

		/** The settings for the Automation workflow. */
		settings?: GetAutomationsReturnAutomationsSettings;

		/** The date and time the Automation was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The current status of the Automation. */
		status?: GetAutomationsStatus | null;

		/** The tracking options for the Automation. */
		tracking?: GetAutomationsReturnAutomationsTracking;

		/** Available triggers for Automation workflows. */
		trigger_settings?: GetAutomationsReturnAutomationsTrigger_settings;
	}
	export interface GetAutomationsReturnAutomationsFormProperties {

		/** The date and time the Automation was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for the Automation. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that identifies the Automation. */
		id: FormControl<string | null | undefined>,

		/** The date and time the Automation was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The current status of the Automation. */
		status: FormControl<GetAutomationsStatus | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsFormProperties>({
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAutomationsStatus | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomations_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsReturnAutomations_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomations_linksFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomations_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** List Name. */
		list_name?: string | null;

		/** An object representing all segmentation options. */
		segment_opts?: GetAutomationsReturnAutomationsRecipientsSegment_opts;

		/** The id of the store. */
		store_id?: string | null;
	}
	export interface GetAutomationsReturnAutomationsRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** List Name. */
		list_name: FormControl<string | null | undefined>,

		/** The id of the store. */
		store_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsRecipientsFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetAutomationsReturnAutomationsRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetAutomationsReturnAutomationsRecipientsSegment_optsMatch { any = 0, all = 1 }

	export interface GetAutomationsReturnAutomationsReport_summary {

		/** The number of unique clicks, divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetAutomationsReturnAutomationsReport_summaryFormProperties {

		/** The number of unique clicks, divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsReport_summaryFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
		authenticate?: boolean | null;

		/** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
		auto_footer?: boolean | null;

		/** The 'from' name for the Automation (not an email address). */
		from_name?: string | null;

		/** Whether to automatically inline the CSS included with the Automation content. */
		inline_css?: boolean | null;

		/** The reply-to email address for the Automation. */
		reply_to?: string | null;

		/** The title of the Automation. */
		title?: string | null;

		/** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Whether to use Mailchimp Conversation feature to manage replies */
		use_conversation?: boolean | null;
	}
	export interface GetAutomationsReturnAutomationsSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** The 'from' name for the Automation (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Whether to automatically inline the CSS included with the Automation content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The reply-to email address for the Automation. */
		reply_to: FormControl<string | null | undefined>,

		/** The title of the Automation. */
		title: FormControl<string | null | undefined>,

		/** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Whether to use Mailchimp Conversation feature to manage replies */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsSettingsFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsTracking {

		/** Deprecated */
		capsule?: GetAutomationsReturnAutomationsTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetAutomationsReturnAutomationsTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`. */
		text_clicks?: boolean | null;
	}
	export interface GetAutomationsReturnAutomationsTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsTrackingFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsTrackingCapsule {

		/** Update contact notes for a campaign based on a subscriber's email addresses. */
		notes?: boolean | null;
	}
	export interface GetAutomationsReturnAutomationsTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on a subscriber's email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsTrackingCapsuleFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface GetAutomationsReturnAutomationsTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsTrackingSalesforceFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsReturnAutomationsTrigger_settings {

		/** A workflow's runtime settings for an Automation. */
		runtime?: GetAutomationsReturnAutomationsTrigger_settingsRuntime;

		/** The number of emails in the Automation workflow. */
		workflow_emails_count?: number | null;

		/** The title of the workflow type. */
		workflow_title?: string | null;

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type;
	}
	export interface GetAutomationsReturnAutomationsTrigger_settingsFormProperties {

		/** The number of emails in the Automation workflow. */
		workflow_emails_count: FormControl<number | null | undefined>,

		/** The title of the workflow type. */
		workflow_title: FormControl<string | null | undefined>,

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsTrigger_settingsFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsTrigger_settingsFormProperties>({
			workflow_emails_count: new FormControl<number | null | undefined>(undefined),
			workflow_title: new FormControl<string | null | undefined>(undefined),
			workflow_type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsReturnAutomationsTrigger_settingsRuntime {

		/** The days an Automation workflow can send. */
		days?: Array<string>;

		/** The hours an Automation workflow can send. */
		hours?: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHours;
	}
	export interface GetAutomationsReturnAutomationsTrigger_settingsRuntimeFormProperties {
	}
	export function CreateGetAutomationsReturnAutomationsTrigger_settingsRuntimeFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsTrigger_settingsRuntimeFormProperties>({
		});

	}

	export interface GetAutomationsReturnAutomationsTrigger_settingsRuntimeHours {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType;
	}
	export interface GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursFormProperties {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>,
	}
	export function CreateGetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursFormGroup() {
		return new FormGroup<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursFormProperties>({
			type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType { send_asap = 0, send_between = 1, send_at = 2 }

	export enum GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type { abandonedBrowse = 0, abandonedCart = 1, api = 2, bestCustomers = 3, categoryFollowup = 4, dateAdded = 5, emailFollowup = 6, emailSeries = 7, groupAdd = 8, groupRemove = 9, mandrill = 10, productFollowup = 11, purchaseFollowup = 12, recurringEvent = 13, specialEvent = 14, visitUrl = 15, welcomeSeries = 16 }

	export interface PostAutomationsPostBody {

		/**
		 * List settings for the Automation.
		 * Required
		 */
		recipients: PostAutomationsPostBodyRecipients;

		/** The settings for the Automation workflow. */
		settings?: PostAutomationsPostBodySettings;

		/**
		 * Trigger settings for the Automation.
		 * Required
		 */
		trigger_settings: PostAutomationsPostBodyTrigger_settings;
	}
	export interface PostAutomationsPostBodyFormProperties {
	}
	export function CreatePostAutomationsPostBodyFormGroup() {
		return new FormGroup<PostAutomationsPostBodyFormProperties>({
		});

	}

	export interface PostAutomationsPostBodyRecipients {

		/** The id of the List. */
		list_id?: string | null;

		/** The id of the store. */
		store_id?: string | null;
	}
	export interface PostAutomationsPostBodyRecipientsFormProperties {

		/** The id of the List. */
		list_id: FormControl<string | null | undefined>,

		/** The id of the store. */
		store_id: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsPostBodyRecipientsFormGroup() {
		return new FormGroup<PostAutomationsPostBodyRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsPostBodySettings {

		/** The 'from' name for the Automation (not an email address). */
		from_name?: string | null;

		/** The reply-to email address for the Automation. */
		reply_to?: string | null;
	}
	export interface PostAutomationsPostBodySettingsFormProperties {

		/** The 'from' name for the Automation (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** The reply-to email address for the Automation. */
		reply_to: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsPostBodySettingsFormGroup() {
		return new FormGroup<PostAutomationsPostBodySettingsFormProperties>({
			from_name: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsPostBodyTrigger_settings {

		/**
		 * The type of Automation workflow. Currently only supports 'abandonedCart'.
		 * Required
		 */
		workflow_type: string;
	}
	export interface PostAutomationsPostBodyTrigger_settingsFormProperties {

		/**
		 * The type of Automation workflow. Currently only supports 'abandonedCart'.
		 * Required
		 */
		workflow_type: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsPostBodyTrigger_settingsFormGroup() {
		return new FormGroup<PostAutomationsPostBodyTrigger_settingsFormProperties>({
			workflow_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostAutomationsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostAutomationsReturn_links?: Array<PostAutomationsReturn_links>;

		/** The date and time the Automation was created in ISO 8601 format. */
		create_time?: Date | null;

		/** The total number of emails sent for the Automation. */
		emails_sent?: number | null;

		/** A string that identifies the Automation. */
		id?: string | null;

		/** List settings for the Automation. */
		recipients?: PostAutomationsReturnRecipients;

		/** A summary of opens and clicks for sent campaigns. */
		report_summary?: PostAutomationsReturnReport_summary;

		/** The settings for the Automation workflow. */
		settings?: PostAutomationsReturnSettings;

		/** The date and time the Automation was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The current status of the Automation. */
		status?: GetAutomationsStatus | null;

		/** The tracking options for the Automation. */
		tracking?: PostAutomationsReturnTracking;

		/** Available triggers for Automation workflows. */
		trigger_settings?: PostAutomationsReturnTrigger_settings;
	}
	export interface PostAutomationsReturnFormProperties {

		/** The date and time the Automation was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for the Automation. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that identifies the Automation. */
		id: FormControl<string | null | undefined>,

		/** The date and time the Automation was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The current status of the Automation. */
		status: FormControl<GetAutomationsStatus | null | undefined>,
	}
	export function CreatePostAutomationsReturnFormGroup() {
		return new FormGroup<PostAutomationsReturnFormProperties>({
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAutomationsStatus | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostAutomationsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsReturn_linksFormGroup() {
		return new FormGroup<PostAutomationsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** List Name. */
		list_name?: string | null;

		/** An object representing all segmentation options. */
		segment_opts?: PostAutomationsReturnRecipientsSegment_opts;

		/** The id of the store. */
		store_id?: string | null;
	}
	export interface PostAutomationsReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** List Name. */
		list_name: FormControl<string | null | undefined>,

		/** The id of the store. */
		store_id: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsReturnRecipientsFormGroup() {
		return new FormGroup<PostAutomationsReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PostAutomationsReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePostAutomationsReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PostAutomationsReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnReport_summary {

		/** The number of unique clicks, divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PostAutomationsReturnReport_summaryFormProperties {

		/** The number of unique clicks, divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePostAutomationsReturnReport_summaryFormGroup() {
		return new FormGroup<PostAutomationsReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
		authenticate?: boolean | null;

		/** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
		auto_footer?: boolean | null;

		/** The 'from' name for the Automation (not an email address). */
		from_name?: string | null;

		/** Whether to automatically inline the CSS included with the Automation content. */
		inline_css?: boolean | null;

		/** The reply-to email address for the Automation. */
		reply_to?: string | null;

		/** The title of the Automation. */
		title?: string | null;

		/** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Whether to use Mailchimp Conversation feature to manage replies */
		use_conversation?: boolean | null;
	}
	export interface PostAutomationsReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** The 'from' name for the Automation (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Whether to automatically inline the CSS included with the Automation content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The reply-to email address for the Automation. */
		reply_to: FormControl<string | null | undefined>,

		/** The title of the Automation. */
		title: FormControl<string | null | undefined>,

		/** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Whether to use Mailchimp Conversation feature to manage replies */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePostAutomationsReturnSettingsFormGroup() {
		return new FormGroup<PostAutomationsReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnTracking {

		/** Deprecated */
		capsule?: PostAutomationsReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PostAutomationsReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`. */
		text_clicks?: boolean | null;
	}
	export interface PostAutomationsReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePostAutomationsReturnTrackingFormGroup() {
		return new FormGroup<PostAutomationsReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnTrackingCapsule {

		/** Update contact notes for a campaign based on a subscriber's email addresses. */
		notes?: boolean | null;
	}
	export interface PostAutomationsReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on a subscriber's email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostAutomationsReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PostAutomationsReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface PostAutomationsReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostAutomationsReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PostAutomationsReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsReturnTrigger_settings {

		/** A workflow's runtime settings for an Automation. */
		runtime?: PostAutomationsReturnTrigger_settingsRuntime;

		/** The number of emails in the Automation workflow. */
		workflow_emails_count?: number | null;

		/** The title of the workflow type. */
		workflow_title?: string | null;

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type;
	}
	export interface PostAutomationsReturnTrigger_settingsFormProperties {

		/** The number of emails in the Automation workflow. */
		workflow_emails_count: FormControl<number | null | undefined>,

		/** The title of the workflow type. */
		workflow_title: FormControl<string | null | undefined>,

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>,
	}
	export function CreatePostAutomationsReturnTrigger_settingsFormGroup() {
		return new FormGroup<PostAutomationsReturnTrigger_settingsFormProperties>({
			workflow_emails_count: new FormControl<number | null | undefined>(undefined),
			workflow_title: new FormControl<string | null | undefined>(undefined),
			workflow_type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostAutomationsReturnTrigger_settingsRuntime {

		/** The days an Automation workflow can send. */
		days?: Array<string>;

		/** The hours an Automation workflow can send. */
		hours?: PostAutomationsReturnTrigger_settingsRuntimeHours;
	}
	export interface PostAutomationsReturnTrigger_settingsRuntimeFormProperties {
	}
	export function CreatePostAutomationsReturnTrigger_settingsRuntimeFormGroup() {
		return new FormGroup<PostAutomationsReturnTrigger_settingsRuntimeFormProperties>({
		});

	}

	export interface PostAutomationsReturnTrigger_settingsRuntimeHours {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType;
	}
	export interface PostAutomationsReturnTrigger_settingsRuntimeHoursFormProperties {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>,
	}
	export function CreatePostAutomationsReturnTrigger_settingsRuntimeHoursFormGroup() {
		return new FormGroup<PostAutomationsReturnTrigger_settingsRuntimeHoursFormProperties>({
			type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdReturn_links?: Array<GetAutomationsIdReturn_links>;

		/** The date and time the Automation was created in ISO 8601 format. */
		create_time?: Date | null;

		/** The total number of emails sent for the Automation. */
		emails_sent?: number | null;

		/** A string that identifies the Automation. */
		id?: string | null;

		/** List settings for the Automation. */
		recipients?: GetAutomationsIdReturnRecipients;

		/** A summary of opens and clicks for sent campaigns. */
		report_summary?: GetAutomationsIdReturnReport_summary;

		/** The settings for the Automation workflow. */
		settings?: GetAutomationsIdReturnSettings;

		/** The date and time the Automation was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The current status of the Automation. */
		status?: GetAutomationsStatus | null;

		/** The tracking options for the Automation. */
		tracking?: GetAutomationsIdReturnTracking;

		/** Available triggers for Automation workflows. */
		trigger_settings?: GetAutomationsIdReturnTrigger_settings;
	}
	export interface GetAutomationsIdReturnFormProperties {

		/** The date and time the Automation was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for the Automation. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that identifies the Automation. */
		id: FormControl<string | null | undefined>,

		/** The date and time the Automation was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The current status of the Automation. */
		status: FormControl<GetAutomationsStatus | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnFormGroup() {
		return new FormGroup<GetAutomationsIdReturnFormProperties>({
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAutomationsStatus | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** List Name. */
		list_name?: string | null;

		/** An object representing all segmentation options. */
		segment_opts?: GetAutomationsIdReturnRecipientsSegment_opts;

		/** The id of the store. */
		store_id?: string | null;
	}
	export interface GetAutomationsIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** List Name. */
		list_name: FormControl<string | null | undefined>,

		/** The id of the store. */
		store_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnRecipientsFormGroup() {
		return new FormGroup<GetAutomationsIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetAutomationsIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetAutomationsIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnReport_summary {

		/** The number of unique clicks, divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetAutomationsIdReturnReport_summaryFormProperties {

		/** The number of unique clicks, divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnReport_summaryFormGroup() {
		return new FormGroup<GetAutomationsIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
		authenticate?: boolean | null;

		/** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
		auto_footer?: boolean | null;

		/** The 'from' name for the Automation (not an email address). */
		from_name?: string | null;

		/** Whether to automatically inline the CSS included with the Automation content. */
		inline_css?: boolean | null;

		/** The reply-to email address for the Automation. */
		reply_to?: string | null;

		/** The title of the Automation. */
		title?: string | null;

		/** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Whether to use Mailchimp Conversation feature to manage replies */
		use_conversation?: boolean | null;
	}
	export interface GetAutomationsIdReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** The 'from' name for the Automation (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Whether to automatically inline the CSS included with the Automation content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The reply-to email address for the Automation. */
		reply_to: FormControl<string | null | undefined>,

		/** The title of the Automation. */
		title: FormControl<string | null | undefined>,

		/** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Whether to use Mailchimp Conversation feature to manage replies */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnSettingsFormGroup() {
		return new FormGroup<GetAutomationsIdReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnTracking {

		/** Deprecated */
		capsule?: GetAutomationsIdReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetAutomationsIdReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`. */
		text_clicks?: boolean | null;
	}
	export interface GetAutomationsIdReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnTrackingFormGroup() {
		return new FormGroup<GetAutomationsIdReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnTrackingCapsule {

		/** Update contact notes for a campaign based on a subscriber's email addresses. */
		notes?: boolean | null;
	}
	export interface GetAutomationsIdReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on a subscriber's email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnTrackingCapsuleFormGroup() {
		return new FormGroup<GetAutomationsIdReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface GetAutomationsIdReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnTrackingSalesforceFormGroup() {
		return new FormGroup<GetAutomationsIdReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdReturnTrigger_settings {

		/** A workflow's runtime settings for an Automation. */
		runtime?: GetAutomationsIdReturnTrigger_settingsRuntime;

		/** The number of emails in the Automation workflow. */
		workflow_emails_count?: number | null;

		/** The title of the workflow type. */
		workflow_title?: string | null;

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type;
	}
	export interface GetAutomationsIdReturnTrigger_settingsFormProperties {

		/** The number of emails in the Automation workflow. */
		workflow_emails_count: FormControl<number | null | undefined>,

		/** The title of the workflow type. */
		workflow_title: FormControl<string | null | undefined>,

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnTrigger_settingsFormGroup() {
		return new FormGroup<GetAutomationsIdReturnTrigger_settingsFormProperties>({
			workflow_emails_count: new FormControl<number | null | undefined>(undefined),
			workflow_title: new FormControl<string | null | undefined>(undefined),
			workflow_type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdReturnTrigger_settingsRuntime {

		/** The days an Automation workflow can send. */
		days?: Array<string>;

		/** The hours an Automation workflow can send. */
		hours?: GetAutomationsIdReturnTrigger_settingsRuntimeHours;
	}
	export interface GetAutomationsIdReturnTrigger_settingsRuntimeFormProperties {
	}
	export function CreateGetAutomationsIdReturnTrigger_settingsRuntimeFormGroup() {
		return new FormGroup<GetAutomationsIdReturnTrigger_settingsRuntimeFormProperties>({
		});

	}

	export interface GetAutomationsIdReturnTrigger_settingsRuntimeHours {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType;
	}
	export interface GetAutomationsIdReturnTrigger_settingsRuntimeHoursFormProperties {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>,
	}
	export function CreateGetAutomationsIdReturnTrigger_settingsRuntimeHoursFormGroup() {
		return new FormGroup<GetAutomationsIdReturnTrigger_settingsRuntimeHoursFormProperties>({
			type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdEmailsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdEmailsReturn_links?: Array<GetAutomationsIdEmailsReturn_links>;

		/** An array of objects, each representing an email in an Automation workflow. */
		GetAutomationsIdEmailsReturnEmails?: Array<GetAutomationsIdEmailsReturnEmails>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetAutomationsIdEmailsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdEmailsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmails {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdEmailsReturnEmails_links?: Array<GetAutomationsIdEmailsReturnEmails_links>;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type?: string | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** The delay settings for an Automation email. */
		delay?: GetAutomationsIdEmailsReturnEmailsDelay;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
		has_logo_merge_tag?: boolean | null;

		/** A string that uniquely identifies the Automation email. */
		id?: string | null;

		/** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
		needs_block_refresh?: boolean | null;

		/** The position of an Automation email in a workflow. */
		position?: number | null;

		/** List settings for the campaign. */
		recipients?: GetAutomationsIdEmailsReturnEmailsRecipients;

		/** For sent campaigns, a summary of opens and clicks. */
		report_summary?: GetAutomationsIdEmailsReturnEmailsReport_summary;

		/** The date and time a campaign was sent in ISO 8601 format */
		send_time?: Date | null;

		/** Settings for the campaign including the email subject, from name, and from email address. */
		settings?: GetAutomationsIdEmailsReturnEmailsSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: GetAutomationsIdEmailsReturnEmailsSocial_card;

		/** The date and time the campaign was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The current status of the campaign. */
		status?: GetAutomationsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: GetAutomationsIdEmailsReturnEmailsTracking;

		/** Available triggers for Automation workflows. */
		trigger_settings?: GetAutomationsIdEmailsReturnEmailsTrigger_settings;

		/** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type: FormControl<string | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
		has_logo_merge_tag: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies the Automation email. */
		id: FormControl<string | null | undefined>,

		/** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** The position of an Automation email in a workflow. */
		position: FormControl<number | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format */
		send_time: FormControl<Date | null | undefined>,

		/** The date and time the campaign was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetAutomationsStatus | null | undefined>,

		/** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			has_logo_merge_tag: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			position: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAutomationsStatus | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmails_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdEmailsReturnEmails_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmails_linksFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmails_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsDelay {

		/** The action that triggers the delay of an Automation email. */
		action?: GetAutomationsIdEmailsReturnEmailsDelayAction | null;

		/** The user-friendly description of the action that triggers an Automation email. */
		action_description?: string | null;

		/** The delay amount for an Automation email. */
		amount?: number | null;

		/** Whether the delay settings describe before or after the delay action of an Automation email. */
		direction?: GetAutomationsIdEmailsReturnEmailsDelayDirection | null;

		/** The user-friendly description of the delay and trigger action settings for an Automation email. */
		full_description?: string | null;

		/** The type of delay for an Automation email. */
		type?: GetAutomationsIdEmailsReturnEmailsDelayType | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsDelayFormProperties {

		/** The action that triggers the delay of an Automation email. */
		action: FormControl<GetAutomationsIdEmailsReturnEmailsDelayAction | null | undefined>,

		/** The user-friendly description of the action that triggers an Automation email. */
		action_description: FormControl<string | null | undefined>,

		/** The delay amount for an Automation email. */
		amount: FormControl<number | null | undefined>,

		/** Whether the delay settings describe before or after the delay action of an Automation email. */
		direction: FormControl<GetAutomationsIdEmailsReturnEmailsDelayDirection | null | undefined>,

		/** The user-friendly description of the delay and trigger action settings for an Automation email. */
		full_description: FormControl<string | null | undefined>,

		/** The type of delay for an Automation email. */
		type: FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsDelayFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsDelayFormProperties>({
			action: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayAction | null | undefined>(undefined),
			action_description: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<number | null | undefined>(undefined),
			direction: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayDirection | null | undefined>(undefined),
			full_description: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>(undefined),
		});

	}

	export enum GetAutomationsIdEmailsReturnEmailsDelayAction { previous_campaign_sent = 0, previous_campaign_opened = 1, previous_campaign_not_opened = 2, previous_campaign_clicked_any = 3, previous_campaign_not_clicked_any = 4, previous_campaign_specific_clicked = 5, ecomm_bought_any = 6, ecomm_bought_product = 7, ecomm_bought_category = 8, ecomm_not_bought_any = 9, ecomm_abandoned_cart = 10, campaign_sent = 11, opened_email = 12, not_opened_email = 13, clicked_email = 14, not_clicked_email = 15, campaign_specific_clicked = 16, manual = 17, signup = 18, merge_changed = 19, group_add = 20, group_remove = 21, mandrill_sent = 22, mandrill_opened = 23, mandrill_clicked = 24, mandrill_any = 25, api = 26, goal = 27, annual = 28, birthday = 29, date = 30, date_added = 31, tag_add = 32 }

	export enum GetAutomationsIdEmailsReturnEmailsDelayDirection { before = 0, after = 1 }

	export enum GetAutomationsIdEmailsReturnEmailsDelayType { now = 0, day = 1, hour = 2, week = 3 }

	export interface GetAutomationsIdEmailsReturnEmailsRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetAutomationsIdEmailsReturnEmailsRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsRecipientsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsReport_summaryFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** The title of the campaign. */
		title?: string | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsSettingsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsSocial_cardFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsTracking {

		/** Deprecated */
		capsule?: GetAutomationsIdEmailsReturnEmailsTrackingCapsule;

		/** The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetAutomationsIdEmailsReturnEmailsTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. */
		text_clicks?: boolean | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsTrackingFormProperties {

		/** The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsTrackingFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsTrackingCapsule {

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsTrackingCapsuleFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface GetAutomationsIdEmailsReturnEmailsTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsTrackingSalesforceFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsTrigger_settings {

		/** A workflow's runtime settings for an Automation. */
		runtime?: GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntime;

		/** The number of emails in the Automation workflow. */
		workflow_emails_count?: number | null;

		/** The title of the workflow type. */
		workflow_title?: string | null;

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type;
	}
	export interface GetAutomationsIdEmailsReturnEmailsTrigger_settingsFormProperties {

		/** The number of emails in the Automation workflow. */
		workflow_emails_count: FormControl<number | null | undefined>,

		/** The title of the workflow type. */
		workflow_title: FormControl<string | null | undefined>,

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsTrigger_settingsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsTrigger_settingsFormProperties>({
			workflow_emails_count: new FormControl<number | null | undefined>(undefined),
			workflow_title: new FormControl<string | null | undefined>(undefined),
			workflow_type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntime {

		/** The days an Automation workflow can send. */
		days?: Array<string>;

		/** The hours an Automation workflow can send. */
		hours?: GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeHours;
	}
	export interface GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeFormProperties {
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeFormProperties>({
		});

	}

	export interface GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeHours {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType;
	}
	export interface GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeHoursFormProperties {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeHoursFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsReturnEmailsTrigger_settingsRuntimeHoursFormProperties>({
			type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdEmailsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdEmailsIdReturn_links?: Array<GetAutomationsIdEmailsIdReturn_links>;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type?: string | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** The delay settings for an Automation email. */
		delay?: GetAutomationsIdEmailsIdReturnDelay;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
		has_logo_merge_tag?: boolean | null;

		/** A string that uniquely identifies the Automation email. */
		id?: string | null;

		/** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
		needs_block_refresh?: boolean | null;

		/** The position of an Automation email in a workflow. */
		position?: number | null;

		/** List settings for the campaign. */
		recipients?: GetAutomationsIdEmailsIdReturnRecipients;

		/** For sent campaigns, a summary of opens and clicks. */
		report_summary?: GetAutomationsIdEmailsIdReturnReport_summary;

		/** The date and time a campaign was sent in ISO 8601 format */
		send_time?: Date | null;

		/** Settings for the campaign including the email subject, from name, and from email address. */
		settings?: GetAutomationsIdEmailsIdReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: GetAutomationsIdEmailsIdReturnSocial_card;

		/** The date and time the campaign was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The current status of the campaign. */
		status?: GetAutomationsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: GetAutomationsIdEmailsIdReturnTracking;

		/** Available triggers for Automation workflows. */
		trigger_settings?: GetAutomationsIdEmailsIdReturnTrigger_settings;

		/** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdEmailsIdReturnFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type: FormControl<string | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
		has_logo_merge_tag: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies the Automation email. */
		id: FormControl<string | null | undefined>,

		/** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** The position of an Automation email in a workflow. */
		position: FormControl<number | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format */
		send_time: FormControl<Date | null | undefined>,

		/** The date and time the campaign was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetAutomationsStatus | null | undefined>,

		/** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			has_logo_merge_tag: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			position: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAutomationsStatus | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdEmailsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnDelay {

		/** The action that triggers the delay of an Automation email. */
		action?: GetAutomationsIdEmailsReturnEmailsDelayAction | null;

		/** The user-friendly description of the action that triggers an Automation email. */
		action_description?: string | null;

		/** The delay amount for an Automation email. */
		amount?: number | null;

		/** Whether the delay settings describe before or after the delay action of an Automation email. */
		direction?: GetAutomationsIdEmailsReturnEmailsDelayDirection | null;

		/** The user-friendly description of the delay and trigger action settings for an Automation email. */
		full_description?: string | null;

		/** The type of delay for an Automation email. */
		type?: GetAutomationsIdEmailsReturnEmailsDelayType | null;
	}
	export interface GetAutomationsIdEmailsIdReturnDelayFormProperties {

		/** The action that triggers the delay of an Automation email. */
		action: FormControl<GetAutomationsIdEmailsReturnEmailsDelayAction | null | undefined>,

		/** The user-friendly description of the action that triggers an Automation email. */
		action_description: FormControl<string | null | undefined>,

		/** The delay amount for an Automation email. */
		amount: FormControl<number | null | undefined>,

		/** Whether the delay settings describe before or after the delay action of an Automation email. */
		direction: FormControl<GetAutomationsIdEmailsReturnEmailsDelayDirection | null | undefined>,

		/** The user-friendly description of the delay and trigger action settings for an Automation email. */
		full_description: FormControl<string | null | undefined>,

		/** The type of delay for an Automation email. */
		type: FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnDelayFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnDelayFormProperties>({
			action: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayAction | null | undefined>(undefined),
			action_description: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<number | null | undefined>(undefined),
			direction: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayDirection | null | undefined>(undefined),
			full_description: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetAutomationsIdEmailsIdReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetAutomationsIdEmailsIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnRecipientsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetAutomationsIdEmailsIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetAutomationsIdEmailsIdReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnReport_summaryFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** The title of the campaign. */
		title?: string | null;
	}
	export interface GetAutomationsIdEmailsIdReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnSettingsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface GetAutomationsIdEmailsIdReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnSocial_cardFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnTracking {

		/** Deprecated */
		capsule?: GetAutomationsIdEmailsIdReturnTrackingCapsule;

		/** The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetAutomationsIdEmailsIdReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. */
		text_clicks?: boolean | null;
	}
	export interface GetAutomationsIdEmailsIdReturnTrackingFormProperties {

		/** The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnTrackingFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnTrackingCapsule {

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface GetAutomationsIdEmailsIdReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnTrackingCapsuleFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface GetAutomationsIdEmailsIdReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnTrackingSalesforceFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnTrigger_settings {

		/** A workflow's runtime settings for an Automation. */
		runtime?: GetAutomationsIdEmailsIdReturnTrigger_settingsRuntime;

		/** The number of emails in the Automation workflow. */
		workflow_emails_count?: number | null;

		/** The title of the workflow type. */
		workflow_title?: string | null;

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type;
	}
	export interface GetAutomationsIdEmailsIdReturnTrigger_settingsFormProperties {

		/** The number of emails in the Automation workflow. */
		workflow_emails_count: FormControl<number | null | undefined>,

		/** The title of the workflow type. */
		workflow_title: FormControl<string | null | undefined>,

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnTrigger_settingsFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnTrigger_settingsFormProperties>({
			workflow_emails_count: new FormControl<number | null | undefined>(undefined),
			workflow_title: new FormControl<string | null | undefined>(undefined),
			workflow_type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdEmailsIdReturnTrigger_settingsRuntime {

		/** The days an Automation workflow can send. */
		days?: Array<string>;

		/** The hours an Automation workflow can send. */
		hours?: GetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeHours;
	}
	export interface GetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeFormProperties {
	}
	export function CreateGetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeFormProperties>({
		});

	}

	export interface GetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeHours {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType;
	}
	export interface GetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeHoursFormProperties {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeHoursFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdReturnTrigger_settingsRuntimeHoursFormProperties>({
			type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchAutomationEmailWorkflowIdPatchBody {

		/** The delay settings for an automation email. */
		delay?: PatchAutomationEmailWorkflowIdPatchBodyDelay;

		/** Settings for the campaign including the email subject, from name, and from email address. */
		settings?: PatchAutomationEmailWorkflowIdPatchBodySettings;
	}
	export interface PatchAutomationEmailWorkflowIdPatchBodyFormProperties {
	}
	export function CreatePatchAutomationEmailWorkflowIdPatchBodyFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdPatchBodyFormProperties>({
		});

	}

	export interface PatchAutomationEmailWorkflowIdPatchBodyDelay {

		/**
		 * The action that triggers the delay of an automation emails.
		 * Required
		 */
		action: PatchAutomationEmailWorkflowIdPatchBodyDelayAction;

		/** The delay amount for an automation email. */
		amount?: number | null;

		/** Whether the delay settings describe before or after the delay action of an automation email. */
		direction?: PatchAutomationEmailWorkflowIdPatchBodyDelayDirection | null;

		/** The type of delay for an automation email. */
		type?: GetAutomationsIdEmailsReturnEmailsDelayType | null;
	}
	export interface PatchAutomationEmailWorkflowIdPatchBodyDelayFormProperties {

		/**
		 * The action that triggers the delay of an automation emails.
		 * Required
		 */
		action: FormControl<PatchAutomationEmailWorkflowIdPatchBodyDelayAction | null | undefined>,

		/** The delay amount for an automation email. */
		amount: FormControl<number | null | undefined>,

		/** Whether the delay settings describe before or after the delay action of an automation email. */
		direction: FormControl<PatchAutomationEmailWorkflowIdPatchBodyDelayDirection | null | undefined>,

		/** The type of delay for an automation email. */
		type: FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdPatchBodyDelayFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdPatchBodyDelayFormProperties>({
			action: new FormControl<PatchAutomationEmailWorkflowIdPatchBodyDelayAction | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined),
			direction: new FormControl<PatchAutomationEmailWorkflowIdPatchBodyDelayDirection | null | undefined>(undefined),
			type: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>(undefined),
		});

	}

	export enum PatchAutomationEmailWorkflowIdPatchBodyDelayAction { signup = 0, ecomm_abandoned_browse = 1, ecomm_abandoned_cart = 2 }

	export enum PatchAutomationEmailWorkflowIdPatchBodyDelayDirection { after = 0 }

	export interface PatchAutomationEmailWorkflowIdPatchBodySettings {

		/** The 'from' name for the Automation (not an email address). */
		from_name?: string | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the Automation. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The title of the Automation. */
		title?: string | null;
	}
	export interface PatchAutomationEmailWorkflowIdPatchBodySettingsFormProperties {

		/** The 'from' name for the Automation (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the Automation. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The title of the Automation. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdPatchBodySettingsFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdPatchBodySettingsFormProperties>({
			from_name: new FormControl<string | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchAutomationEmailWorkflowIdReturn_links?: Array<PatchAutomationEmailWorkflowIdReturn_links>;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type?: string | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** The delay settings for an Automation email. */
		delay?: PatchAutomationEmailWorkflowIdReturnDelay;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
		has_logo_merge_tag?: boolean | null;

		/** A string that uniquely identifies the Automation email. */
		id?: string | null;

		/** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
		needs_block_refresh?: boolean | null;

		/** The position of an Automation email in a workflow. */
		position?: number | null;

		/** List settings for the campaign. */
		recipients?: PatchAutomationEmailWorkflowIdReturnRecipients;

		/** For sent campaigns, a summary of opens and clicks. */
		report_summary?: PatchAutomationEmailWorkflowIdReturnReport_summary;

		/** The date and time a campaign was sent in ISO 8601 format */
		send_time?: Date | null;

		/** Settings for the campaign including the email subject, from name, and from email address. */
		settings?: PatchAutomationEmailWorkflowIdReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PatchAutomationEmailWorkflowIdReturnSocial_card;

		/** The date and time the campaign was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The current status of the campaign. */
		status?: GetAutomationsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: PatchAutomationEmailWorkflowIdReturnTracking;

		/** Available triggers for Automation workflows. */
		trigger_settings?: PatchAutomationEmailWorkflowIdReturnTrigger_settings;

		/** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type: FormControl<string | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
		has_logo_merge_tag: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies the Automation email. */
		id: FormControl<string | null | undefined>,

		/** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** The position of an Automation email in a workflow. */
		position: FormControl<number | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format */
		send_time: FormControl<Date | null | undefined>,

		/** The date and time the campaign was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetAutomationsStatus | null | undefined>,

		/** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			has_logo_merge_tag: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			position: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAutomationsStatus | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturn_linksFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnDelay {

		/** The action that triggers the delay of an Automation email. */
		action?: GetAutomationsIdEmailsReturnEmailsDelayAction | null;

		/** The user-friendly description of the action that triggers an Automation email. */
		action_description?: string | null;

		/** The delay amount for an Automation email. */
		amount?: number | null;

		/** Whether the delay settings describe before or after the delay action of an Automation email. */
		direction?: GetAutomationsIdEmailsReturnEmailsDelayDirection | null;

		/** The user-friendly description of the delay and trigger action settings for an Automation email. */
		full_description?: string | null;

		/** The type of delay for an Automation email. */
		type?: GetAutomationsIdEmailsReturnEmailsDelayType | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnDelayFormProperties {

		/** The action that triggers the delay of an Automation email. */
		action: FormControl<GetAutomationsIdEmailsReturnEmailsDelayAction | null | undefined>,

		/** The user-friendly description of the action that triggers an Automation email. */
		action_description: FormControl<string | null | undefined>,

		/** The delay amount for an Automation email. */
		amount: FormControl<number | null | undefined>,

		/** Whether the delay settings describe before or after the delay action of an Automation email. */
		direction: FormControl<GetAutomationsIdEmailsReturnEmailsDelayDirection | null | undefined>,

		/** The user-friendly description of the delay and trigger action settings for an Automation email. */
		full_description: FormControl<string | null | undefined>,

		/** The type of delay for an Automation email. */
		type: FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnDelayFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnDelayFormProperties>({
			action: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayAction | null | undefined>(undefined),
			action_description: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<number | null | undefined>(undefined),
			direction: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayDirection | null | undefined>(undefined),
			full_description: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetAutomationsIdEmailsReturnEmailsDelayType | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PatchAutomationEmailWorkflowIdReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnRecipientsFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnReport_summaryFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** The title of the campaign. */
		title?: string | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnSettingsFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnSocial_cardFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnTracking {

		/** Deprecated */
		capsule?: PatchAutomationEmailWorkflowIdReturnTrackingCapsule;

		/** The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PatchAutomationEmailWorkflowIdReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. */
		text_clicks?: boolean | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnTrackingFormProperties {

		/** The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnTrackingFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnTrackingCapsule {

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes?: boolean | null;
	}
	export interface PatchAutomationEmailWorkflowIdReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on a subscriber's email address. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnTrigger_settings {

		/** A workflow's runtime settings for an Automation. */
		runtime?: PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntime;

		/** The number of emails in the Automation workflow. */
		workflow_emails_count?: number | null;

		/** The title of the workflow type. */
		workflow_title?: string | null;

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type;
	}
	export interface PatchAutomationEmailWorkflowIdReturnTrigger_settingsFormProperties {

		/** The number of emails in the Automation workflow. */
		workflow_emails_count: FormControl<number | null | undefined>,

		/** The title of the workflow type. */
		workflow_title: FormControl<string | null | undefined>,

		/**
		 * The type of Automation workflow.
		 * Required
		 */
		workflow_type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnTrigger_settingsFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnTrigger_settingsFormProperties>({
			workflow_emails_count: new FormControl<number | null | undefined>(undefined),
			workflow_title: new FormControl<string | null | undefined>(undefined),
			workflow_type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsWorkflow_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntime {

		/** The days an Automation workflow can send. */
		days?: Array<string>;

		/** The hours an Automation workflow can send. */
		hours?: PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeHours;
	}
	export interface PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeFormProperties {
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeFormProperties>({
		});

	}

	export interface PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeHours {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType;
	}
	export interface PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeHoursFormProperties {

		/**
		 * When to send the Automation email.
		 * Required
		 */
		type: FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>,
	}
	export function CreatePatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeHoursFormGroup() {
		return new FormGroup<PatchAutomationEmailWorkflowIdReturnTrigger_settingsRuntimeHoursFormProperties>({
			type: new FormControl<GetAutomationsReturnAutomationsTrigger_settingsRuntimeHoursType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetAutomationsIdEmailsIdQueueReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdEmailsIdQueueReturn_links?: Array<GetAutomationsIdEmailsIdQueueReturn_links>;

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id?: string | null;

		/** An array of objects, each representing a subscriber queue for an email in an Automation workflow. */
		GetAutomationsIdEmailsIdQueueReturnQueue?: Array<GetAutomationsIdEmailsIdQueueReturnQueue>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdEmailsIdQueueReturnFormProperties {

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdQueueReturnFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdQueueReturnFormProperties>({
			email_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdQueueReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdEmailsIdQueueReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdQueueReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdQueueReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdQueueReturnQueue {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdEmailsIdQueueReturnQueue_links?: Array<GetAutomationsIdEmailsIdQueueReturnQueue_links>;

		/**
		 * The list member's email address.
		 * Required
		 */
		email_address: string;

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** A string that uniquely identifies a list. */
		list_id?: string | null;

		/** The date and time of the next send for the workflow email in ISO 8601 format. */
		next_send?: Date | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdEmailsIdQueueReturnQueueFormProperties {

		/**
		 * The list member's email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies a list. */
		list_id: FormControl<string | null | undefined>,

		/** The date and time of the next send for the workflow email in ISO 8601 format. */
		next_send: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdQueueReturnQueueFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdQueueReturnQueueFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			next_send: new FormControl<Date | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdQueueReturnQueue_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdEmailsIdQueueReturnQueue_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdQueueReturnQueue_linksFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdQueueReturnQueue_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsIdEmailsIdQueueReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostAutomationsIdEmailsIdQueueReturn_links?: Array<PostAutomationsIdEmailsIdQueueReturn_links>;

		/** The list member's email address. */
		email_address?: string | null;

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** A string that uniquely identifies a list. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The date and time of the next send for the workflow email in ISO 8601 format. */
		next_send?: Date | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface PostAutomationsIdEmailsIdQueueReturnFormProperties {

		/** The list member's email address. */
		email_address: FormControl<string | null | undefined>,

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies a list. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The date and time of the next send for the workflow email in ISO 8601 format. */
		next_send: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsIdEmailsIdQueueReturnFormGroup() {
		return new FormGroup<PostAutomationsIdEmailsIdQueueReturnFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			next_send: new FormControl<Date | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsIdEmailsIdQueueReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostAutomationsIdEmailsIdQueueReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsIdEmailsIdQueueReturn_linksFormGroup() {
		return new FormGroup<PostAutomationsIdEmailsIdQueueReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdQueueIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdEmailsIdQueueIdReturn_links?: Array<GetAutomationsIdEmailsIdQueueIdReturn_links>;

		/** The list member's email address. */
		email_address?: string | null;

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** A string that uniquely identifies a list. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The date and time of the next send for the workflow email in ISO 8601 format. */
		next_send?: Date | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdEmailsIdQueueIdReturnFormProperties {

		/** The list member's email address. */
		email_address: FormControl<string | null | undefined>,

		/** A string that uniquely identifies an email in an Automation workflow. */
		email_id: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies a list. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The date and time of the next send for the workflow email in ISO 8601 format. */
		next_send: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdQueueIdReturnFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdQueueIdReturnFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			next_send: new FormControl<Date | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdEmailsIdQueueIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdEmailsIdQueueIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdEmailsIdQueueIdReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdEmailsIdQueueIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdRemovedSubscribersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdRemovedSubscribersReturn_links?: Array<GetAutomationsIdRemovedSubscribersReturn_links>;

		/** An array of objects, each representing a subscriber who was removed from an Automation workflow. */
		GetAutomationsIdRemovedSubscribersReturnSubscribers?: Array<GetAutomationsIdRemovedSubscribersReturnSubscribers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdRemovedSubscribersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdRemovedSubscribersReturnFormGroup() {
		return new FormGroup<GetAutomationsIdRemovedSubscribersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdRemovedSubscribersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdRemovedSubscribersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdRemovedSubscribersReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdRemovedSubscribersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdRemovedSubscribersReturnSubscribers {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdRemovedSubscribersReturnSubscribers_links?: Array<GetAutomationsIdRemovedSubscribersReturnSubscribers_links>;

		/** The list member's email address. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** A string that uniquely identifies a list. */
		list_id?: string | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdRemovedSubscribersReturnSubscribersFormProperties {

		/** The list member's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies a list. */
		list_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdRemovedSubscribersReturnSubscribersFormGroup() {
		return new FormGroup<GetAutomationsIdRemovedSubscribersReturnSubscribersFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdRemovedSubscribersReturnSubscribers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdRemovedSubscribersReturnSubscribers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdRemovedSubscribersReturnSubscribers_linksFormGroup() {
		return new FormGroup<GetAutomationsIdRemovedSubscribersReturnSubscribers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsIdRemovedSubscribersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostAutomationsIdRemovedSubscribersReturn_links?: Array<PostAutomationsIdRemovedSubscribersReturn_links>;

		/** The list member's email address. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** A string that uniquely identifies a list. */
		list_id?: string | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface PostAutomationsIdRemovedSubscribersReturnFormProperties {

		/** The list member's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies a list. */
		list_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsIdRemovedSubscribersReturnFormGroup() {
		return new FormGroup<PostAutomationsIdRemovedSubscribersReturnFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAutomationsIdRemovedSubscribersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostAutomationsIdRemovedSubscribersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostAutomationsIdRemovedSubscribersReturn_linksFormGroup() {
		return new FormGroup<PostAutomationsIdRemovedSubscribersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdRemovedSubscribersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAutomationsIdRemovedSubscribersIdReturn_links?: Array<GetAutomationsIdRemovedSubscribersIdReturn_links>;

		/** The list member's email address. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** A string that uniquely identifies a list. */
		list_id?: string | null;

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id?: string | null;
	}
	export interface GetAutomationsIdRemovedSubscribersIdReturnFormProperties {

		/** The list member's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies a list. */
		list_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies an Automation workflow. */
		workflow_id: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdRemovedSubscribersIdReturnFormGroup() {
		return new FormGroup<GetAutomationsIdRemovedSubscribersIdReturnFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			workflow_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAutomationsIdRemovedSubscribersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAutomationsIdRemovedSubscribersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAutomationsIdRemovedSubscribersIdReturn_linksFormGroup() {
		return new FormGroup<GetAutomationsIdRemovedSubscribersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchWebhooksReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetBatchWebhooksReturn_links?: Array<GetBatchWebhooksReturn_links>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** An array of objects, each representing a Batch Webhook. */
		GetBatchWebhooksReturnWebhooks?: Array<GetBatchWebhooksReturnWebhooks>;
	}
	export interface GetBatchWebhooksReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetBatchWebhooksReturnFormGroup() {
		return new FormGroup<GetBatchWebhooksReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetBatchWebhooksReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetBatchWebhooksReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchWebhooksReturn_linksFormGroup() {
		return new FormGroup<GetBatchWebhooksReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchWebhooksReturnWebhooks {

		/** A list of link types and descriptions for the API schema documents. */
		GetBatchWebhooksReturnWebhooks_links?: Array<GetBatchWebhooksReturnWebhooks_links>;

		/** Whether the webhook receives requests or not. */
		enabled?: boolean | null;

		/** A string that uniquely identifies this Batch Webhook. */
		id?: string | null;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface GetBatchWebhooksReturnWebhooksFormProperties {

		/** Whether the webhook receives requests or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this Batch Webhook. */
		id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchWebhooksReturnWebhooksFormGroup() {
		return new FormGroup<GetBatchWebhooksReturnWebhooksFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchWebhooksReturnWebhooks_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetBatchWebhooksReturnWebhooks_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchWebhooksReturnWebhooks_linksFormGroup() {
		return new FormGroup<GetBatchWebhooksReturnWebhooks_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostBatchWebhooksPostBody {

		/** Whether the webhook receives requests or not. */
		enabled?: boolean | null;

		/**
		 * A valid URL for the Webhook.
		 * Required
		 */
		url: string;
	}
	export interface PostBatchWebhooksPostBodyFormProperties {

		/** Whether the webhook receives requests or not. */
		enabled: FormControl<boolean | null | undefined>,

		/**
		 * A valid URL for the Webhook.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostBatchWebhooksPostBodyFormGroup() {
		return new FormGroup<PostBatchWebhooksPostBodyFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostBatchWebhooksReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostBatchWebhooksReturn_links?: Array<PostBatchWebhooksReturn_links>;

		/** Whether the webhook receives requests or not. */
		enabled?: boolean | null;

		/** A string that uniquely identifies this Batch Webhook. */
		id?: string | null;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface PostBatchWebhooksReturnFormProperties {

		/** Whether the webhook receives requests or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this Batch Webhook. */
		id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostBatchWebhooksReturnFormGroup() {
		return new FormGroup<PostBatchWebhooksReturnFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostBatchWebhooksReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostBatchWebhooksReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostBatchWebhooksReturn_linksFormGroup() {
		return new FormGroup<PostBatchWebhooksReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchWebhookReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetBatchWebhookReturn_links?: Array<GetBatchWebhookReturn_links>;

		/** Whether the webhook receives requests or not. */
		enabled?: boolean | null;

		/** A string that uniquely identifies this Batch Webhook. */
		id?: string | null;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface GetBatchWebhookReturnFormProperties {

		/** Whether the webhook receives requests or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this Batch Webhook. */
		id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchWebhookReturnFormGroup() {
		return new FormGroup<GetBatchWebhookReturnFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchWebhookReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetBatchWebhookReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchWebhookReturn_linksFormGroup() {
		return new FormGroup<GetBatchWebhookReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchBatchWebhooksPatchBody {

		/** Whether the webhook receives requests or not. */
		enabled?: boolean | null;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface PatchBatchWebhooksPatchBodyFormProperties {

		/** Whether the webhook receives requests or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchBatchWebhooksPatchBodyFormGroup() {
		return new FormGroup<PatchBatchWebhooksPatchBodyFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchBatchWebhooksReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchBatchWebhooksReturn_links?: Array<PatchBatchWebhooksReturn_links>;

		/** Whether the webhook receives requests or not. */
		enabled?: boolean | null;

		/** A string that uniquely identifies this Batch Webhook. */
		id?: string | null;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface PatchBatchWebhooksReturnFormProperties {

		/** Whether the webhook receives requests or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this Batch Webhook. */
		id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchBatchWebhooksReturnFormGroup() {
		return new FormGroup<PatchBatchWebhooksReturnFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchBatchWebhooksReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchBatchWebhooksReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchBatchWebhooksReturn_linksFormGroup() {
		return new FormGroup<PatchBatchWebhooksReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetBatchesReturn_links?: Array<GetBatchesReturn_links>;

		/** An array of objects representing batch calls. */
		GetBatchesReturnBatches?: Array<GetBatchesReturnBatches>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetBatchesReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetBatchesReturnFormGroup() {
		return new FormGroup<GetBatchesReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetBatchesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetBatchesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchesReturn_linksFormGroup() {
		return new FormGroup<GetBatchesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchesReturnBatches {

		/** A list of link types and descriptions for the API schema documents. */
		GetBatchesReturnBatches_links?: Array<GetBatchesReturnBatches_links>;

		/** The date and time when all operations in the batch request completed in ISO 8601 format. */
		completed_at?: Date | null;

		/** The number of completed operations that returned an error. */
		errored_operations?: number | null;

		/** The number of completed operations. This includes operations that returned an error. */
		finished_operations?: number | null;

		/** A string that uniquely identifies this batch request. */
		id?: string | null;

		/** The URL of the gzipped archive of the results of all the operations. */
		response_body_url?: string | null;

		/** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
		status?: GetBatchesReturnBatchesStatus | null;

		/** The date and time when the server received the batch request in ISO 8601 format. */
		submitted_at?: Date | null;

		/** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
		total_operations?: number | null;
	}
	export interface GetBatchesReturnBatchesFormProperties {

		/** The date and time when all operations in the batch request completed in ISO 8601 format. */
		completed_at: FormControl<Date | null | undefined>,

		/** The number of completed operations that returned an error. */
		errored_operations: FormControl<number | null | undefined>,

		/** The number of completed operations. This includes operations that returned an error. */
		finished_operations: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this batch request. */
		id: FormControl<string | null | undefined>,

		/** The URL of the gzipped archive of the results of all the operations. */
		response_body_url: FormControl<string | null | undefined>,

		/** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
		status: FormControl<GetBatchesReturnBatchesStatus | null | undefined>,

		/** The date and time when the server received the batch request in ISO 8601 format. */
		submitted_at: FormControl<Date | null | undefined>,

		/** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
		total_operations: FormControl<number | null | undefined>,
	}
	export function CreateGetBatchesReturnBatchesFormGroup() {
		return new FormGroup<GetBatchesReturnBatchesFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			errored_operations: new FormControl<number | null | undefined>(undefined),
			finished_operations: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			response_body_url: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetBatchesReturnBatchesStatus | null | undefined>(undefined),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
			total_operations: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetBatchesReturnBatches_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetBatchesReturnBatches_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchesReturnBatches_linksFormGroup() {
		return new FormGroup<GetBatchesReturnBatches_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetBatchesReturnBatchesStatus { pending = 0, preprocessing = 1, started = 2, finalizing = 3, finished = 4 }

	export interface PostBatchesPostBody {

		/**
		 * An array of objects that describes operations to perform.
		 * Required
		 */
		PostBatchesPostBodyOperations: Array<PostBatchesPostBodyOperations>;
	}
	export interface PostBatchesPostBodyFormProperties {
	}
	export function CreatePostBatchesPostBodyFormGroup() {
		return new FormGroup<PostBatchesPostBodyFormProperties>({
		});

	}

	export interface PostBatchesPostBodyOperations {

		/** A string containing the JSON body to use with the request. */
		body?: string | null;

		/**
		 * The HTTP method to use for the operation.
		 * Required
		 */
		method: PostBatchesPostBodyOperationsMethod;

		/** An optional client-supplied id returned with the operation results. */
		operation_id?: string | null;

		/** Any request query parameters. Example parameters: {"count":10, "offset":0} */
		params?: string | null;

		/**
		 * The relative path to use for the operation.
		 * Required
		 */
		path: string;
	}
	export interface PostBatchesPostBodyOperationsFormProperties {

		/** A string containing the JSON body to use with the request. */
		body: FormControl<string | null | undefined>,

		/**
		 * The HTTP method to use for the operation.
		 * Required
		 */
		method: FormControl<PostBatchesPostBodyOperationsMethod | null | undefined>,

		/** An optional client-supplied id returned with the operation results. */
		operation_id: FormControl<string | null | undefined>,

		/** Any request query parameters. Example parameters: {"count":10, "offset":0} */
		params: FormControl<string | null | undefined>,

		/**
		 * The relative path to use for the operation.
		 * Required
		 */
		path: FormControl<string | null | undefined>,
	}
	export function CreatePostBatchesPostBodyOperationsFormGroup() {
		return new FormGroup<PostBatchesPostBodyOperationsFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<PostBatchesPostBodyOperationsMethod | null | undefined>(undefined, [Validators.required]),
			operation_id: new FormControl<string | null | undefined>(undefined),
			params: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PostBatchesPostBodyOperationsMethod { GET = 0, POST = 1, PUT = 2, PATCH = 3, DELETE = 4 }

	export interface PostBatchesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostBatchesReturn_links?: Array<PostBatchesReturn_links>;

		/** The date and time when all operations in the batch request completed in ISO 8601 format. */
		completed_at?: Date | null;

		/** The number of completed operations that returned an error. */
		errored_operations?: number | null;

		/** The number of completed operations. This includes operations that returned an error. */
		finished_operations?: number | null;

		/** A string that uniquely identifies this batch request. */
		id?: string | null;

		/** The URL of the gzipped archive of the results of all the operations. */
		response_body_url?: string | null;

		/** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
		status?: GetBatchesReturnBatchesStatus | null;

		/** The date and time when the server received the batch request in ISO 8601 format. */
		submitted_at?: Date | null;

		/** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
		total_operations?: number | null;
	}
	export interface PostBatchesReturnFormProperties {

		/** The date and time when all operations in the batch request completed in ISO 8601 format. */
		completed_at: FormControl<Date | null | undefined>,

		/** The number of completed operations that returned an error. */
		errored_operations: FormControl<number | null | undefined>,

		/** The number of completed operations. This includes operations that returned an error. */
		finished_operations: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this batch request. */
		id: FormControl<string | null | undefined>,

		/** The URL of the gzipped archive of the results of all the operations. */
		response_body_url: FormControl<string | null | undefined>,

		/** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
		status: FormControl<GetBatchesReturnBatchesStatus | null | undefined>,

		/** The date and time when the server received the batch request in ISO 8601 format. */
		submitted_at: FormControl<Date | null | undefined>,

		/** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
		total_operations: FormControl<number | null | undefined>,
	}
	export function CreatePostBatchesReturnFormGroup() {
		return new FormGroup<PostBatchesReturnFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			errored_operations: new FormControl<number | null | undefined>(undefined),
			finished_operations: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			response_body_url: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetBatchesReturnBatchesStatus | null | undefined>(undefined),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
			total_operations: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostBatchesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostBatchesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostBatchesReturn_linksFormGroup() {
		return new FormGroup<PostBatchesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetBatchesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetBatchesIdReturn_links?: Array<GetBatchesIdReturn_links>;

		/** The date and time when all operations in the batch request completed in ISO 8601 format. */
		completed_at?: Date | null;

		/** The number of completed operations that returned an error. */
		errored_operations?: number | null;

		/** The number of completed operations. This includes operations that returned an error. */
		finished_operations?: number | null;

		/** A string that uniquely identifies this batch request. */
		id?: string | null;

		/** The URL of the gzipped archive of the results of all the operations. */
		response_body_url?: string | null;

		/** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
		status?: GetBatchesReturnBatchesStatus | null;

		/** The date and time when the server received the batch request in ISO 8601 format. */
		submitted_at?: Date | null;

		/** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
		total_operations?: number | null;
	}
	export interface GetBatchesIdReturnFormProperties {

		/** The date and time when all operations in the batch request completed in ISO 8601 format. */
		completed_at: FormControl<Date | null | undefined>,

		/** The number of completed operations that returned an error. */
		errored_operations: FormControl<number | null | undefined>,

		/** The number of completed operations. This includes operations that returned an error. */
		finished_operations: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this batch request. */
		id: FormControl<string | null | undefined>,

		/** The URL of the gzipped archive of the results of all the operations. */
		response_body_url: FormControl<string | null | undefined>,

		/** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
		status: FormControl<GetBatchesReturnBatchesStatus | null | undefined>,

		/** The date and time when the server received the batch request in ISO 8601 format. */
		submitted_at: FormControl<Date | null | undefined>,

		/** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
		total_operations: FormControl<number | null | undefined>,
	}
	export function CreateGetBatchesIdReturnFormGroup() {
		return new FormGroup<GetBatchesIdReturnFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			errored_operations: new FormControl<number | null | undefined>(undefined),
			finished_operations: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			response_body_url: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetBatchesReturnBatchesStatus | null | undefined>(undefined),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
			total_operations: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetBatchesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetBatchesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetBatchesIdReturn_linksFormGroup() {
		return new FormGroup<GetBatchesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignFoldersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignFoldersReturn_links?: Array<GetCampaignFoldersReturn_links>;

		/** An array of objects representing campaign folders. */
		GetCampaignFoldersReturnFolders?: Array<GetCampaignFoldersReturnFolders>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetCampaignFoldersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignFoldersReturnFormGroup() {
		return new FormGroup<GetCampaignFoldersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignFoldersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignFoldersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignFoldersReturn_linksFormGroup() {
		return new FormGroup<GetCampaignFoldersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignFoldersReturnFolders {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignFoldersReturnFolders_links?: Array<GetCampaignFoldersReturnFolders_links>;

		/** The number of campaigns in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this campaign folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface GetCampaignFoldersReturnFoldersFormProperties {

		/** The number of campaigns in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignFoldersReturnFoldersFormGroup() {
		return new FormGroup<GetCampaignFoldersReturnFoldersFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignFoldersReturnFolders_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignFoldersReturnFolders_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignFoldersReturnFolders_linksFormGroup() {
		return new FormGroup<GetCampaignFoldersReturnFolders_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignFoldersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostCampaignFoldersReturn_links?: Array<PostCampaignFoldersReturn_links>;

		/** The number of campaigns in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this campaign folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface PostCampaignFoldersReturnFormProperties {

		/** The number of campaigns in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignFoldersReturnFormGroup() {
		return new FormGroup<PostCampaignFoldersReturnFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignFoldersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostCampaignFoldersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignFoldersReturn_linksFormGroup() {
		return new FormGroup<PostCampaignFoldersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignFoldersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignFoldersIdReturn_links?: Array<GetCampaignFoldersIdReturn_links>;

		/** The number of campaigns in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this campaign folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface GetCampaignFoldersIdReturnFormProperties {

		/** The number of campaigns in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignFoldersIdReturnFormGroup() {
		return new FormGroup<GetCampaignFoldersIdReturnFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignFoldersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignFoldersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignFoldersIdReturn_linksFormGroup() {
		return new FormGroup<GetCampaignFoldersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignFoldersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchCampaignFoldersIdReturn_links?: Array<PatchCampaignFoldersIdReturn_links>;

		/** The number of campaigns in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this campaign folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface PatchCampaignFoldersIdReturnFormProperties {

		/** The number of campaigns in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignFoldersIdReturnFormGroup() {
		return new FormGroup<PatchCampaignFoldersIdReturnFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignFoldersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchCampaignFoldersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignFoldersIdReturn_linksFormGroup() {
		return new FormGroup<PatchCampaignFoldersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsType { regular = 0, plaintext = 1, absplit = 2, rss = 3, variate = 4 }

	export enum GetCampaignsStatus { save = 0, paused = 1, schedule = 2, sending = 3, sent = 4 }

	export enum GetCampaignsSort_field { create_time = 0, send_time = 1 }

	export enum GetCampaignsSort_dir { ASC = 0, DESC = 1 }

	export interface GetCampaignsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsReturn_links?: Array<GetCampaignsReturn_links>;

		/** An array of campaigns. */
		GetCampaignsReturnCampaigns?: Array<GetCampaignsReturnCampaigns>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetCampaignsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsReturnFormGroup() {
		return new FormGroup<GetCampaignsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsReturn_linksFormGroup() {
		return new FormGroup<GetCampaignsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaigns {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsReturnCampaigns_links?: Array<GetCampaignsReturnCampaigns_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: GetCampaignsReturnCampaignsAb_split_opts;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together. */
		content_type?: GetCampaignsReturnCampaignsContent_type | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: GetCampaignsReturnCampaignsDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: GetCampaignsReturnCampaignsRecipients;

		/** For sent campaigns, a summary of opens, clicks, and e-commerce data. */
		report_summary?: GetCampaignsReturnCampaignsReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: GetCampaignsReturnCampaignsRss_opts;

		/** The date and time a campaign was sent. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: GetCampaignsReturnCampaignsSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: GetCampaignsReturnCampaignsSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: GetCampaignsReturnCampaignsTracking;

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type?: GetCampaignsType | null;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: GetCampaignsReturnCampaignsVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetCampaignsReturnCampaignsFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together. */
		content_type: FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaigns_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsReturnCampaigns_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaigns_linksFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaigns_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface GetCampaignsReturnCampaignsAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsAb_split_optsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsReturnCampaignsAb_split_optsPick_winner { opens = 0, clicks = 1, manual = 2 }

	export enum GetCampaignsReturnCampaignsAb_split_optsSplit_test { subject = 0, from_name = 1, schedule = 2 }

	export enum GetCampaignsReturnCampaignsAb_split_optsWait_units { hours = 0, days = 1 }

	export enum GetCampaignsReturnCampaignsContent_type { template = 0, html = 1, url = 2, multichannel = 3 }

	export interface GetCampaignsReturnCampaignsDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface GetCampaignsReturnCampaignsDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsDelivery_statusFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsReturnCampaignsDelivery_statusStatus { delivering = 0, delivered = 1, canceling = 2, canceled = 3 }

	export interface GetCampaignsReturnCampaignsRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetCampaignsReturnCampaignsRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetCampaignsReturnCampaignsRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsRecipientsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetCampaignsReturnCampaignsRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: GetCampaignsReturnCampaignsReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetCampaignsReturnCampaignsReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsReport_summaryFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface GetCampaignsReturnCampaignsReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsReport_summaryEcommerceFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/** The URL for the RSS feed. */
		feed_url?: string | null;

		/** The frequency of the RSS Campaign. */
		frequency?: GetCampaignsReturnCampaignsRss_optsFrequency | null;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: GetCampaignsReturnCampaignsRss_optsSchedule;
	}
	export interface GetCampaignsReturnCampaignsRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/** The URL for the RSS feed. */
		feed_url: FormControl<string | null | undefined>,

		/** The frequency of the RSS Campaign. */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsRss_optsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsReturnCampaignsRss_optsFrequency { daily = 0, weekly = 1, monthly = 2 }

	export interface GetCampaignsReturnCampaignsRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: GetCampaignsReturnCampaignsRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface GetCampaignsReturnCampaignsRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsRss_optsScheduleFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface GetCampaignsReturnCampaignsRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day { sunday = 0, monday = 1, tuesday = 2, wednesday = 3, thursday = 4, friday = 5, saturday = 6 }

	export interface GetCampaignsReturnCampaignsSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface GetCampaignsReturnCampaignsSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsSettingsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface GetCampaignsReturnCampaignsSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsSocial_cardFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsReturnCampaignsStatus { save = 0, paused = 1, schedule = 2, sending = 3, sent = 4, canceled = 5, canceling = 6, archived = 7 }

	export interface GetCampaignsReturnCampaignsTracking {

		/** Deprecated */
		capsule?: GetCampaignsReturnCampaignsTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetCampaignsReturnCampaignsTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface GetCampaignsReturnCampaignsTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsTrackingFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface GetCampaignsReturnCampaignsTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsTrackingCapsuleFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface GetCampaignsReturnCampaignsTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsTrackingSalesforceFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsVariate_settings {

		/** Combinations of possible variables used to build emails. */
		GetCampaignsReturnCampaignsVariate_settingsCombinations?: Array<GetCampaignsReturnCampaignsVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria?: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface GetCampaignsReturnCampaignsVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsVariate_settingsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsReturnCampaignsVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface GetCampaignsReturnCampaignsVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsReturnCampaignsVariate_settingsCombinationsFormGroup() {
		return new FormGroup<GetCampaignsReturnCampaignsVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsReturnCampaignsVariate_settingsWinner_criteria { opens = 0, clicks = 1, manual = 2, total_revenue = 3 }

	export interface PostCampaignsPostBody {

		/** How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template. */
		content_type?: PostCampaignsPostBodyContent_type | null;

		/** List settings for the campaign. */
		recipients?: PostCampaignsPostBodyRecipients;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options, specific to an RSS campaign. */
		rss_opts?: PostCampaignsPostBodyRss_opts;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: PostCampaignsPostBodySettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PostCampaignsPostBodySocial_card;

		/** The tracking options for a campaign. */
		tracking?: PostCampaignsPostBodyTracking;

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: GetCampaignsType;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PostCampaignsPostBodyVariate_settings;
	}
	export interface PostCampaignsPostBodyFormProperties {

		/** How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template. */
		content_type: FormControl<PostCampaignsPostBodyContent_type | null | undefined>,

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: FormControl<GetCampaignsType | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyFormGroup() {
		return new FormGroup<PostCampaignsPostBodyFormProperties>({
			content_type: new FormControl<PostCampaignsPostBodyContent_type | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PostCampaignsPostBodyContent_type { template = 0, multichannel = 1 }

	export interface PostCampaignsPostBodyRecipients {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: string;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PostCampaignsPostBodyRecipientsSegment_opts;
	}
	export interface PostCampaignsPostBodyRecipientsFormProperties {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyRecipientsFormGroup() {
		return new FormGroup<PostCampaignsPostBodyRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostCampaignsPostBodyRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PostCampaignsPostBodyRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyRecipientsSegment_optsFormGroup() {
		return new FormGroup<PostCampaignsPostBodyRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodyRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: string;

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: GetCampaignsReturnCampaignsRss_optsFrequency;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PostCampaignsPostBodyRss_optsSchedule;
	}
	export interface PostCampaignsPostBodyRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: FormControl<string | null | undefined>,

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyRss_optsFormGroup() {
		return new FormGroup<PostCampaignsPostBodyRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostCampaignsPostBodyRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PostCampaignsPostBodyRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PostCampaignsPostBodyRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyRss_optsScheduleFormGroup() {
		return new FormGroup<PostCampaignsPostBodyRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodyRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PostCampaignsPostBodyRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PostCampaignsPostBodyRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodySettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. Note: while this field is not required for campaign creation, it is required for sending. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id of the template to use. */
		template_id?: number | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface PostCampaignsPostBodySettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. Note: while this field is not required for campaign creation, it is required for sending. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id of the template to use. */
		template_id: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsPostBodySettingsFormGroup() {
		return new FormGroup<PostCampaignsPostBodySettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodySocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PostCampaignsPostBodySocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsPostBodySocial_cardFormGroup() {
		return new FormGroup<PostCampaignsPostBodySocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodyTracking {

		/** Deprecated */
		capsule?: PostCampaignsPostBodyTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PostCampaignsPostBodyTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PostCampaignsPostBodyTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyTrackingFormGroup() {
		return new FormGroup<PostCampaignsPostBodyTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodyTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsPostBodyTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyTrackingCapsuleFormGroup() {
		return new FormGroup<PostCampaignsPostBodyTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodyTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsPostBodyTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyTrackingSalesforceFormGroup() {
		return new FormGroup<PostCampaignsPostBodyTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsPostBodyVariate_settings {

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria;
	}
	export interface PostCampaignsPostBodyVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,
	}
	export function CreatePostCampaignsPostBodyVariate_settingsFormGroup() {
		return new FormGroup<PostCampaignsPostBodyVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostCampaignsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostCampaignsReturn_links?: Array<PostCampaignsReturn_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: PostCampaignsReturnAb_split_opts;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together. */
		content_type?: GetCampaignsReturnCampaignsContent_type | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: PostCampaignsReturnDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: PostCampaignsReturnRecipients;

		/** For sent campaigns, a summary of opens, clicks, and e-commerce data. */
		report_summary?: PostCampaignsReturnReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: PostCampaignsReturnRss_opts;

		/** The date and time a campaign was sent. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: PostCampaignsReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PostCampaignsReturnSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: PostCampaignsReturnTracking;

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type?: GetCampaignsType | null;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PostCampaignsReturnVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PostCampaignsReturnFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together. */
		content_type: FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsReturnFormGroup() {
		return new FormGroup<PostCampaignsReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostCampaignsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsReturn_linksFormGroup() {
		return new FormGroup<PostCampaignsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface PostCampaignsReturnAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreatePostCampaignsReturnAb_split_optsFormGroup() {
		return new FormGroup<PostCampaignsReturnAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface PostCampaignsReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreatePostCampaignsReturnDelivery_statusFormGroup() {
		return new FormGroup<PostCampaignsReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PostCampaignsReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface PostCampaignsReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsReturnRecipientsFormGroup() {
		return new FormGroup<PostCampaignsReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PostCampaignsReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PostCampaignsReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: PostCampaignsReturnReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PostCampaignsReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsReturnReport_summaryFormGroup() {
		return new FormGroup<PostCampaignsReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface PostCampaignsReturnReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<PostCampaignsReturnReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/** The URL for the RSS feed. */
		feed_url?: string | null;

		/** The frequency of the RSS Campaign. */
		frequency?: GetCampaignsReturnCampaignsRss_optsFrequency | null;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PostCampaignsReturnRss_optsSchedule;
	}
	export interface PostCampaignsReturnRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/** The URL for the RSS feed. */
		feed_url: FormControl<string | null | undefined>,

		/** The frequency of the RSS Campaign. */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreatePostCampaignsReturnRss_optsFormGroup() {
		return new FormGroup<PostCampaignsReturnRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PostCampaignsReturnRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PostCampaignsReturnRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePostCampaignsReturnRss_optsScheduleFormGroup() {
		return new FormGroup<PostCampaignsReturnRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PostCampaignsReturnRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsReturnRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PostCampaignsReturnRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface PostCampaignsReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsReturnSettingsFormGroup() {
		return new FormGroup<PostCampaignsReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PostCampaignsReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsReturnSocial_cardFormGroup() {
		return new FormGroup<PostCampaignsReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnTracking {

		/** Deprecated */
		capsule?: PostCampaignsReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PostCampaignsReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PostCampaignsReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsReturnTrackingFormGroup() {
		return new FormGroup<PostCampaignsReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PostCampaignsReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PostCampaignsReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnVariate_settings {

		/** Combinations of possible variables used to build emails. */
		PostCampaignsReturnVariate_settingsCombinations?: Array<PostCampaignsReturnVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria?: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface PostCampaignsReturnVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsReturnVariate_settingsFormGroup() {
		return new FormGroup<PostCampaignsReturnVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsReturnVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface PostCampaignsReturnVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsReturnVariate_settingsCombinationsFormGroup() {
		return new FormGroup<PostCampaignsReturnVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsIdReturn_links?: Array<GetCampaignsIdReturn_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: GetCampaignsIdReturnAb_split_opts;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together. */
		content_type?: GetCampaignsReturnCampaignsContent_type | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: GetCampaignsIdReturnDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: GetCampaignsIdReturnRecipients;

		/** For sent campaigns, a summary of opens, clicks, and e-commerce data. */
		report_summary?: GetCampaignsIdReturnReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: GetCampaignsIdReturnRss_opts;

		/** The date and time a campaign was sent. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: GetCampaignsIdReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: GetCampaignsIdReturnSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: GetCampaignsIdReturnTracking;

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type?: GetCampaignsType | null;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: GetCampaignsIdReturnVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetCampaignsIdReturnFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together. */
		content_type: FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnFormGroup() {
		return new FormGroup<GetCampaignsIdReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdReturn_linksFormGroup() {
		return new FormGroup<GetCampaignsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface GetCampaignsIdReturnAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnAb_split_optsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface GetCampaignsIdReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnDelivery_statusFormGroup() {
		return new FormGroup<GetCampaignsIdReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetCampaignsIdReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetCampaignsIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnRecipientsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetCampaignsIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: GetCampaignsIdReturnReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetCampaignsIdReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnReport_summaryFormGroup() {
		return new FormGroup<GetCampaignsIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface GetCampaignsIdReturnReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<GetCampaignsIdReturnReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/** The URL for the RSS feed. */
		feed_url?: string | null;

		/** The frequency of the RSS Campaign. */
		frequency?: GetCampaignsReturnCampaignsRss_optsFrequency | null;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: GetCampaignsIdReturnRss_optsSchedule;
	}
	export interface GetCampaignsIdReturnRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/** The URL for the RSS feed. */
		feed_url: FormControl<string | null | undefined>,

		/** The frequency of the RSS Campaign. */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnRss_optsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: GetCampaignsIdReturnRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface GetCampaignsIdReturnRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnRss_optsScheduleFormGroup() {
		return new FormGroup<GetCampaignsIdReturnRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface GetCampaignsIdReturnRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<GetCampaignsIdReturnRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface GetCampaignsIdReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnSettingsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface GetCampaignsIdReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnSocial_cardFormGroup() {
		return new FormGroup<GetCampaignsIdReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnTracking {

		/** Deprecated */
		capsule?: GetCampaignsIdReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetCampaignsIdReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface GetCampaignsIdReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnTrackingFormGroup() {
		return new FormGroup<GetCampaignsIdReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface GetCampaignsIdReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnTrackingCapsuleFormGroup() {
		return new FormGroup<GetCampaignsIdReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface GetCampaignsIdReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnTrackingSalesforceFormGroup() {
		return new FormGroup<GetCampaignsIdReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnVariate_settings {

		/** Combinations of possible variables used to build emails. */
		GetCampaignsIdReturnVariate_settingsCombinations?: Array<GetCampaignsIdReturnVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria?: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface GetCampaignsIdReturnVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnVariate_settingsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdReturnVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface GetCampaignsIdReturnVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsIdReturnVariate_settingsCombinationsFormGroup() {
		return new FormGroup<GetCampaignsIdReturnVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBody {

		/** List settings for the campaign. */
		recipients?: PatchCampaignsIdPatchBodyRecipients;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: PatchCampaignsIdPatchBodyRss_opts;

		/**
		 * The settings for your campaign, including subject, from name, reply-to address, and more.
		 * Required
		 */
		settings: PatchCampaignsIdPatchBodySettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PatchCampaignsIdPatchBodySocial_card;

		/** The tracking options for a campaign. */
		tracking?: PatchCampaignsIdPatchBodyTracking;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PatchCampaignsIdPatchBodyVariate_settings;
	}
	export interface PatchCampaignsIdPatchBodyFormProperties {
	}
	export function CreatePatchCampaignsIdPatchBodyFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyFormProperties>({
		});

	}

	export interface PatchCampaignsIdPatchBodyRecipients {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: string;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PatchCampaignsIdPatchBodyRecipientsSegment_opts;
	}
	export interface PatchCampaignsIdPatchBodyRecipientsFormProperties {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyRecipientsFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchCampaignsIdPatchBodyRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PatchCampaignsIdPatchBodyRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyRecipientsSegment_optsFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodyRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: string;

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: GetCampaignsReturnCampaignsRss_optsFrequency;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PatchCampaignsIdPatchBodyRss_optsSchedule;
	}
	export interface PatchCampaignsIdPatchBodyRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: FormControl<string | null | undefined>,

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyRss_optsFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchCampaignsIdPatchBodyRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PatchCampaignsIdPatchBodyRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PatchCampaignsIdPatchBodyRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyRss_optsScheduleFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodyRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PatchCampaignsIdPatchBodyRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodySettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/**
		 * The 'from' name on the campaign (not an email address).
		 * Required
		 */
		from_name: string;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/**
		 * The reply-to email address for the campaign.
		 * Required
		 */
		reply_to: string;

		/**
		 * The subject line for the campaign.
		 * Required
		 */
		subject_line: string;

		/** The id of the template to use. */
		template_id?: number | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface PatchCampaignsIdPatchBodySettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/**
		 * The 'from' name on the campaign (not an email address).
		 * Required
		 */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/**
		 * The reply-to email address for the campaign.
		 * Required
		 */
		reply_to: FormControl<string | null | undefined>,

		/**
		 * The subject line for the campaign.
		 * Required
		 */
		subject_line: FormControl<string | null | undefined>,

		/** The id of the template to use. */
		template_id: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodySettingsFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodySettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subject_line: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodySocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PatchCampaignsIdPatchBodySocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodySocial_cardFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodySocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodyTracking {

		/** Deprecated */
		capsule?: PatchCampaignsIdPatchBodyTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PatchCampaignsIdPatchBodyTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PatchCampaignsIdPatchBodyTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyTrackingFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodyTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PatchCampaignsIdPatchBodyTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyTrackingCapsuleFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodyTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PatchCampaignsIdPatchBodyTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyTrackingSalesforceFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdPatchBodyVariate_settings {

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria;
	}
	export interface PatchCampaignsIdPatchBodyVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,
	}
	export function CreatePatchCampaignsIdPatchBodyVariate_settingsFormGroup() {
		return new FormGroup<PatchCampaignsIdPatchBodyVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchCampaignsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchCampaignsIdReturn_links?: Array<PatchCampaignsIdReturn_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: PatchCampaignsIdReturnAb_split_opts;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together. */
		content_type?: GetCampaignsReturnCampaignsContent_type | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: PatchCampaignsIdReturnDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: PatchCampaignsIdReturnRecipients;

		/** For sent campaigns, a summary of opens, clicks, and e-commerce data. */
		report_summary?: PatchCampaignsIdReturnReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: PatchCampaignsIdReturnRss_opts;

		/** The date and time a campaign was sent. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: PatchCampaignsIdReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PatchCampaignsIdReturnSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: PatchCampaignsIdReturnTracking;

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type?: GetCampaignsType | null;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PatchCampaignsIdReturnVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PatchCampaignsIdReturnFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together. */
		content_type: FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchCampaignsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturn_linksFormGroup() {
		return new FormGroup<PatchCampaignsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface PatchCampaignsIdReturnAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnAb_split_optsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface PatchCampaignsIdReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnDelivery_statusFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PatchCampaignsIdReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface PatchCampaignsIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnRecipientsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PatchCampaignsIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: PatchCampaignsIdReturnReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PatchCampaignsIdReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnReport_summaryFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface PatchCampaignsIdReturnReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/** The URL for the RSS feed. */
		feed_url?: string | null;

		/** The frequency of the RSS Campaign. */
		frequency?: GetCampaignsReturnCampaignsRss_optsFrequency | null;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PatchCampaignsIdReturnRss_optsSchedule;
	}
	export interface PatchCampaignsIdReturnRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/** The URL for the RSS feed. */
		feed_url: FormControl<string | null | undefined>,

		/** The frequency of the RSS Campaign. */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnRss_optsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PatchCampaignsIdReturnRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PatchCampaignsIdReturnRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnRss_optsScheduleFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PatchCampaignsIdReturnRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface PatchCampaignsIdReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnSettingsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PatchCampaignsIdReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnSocial_cardFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnTracking {

		/** Deprecated */
		capsule?: PatchCampaignsIdReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PatchCampaignsIdReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PatchCampaignsIdReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnTrackingFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PatchCampaignsIdReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PatchCampaignsIdReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnVariate_settings {

		/** Combinations of possible variables used to build emails. */
		PatchCampaignsIdReturnVariate_settingsCombinations?: Array<PatchCampaignsIdReturnVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria?: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface PatchCampaignsIdReturnVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnVariate_settingsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdReturnVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface PatchCampaignsIdReturnVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreatePatchCampaignsIdReturnVariate_settingsCombinationsFormGroup() {
		return new FormGroup<PatchCampaignsIdReturnVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostCampaignsIdActionsCreateResendReturn_links?: Array<PostCampaignsIdActionsCreateResendReturn_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: PostCampaignsIdActionsCreateResendReturnAb_split_opts;

		/** The link to the campaign's archive version. */
		archive_url?: string | null;

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type?: string | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: PostCampaignsIdActionsCreateResendReturnDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: PostCampaignsIdActionsCreateResendReturnRecipients;

		/** For sent campaigns, a summary of opens and clicks. */
		report_summary?: PostCampaignsIdActionsCreateResendReturnReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: PostCampaignsIdActionsCreateResendReturnRss_opts;

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: PostCampaignsIdActionsCreateResendReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PostCampaignsIdActionsCreateResendReturnSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: PostCampaignsIdActionsCreateResendReturnTracking;

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: GetCampaignsType;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PostCampaignsIdActionsCreateResendReturnVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnFormProperties {

		/** The link to the campaign's archive version. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type: FormControl<string | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined, [Validators.required]),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturn_linksFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnAb_split_optsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnDelivery_statusFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnRecipients {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: string;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PostCampaignsIdActionsCreateResendReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnRecipientsFormProperties {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: FormControl<string | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnRecipientsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: PostCampaignsIdActionsCreateResendReturnReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnReport_summaryFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: string;

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: GetCampaignsReturnCampaignsRss_optsFrequency;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PostCampaignsIdActionsCreateResendReturnRss_optsSchedule;
	}
	export interface PostCampaignsIdActionsCreateResendReturnRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: FormControl<string | null | undefined>,

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnRss_optsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined, [Validators.required]),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PostCampaignsIdActionsCreateResendReturnRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnRss_optsScheduleFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage replies. */
		use_conversation?: boolean | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnSettingsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnSocial_cardFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnTracking {

		/** Deprecated */
		capsule?: PostCampaignsIdActionsCreateResendReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PostCampaignsIdActionsCreateResendReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnTrackingFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnVariate_settings {

		/** Combinations of possible variables used to build emails. */
		PostCampaignsIdActionsCreateResendReturnVariate_settingsCombinations?: Array<PostCampaignsIdActionsCreateResendReturnVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnVariate_settingsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined, [Validators.required]),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsCreateResendReturnVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface PostCampaignsIdActionsCreateResendReturnVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsCreateResendReturnVariate_settingsCombinationsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsCreateResendReturnVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostCampaignsIdActionsReplicateReturn_links?: Array<PostCampaignsIdActionsReplicateReturn_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: PostCampaignsIdActionsReplicateReturnAb_split_opts;

		/** The link to the campaign's archive version. */
		archive_url?: string | null;

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type?: string | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: PostCampaignsIdActionsReplicateReturnDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: PostCampaignsIdActionsReplicateReturnRecipients;

		/** For sent campaigns, a summary of opens and clicks. */
		report_summary?: PostCampaignsIdActionsReplicateReturnReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: PostCampaignsIdActionsReplicateReturnRss_opts;

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: PostCampaignsIdActionsReplicateReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PostCampaignsIdActionsReplicateReturnSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: PostCampaignsIdActionsReplicateReturnTracking;

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: GetCampaignsType;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PostCampaignsIdActionsReplicateReturnVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnFormProperties {

		/** The link to the campaign's archive version. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type: FormControl<string | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined, [Validators.required]),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostCampaignsIdActionsReplicateReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturn_linksFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnAb_split_optsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnDelivery_statusFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnRecipients {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: string;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PostCampaignsIdActionsReplicateReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnRecipientsFormProperties {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: FormControl<string | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnRecipientsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: PostCampaignsIdActionsReplicateReturnReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnReport_summaryFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: string;

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: GetCampaignsReturnCampaignsRss_optsFrequency;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PostCampaignsIdActionsReplicateReturnRss_optsSchedule;
	}
	export interface PostCampaignsIdActionsReplicateReturnRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: FormControl<string | null | undefined>,

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnRss_optsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined, [Validators.required]),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PostCampaignsIdActionsReplicateReturnRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnRss_optsScheduleFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage replies. */
		use_conversation?: boolean | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnSettingsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnSocial_cardFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnTracking {

		/** Deprecated */
		capsule?: PostCampaignsIdActionsReplicateReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PostCampaignsIdActionsReplicateReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnTrackingFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnVariate_settings {

		/** Combinations of possible variables used to build emails. */
		PostCampaignsIdActionsReplicateReturnVariate_settingsCombinations?: Array<PostCampaignsIdActionsReplicateReturnVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnVariate_settingsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined, [Validators.required]),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsReplicateReturnVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface PostCampaignsIdActionsReplicateReturnVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsReplicateReturnVariate_settingsCombinationsFormGroup() {
		return new FormGroup<PostCampaignsIdActionsReplicateReturnVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsSchedulePostBody {

		/** Choose whether the campaign should use [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). Cannot be set to `true` for campaigns using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		batch_delivery?: PostCampaignsIdActionsSchedulePostBodyBatch_delivery;

		/**
		 * The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45).
		 * Required
		 */
		schedule_time: Date;

		/** Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). */
		timewarp?: boolean | null;
	}
	export interface PostCampaignsIdActionsSchedulePostBodyFormProperties {

		/**
		 * The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45).
		 * Required
		 */
		schedule_time: FormControl<Date | null | undefined>,

		/** Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). */
		timewarp: FormControl<boolean | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsSchedulePostBodyFormGroup() {
		return new FormGroup<PostCampaignsIdActionsSchedulePostBodyFormProperties>({
			schedule_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdActionsSchedulePostBodyBatch_delivery {

		/**
		 * The number of batches for the campaign send.
		 * Required
		 */
		batch_count: number;

		/**
		 * The delay, in minutes, between batches.
		 * Required
		 */
		batch_delay: number;
	}
	export interface PostCampaignsIdActionsSchedulePostBodyBatch_deliveryFormProperties {

		/**
		 * The number of batches for the campaign send.
		 * Required
		 */
		batch_count: FormControl<number | null | undefined>,

		/**
		 * The delay, in minutes, between batches.
		 * Required
		 */
		batch_delay: FormControl<number | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsSchedulePostBodyBatch_deliveryFormGroup() {
		return new FormGroup<PostCampaignsIdActionsSchedulePostBodyBatch_deliveryFormProperties>({
			batch_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			batch_delay: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostCampaignsIdActionsTestPostBody {

		/**
		 * Choose the type of test email to send.
		 * Required
		 */
		send_type: PostCampaignsIdActionsTestPostBodySend_type;

		/**
		 * An array of email addresses to send the test email to.
		 * Required
		 */
		test_emails: Array<string>;
	}
	export interface PostCampaignsIdActionsTestPostBodyFormProperties {

		/**
		 * Choose the type of test email to send.
		 * Required
		 */
		send_type: FormControl<PostCampaignsIdActionsTestPostBodySend_type | null | undefined>,
	}
	export function CreatePostCampaignsIdActionsTestPostBodyFormGroup() {
		return new FormGroup<PostCampaignsIdActionsTestPostBodyFormProperties>({
			send_type: new FormControl<PostCampaignsIdActionsTestPostBodySend_type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PostCampaignsIdActionsTestPostBodySend_type { html = 0, plaintext = 1 }

	export interface GetCampaignsIdContentReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsIdContentReturn_links?: Array<GetCampaignsIdContentReturn_links>;

		/** The Archive HTML for the campaign. */
		archive_html?: string | null;

		/** The raw HTML for the campaign. */
		html?: string | null;

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text?: string | null;

		/** Content options for multivariate campaigns. */
		GetCampaignsIdContentReturnVariate_contents?: Array<GetCampaignsIdContentReturnVariate_contents>;
	}
	export interface GetCampaignsIdContentReturnFormProperties {

		/** The Archive HTML for the campaign. */
		archive_html: FormControl<string | null | undefined>,

		/** The raw HTML for the campaign. */
		html: FormControl<string | null | undefined>,

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdContentReturnFormGroup() {
		return new FormGroup<GetCampaignsIdContentReturnFormProperties>({
			archive_html: new FormControl<string | null | undefined>(undefined),
			html: new FormControl<string | null | undefined>(undefined),
			plain_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdContentReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsIdContentReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdContentReturn_linksFormGroup() {
		return new FormGroup<GetCampaignsIdContentReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdContentReturnVariate_contents {

		/** Label used to identify the content option. */
		content_label?: string | null;

		/** The raw HTML for the campaign. */
		html?: string | null;

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text?: string | null;
	}
	export interface GetCampaignsIdContentReturnVariate_contentsFormProperties {

		/** Label used to identify the content option. */
		content_label: FormControl<string | null | undefined>,

		/** The raw HTML for the campaign. */
		html: FormControl<string | null | undefined>,

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdContentReturnVariate_contentsFormGroup() {
		return new FormGroup<GetCampaignsIdContentReturnVariate_contentsFormProperties>({
			content_label: new FormControl<string | null | undefined>(undefined),
			html: new FormControl<string | null | undefined>(undefined),
			plain_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentPutBody {

		/** Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/). */
		archive?: PutCampaignsIdContentPutBodyArchive;

		/** The raw HTML for the campaign. */
		html?: string | null;

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text?: string | null;

		/** Use this template to generate the HTML content of the campaign */
		template?: PutCampaignsIdContentPutBodyTemplate;

		/** When importing a campaign, the URL where the HTML lives. */
		url?: string | null;

		/** Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided. */
		PutCampaignsIdContentPutBodyVariate_contents?: Array<PutCampaignsIdContentPutBodyVariate_contents>;
	}
	export interface PutCampaignsIdContentPutBodyFormProperties {

		/** The raw HTML for the campaign. */
		html: FormControl<string | null | undefined>,

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text: FormControl<string | null | undefined>,

		/** When importing a campaign, the URL where the HTML lives. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentPutBodyFormGroup() {
		return new FormGroup<PutCampaignsIdContentPutBodyFormProperties>({
			html: new FormControl<string | null | undefined>(undefined),
			plain_text: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentPutBodyArchive {

		/**
		 * The base64-encoded representation of the archive file.
		 * Required
		 */
		archive_content: string;

		/** The type of encoded file. Defaults to zip. */
		archive_type?: PutCampaignsIdContentPutBodyArchiveArchive_type | null;
	}
	export interface PutCampaignsIdContentPutBodyArchiveFormProperties {

		/**
		 * The base64-encoded representation of the archive file.
		 * Required
		 */
		archive_content: FormControl<string | null | undefined>,

		/** The type of encoded file. Defaults to zip. */
		archive_type: FormControl<PutCampaignsIdContentPutBodyArchiveArchive_type | null | undefined>,
	}
	export function CreatePutCampaignsIdContentPutBodyArchiveFormGroup() {
		return new FormGroup<PutCampaignsIdContentPutBodyArchiveFormProperties>({
			archive_content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archive_type: new FormControl<PutCampaignsIdContentPutBodyArchiveArchive_type | null | undefined>(undefined),
		});

	}

	export enum PutCampaignsIdContentPutBodyArchiveArchive_type { zip = 0, 'tar.gz' = 1, 'tar.bz2' = 2, tar = 3, tgz = 4, tbz = 5 }

	export interface PutCampaignsIdContentPutBodyTemplate {

		/**
		 * The id of the template to use.
		 * Required
		 */
		id: number;

		/** Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template. */
		sections?: string | null;
	}
	export interface PutCampaignsIdContentPutBodyTemplateFormProperties {

		/**
		 * The id of the template to use.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template. */
		sections: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentPutBodyTemplateFormGroup() {
		return new FormGroup<PutCampaignsIdContentPutBodyTemplateFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sections: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentPutBodyVariate_contents {

		/** Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/). */
		archive?: PutCampaignsIdContentPutBodyVariate_contentsArchive;

		/**
		 * The label used to identify the content option.
		 * Required
		 */
		content_label: string;

		/** The raw HTML for the campaign. */
		html?: string | null;

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text?: string | null;

		/** Use this template to generate the HTML content for the campaign. */
		template?: PutCampaignsIdContentPutBodyVariate_contentsTemplate;

		/** When importing a campaign, the URL for the HTML. */
		url?: string | null;
	}
	export interface PutCampaignsIdContentPutBodyVariate_contentsFormProperties {

		/**
		 * The label used to identify the content option.
		 * Required
		 */
		content_label: FormControl<string | null | undefined>,

		/** The raw HTML for the campaign. */
		html: FormControl<string | null | undefined>,

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text: FormControl<string | null | undefined>,

		/** When importing a campaign, the URL for the HTML. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentPutBodyVariate_contentsFormGroup() {
		return new FormGroup<PutCampaignsIdContentPutBodyVariate_contentsFormProperties>({
			content_label: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined),
			plain_text: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentPutBodyVariate_contentsArchive {

		/**
		 * The base64-encoded representation of the archive file.
		 * Required
		 */
		archive_content: string;

		/** The type of encoded file. Defaults to zip. */
		archive_type?: PutCampaignsIdContentPutBodyArchiveArchive_type | null;
	}
	export interface PutCampaignsIdContentPutBodyVariate_contentsArchiveFormProperties {

		/**
		 * The base64-encoded representation of the archive file.
		 * Required
		 */
		archive_content: FormControl<string | null | undefined>,

		/** The type of encoded file. Defaults to zip. */
		archive_type: FormControl<PutCampaignsIdContentPutBodyArchiveArchive_type | null | undefined>,
	}
	export function CreatePutCampaignsIdContentPutBodyVariate_contentsArchiveFormGroup() {
		return new FormGroup<PutCampaignsIdContentPutBodyVariate_contentsArchiveFormProperties>({
			archive_content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archive_type: new FormControl<PutCampaignsIdContentPutBodyArchiveArchive_type | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentPutBodyVariate_contentsTemplate {

		/**
		 * The id of the template to use.
		 * Required
		 */
		id: number;

		/** Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template. */
		sections?: string | null;
	}
	export interface PutCampaignsIdContentPutBodyVariate_contentsTemplateFormProperties {

		/**
		 * The id of the template to use.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template. */
		sections: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentPutBodyVariate_contentsTemplateFormGroup() {
		return new FormGroup<PutCampaignsIdContentPutBodyVariate_contentsTemplateFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sections: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PutCampaignsIdContentReturn_links?: Array<PutCampaignsIdContentReturn_links>;

		/** The Archive HTML for the campaign. */
		archive_html?: string | null;

		/** The raw HTML for the campaign. */
		html?: string | null;

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text?: string | null;

		/** Content options for multivariate campaigns. */
		PutCampaignsIdContentReturnVariate_contents?: Array<PutCampaignsIdContentReturnVariate_contents>;
	}
	export interface PutCampaignsIdContentReturnFormProperties {

		/** The Archive HTML for the campaign. */
		archive_html: FormControl<string | null | undefined>,

		/** The raw HTML for the campaign. */
		html: FormControl<string | null | undefined>,

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentReturnFormGroup() {
		return new FormGroup<PutCampaignsIdContentReturnFormProperties>({
			archive_html: new FormControl<string | null | undefined>(undefined),
			html: new FormControl<string | null | undefined>(undefined),
			plain_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PutCampaignsIdContentReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentReturn_linksFormGroup() {
		return new FormGroup<PutCampaignsIdContentReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutCampaignsIdContentReturnVariate_contents {

		/** Label used to identify the content option. */
		content_label?: string | null;

		/** The raw HTML for the campaign. */
		html?: string | null;

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text?: string | null;
	}
	export interface PutCampaignsIdContentReturnVariate_contentsFormProperties {

		/** Label used to identify the content option. */
		content_label: FormControl<string | null | undefined>,

		/** The raw HTML for the campaign. */
		html: FormControl<string | null | undefined>,

		/** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
		plain_text: FormControl<string | null | undefined>,
	}
	export function CreatePutCampaignsIdContentReturnVariate_contentsFormGroup() {
		return new FormGroup<PutCampaignsIdContentReturnVariate_contentsFormProperties>({
			content_label: new FormControl<string | null | undefined>(undefined),
			html: new FormControl<string | null | undefined>(undefined),
			plain_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdFeedbackReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsIdFeedbackReturn_links?: Array<GetCampaignsIdFeedbackReturn_links>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** A collection of feedback items for a campaign. */
		GetCampaignsIdFeedbackReturnFeedback?: Array<GetCampaignsIdFeedbackReturnFeedback>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetCampaignsIdFeedbackReturnFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetCampaignsIdFeedbackReturnFormGroup() {
		return new FormGroup<GetCampaignsIdFeedbackReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdFeedbackReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsIdFeedbackReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdFeedbackReturn_linksFormGroup() {
		return new FormGroup<GetCampaignsIdFeedbackReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdFeedbackReturnFeedback {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsIdFeedbackReturnFeedback_links?: Array<GetCampaignsIdFeedbackReturnFeedback_links>;

		/** The block id for the editable block that the feedback addresses. */
		block_id?: number | null;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The login name of the user who created the feedback. */
		created_by?: string | null;

		/** The individual id for the feedback item. */
		feedback_id?: number | null;

		/** The status of feedback. */
		is_complete?: boolean | null;

		/**
		 * The content of the feedback.
		 * Required
		 */
		message: string;

		/** If a reply, the id of the parent feedback item. */
		parent_id?: number | null;

		/** The source of the feedback. */
		source?: GetCampaignsIdFeedbackReturnFeedbackSource | null;

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetCampaignsIdFeedbackReturnFeedbackFormProperties {

		/** The block id for the editable block that the feedback addresses. */
		block_id: FormControl<number | null | undefined>,

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The login name of the user who created the feedback. */
		created_by: FormControl<string | null | undefined>,

		/** The individual id for the feedback item. */
		feedback_id: FormControl<number | null | undefined>,

		/** The status of feedback. */
		is_complete: FormControl<boolean | null | undefined>,

		/**
		 * The content of the feedback.
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/** If a reply, the id of the parent feedback item. */
		parent_id: FormControl<number | null | undefined>,

		/** The source of the feedback. */
		source: FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>,

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetCampaignsIdFeedbackReturnFeedbackFormGroup() {
		return new FormGroup<GetCampaignsIdFeedbackReturnFeedbackFormProperties>({
			block_id: new FormControl<number | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			feedback_id: new FormControl<number | null | undefined>(undefined),
			is_complete: new FormControl<boolean | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			parent_id: new FormControl<number | null | undefined>(undefined),
			source: new FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdFeedbackReturnFeedback_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsIdFeedbackReturnFeedback_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdFeedbackReturnFeedback_linksFormGroup() {
		return new FormGroup<GetCampaignsIdFeedbackReturnFeedback_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsIdFeedbackReturnFeedbackSource { api = 0, email = 1, sms = 2, web = 3, ios = 4, android = 5 }

	export interface PostCampaignsIdFeedbackPostBody {

		/** The block id for the editable block that the feedback addresses. */
		block_id?: number | null;

		/** The status of feedback. */
		is_complete?: boolean | null;

		/**
		 * The content of the feedback.
		 * Required
		 */
		message: string;
	}
	export interface PostCampaignsIdFeedbackPostBodyFormProperties {

		/** The block id for the editable block that the feedback addresses. */
		block_id: FormControl<number | null | undefined>,

		/** The status of feedback. */
		is_complete: FormControl<boolean | null | undefined>,

		/**
		 * The content of the feedback.
		 * Required
		 */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdFeedbackPostBodyFormGroup() {
		return new FormGroup<PostCampaignsIdFeedbackPostBodyFormProperties>({
			block_id: new FormControl<number | null | undefined>(undefined),
			is_complete: new FormControl<boolean | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostCampaignsIdFeedbackReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostCampaignsIdFeedbackReturn_links?: Array<PostCampaignsIdFeedbackReturn_links>;

		/** The block id for the editable block that the feedback addresses. */
		block_id?: number | null;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The login name of the user who created the feedback. */
		created_by?: string | null;

		/** The individual id for the feedback item. */
		feedback_id?: number | null;

		/** The status of feedback. */
		is_complete?: boolean | null;

		/** The content of the feedback. */
		message?: string | null;

		/** If a reply, the id of the parent feedback item. */
		parent_id?: number | null;

		/** The source of the feedback. */
		source?: GetCampaignsIdFeedbackReturnFeedbackSource | null;

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostCampaignsIdFeedbackReturnFormProperties {

		/** The block id for the editable block that the feedback addresses. */
		block_id: FormControl<number | null | undefined>,

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The login name of the user who created the feedback. */
		created_by: FormControl<string | null | undefined>,

		/** The individual id for the feedback item. */
		feedback_id: FormControl<number | null | undefined>,

		/** The status of feedback. */
		is_complete: FormControl<boolean | null | undefined>,

		/** The content of the feedback. */
		message: FormControl<string | null | undefined>,

		/** If a reply, the id of the parent feedback item. */
		parent_id: FormControl<number | null | undefined>,

		/** The source of the feedback. */
		source: FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>,

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostCampaignsIdFeedbackReturnFormGroup() {
		return new FormGroup<PostCampaignsIdFeedbackReturnFormProperties>({
			block_id: new FormControl<number | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			feedback_id: new FormControl<number | null | undefined>(undefined),
			is_complete: new FormControl<boolean | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			parent_id: new FormControl<number | null | undefined>(undefined),
			source: new FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostCampaignsIdFeedbackReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostCampaignsIdFeedbackReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostCampaignsIdFeedbackReturn_linksFormGroup() {
		return new FormGroup<PostCampaignsIdFeedbackReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdFeedbackIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsIdFeedbackIdReturn_links?: Array<GetCampaignsIdFeedbackIdReturn_links>;

		/** The block id for the editable block that the feedback addresses. */
		block_id?: number | null;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The login name of the user who created the feedback. */
		created_by?: string | null;

		/** The individual id for the feedback item. */
		feedback_id?: number | null;

		/** The status of feedback. */
		is_complete?: boolean | null;

		/** The content of the feedback. */
		message?: string | null;

		/** If a reply, the id of the parent feedback item. */
		parent_id?: number | null;

		/** The source of the feedback. */
		source?: GetCampaignsIdFeedbackReturnFeedbackSource | null;

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetCampaignsIdFeedbackIdReturnFormProperties {

		/** The block id for the editable block that the feedback addresses. */
		block_id: FormControl<number | null | undefined>,

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The login name of the user who created the feedback. */
		created_by: FormControl<string | null | undefined>,

		/** The individual id for the feedback item. */
		feedback_id: FormControl<number | null | undefined>,

		/** The status of feedback. */
		is_complete: FormControl<boolean | null | undefined>,

		/** The content of the feedback. */
		message: FormControl<string | null | undefined>,

		/** If a reply, the id of the parent feedback item. */
		parent_id: FormControl<number | null | undefined>,

		/** The source of the feedback. */
		source: FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>,

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetCampaignsIdFeedbackIdReturnFormGroup() {
		return new FormGroup<GetCampaignsIdFeedbackIdReturnFormProperties>({
			block_id: new FormControl<number | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			feedback_id: new FormControl<number | null | undefined>(undefined),
			is_complete: new FormControl<boolean | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			parent_id: new FormControl<number | null | undefined>(undefined),
			source: new FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdFeedbackIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsIdFeedbackIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdFeedbackIdReturn_linksFormGroup() {
		return new FormGroup<GetCampaignsIdFeedbackIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdFeedbackIdPatchBody {

		/** The block id for the editable block that the feedback addresses. */
		block_id?: number | null;

		/** The status of feedback. */
		is_complete?: boolean | null;

		/** The content of the feedback. */
		message?: string | null;
	}
	export interface PatchCampaignsIdFeedbackIdPatchBodyFormProperties {

		/** The block id for the editable block that the feedback addresses. */
		block_id: FormControl<number | null | undefined>,

		/** The status of feedback. */
		is_complete: FormControl<boolean | null | undefined>,

		/** The content of the feedback. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdFeedbackIdPatchBodyFormGroup() {
		return new FormGroup<PatchCampaignsIdFeedbackIdPatchBodyFormProperties>({
			block_id: new FormControl<number | null | undefined>(undefined),
			is_complete: new FormControl<boolean | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdFeedbackIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchCampaignsIdFeedbackIdReturn_links?: Array<PatchCampaignsIdFeedbackIdReturn_links>;

		/** The block id for the editable block that the feedback addresses. */
		block_id?: number | null;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The login name of the user who created the feedback. */
		created_by?: string | null;

		/** The individual id for the feedback item. */
		feedback_id?: number | null;

		/** The status of feedback. */
		is_complete?: boolean | null;

		/** The content of the feedback. */
		message?: string | null;

		/** If a reply, the id of the parent feedback item. */
		parent_id?: number | null;

		/** The source of the feedback. */
		source?: GetCampaignsIdFeedbackReturnFeedbackSource | null;

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchCampaignsIdFeedbackIdReturnFormProperties {

		/** The block id for the editable block that the feedback addresses. */
		block_id: FormControl<number | null | undefined>,

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the feedback item was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The login name of the user who created the feedback. */
		created_by: FormControl<string | null | undefined>,

		/** The individual id for the feedback item. */
		feedback_id: FormControl<number | null | undefined>,

		/** The status of feedback. */
		is_complete: FormControl<boolean | null | undefined>,

		/** The content of the feedback. */
		message: FormControl<string | null | undefined>,

		/** If a reply, the id of the parent feedback item. */
		parent_id: FormControl<number | null | undefined>,

		/** The source of the feedback. */
		source: FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>,

		/** The date and time the feedback was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchCampaignsIdFeedbackIdReturnFormGroup() {
		return new FormGroup<PatchCampaignsIdFeedbackIdReturnFormProperties>({
			block_id: new FormControl<number | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			feedback_id: new FormControl<number | null | undefined>(undefined),
			is_complete: new FormControl<boolean | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			parent_id: new FormControl<number | null | undefined>(undefined),
			source: new FormControl<GetCampaignsIdFeedbackReturnFeedbackSource | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchCampaignsIdFeedbackIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchCampaignsIdFeedbackIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchCampaignsIdFeedbackIdReturn_linksFormGroup() {
		return new FormGroup<PatchCampaignsIdFeedbackIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdSendChecklistReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetCampaignsIdSendChecklistReturn_links?: Array<GetCampaignsIdSendChecklistReturn_links>;

		/** Whether the campaign is ready to send. */
		is_ready?: boolean | null;

		/** A list of feedback items to review before sending your campaign. */
		GetCampaignsIdSendChecklistReturnItems?: Array<GetCampaignsIdSendChecklistReturnItems>;
	}
	export interface GetCampaignsIdSendChecklistReturnFormProperties {

		/** Whether the campaign is ready to send. */
		is_ready: FormControl<boolean | null | undefined>,
	}
	export function CreateGetCampaignsIdSendChecklistReturnFormGroup() {
		return new FormGroup<GetCampaignsIdSendChecklistReturnFormProperties>({
			is_ready: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdSendChecklistReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetCampaignsIdSendChecklistReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetCampaignsIdSendChecklistReturn_linksFormGroup() {
		return new FormGroup<GetCampaignsIdSendChecklistReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetCampaignsIdSendChecklistReturnItems {

		/** Details about the specific feedback item. */
		details?: string | null;

		/** The heading for the specific item. */
		heading?: string | null;

		/** The ID for the specific item. */
		id?: number | null;

		/** The item type. */
		type?: GetCampaignsIdSendChecklistReturnItemsType | null;
	}
	export interface GetCampaignsIdSendChecklistReturnItemsFormProperties {

		/** Details about the specific feedback item. */
		details: FormControl<string | null | undefined>,

		/** The heading for the specific item. */
		heading: FormControl<string | null | undefined>,

		/** The ID for the specific item. */
		id: FormControl<number | null | undefined>,

		/** The item type. */
		type: FormControl<GetCampaignsIdSendChecklistReturnItemsType | null | undefined>,
	}
	export function CreateGetCampaignsIdSendChecklistReturnItemsFormGroup() {
		return new FormGroup<GetCampaignsIdSendChecklistReturnItemsFormProperties>({
			details: new FormControl<string | null | undefined>(undefined),
			heading: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<GetCampaignsIdSendChecklistReturnItemsType | null | undefined>(undefined),
		});

	}

	export enum GetCampaignsIdSendChecklistReturnItemsType { success = 0, warning = 1, error = 2 }

	export interface GetConnectedSitesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetConnectedSitesReturn_links?: Array<GetConnectedSitesReturn_links>;

		/** An array of objects, each representing a connected site. */
		GetConnectedSitesReturnSites?: Array<GetConnectedSitesReturnSites>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetConnectedSitesReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetConnectedSitesReturnFormGroup() {
		return new FormGroup<GetConnectedSitesReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConnectedSitesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConnectedSitesReturn_linksFormGroup() {
		return new FormGroup<GetConnectedSitesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesReturnSites {

		/** A list of link types and descriptions for the API schema documents. */
		GetConnectedSitesReturnSites_links?: Array<GetConnectedSitesReturnSites_links>;

		/** The date and time the connected site was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The connected site domain. */
		domain?: string | null;

		/** The unique identifier for the site. */
		foreign_id?: string | null;

		/** The platform of the connected site. */
		platform?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: GetConnectedSitesReturnSitesSite_script;

		/** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
		store_id?: string | null;

		/** The date and time the connected site was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetConnectedSitesReturnSitesFormProperties {

		/** The date and time the connected site was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The connected site domain. */
		domain: FormControl<string | null | undefined>,

		/** The unique identifier for the site. */
		foreign_id: FormControl<string | null | undefined>,

		/** The platform of the connected site. */
		platform: FormControl<string | null | undefined>,

		/** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
		store_id: FormControl<string | null | undefined>,

		/** The date and time the connected site was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetConnectedSitesReturnSitesFormGroup() {
		return new FormGroup<GetConnectedSitesReturnSitesFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			foreign_id: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesReturnSites_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConnectedSitesReturnSites_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConnectedSitesReturnSites_linksFormGroup() {
		return new FormGroup<GetConnectedSitesReturnSites_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesReturnSitesSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface GetConnectedSitesReturnSitesSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetConnectedSitesReturnSitesSite_scriptFormGroup() {
		return new FormGroup<GetConnectedSitesReturnSitesSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostConnectedSitesPostBody {

		/**
		 * The connected site domain.
		 * Required
		 */
		domain: string;

		/**
		 * The unique identifier for the site.
		 * Required
		 */
		foreign_id: string;
	}
	export interface PostConnectedSitesPostBodyFormProperties {

		/**
		 * The connected site domain.
		 * Required
		 */
		domain: FormControl<string | null | undefined>,

		/**
		 * The unique identifier for the site.
		 * Required
		 */
		foreign_id: FormControl<string | null | undefined>,
	}
	export function CreatePostConnectedSitesPostBodyFormGroup() {
		return new FormGroup<PostConnectedSitesPostBodyFormProperties>({
			domain: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostConnectedSitesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostConnectedSitesReturn_links?: Array<PostConnectedSitesReturn_links>;

		/** The date and time the connected site was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The connected site domain. */
		domain?: string | null;

		/** The unique identifier for the site. */
		foreign_id?: string | null;

		/** The platform of the connected site. */
		platform?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: PostConnectedSitesReturnSite_script;

		/** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
		store_id?: string | null;

		/** The date and time the connected site was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostConnectedSitesReturnFormProperties {

		/** The date and time the connected site was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The connected site domain. */
		domain: FormControl<string | null | undefined>,

		/** The unique identifier for the site. */
		foreign_id: FormControl<string | null | undefined>,

		/** The platform of the connected site. */
		platform: FormControl<string | null | undefined>,

		/** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
		store_id: FormControl<string | null | undefined>,

		/** The date and time the connected site was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostConnectedSitesReturnFormGroup() {
		return new FormGroup<PostConnectedSitesReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			foreign_id: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostConnectedSitesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostConnectedSitesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostConnectedSitesReturn_linksFormGroup() {
		return new FormGroup<PostConnectedSitesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostConnectedSitesReturnSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface PostConnectedSitesReturnSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostConnectedSitesReturnSite_scriptFormGroup() {
		return new FormGroup<PostConnectedSitesReturnSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetConnectedSitesIdReturn_links?: Array<GetConnectedSitesIdReturn_links>;

		/** The date and time the connected site was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The connected site domain. */
		domain?: string | null;

		/** The unique identifier for the site. */
		foreign_id?: string | null;

		/** The platform of the connected site. */
		platform?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: GetConnectedSitesIdReturnSite_script;

		/** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
		store_id?: string | null;

		/** The date and time the connected site was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetConnectedSitesIdReturnFormProperties {

		/** The date and time the connected site was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The connected site domain. */
		domain: FormControl<string | null | undefined>,

		/** The unique identifier for the site. */
		foreign_id: FormControl<string | null | undefined>,

		/** The platform of the connected site. */
		platform: FormControl<string | null | undefined>,

		/** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
		store_id: FormControl<string | null | undefined>,

		/** The date and time the connected site was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetConnectedSitesIdReturnFormGroup() {
		return new FormGroup<GetConnectedSitesIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			foreign_id: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConnectedSitesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConnectedSitesIdReturn_linksFormGroup() {
		return new FormGroup<GetConnectedSitesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConnectedSitesIdReturnSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface GetConnectedSitesIdReturnSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetConnectedSitesIdReturnSite_scriptFormGroup() {
		return new FormGroup<GetConnectedSitesIdReturnSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetConversationsHas_unread_messages { true = 0, false = 1 }

	export interface GetConversationsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetConversationsReturn_links?: Array<GetConversationsReturn_links>;

		/** A list of conversations. */
		GetConversationsReturnConversations?: Array<GetConversationsReturnConversations>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetConversationsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetConversationsReturnFormGroup() {
		return new FormGroup<GetConversationsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetConversationsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConversationsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConversationsReturn_linksFormGroup() {
		return new FormGroup<GetConversationsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConversationsReturnConversations {

		/** A list of link types and descriptions for the API schema documents. */
		GetConversationsReturnConversations_links?: Array<GetConversationsReturnConversations_links>;

		/** The unique identifier of the campaign for this conversation. */
		campaign_id?: string | null;

		/** A label representing the email of the sender of this message. */
		from_email?: string | null;

		/** A label representing the sender of this message. */
		from_label?: string | null;

		/** A string that uniquely identifies this conversation. */
		id?: string | null;

		/** The most recent message in the conversation. */
		last_message?: GetConversationsReturnConversationsLast_message;

		/** The unique identifier of the list for this conversation. */
		list_id?: string | null;

		/** The total number of messages in this conversation. */
		message_count?: number | null;

		/** The subject of the message. */
		subject?: string | null;

		/** The number of unread messages in this conversation. */
		unread_messages?: number | null;
	}
	export interface GetConversationsReturnConversationsFormProperties {

		/** The unique identifier of the campaign for this conversation. */
		campaign_id: FormControl<string | null | undefined>,

		/** A label representing the email of the sender of this message. */
		from_email: FormControl<string | null | undefined>,

		/** A label representing the sender of this message. */
		from_label: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this conversation. */
		id: FormControl<string | null | undefined>,

		/** The unique identifier of the list for this conversation. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of messages in this conversation. */
		message_count: FormControl<number | null | undefined>,

		/** The subject of the message. */
		subject: FormControl<string | null | undefined>,

		/** The number of unread messages in this conversation. */
		unread_messages: FormControl<number | null | undefined>,
	}
	export function CreateGetConversationsReturnConversationsFormGroup() {
		return new FormGroup<GetConversationsReturnConversationsFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			from_email: new FormControl<string | null | undefined>(undefined),
			from_label: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			message_count: new FormControl<number | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
			unread_messages: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetConversationsReturnConversations_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConversationsReturnConversations_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConversationsReturnConversations_linksFormGroup() {
		return new FormGroup<GetConversationsReturnConversations_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConversationsReturnConversationsLast_message {

		/** A label representing the email of the sender of this message. */
		from_email?: string | null;

		/** A label representing the sender of this message. */
		from_label?: string | null;

		/** The plain-text content of the message. */
		message?: string | null;

		/** Whether this message has been marked as read. */
		read?: boolean | null;

		/** The subject of this message. */
		subject?: string | null;

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp?: Date | null;
	}
	export interface GetConversationsReturnConversationsLast_messageFormProperties {

		/** A label representing the email of the sender of this message. */
		from_email: FormControl<string | null | undefined>,

		/** A label representing the sender of this message. */
		from_label: FormControl<string | null | undefined>,

		/** The plain-text content of the message. */
		message: FormControl<string | null | undefined>,

		/** Whether this message has been marked as read. */
		read: FormControl<boolean | null | undefined>,

		/** The subject of this message. */
		subject: FormControl<string | null | undefined>,

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateGetConversationsReturnConversationsLast_messageFormGroup() {
		return new FormGroup<GetConversationsReturnConversationsLast_messageFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined),
			from_label: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			read: new FormControl<boolean | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetConversationsIdReturn_links?: Array<GetConversationsIdReturn_links>;

		/** The unique identifier of the campaign for this conversation. */
		campaign_id?: string | null;

		/** A label representing the email of the sender of this message. */
		from_email?: string | null;

		/** A label representing the sender of this message. */
		from_label?: string | null;

		/** A string that uniquely identifies this conversation. */
		id?: string | null;

		/** The most recent message in the conversation. */
		last_message?: GetConversationsIdReturnLast_message;

		/** The unique identifier of the list for this conversation. */
		list_id?: string | null;

		/** The total number of messages in this conversation. */
		message_count?: number | null;

		/** The subject of the message. */
		subject?: string | null;

		/** The number of unread messages in this conversation. */
		unread_messages?: number | null;
	}
	export interface GetConversationsIdReturnFormProperties {

		/** The unique identifier of the campaign for this conversation. */
		campaign_id: FormControl<string | null | undefined>,

		/** A label representing the email of the sender of this message. */
		from_email: FormControl<string | null | undefined>,

		/** A label representing the sender of this message. */
		from_label: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this conversation. */
		id: FormControl<string | null | undefined>,

		/** The unique identifier of the list for this conversation. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of messages in this conversation. */
		message_count: FormControl<number | null | undefined>,

		/** The subject of the message. */
		subject: FormControl<string | null | undefined>,

		/** The number of unread messages in this conversation. */
		unread_messages: FormControl<number | null | undefined>,
	}
	export function CreateGetConversationsIdReturnFormGroup() {
		return new FormGroup<GetConversationsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			from_email: new FormControl<string | null | undefined>(undefined),
			from_label: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			message_count: new FormControl<number | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
			unread_messages: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConversationsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConversationsIdReturn_linksFormGroup() {
		return new FormGroup<GetConversationsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdReturnLast_message {

		/** A label representing the email of the sender of this message. */
		from_email?: string | null;

		/** A label representing the sender of this message. */
		from_label?: string | null;

		/** The plain-text content of the message. */
		message?: string | null;

		/** Whether this message has been marked as read. */
		read?: boolean | null;

		/** The subject of this message. */
		subject?: string | null;

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp?: Date | null;
	}
	export interface GetConversationsIdReturnLast_messageFormProperties {

		/** A label representing the email of the sender of this message. */
		from_email: FormControl<string | null | undefined>,

		/** A label representing the sender of this message. */
		from_label: FormControl<string | null | undefined>,

		/** The plain-text content of the message. */
		message: FormControl<string | null | undefined>,

		/** Whether this message has been marked as read. */
		read: FormControl<boolean | null | undefined>,

		/** The subject of this message. */
		subject: FormControl<string | null | undefined>,

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateGetConversationsIdReturnLast_messageFormGroup() {
		return new FormGroup<GetConversationsIdReturnLast_messageFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined),
			from_label: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			read: new FormControl<boolean | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdMessagesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetConversationsIdMessagesReturn_links?: Array<GetConversationsIdMessagesReturn_links>;

		/** A string that identifies this conversation. */
		conversation_id?: string | null;

		/** An array of objects, each representing a conversation messages resources. */
		GetConversationsIdMessagesReturnConversation_messages?: Array<GetConversationsIdMessagesReturnConversation_messages>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetConversationsIdMessagesReturnFormProperties {

		/** A string that identifies this conversation. */
		conversation_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetConversationsIdMessagesReturnFormGroup() {
		return new FormGroup<GetConversationsIdMessagesReturnFormProperties>({
			conversation_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdMessagesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConversationsIdMessagesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConversationsIdMessagesReturn_linksFormGroup() {
		return new FormGroup<GetConversationsIdMessagesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdMessagesReturnConversation_messages {

		/** A list of link types and descriptions for the API schema documents. */
		GetConversationsIdMessagesReturnConversation_messages_links?: Array<GetConversationsIdMessagesReturnConversation_messages_links>;

		/** A string that identifies this message's conversation */
		conversation_id?: string | null;

		/** A label representing the email of the sender of this message */
		from_email?: string | null;

		/** A label representing the sender of this message */
		from_label?: string | null;

		/** A string that uniquely identifies this message */
		id?: string | null;

		/** The list's web ID */
		list_id?: number | null;

		/** The plain-text content of the message */
		message?: string | null;

		/** Whether this message has been marked as read */
		read?: boolean | null;

		/** The subject of this message */
		subject?: string | null;

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp?: Date | null;
	}
	export interface GetConversationsIdMessagesReturnConversation_messagesFormProperties {

		/** A string that identifies this message's conversation */
		conversation_id: FormControl<string | null | undefined>,

		/** A label representing the email of the sender of this message */
		from_email: FormControl<string | null | undefined>,

		/** A label representing the sender of this message */
		from_label: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this message */
		id: FormControl<string | null | undefined>,

		/** The list's web ID */
		list_id: FormControl<number | null | undefined>,

		/** The plain-text content of the message */
		message: FormControl<string | null | undefined>,

		/** Whether this message has been marked as read */
		read: FormControl<boolean | null | undefined>,

		/** The subject of this message */
		subject: FormControl<string | null | undefined>,

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateGetConversationsIdMessagesReturnConversation_messagesFormGroup() {
		return new FormGroup<GetConversationsIdMessagesReturnConversation_messagesFormProperties>({
			conversation_id: new FormControl<string | null | undefined>(undefined),
			from_email: new FormControl<string | null | undefined>(undefined),
			from_label: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			read: new FormControl<boolean | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdMessagesReturnConversation_messages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConversationsIdMessagesReturnConversation_messages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConversationsIdMessagesReturnConversation_messages_linksFormGroup() {
		return new FormGroup<GetConversationsIdMessagesReturnConversation_messages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdMessagesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetConversationsIdMessagesIdReturn_links?: Array<GetConversationsIdMessagesIdReturn_links>;

		/** A string that identifies this message's conversation */
		conversation_id?: string | null;

		/** A label representing the email of the sender of this message */
		from_email?: string | null;

		/** A label representing the sender of this message */
		from_label?: string | null;

		/** A string that uniquely identifies this message */
		id?: string | null;

		/** The list's web ID */
		list_id?: number | null;

		/** The plain-text content of the message */
		message?: string | null;

		/** Whether this message has been marked as read */
		read?: boolean | null;

		/** The subject of this message */
		subject?: string | null;

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp?: Date | null;
	}
	export interface GetConversationsIdMessagesIdReturnFormProperties {

		/** A string that identifies this message's conversation */
		conversation_id: FormControl<string | null | undefined>,

		/** A label representing the email of the sender of this message */
		from_email: FormControl<string | null | undefined>,

		/** A label representing the sender of this message */
		from_label: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this message */
		id: FormControl<string | null | undefined>,

		/** The list's web ID */
		list_id: FormControl<number | null | undefined>,

		/** The plain-text content of the message */
		message: FormControl<string | null | undefined>,

		/** Whether this message has been marked as read */
		read: FormControl<boolean | null | undefined>,

		/** The subject of this message */
		subject: FormControl<string | null | undefined>,

		/** The date and time the message was either sent or received in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateGetConversationsIdMessagesIdReturnFormGroup() {
		return new FormGroup<GetConversationsIdMessagesIdReturnFormProperties>({
			conversation_id: new FormControl<string | null | undefined>(undefined),
			from_email: new FormControl<string | null | undefined>(undefined),
			from_label: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			read: new FormControl<boolean | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetConversationsIdMessagesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetConversationsIdMessagesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetConversationsIdMessagesIdReturn_linksFormGroup() {
		return new FormGroup<GetConversationsIdMessagesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostCustomerJourneysJourneysIdStepsIdActionsTriggerPostBody {

		/**
		 * The list member's email address.
		 * Required
		 */
		email_address: string;
	}
	export interface PostCustomerJourneysJourneysIdStepsIdActionsTriggerPostBodyFormProperties {

		/**
		 * The list member's email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,
	}
	export function CreatePostCustomerJourneysJourneysIdStepsIdActionsTriggerPostBodyFormGroup() {
		return new FormGroup<PostCustomerJourneysJourneysIdStepsIdActionsTriggerPostBodyFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetEcommerceOrdersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceOrdersReturn_links?: Array<GetEcommerceOrdersReturn_links>;

		/** An array of objects, each representing an order resource. */
		GetEcommerceOrdersReturnOrders?: Array<GetEcommerceOrdersReturnOrders>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceOrdersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceOrdersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrders {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceOrdersReturnOrders_links?: Array<GetEcommerceOrdersReturnOrders_links>;

		/** The billing address for the order. */
		billing_address?: GetEcommerceOrdersReturnOrdersBilling_address;

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: GetEcommerceOrdersReturnOrdersCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/** A unique identifier for the order. */
		id?: string | null;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/** An array of the order's line items. */
		GetEcommerceOrdersReturnOrdersLines?: Array<GetEcommerceOrdersReturnOrdersLines>;

		/** The order total associated with an order. */
		order_total?: number | null;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: GetEcommerceOrdersReturnOrdersOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order */
		GetEcommerceOrdersReturnOrdersPromos?: Array<GetEcommerceOrdersReturnOrdersPromos>;

		/** The shipping address for the order. */
		shipping_address?: GetEcommerceOrdersReturnOrdersShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The unique identifier for the store. */
		store_id?: string | null;

		/** The tax total associated with an order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface GetEcommerceOrdersReturnOrdersFormProperties {

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/** A unique identifier for the order. */
		id: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/** The order total associated with an order. */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The unique identifier for the store. */
		store_id: FormControl<string | null | undefined>,

		/** The tax total associated with an order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrders_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrders_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrders_linksFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrders_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with an order's billing address. */
		name?: string | null;

		/** The phone number for the billing address. */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province or state in the billing address. */
		province_code?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrdersBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersBilling_addressFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceOrdersReturnOrdersCustomer_links?: Array<GetEcommerceOrdersReturnOrdersCustomer_links>;

		/** The customer's address. */
		address?: GetEcommerceOrdersReturnOrdersCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceOrdersReturnOrdersCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersCustomerFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrdersCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersCustomer_linksFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrdersCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersCustomerAddressFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceOrdersReturnOrdersLines_links?: Array<GetEcommerceOrdersReturnOrdersLines_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface GetEcommerceOrdersReturnOrdersLinesFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersLinesFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrdersLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersLines_linksFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;

		/** The name for the outreach. */
		name?: string | null;

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time?: Date | null;

		/** The type of the outreach. */
		type?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrdersOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,

		/** The name for the outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** The type of the outreach. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersOutreachFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceOrdersReturnOrdersPromos {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted?: number | null;

		/** The Promo Code */
		code?: string | null;

		/** Type of discount. For free shipping set type to fixed */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;
	}
	export interface GetEcommerceOrdersReturnOrdersPromosFormProperties {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted: FormControl<number | null | undefined>,

		/** The Promo Code */
		code: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersPromosFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined),
			code: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
		});

	}

	export enum GetEcommerceOrdersReturnOrdersPromosType { fixed = 0, percentage = 1 }

	export interface GetEcommerceOrdersReturnOrdersShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with an order's shipping address. */
		company?: string | null;

		/** The country in the order's shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address */
		phone?: string | null;

		/** The postal or zip code in the order's shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code?: string | null;
	}
	export interface GetEcommerceOrdersReturnOrdersShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with an order's shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the order's shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the order's shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceOrdersReturnOrdersShipping_addressFormGroup() {
		return new FormGroup<GetEcommerceOrdersReturnOrdersShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetEcommerceOrdersReturnOrdersTracking_code { prec = 0 }

	export interface GetEcommerceStoresReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresReturn_links?: Array<GetEcommerceStoresReturn_links>;

		/** An array of objects, each representing a store. */
		GetEcommerceStoresReturnStores?: Array<GetEcommerceStoresReturnStores>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturnStores {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresReturnStores_links?: Array<GetEcommerceStoresReturnStores_links>;

		/** The store address. */
		address?: GetEcommerceStoresReturnStoresAddress;

		/** Details for the automations attached to this store. */
		automations?: GetEcommerceStoresReturnStoresAutomations;

		/** The Connected Site associated with the store. */
		connected_site?: GetEcommerceStoresReturnStoresConnected_site;

		/** The date and time the store was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The store domain.  The store domain must be unique within a user account. */
		domain?: string | null;

		/** The email address for the store. */
		email_address?: string | null;

		/** The unique identifier for the store. */
		id?: string | null;

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing?: boolean | null;

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id?: string | null;

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format?: string | null;

		/** The name of the store. */
		name?: string | null;

		/** The store phone number. */
		phone?: string | null;

		/** The e-commerce platform of the store. */
		platform?: string | null;

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale?: string | null;

		/** The timezone for the store. */
		timezone?: string | null;

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresReturnStoresFormProperties {

		/** The date and time the store was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The store domain.  The store domain must be unique within a user account. */
		domain: FormControl<string | null | undefined>,

		/** The email address for the store. */
		email_address: FormControl<string | null | undefined>,

		/** The unique identifier for the store. */
		id: FormControl<string | null | undefined>,

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing: FormControl<boolean | null | undefined>,

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format: FormControl<string | null | undefined>,

		/** The name of the store. */
		name: FormControl<string | null | undefined>,

		/** The store phone number. */
		phone: FormControl<string | null | undefined>,

		/** The e-commerce platform of the store. */
		platform: FormControl<string | null | undefined>,

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale: FormControl<string | null | undefined>,

		/** The timezone for the store. */
		timezone: FormControl<string | null | undefined>,

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStoresFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			money_format: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			primary_locale: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturnStores_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresReturnStores_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStores_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStores_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturnStoresAddress {

		/** The store's mailing address. */
		address1?: string | null;

		/** An additional field for the store's mailing address. */
		address2?: string | null;

		/** The city the store is located in. */
		city?: string | null;

		/** The store's country. */
		country?: string | null;

		/** The two-letter code for to the store's country. */
		country_code?: string | null;

		/** The latitude of the store location. */
		latitude?: number | null;

		/** The longitude of the store location. */
		longitude?: number | null;

		/** The store's postal or zip code. */
		postal_code?: string | null;

		/** The store's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the store's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresReturnStoresAddressFormProperties {

		/** The store's mailing address. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the store's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the store is located in. */
		city: FormControl<string | null | undefined>,

		/** The store's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for to the store's country. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude of the store location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the store location. */
		longitude: FormControl<number | null | undefined>,

		/** The store's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The store's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the store's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStoresAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturnStoresAutomations {

		/** abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web. */
		abandoned_browse?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browse;

		/** abandonedCart automation details. */
		abandoned_cart?: GetEcommerceStoresReturnStoresAutomationsAbandoned_cart;
	}
	export interface GetEcommerceStoresReturnStoresAutomationsFormProperties {
	}
	export function CreateGetEcommerceStoresReturnStoresAutomationsFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresAutomationsFormProperties>({
		});

	}

	export interface GetEcommerceStoresReturnStoresAutomationsAbandoned_browse {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedBrowse automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface GetEcommerceStoresReturnStoresAutomationsAbandoned_browseFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedBrowse automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStoresAutomationsAbandoned_browseFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export enum GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus { save = 0, sending = 1, paused = 2 }

	export interface GetEcommerceStoresReturnStoresAutomationsAbandoned_cart {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedCart automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedCart automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface GetEcommerceStoresReturnStoresAutomationsAbandoned_cartFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedCart automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedCart automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStoresAutomationsAbandoned_cartFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresAutomationsAbandoned_cartFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturnStoresConnected_site {

		/** The unique identifier for the connected site. */
		site_foreign_id?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: GetEcommerceStoresReturnStoresConnected_siteSite_script;
	}
	export interface GetEcommerceStoresReturnStoresConnected_siteFormProperties {

		/** The unique identifier for the connected site. */
		site_foreign_id: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStoresConnected_siteFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresConnected_siteFormProperties>({
			site_foreign_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresReturnStoresConnected_siteSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface GetEcommerceStoresReturnStoresConnected_siteSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresReturnStoresConnected_siteSite_scriptFormGroup() {
		return new FormGroup<GetEcommerceStoresReturnStoresConnected_siteSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresPostBody {

		/** The store address. */
		address?: PostEcommerceStoresPostBodyAddress;

		/**
		 * The three-letter ISO 4217 code for the currency that the store accepts.
		 * Required
		 */
		currency_code: string;

		/** The store domain. This parameter is required for Connected Sites and Google Ads. */
		domain?: string | null;

		/** The email address for the store. */
		email_address?: string | null;

		/**
		 * The unique identifier for the store.
		 * Required
		 */
		id: string;

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing?: boolean | null;

		/**
		 * The unique identifier for the list associated with the store. The `list_id` for a specific store cannot change.
		 * Required
		 */
		list_id: string;

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format?: string | null;

		/**
		 * The name of the store.
		 * Required
		 */
		name: string;

		/** The store phone number. */
		phone?: string | null;

		/** The e-commerce platform of the store. */
		platform?: string | null;

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale?: string | null;

		/** The timezone for the store. */
		timezone?: string | null;
	}
	export interface PostEcommerceStoresPostBodyFormProperties {

		/**
		 * The three-letter ISO 4217 code for the currency that the store accepts.
		 * Required
		 */
		currency_code: FormControl<string | null | undefined>,

		/** The store domain. This parameter is required for Connected Sites and Google Ads. */
		domain: FormControl<string | null | undefined>,

		/** The email address for the store. */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The unique identifier for the store.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing: FormControl<boolean | null | undefined>,

		/**
		 * The unique identifier for the list associated with the store. The `list_id` for a specific store cannot change.
		 * Required
		 */
		list_id: FormControl<string | null | undefined>,

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format: FormControl<string | null | undefined>,

		/**
		 * The name of the store.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The store phone number. */
		phone: FormControl<string | null | undefined>,

		/** The e-commerce platform of the store. */
		platform: FormControl<string | null | undefined>,

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale: FormControl<string | null | undefined>,

		/** The timezone for the store. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresPostBodyFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			domain: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			money_format: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			primary_locale: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresPostBodyAddress {

		/** The store's mailing address. */
		address1?: string | null;

		/** An additional field for the store's mailing address. */
		address2?: string | null;

		/** The city the store is located in. */
		city?: string | null;

		/** The store's country. */
		country?: string | null;

		/** The two-letter code for to the store's country. */
		country_code?: string | null;

		/** The latitude of the store location. */
		latitude?: number | null;

		/** The longitude of the store location. */
		longitude?: number | null;

		/** The store's postal or zip code. */
		postal_code?: string | null;

		/** The store's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the store's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresPostBodyAddressFormProperties {

		/** The store's mailing address. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the store's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the store is located in. */
		city: FormControl<string | null | undefined>,

		/** The store's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for to the store's country. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude of the store location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the store location. */
		longitude: FormControl<number | null | undefined>,

		/** The store's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The store's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the store's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresPostBodyAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresPostBodyAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresReturn_links?: Array<PostEcommerceStoresReturn_links>;

		/** The store address. */
		address?: PostEcommerceStoresReturnAddress;

		/** Details for the automations attached to this store. */
		automations?: PostEcommerceStoresReturnAutomations;

		/** The Connected Site associated with the store. */
		connected_site?: PostEcommerceStoresReturnConnected_site;

		/** The date and time the store was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The store domain.  The store domain must be unique within a user account. */
		domain?: string | null;

		/** The email address for the store. */
		email_address?: string | null;

		/** The unique identifier for the store. */
		id?: string | null;

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing?: boolean | null;

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id?: string | null;

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format?: string | null;

		/** The name of the store. */
		name?: string | null;

		/** The store phone number. */
		phone?: string | null;

		/** The e-commerce platform of the store. */
		platform?: string | null;

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale?: string | null;

		/** The timezone for the store. */
		timezone?: string | null;

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostEcommerceStoresReturnFormProperties {

		/** The date and time the store was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The store domain.  The store domain must be unique within a user account. */
		domain: FormControl<string | null | undefined>,

		/** The email address for the store. */
		email_address: FormControl<string | null | undefined>,

		/** The unique identifier for the store. */
		id: FormControl<string | null | undefined>,

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing: FormControl<boolean | null | undefined>,

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format: FormControl<string | null | undefined>,

		/** The name of the store. */
		name: FormControl<string | null | undefined>,

		/** The store phone number. */
		phone: FormControl<string | null | undefined>,

		/** The e-commerce platform of the store. */
		platform: FormControl<string | null | undefined>,

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale: FormControl<string | null | undefined>,

		/** The timezone for the store. */
		timezone: FormControl<string | null | undefined>,

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			money_format: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			primary_locale: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturnAddress {

		/** The store's mailing address. */
		address1?: string | null;

		/** An additional field for the store's mailing address. */
		address2?: string | null;

		/** The city the store is located in. */
		city?: string | null;

		/** The store's country. */
		country?: string | null;

		/** The two-letter code for to the store's country. */
		country_code?: string | null;

		/** The latitude of the store location. */
		latitude?: number | null;

		/** The longitude of the store location. */
		longitude?: number | null;

		/** The store's postal or zip code. */
		postal_code?: string | null;

		/** The store's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the store's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresReturnAddressFormProperties {

		/** The store's mailing address. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the store's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the store is located in. */
		city: FormControl<string | null | undefined>,

		/** The store's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for to the store's country. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude of the store location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the store location. */
		longitude: FormControl<number | null | undefined>,

		/** The store's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The store's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the store's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturnAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturnAutomations {

		/** abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web. */
		abandoned_browse?: PostEcommerceStoresReturnAutomationsAbandoned_browse;

		/** abandonedCart automation details. */
		abandoned_cart?: PostEcommerceStoresReturnAutomationsAbandoned_cart;
	}
	export interface PostEcommerceStoresReturnAutomationsFormProperties {
	}
	export function CreatePostEcommerceStoresReturnAutomationsFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnAutomationsFormProperties>({
		});

	}

	export interface PostEcommerceStoresReturnAutomationsAbandoned_browse {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedBrowse automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface PostEcommerceStoresReturnAutomationsAbandoned_browseFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedBrowse automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturnAutomationsAbandoned_browseFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnAutomationsAbandoned_browseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturnAutomationsAbandoned_cart {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedCart automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedCart automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface PostEcommerceStoresReturnAutomationsAbandoned_cartFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedCart automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedCart automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturnAutomationsAbandoned_cartFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnAutomationsAbandoned_cartFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturnConnected_site {

		/** The unique identifier for the connected site. */
		site_foreign_id?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: PostEcommerceStoresReturnConnected_siteSite_script;
	}
	export interface PostEcommerceStoresReturnConnected_siteFormProperties {

		/** The unique identifier for the connected site. */
		site_foreign_id: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturnConnected_siteFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnConnected_siteFormProperties>({
			site_foreign_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresReturnConnected_siteSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface PostEcommerceStoresReturnConnected_siteSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresReturnConnected_siteSite_scriptFormGroup() {
		return new FormGroup<PostEcommerceStoresReturnConnected_siteSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdReturn_links?: Array<GetEcommerceStoresIdReturn_links>;

		/** The store address. */
		address?: GetEcommerceStoresIdReturnAddress;

		/** Details for the automations attached to this store. */
		automations?: GetEcommerceStoresIdReturnAutomations;

		/** The Connected Site associated with the store. */
		connected_site?: GetEcommerceStoresIdReturnConnected_site;

		/** The date and time the store was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The store domain.  The store domain must be unique within a user account. */
		domain?: string | null;

		/** The email address for the store. */
		email_address?: string | null;

		/** The unique identifier for the store. */
		id?: string | null;

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing?: boolean | null;

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id?: string | null;

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format?: string | null;

		/** The name of the store. */
		name?: string | null;

		/** The store phone number. */
		phone?: string | null;

		/** The e-commerce platform of the store. */
		platform?: string | null;

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale?: string | null;

		/** The timezone for the store. */
		timezone?: string | null;

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdReturnFormProperties {

		/** The date and time the store was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The store domain.  The store domain must be unique within a user account. */
		domain: FormControl<string | null | undefined>,

		/** The email address for the store. */
		email_address: FormControl<string | null | undefined>,

		/** The unique identifier for the store. */
		id: FormControl<string | null | undefined>,

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing: FormControl<boolean | null | undefined>,

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format: FormControl<string | null | undefined>,

		/** The name of the store. */
		name: FormControl<string | null | undefined>,

		/** The store phone number. */
		phone: FormControl<string | null | undefined>,

		/** The e-commerce platform of the store. */
		platform: FormControl<string | null | undefined>,

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale: FormControl<string | null | undefined>,

		/** The timezone for the store. */
		timezone: FormControl<string | null | undefined>,

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			money_format: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			primary_locale: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturnAddress {

		/** The store's mailing address. */
		address1?: string | null;

		/** An additional field for the store's mailing address. */
		address2?: string | null;

		/** The city the store is located in. */
		city?: string | null;

		/** The store's country. */
		country?: string | null;

		/** The two-letter code for to the store's country. */
		country_code?: string | null;

		/** The latitude of the store location. */
		latitude?: number | null;

		/** The longitude of the store location. */
		longitude?: number | null;

		/** The store's postal or zip code. */
		postal_code?: string | null;

		/** The store's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the store's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdReturnAddressFormProperties {

		/** The store's mailing address. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the store's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the store is located in. */
		city: FormControl<string | null | undefined>,

		/** The store's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for to the store's country. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude of the store location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the store location. */
		longitude: FormControl<number | null | undefined>,

		/** The store's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The store's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the store's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturnAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturnAutomations {

		/** abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web. */
		abandoned_browse?: GetEcommerceStoresIdReturnAutomationsAbandoned_browse;

		/** abandonedCart automation details. */
		abandoned_cart?: GetEcommerceStoresIdReturnAutomationsAbandoned_cart;
	}
	export interface GetEcommerceStoresIdReturnAutomationsFormProperties {
	}
	export function CreateGetEcommerceStoresIdReturnAutomationsFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnAutomationsFormProperties>({
		});

	}

	export interface GetEcommerceStoresIdReturnAutomationsAbandoned_browse {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedBrowse automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface GetEcommerceStoresIdReturnAutomationsAbandoned_browseFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedBrowse automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturnAutomationsAbandoned_browseFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnAutomationsAbandoned_browseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturnAutomationsAbandoned_cart {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedCart automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedCart automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface GetEcommerceStoresIdReturnAutomationsAbandoned_cartFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedCart automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedCart automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturnAutomationsAbandoned_cartFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnAutomationsAbandoned_cartFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturnConnected_site {

		/** The unique identifier for the connected site. */
		site_foreign_id?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: GetEcommerceStoresIdReturnConnected_siteSite_script;
	}
	export interface GetEcommerceStoresIdReturnConnected_siteFormProperties {

		/** The unique identifier for the connected site. */
		site_foreign_id: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturnConnected_siteFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnConnected_siteFormProperties>({
			site_foreign_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdReturnConnected_siteSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface GetEcommerceStoresIdReturnConnected_siteSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdReturnConnected_siteSite_scriptFormGroup() {
		return new FormGroup<GetEcommerceStoresIdReturnConnected_siteSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPatchBody {

		/** The store address. */
		address?: PatchEcommerceStoresIdPatchBodyAddress;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The store domain. */
		domain?: string | null;

		/** The email address for the store. */
		email_address?: string | null;

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing?: boolean | null;

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format?: string | null;

		/** The name of the store. */
		name?: string | null;

		/** The store phone number. */
		phone?: string | null;

		/** The e-commerce platform of the store. */
		platform?: string | null;

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale?: string | null;

		/** The timezone for the store. */
		timezone?: string | null;
	}
	export interface PatchEcommerceStoresIdPatchBodyFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The store domain. */
		domain: FormControl<string | null | undefined>,

		/** The email address for the store. */
		email_address: FormControl<string | null | undefined>,

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing: FormControl<boolean | null | undefined>,

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format: FormControl<string | null | undefined>,

		/** The name of the store. */
		name: FormControl<string | null | undefined>,

		/** The store phone number. */
		phone: FormControl<string | null | undefined>,

		/** The e-commerce platform of the store. */
		platform: FormControl<string | null | undefined>,

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale: FormControl<string | null | undefined>,

		/** The timezone for the store. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPatchBodyFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			money_format: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			primary_locale: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPatchBodyAddress {

		/** The store's mailing address. */
		address1?: string | null;

		/** An additional field for the store's mailing address. */
		address2?: string | null;

		/** The city the store is located in. */
		city?: string | null;

		/** The store's country. */
		country?: string | null;

		/** The two-letter code for to the store's country. */
		country_code?: string | null;

		/** The latitude of the store location. */
		latitude?: number | null;

		/** The longitude of the store location. */
		longitude?: number | null;

		/** The store's postal or zip code. */
		postal_code?: string | null;

		/** The store's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the store's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdPatchBodyAddressFormProperties {

		/** The store's mailing address. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the store's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the store is located in. */
		city: FormControl<string | null | undefined>,

		/** The store's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for to the store's country. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude of the store location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the store location. */
		longitude: FormControl<number | null | undefined>,

		/** The store's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The store's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the store's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPatchBodyAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPatchBodyAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdReturn_links?: Array<PatchEcommerceStoresIdReturn_links>;

		/** The store address. */
		address?: PatchEcommerceStoresIdReturnAddress;

		/** Details for the automations attached to this store. */
		automations?: PatchEcommerceStoresIdReturnAutomations;

		/** The Connected Site associated with the store. */
		connected_site?: PatchEcommerceStoresIdReturnConnected_site;

		/** The date and time the store was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The store domain.  The store domain must be unique within a user account. */
		domain?: string | null;

		/** The email address for the store. */
		email_address?: string | null;

		/** The unique identifier for the store. */
		id?: string | null;

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing?: boolean | null;

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id?: string | null;

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format?: string | null;

		/** The name of the store. */
		name?: string | null;

		/** The store phone number. */
		phone?: string | null;

		/** The e-commerce platform of the store. */
		platform?: string | null;

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale?: string | null;

		/** The timezone for the store. */
		timezone?: string | null;

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchEcommerceStoresIdReturnFormProperties {

		/** The date and time the store was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The store domain.  The store domain must be unique within a user account. */
		domain: FormControl<string | null | undefined>,

		/** The email address for the store. */
		email_address: FormControl<string | null | undefined>,

		/** The unique identifier for the store. */
		id: FormControl<string | null | undefined>,

		/** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
		is_syncing: FormControl<boolean | null | undefined>,

		/** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list connected to the store, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The currency format for the store. For example: `$`, `£`, etc. */
		money_format: FormControl<string | null | undefined>,

		/** The name of the store. */
		name: FormControl<string | null | undefined>,

		/** The store phone number. */
		phone: FormControl<string | null | undefined>,

		/** The e-commerce platform of the store. */
		platform: FormControl<string | null | undefined>,

		/** The primary locale for the store. For example: `en`, `de`, etc. */
		primary_locale: FormControl<string | null | undefined>,

		/** The timezone for the store. */
		timezone: FormControl<string | null | undefined>,

		/** The date and time the store was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			money_format: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			primary_locale: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturnAddress {

		/** The store's mailing address. */
		address1?: string | null;

		/** An additional field for the store's mailing address. */
		address2?: string | null;

		/** The city the store is located in. */
		city?: string | null;

		/** The store's country. */
		country?: string | null;

		/** The two-letter code for to the store's country. */
		country_code?: string | null;

		/** The latitude of the store location. */
		latitude?: number | null;

		/** The longitude of the store location. */
		longitude?: number | null;

		/** The store's postal or zip code. */
		postal_code?: string | null;

		/** The store's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the store's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdReturnAddressFormProperties {

		/** The store's mailing address. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the store's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the store is located in. */
		city: FormControl<string | null | undefined>,

		/** The store's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for to the store's country. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude of the store location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the store location. */
		longitude: FormControl<number | null | undefined>,

		/** The store's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The store's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the store's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturnAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturnAutomations {

		/** abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web. */
		abandoned_browse?: PatchEcommerceStoresIdReturnAutomationsAbandoned_browse;

		/** abandonedCart automation details. */
		abandoned_cart?: PatchEcommerceStoresIdReturnAutomationsAbandoned_cart;
	}
	export interface PatchEcommerceStoresIdReturnAutomationsFormProperties {
	}
	export function CreatePatchEcommerceStoresIdReturnAutomationsFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnAutomationsFormProperties>({
		});

	}

	export interface PatchEcommerceStoresIdReturnAutomationsAbandoned_browse {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedBrowse automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface PatchEcommerceStoresIdReturnAutomationsAbandoned_browseFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedBrowse automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedBrowse automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturnAutomationsAbandoned_browseFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnAutomationsAbandoned_browseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturnAutomationsAbandoned_cart {

		/** Unique ID of automation parent campaign. */
		id?: string | null;

		/** Whether this store supports the abandonedCart automation. */
		is_supported?: boolean | null;

		/** Status of the abandonedCart automation. */
		status?: GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null;
	}
	export interface PatchEcommerceStoresIdReturnAutomationsAbandoned_cartFormProperties {

		/** Unique ID of automation parent campaign. */
		id: FormControl<string | null | undefined>,

		/** Whether this store supports the abandonedCart automation. */
		is_supported: FormControl<boolean | null | undefined>,

		/** Status of the abandonedCart automation. */
		status: FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturnAutomationsAbandoned_cartFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnAutomationsAbandoned_cartFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_supported: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetEcommerceStoresReturnStoresAutomationsAbandoned_browseStatus | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturnConnected_site {

		/** The unique identifier for the connected site. */
		site_foreign_id?: string | null;

		/** The script used to connect your site with Mailchimp. */
		site_script?: PatchEcommerceStoresIdReturnConnected_siteSite_script;
	}
	export interface PatchEcommerceStoresIdReturnConnected_siteFormProperties {

		/** The unique identifier for the connected site. */
		site_foreign_id: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturnConnected_siteFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnConnected_siteFormProperties>({
			site_foreign_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdReturnConnected_siteSite_script {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment?: string | null;

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url?: string | null;
	}
	export interface PatchEcommerceStoresIdReturnConnected_siteSite_scriptFormProperties {

		/** A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp. */
		fragment: FormControl<string | null | undefined>,

		/** The URL used for any integrations that offer built-in support for connected sites. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdReturnConnected_siteSite_scriptFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdReturnConnected_siteSite_scriptFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsReturn_links?: Array<GetEcommerceStoresIdCartsReturn_links>;

		/** An array of objects, each representing a cart. */
		GetEcommerceStoresIdCartsReturnCarts?: Array<GetEcommerceStoresIdCartsReturnCarts>;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdCartsReturnFormProperties {

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnFormProperties>({
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCarts {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsReturnCarts_links?: Array<GetEcommerceStoresIdCartsReturnCarts_links>;

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id?: string | null;

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url?: string | null;

		/** The date and time the cart was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: GetEcommerceStoresIdCartsReturnCartsCustomer;

		/** A unique identifier for the cart. */
		id?: string | null;

		/** An array of the cart's line items. */
		GetEcommerceStoresIdCartsReturnCartsLines?: Array<GetEcommerceStoresIdCartsReturnCartsLines>;

		/** The order total for the cart. */
		order_total?: number | null;

		/** The total tax for the cart. */
		tax_total?: number | null;

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCartsFormProperties {

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id: FormControl<string | null | undefined>,

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url: FormControl<string | null | undefined>,

		/** The date and time the cart was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code: FormControl<string | null | undefined>,

		/** A unique identifier for the cart. */
		id: FormControl<string | null | undefined>,

		/** The order total for the cart. */
		order_total: FormControl<number | null | undefined>,

		/** The total tax for the cart. */
		tax_total: FormControl<number | null | undefined>,

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCartsFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCartsFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			checkout_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCarts_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCarts_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCarts_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCarts_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCartsCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsReturnCartsCustomer_links?: Array<GetEcommerceStoresIdCartsReturnCartsCustomer_links>;

		/** The customer's address. */
		address?: GetEcommerceStoresIdCartsReturnCartsCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCartsCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCartsCustomerFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCartsCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCartsCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCartsCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCartsCustomer_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCartsCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCartsCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCartsCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCartsCustomerAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCartsCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCartsLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsReturnCartsLines_links?: Array<GetEcommerceStoresIdCartsReturnCartsLines_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCartsLinesFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCartsLinesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCartsLinesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsReturnCartsLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsReturnCartsLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsReturnCartsLines_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsReturnCartsLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsPostBody {

		/** A string that uniquely identifies the campaign for a cart. */
		campaign_id?: string | null;

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url?: string | null;

		/**
		 * The three-letter ISO 4217 code for the currency that the cart uses.
		 * Required
		 */
		currency_code: string;

		/**
		 * Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body.
		 * Required
		 */
		customer: PostEcommerceStoresIdCartsPostBodyCustomer;

		/**
		 * A unique identifier for the cart.
		 * Required
		 */
		id: string;

		/**
		 * An array of the cart's line items.
		 * Required
		 */
		PostEcommerceStoresIdCartsPostBodyLines: Array<PostEcommerceStoresIdCartsPostBodyLines>;

		/**
		 * The order total for the cart.
		 * Required
		 */
		order_total: number;

		/** The total tax for the cart. */
		tax_total?: number | null;
	}
	export interface PostEcommerceStoresIdCartsPostBodyFormProperties {

		/** A string that uniquely identifies the campaign for a cart. */
		campaign_id: FormControl<string | null | undefined>,

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url: FormControl<string | null | undefined>,

		/**
		 * The three-letter ISO 4217 code for the currency that the cart uses.
		 * Required
		 */
		currency_code: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the cart.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The order total for the cart.
		 * Required
		 */
		order_total: FormControl<number | null | undefined>,

		/** The total tax for the cart. */
		tax_total: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsPostBodyFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			checkout_url: new FormControl<string | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			order_total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			tax_total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsPostBodyCustomer {

		/** The customer's address. */
		address?: PostEcommerceStoresIdCartsPostBodyCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: string;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;
	}
	export interface PostEcommerceStoresIdCartsPostBodyCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsPostBodyCustomerFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsPostBodyCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsPostBodyCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdCartsPostBodyCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsPostBodyCustomerAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsPostBodyCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsPostBodyLines {

		/**
		 * A unique identifier for the cart line item.
		 * Required
		 */
		id: string;

		/**
		 * The price of a cart line item.
		 * Required
		 */
		price: number;

		/**
		 * A unique identifier for the product associated with the cart line item.
		 * Required
		 */
		product_id: string;

		/**
		 * A unique identifier for the product variant associated with the cart line item.
		 * Required
		 */
		product_variant_id: string;

		/**
		 * The quantity of a cart line item.
		 * Required
		 */
		quantity: number;
	}
	export interface PostEcommerceStoresIdCartsPostBodyLinesFormProperties {

		/**
		 * A unique identifier for the cart line item.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The price of a cart line item.
		 * Required
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the product associated with the cart line item.
		 * Required
		 */
		product_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product variant associated with the cart line item.
		 * Required
		 */
		product_variant_id: FormControl<string | null | undefined>,

		/**
		 * The quantity of a cart line item.
		 * Required
		 */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsPostBodyLinesFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsPostBodyLinesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			product_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			product_variant_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdCartsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdCartsReturn_links?: Array<PostEcommerceStoresIdCartsReturn_links>;

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id?: string | null;

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url?: string | null;

		/** The date and time the cart was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: PostEcommerceStoresIdCartsReturnCustomer;

		/** A unique identifier for the cart. */
		id?: string | null;

		/** An array of the cart's line items. */
		PostEcommerceStoresIdCartsReturnLines?: Array<PostEcommerceStoresIdCartsReturnLines>;

		/** The order total for the cart. */
		order_total?: number | null;

		/** The total tax for the cart. */
		tax_total?: number | null;

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostEcommerceStoresIdCartsReturnFormProperties {

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id: FormControl<string | null | undefined>,

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url: FormControl<string | null | undefined>,

		/** The date and time the cart was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code: FormControl<string | null | undefined>,

		/** A unique identifier for the cart. */
		id: FormControl<string | null | undefined>,

		/** The order total for the cart. */
		order_total: FormControl<number | null | undefined>,

		/** The total tax for the cart. */
		tax_total: FormControl<number | null | undefined>,

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			checkout_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdCartsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsReturnCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdCartsReturnCustomer_links?: Array<PostEcommerceStoresIdCartsReturnCustomer_links>;

		/** The customer's address. */
		address?: PostEcommerceStoresIdCartsReturnCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostEcommerceStoresIdCartsReturnCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturnCustomerFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturnCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsReturnCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdCartsReturnCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturnCustomer_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturnCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsReturnCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdCartsReturnCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturnCustomerAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturnCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdCartsReturnLines_links?: Array<PostEcommerceStoresIdCartsReturnLines_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface PostEcommerceStoresIdCartsReturnLinesFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturnLinesFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturnLinesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdCartsReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsReturnLines_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsIdReturn_links?: Array<GetEcommerceStoresIdCartsIdReturn_links>;

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id?: string | null;

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url?: string | null;

		/** The date and time the cart was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: GetEcommerceStoresIdCartsIdReturnCustomer;

		/** A unique identifier for the cart. */
		id?: string | null;

		/** An array of the cart's line items. */
		GetEcommerceStoresIdCartsIdReturnLines?: Array<GetEcommerceStoresIdCartsIdReturnLines>;

		/** The order total for the cart. */
		order_total?: number | null;

		/** The total tax for the cart. */
		tax_total?: number | null;

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturnFormProperties {

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id: FormControl<string | null | undefined>,

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url: FormControl<string | null | undefined>,

		/** The date and time the cart was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code: FormControl<string | null | undefined>,

		/** A unique identifier for the cart. */
		id: FormControl<string | null | undefined>,

		/** The order total for the cart. */
		order_total: FormControl<number | null | undefined>,

		/** The total tax for the cart. */
		tax_total: FormControl<number | null | undefined>,

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			checkout_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturnCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsIdReturnCustomer_links?: Array<GetEcommerceStoresIdCartsIdReturnCustomer_links>;

		/** The customer's address. */
		address?: GetEcommerceStoresIdCartsIdReturnCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturnCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturnCustomerFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturnCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturnCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturnCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturnCustomer_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturnCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturnCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturnCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturnCustomerAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturnCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsIdReturnLines_links?: Array<GetEcommerceStoresIdCartsIdReturnLines_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturnLinesFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturnLinesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturnLinesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdReturnLines_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdPatchBody {

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id?: string | null;

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url?: string | null;

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code?: string | null;

		/** Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body. */
		customer?: PatchEcommerceStoresIdCartsIdPatchBodyCustomer;

		/** An array of the cart's line items. */
		PatchEcommerceStoresIdCartsIdPatchBodyLines?: Array<PatchEcommerceStoresIdCartsIdPatchBodyLines>;

		/** The order total for the cart. */
		order_total?: number | null;

		/** The total tax for the cart. */
		tax_total?: number | null;
	}
	export interface PatchEcommerceStoresIdCartsIdPatchBodyFormProperties {

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id: FormControl<string | null | undefined>,

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url: FormControl<string | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code: FormControl<string | null | undefined>,

		/** The order total for the cart. */
		order_total: FormControl<number | null | undefined>,

		/** The total tax for the cart. */
		tax_total: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdPatchBodyFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			checkout_url: new FormControl<string | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdPatchBodyCustomer {

		/** The customer's address. */
		address?: PatchEcommerceStoresIdCartsIdPatchBodyCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;
	}
	export interface PatchEcommerceStoresIdCartsIdPatchBodyCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdPatchBodyCustomerFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdPatchBodyCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdPatchBodyCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdCartsIdPatchBodyCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdPatchBodyCustomerAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdPatchBodyCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdPatchBodyLines {

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdCartsIdPatchBodyLinesFormProperties {

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdPatchBodyLinesFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdPatchBodyLinesFormProperties>({
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdCartsIdReturn_links?: Array<PatchEcommerceStoresIdCartsIdReturn_links>;

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id?: string | null;

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url?: string | null;

		/** The date and time the cart was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: PatchEcommerceStoresIdCartsIdReturnCustomer;

		/** A unique identifier for the cart. */
		id?: string | null;

		/** An array of the cart's line items. */
		PatchEcommerceStoresIdCartsIdReturnLines?: Array<PatchEcommerceStoresIdCartsIdReturnLines>;

		/** The order total for the cart. */
		order_total?: number | null;

		/** The total tax for the cart. */
		tax_total?: number | null;

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturnFormProperties {

		/** A string that uniquely identifies the campaign associated with a cart. */
		campaign_id: FormControl<string | null | undefined>,

		/** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
		checkout_url: FormControl<string | null | undefined>,

		/** The date and time the cart was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the cart uses. */
		currency_code: FormControl<string | null | undefined>,

		/** A unique identifier for the cart. */
		id: FormControl<string | null | undefined>,

		/** The order total for the cart. */
		order_total: FormControl<number | null | undefined>,

		/** The total tax for the cart. */
		tax_total: FormControl<number | null | undefined>,

		/** The date and time the cart was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			checkout_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturnCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdCartsIdReturnCustomer_links?: Array<PatchEcommerceStoresIdCartsIdReturnCustomer_links>;

		/** The customer's address. */
		address?: PatchEcommerceStoresIdCartsIdReturnCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturnCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturnCustomerFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturnCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturnCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturnCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturnCustomer_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturnCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturnCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturnCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturnCustomerAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturnCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdCartsIdReturnLines_links?: Array<PatchEcommerceStoresIdCartsIdReturnLines_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturnLinesFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturnLinesFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturnLinesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdCartsIdReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdReturnLines_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdLinesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsIdLinesReturn_links?: Array<GetEcommerceStoresIdCartsIdLinesReturn_links>;

		/** The cart id. */
		cart_id?: string | null;

		/** An array of objects, each representing a cart's line item. */
		GetEcommerceStoresIdCartsIdLinesReturnLines?: Array<GetEcommerceStoresIdCartsIdLinesReturnLines>;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdCartsIdLinesReturnFormProperties {

		/** The cart id. */
		cart_id: FormControl<string | null | undefined>,

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdLinesReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdLinesReturnFormProperties>({
			cart_id: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdLinesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdLinesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdLinesReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdLinesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdLinesReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsIdLinesReturnLines_links?: Array<GetEcommerceStoresIdCartsIdLinesReturnLines_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdCartsIdLinesReturnLinesFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdLinesReturnLinesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdLinesReturnLinesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdLinesReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdLinesReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdLinesReturnLines_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdLinesReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsIdLinesPostBody {

		/**
		 * A unique identifier for the cart line item.
		 * Required
		 */
		id: string;

		/**
		 * The price of a cart line item.
		 * Required
		 */
		price: number;

		/**
		 * A unique identifier for the product associated with the cart line item.
		 * Required
		 */
		product_id: string;

		/**
		 * A unique identifier for the product variant associated with the cart line item.
		 * Required
		 */
		product_variant_id: string;

		/**
		 * The quantity of a cart line item.
		 * Required
		 */
		quantity: number;
	}
	export interface PostEcommerceStoresIdCartsIdLinesPostBodyFormProperties {

		/**
		 * A unique identifier for the cart line item.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The price of a cart line item.
		 * Required
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the product associated with the cart line item.
		 * Required
		 */
		product_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product variant associated with the cart line item.
		 * Required
		 */
		product_variant_id: FormControl<string | null | undefined>,

		/**
		 * The quantity of a cart line item.
		 * Required
		 */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsIdLinesPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsIdLinesPostBodyFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			product_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			product_variant_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdCartsIdLinesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdCartsIdLinesReturn_links?: Array<PostEcommerceStoresIdCartsIdLinesReturn_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface PostEcommerceStoresIdCartsIdLinesReturnFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsIdLinesReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsIdLinesReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCartsIdLinesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdCartsIdLinesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCartsIdLinesReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCartsIdLinesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdLinesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCartsIdLinesIdReturn_links?: Array<GetEcommerceStoresIdCartsIdLinesIdReturn_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdCartsIdLinesIdReturnFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdLinesIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdLinesIdReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCartsIdLinesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCartsIdLinesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCartsIdLinesIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCartsIdLinesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdLinesIdPatchBody {

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdCartsIdLinesIdPatchBodyFormProperties {

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdLinesIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdLinesIdPatchBodyFormProperties>({
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdLinesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdCartsIdLinesIdReturn_links?: Array<PatchEcommerceStoresIdCartsIdLinesIdReturn_links>;

		/** A unique identifier for the cart line item. */
		id?: string | null;

		/** The price of a cart line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the cart line item. */
		product_id?: string | null;

		/** The name of the product for the cart line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for the cart line item. */
		product_variant_title?: string | null;

		/** The quantity of a cart line item. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdCartsIdLinesIdReturnFormProperties {

		/** A unique identifier for the cart line item. */
		id: FormControl<string | null | undefined>,

		/** The price of a cart line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the cart line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for the cart line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the cart line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for the cart line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The quantity of a cart line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdLinesIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdLinesIdReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCartsIdLinesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdCartsIdLinesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCartsIdLinesIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCartsIdLinesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCustomersReturn_links?: Array<GetEcommerceStoresIdCustomersReturn_links>;

		/** An array of objects, each representing a customer of a store. */
		GetEcommerceStoresIdCustomersReturnCustomers?: Array<GetEcommerceStoresIdCustomersReturnCustomers>;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdCustomersReturnFormProperties {

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersReturnFormProperties>({
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCustomersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersReturnCustomers {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCustomersReturnCustomers_links?: Array<GetEcommerceStoresIdCustomersReturnCustomers_links>;

		/** The customer's address. */
		address?: GetEcommerceStoresIdCustomersReturnCustomersAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdCustomersReturnCustomersFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersReturnCustomersFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersReturnCustomersFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersReturnCustomers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCustomersReturnCustomers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersReturnCustomers_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersReturnCustomers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersReturnCustomersAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdCustomersReturnCustomersAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersReturnCustomersAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersReturnCustomersAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCustomersPostBody {

		/** The customer's address. */
		address?: PostEcommerceStoresIdCustomersPostBodyAddress;

		/** The customer's company. */
		company?: string | null;

		/**
		 * The customer's email address.
		 * Required
		 */
		email_address: string;

		/** The customer's first name. */
		first_name?: string | null;

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: string;

		/** The customer's last name. */
		last_name?: string | null;

		/**
		 * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
		 * Required
		 */
		opt_in_status: boolean;
	}
	export interface PostEcommerceStoresIdCustomersPostBodyFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/**
		 * The customer's email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/**
		 * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
		 * Required
		 */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCustomersPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCustomersPostBodyFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdCustomersPostBodyAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdCustomersPostBodyAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCustomersPostBodyAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCustomersPostBodyAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCustomersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdCustomersReturn_links?: Array<PostEcommerceStoresIdCustomersReturn_links>;

		/** The customer's address. */
		address?: PostEcommerceStoresIdCustomersReturnAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostEcommerceStoresIdCustomersReturnFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCustomersReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCustomersReturnFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCustomersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdCustomersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCustomersReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCustomersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdCustomersReturnAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdCustomersReturnAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdCustomersReturnAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdCustomersReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdCustomersIdReturn_links?: Array<GetEcommerceStoresIdCustomersIdReturn_links>;

		/** The customer's address. */
		address?: GetEcommerceStoresIdCustomersIdReturnAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdCustomersIdReturnFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersIdReturnFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdCustomersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdCustomersIdReturnAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdCustomersIdReturnAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdCustomersIdReturnAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdCustomersIdReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCustomersIdPatchBody {

		/** The customer's address. */
		address?: PatchEcommerceStoresIdCustomersIdPatchBodyAddress;

		/** The customer's company. */
		company?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;
	}
	export interface PatchEcommerceStoresIdCustomersIdPatchBodyFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCustomersIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCustomersIdPatchBodyFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCustomersIdPatchBodyAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdCustomersIdPatchBodyAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCustomersIdPatchBodyAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCustomersIdPatchBodyAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCustomersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdCustomersIdReturn_links?: Array<PatchEcommerceStoresIdCustomersIdReturn_links>;

		/** The customer's address. */
		address?: PatchEcommerceStoresIdCustomersIdReturnAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchEcommerceStoresIdCustomersIdReturnFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCustomersIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCustomersIdReturnFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCustomersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdCustomersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCustomersIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCustomersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdCustomersIdReturnAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdCustomersIdReturnAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdCustomersIdReturnAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdCustomersIdReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutEcommerceStoresIdCustomersIdPutBody {

		/** The customer's address. */
		address?: PutEcommerceStoresIdCustomersIdPutBodyAddress;

		/** The customer's company. */
		company?: string | null;

		/**
		 * The customer's email address.
		 * Required
		 */
		email_address: string;

		/** The customer's first name. */
		first_name?: string | null;

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: string;

		/** The customer's last name. */
		last_name?: string | null;

		/**
		 * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
		 * Required
		 */
		opt_in_status: boolean;
	}
	export interface PutEcommerceStoresIdCustomersIdPutBodyFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/**
		 * The customer's email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/**
		 * The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).
		 * Required
		 */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdCustomersIdPutBodyFormGroup() {
		return new FormGroup<PutEcommerceStoresIdCustomersIdPutBodyFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PutEcommerceStoresIdCustomersIdPutBodyAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PutEcommerceStoresIdCustomersIdPutBodyAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdCustomersIdPutBodyAddressFormGroup() {
		return new FormGroup<PutEcommerceStoresIdCustomersIdPutBodyAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutEcommerceStoresIdCustomersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PutEcommerceStoresIdCustomersIdReturn_links?: Array<PutEcommerceStoresIdCustomersIdReturn_links>;

		/** The customer's address. */
		address?: PutEcommerceStoresIdCustomersIdReturnAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PutEcommerceStoresIdCustomersIdReturnFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdCustomersIdReturnFormGroup() {
		return new FormGroup<PutEcommerceStoresIdCustomersIdReturnFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PutEcommerceStoresIdCustomersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PutEcommerceStoresIdCustomersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdCustomersIdReturn_linksFormGroup() {
		return new FormGroup<PutEcommerceStoresIdCustomersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutEcommerceStoresIdCustomersIdReturnAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PutEcommerceStoresIdCustomersIdReturnAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdCustomersIdReturnAddressFormGroup() {
		return new FormGroup<PutEcommerceStoresIdCustomersIdReturnAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersReturn_links?: Array<GetEcommerceStoresIdOrdersReturn_links>;

		/** An array of objects, each representing an order in a store. */
		GetEcommerceStoresIdOrdersReturnOrders?: Array<GetEcommerceStoresIdOrdersReturnOrders>;

		/** The unique identifier for the store. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnFormProperties {

		/** The unique identifier for the store. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnFormProperties>({
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrders {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersReturnOrders_links?: Array<GetEcommerceStoresIdOrdersReturnOrders_links>;

		/** The billing address for the order. */
		billing_address?: GetEcommerceStoresIdOrdersReturnOrdersBilling_address;

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: GetEcommerceStoresIdOrdersReturnOrdersCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/** A unique identifier for the order. */
		id?: string | null;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/** An array of the order's line items. */
		GetEcommerceStoresIdOrdersReturnOrdersLines?: Array<GetEcommerceStoresIdOrdersReturnOrdersLines>;

		/** The order total associated with an order. */
		order_total?: number | null;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: GetEcommerceStoresIdOrdersReturnOrdersOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order */
		GetEcommerceStoresIdOrdersReturnOrdersPromos?: Array<GetEcommerceStoresIdOrdersReturnOrdersPromos>;

		/** The shipping address for the order. */
		shipping_address?: GetEcommerceStoresIdOrdersReturnOrdersShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The unique identifier for the store. */
		store_id?: string | null;

		/** The tax total associated with an order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersFormProperties {

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/** A unique identifier for the order. */
		id: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/** The order total associated with an order. */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The unique identifier for the store. */
		store_id: FormControl<string | null | undefined>,

		/** The tax total associated with an order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrders_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrders_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrders_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrders_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with an order's billing address. */
		name?: string | null;

		/** The phone number for the billing address. */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province or state in the billing address. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersBilling_addressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersReturnOrdersCustomer_links?: Array<GetEcommerceStoresIdOrdersReturnOrdersCustomer_links>;

		/** The customer's address. */
		address?: GetEcommerceStoresIdOrdersReturnOrdersCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersCustomerFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersCustomer_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersCustomerAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersReturnOrdersLines_links?: Array<GetEcommerceStoresIdOrdersReturnOrdersLines_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersLinesFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersLinesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersLines_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;

		/** The name for the outreach. */
		name?: string | null;

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time?: Date | null;

		/** The type of the outreach. */
		type?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,

		/** The name for the outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** The type of the outreach. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersOutreachFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersPromos {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted?: number | null;

		/** The Promo Code */
		code?: string | null;

		/** Type of discount. For free shipping set type to fixed */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersPromosFormProperties {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted: FormControl<number | null | undefined>,

		/** The Promo Code */
		code: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersPromosFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined),
			code: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersReturnOrdersShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with an order's shipping address. */
		company?: string | null;

		/** The country in the order's shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address */
		phone?: string | null;

		/** The postal or zip code in the order's shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersReturnOrdersShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with an order's shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the order's shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the order's shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersReturnOrdersShipping_addressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersReturnOrdersShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBody {

		/** The billing address for the order. */
		billing_address?: PostEcommerceStoresIdOrdersPostBodyBilling_address;

		/** A string that uniquely identifies the campaign for an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created. */
		cancelled_at_foreign?: Date | null;

		/**
		 * The three-letter ISO 4217 code for the currency that the store accepts.
		 * Required
		 */
		currency_code: string;

		/**
		 * Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body.
		 * Required
		 */
		customer: PostEcommerceStoresIdOrdersPostBodyCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/**
		 * A unique identifier for the order.
		 * Required
		 */
		id: string;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/**
		 * An array of the order's line items.
		 * Required
		 */
		PostEcommerceStoresIdOrdersPostBodyLines: Array<PostEcommerceStoresIdOrdersPostBodyLines>;

		/**
		 * The total for the order.
		 * Required
		 */
		order_total: number;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: PostEcommerceStoresIdOrdersPostBodyOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order */
		PostEcommerceStoresIdOrdersPostBodyPromos?: Array<PostEcommerceStoresIdOrdersPostBodyPromos>;

		/** The shipping address for the order. */
		shipping_address?: PostEcommerceStoresIdOrdersPostBodyShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The tax total for the order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyFormProperties {

		/** A string that uniquely identifies the campaign for an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/**
		 * The three-letter ISO 4217 code for the currency that the store accepts.
		 * Required
		 */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the order.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/**
		 * The total for the order.
		 * Required
		 */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The tax total for the order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with the billing address. */
		name?: string | null;

		/** The phone number for the billing address */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province in the billing address. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with the billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyBilling_addressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyCustomer {

		/** The customer's address. */
		address?: PostEcommerceStoresIdOrdersPostBodyCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: string;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the customer. Limited to 50 characters.
		 * Required
		 * Max length: 50
		 */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyCustomerFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyCustomerAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyLines {

		/** The total discount amount applied to this line item. */
		discount?: number | null;

		/**
		 * A unique identifier for the order line item.
		 * Required
		 */
		id: string;

		/**
		 * The price of an order line item.
		 * Required
		 */
		price: number;

		/**
		 * A unique identifier for the product associated with the order line item.
		 * Required
		 */
		product_id: string;

		/**
		 * A unique identifier for the product variant associated with the order line item.
		 * Required
		 */
		product_variant_id: string;

		/**
		 * The quantity of an order line item.
		 * Required
		 */
		quantity: number;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyLinesFormProperties {

		/** The total discount amount applied to this line item. */
		discount: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the order line item.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The price of an order line item.
		 * Required
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the product associated with the order line item.
		 * Required
		 */
		product_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product variant associated with the order line item.
		 * Required
		 */
		product_variant_id: FormControl<string | null | undefined>,

		/**
		 * The quantity of an order line item.
		 * Required
		 */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyLinesFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			product_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			product_variant_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyOutreachFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyPromos {

		/**
		 * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
		 * Required
		 */
		amount_discounted: number;

		/**
		 * The Promo Code
		 * Required
		 */
		code: string;

		/**
		 * Type of discount. For free shipping set type to fixed
		 * Required
		 */
		type: GetEcommerceOrdersReturnOrdersPromosType;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyPromosFormProperties {

		/**
		 * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
		 * Required
		 */
		amount_discounted: FormControl<number | null | undefined>,

		/**
		 * The Promo Code
		 * Required
		 */
		code: FormControl<string | null | undefined>,

		/**
		 * Type of discount. For free shipping set type to fixed
		 * Required
		 */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyPromosFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdOrdersPostBodyShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with the shipping address. */
		company?: string | null;

		/** The country in the shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address. */
		phone?: string | null;

		/** The postal or zip code in the shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state in the shipping address. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersPostBodyShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the shipping address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersPostBodyShipping_addressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersPostBodyShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdOrdersReturn_links?: Array<PostEcommerceStoresIdOrdersReturn_links>;

		/** The billing address for the order. */
		billing_address?: PostEcommerceStoresIdOrdersReturnBilling_address;

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: PostEcommerceStoresIdOrdersReturnCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/** A unique identifier for the order. */
		id?: string | null;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/** An array of the order's line items. */
		PostEcommerceStoresIdOrdersReturnLines?: Array<PostEcommerceStoresIdOrdersReturnLines>;

		/** The order total associated with an order. */
		order_total?: number | null;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: PostEcommerceStoresIdOrdersReturnOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order */
		PostEcommerceStoresIdOrdersReturnPromos?: Array<PostEcommerceStoresIdOrdersReturnPromos>;

		/** The shipping address for the order. */
		shipping_address?: PostEcommerceStoresIdOrdersReturnShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The unique identifier for the store. */
		store_id?: string | null;

		/** The tax total associated with an order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnFormProperties {

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/** A unique identifier for the order. */
		id: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/** The order total associated with an order. */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The unique identifier for the store. */
		store_id: FormControl<string | null | undefined>,

		/** The tax total associated with an order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with an order's billing address. */
		name?: string | null;

		/** The phone number for the billing address. */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province or state in the billing address. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnBilling_addressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdOrdersReturnCustomer_links?: Array<PostEcommerceStoresIdOrdersReturnCustomer_links>;

		/** The customer's address. */
		address?: PostEcommerceStoresIdOrdersReturnCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnCustomerFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnCustomer_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnCustomerAddressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdOrdersReturnLines_links?: Array<PostEcommerceStoresIdOrdersReturnLines_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnLinesFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnLinesFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnLines_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;

		/** The name for the outreach. */
		name?: string | null;

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time?: Date | null;

		/** The type of the outreach. */
		type?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,

		/** The name for the outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** The type of the outreach. */
		type: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnOutreachFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnPromos {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted?: number | null;

		/** The Promo Code */
		code?: string | null;

		/** Type of discount. For free shipping set type to fixed */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnPromosFormProperties {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted: FormControl<number | null | undefined>,

		/** The Promo Code */
		code: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnPromosFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined),
			code: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersReturnShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with an order's shipping address. */
		company?: string | null;

		/** The country in the order's shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address */
		phone?: string | null;

		/** The postal or zip code in the order's shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersReturnShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with an order's shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the order's shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the order's shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersReturnShipping_addressFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersReturnShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersIdReturn_links?: Array<GetEcommerceStoresIdOrdersIdReturn_links>;

		/** The billing address for the order. */
		billing_address?: GetEcommerceStoresIdOrdersIdReturnBilling_address;

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: GetEcommerceStoresIdOrdersIdReturnCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/** A unique identifier for the order. */
		id?: string | null;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/** An array of the order's line items. */
		GetEcommerceStoresIdOrdersIdReturnLines?: Array<GetEcommerceStoresIdOrdersIdReturnLines>;

		/** The order total associated with an order. */
		order_total?: number | null;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: GetEcommerceStoresIdOrdersIdReturnOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order */
		GetEcommerceStoresIdOrdersIdReturnPromos?: Array<GetEcommerceStoresIdOrdersIdReturnPromos>;

		/** The shipping address for the order. */
		shipping_address?: GetEcommerceStoresIdOrdersIdReturnShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The unique identifier for the store. */
		store_id?: string | null;

		/** The tax total associated with an order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnFormProperties {

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/** A unique identifier for the order. */
		id: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/** The order total associated with an order. */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The unique identifier for the store. */
		store_id: FormControl<string | null | undefined>,

		/** The tax total associated with an order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with an order's billing address. */
		name?: string | null;

		/** The phone number for the billing address. */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province or state in the billing address. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnBilling_addressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersIdReturnCustomer_links?: Array<GetEcommerceStoresIdOrdersIdReturnCustomer_links>;

		/** The customer's address. */
		address?: GetEcommerceStoresIdOrdersIdReturnCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnCustomerFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnCustomer_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnCustomerAddressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersIdReturnLines_links?: Array<GetEcommerceStoresIdOrdersIdReturnLines_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnLinesFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnLinesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnLines_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;

		/** The name for the outreach. */
		name?: string | null;

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time?: Date | null;

		/** The type of the outreach. */
		type?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,

		/** The name for the outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** The type of the outreach. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnOutreachFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnPromos {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted?: number | null;

		/** The Promo Code */
		code?: string | null;

		/** Type of discount. For free shipping set type to fixed */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnPromosFormProperties {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted: FormControl<number | null | undefined>,

		/** The Promo Code */
		code: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnPromosFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined),
			code: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdReturnShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with an order's shipping address. */
		company?: string | null;

		/** The country in the order's shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address */
		phone?: string | null;

		/** The postal or zip code in the order's shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdReturnShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with an order's shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the order's shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the order's shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdReturnShipping_addressFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdReturnShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBody {

		/** The billing address for the order. */
		billing_address?: PatchEcommerceStoresIdOrdersIdPatchBodyBilling_address;

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited. */
		cancelled_at_foreign?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body. */
		customer?: PatchEcommerceStoresIdOrdersIdPatchBodyCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/** An array of the order's line items. */
		PatchEcommerceStoresIdOrdersIdPatchBodyLines?: Array<PatchEcommerceStoresIdOrdersIdPatchBodyLines>;

		/** The order total associated with an order. */
		order_total?: number | null;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: PatchEcommerceStoresIdOrdersIdPatchBodyOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided. */
		PatchEcommerceStoresIdOrdersIdPatchBodyPromos?: Array<PatchEcommerceStoresIdOrdersIdPatchBodyPromos>;

		/** The shipping address for the order. */
		shipping_address?: PatchEcommerceStoresIdOrdersIdPatchBodyShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The tax total associated with an order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyFormProperties {

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/** The order total associated with an order. */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The tax total associated with an order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with an order's billing address. */
		name?: string | null;

		/** The phone number for the billing address. */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province or state in the billing address. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyBilling_addressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyCustomer {

		/** The customer's address. */
		address?: PatchEcommerceStoresIdOrdersIdPatchBodyCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyCustomerFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyCustomerAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyLines {

		/** The total discount amount applied to this line item. */
		discount?: number | null;

		/** The price of an order line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the order line item. */
		product_id?: string | null;

		/** A unique identifier for the product variant associated with the order line item. */
		product_variant_id?: string | null;

		/** The quantity of an order line item. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyLinesFormProperties {

		/** The total discount amount applied to this line item. */
		discount: FormControl<number | null | undefined>,

		/** The price of an order line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the order line item. */
		product_id: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The quantity of an order line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyLinesFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyOutreachFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyPromos {

		/**
		 * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
		 * Required
		 */
		amount_discounted: number;

		/**
		 * The Promo Code
		 * Required
		 */
		code: string;

		/**
		 * Type of discount. For free shipping set type to fixed
		 * Required
		 */
		type: GetEcommerceOrdersReturnOrdersPromosType;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyPromosFormProperties {

		/**
		 * The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
		 * Required
		 */
		amount_discounted: FormControl<number | null | undefined>,

		/**
		 * The Promo Code
		 * Required
		 */
		code: FormControl<string | null | undefined>,

		/**
		 * Type of discount. For free shipping set type to fixed
		 * Required
		 */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyPromosFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdPatchBodyShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with an order's shipping address. */
		company?: string | null;

		/** The country in the order's shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address */
		phone?: string | null;

		/** The postal or zip code in the order's shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdPatchBodyShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with an order's shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the order's shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the order's shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdPatchBodyShipping_addressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdPatchBodyShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdOrdersIdReturn_links?: Array<PatchEcommerceStoresIdOrdersIdReturn_links>;

		/** The billing address for the order. */
		billing_address?: PatchEcommerceStoresIdOrdersIdReturnBilling_address;

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id?: string | null;

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign?: Date | null;

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** Information about a specific customer. */
		customer?: PatchEcommerceStoresIdOrdersIdReturnCustomer;

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total?: number | null;

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status?: string | null;

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status?: string | null;

		/** A unique identifier for the order. */
		id?: string | null;

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site?: string | null;

		/** An array of the order's line items. */
		PatchEcommerceStoresIdOrdersIdReturnLines?: Array<PatchEcommerceStoresIdOrdersIdReturnLines>;

		/** The order total associated with an order. */
		order_total?: number | null;

		/** The URL for the order. */
		order_url?: string | null;

		/** The outreach associated with this order. For example, an email campaign or Facebook ad. */
		outreach?: PatchEcommerceStoresIdOrdersIdReturnOutreach;

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign?: Date | null;

		/** The promo codes applied on the order */
		PatchEcommerceStoresIdOrdersIdReturnPromos?: Array<PatchEcommerceStoresIdOrdersIdReturnPromos>;

		/** The shipping address for the order. */
		shipping_address?: PatchEcommerceStoresIdOrdersIdReturnShipping_address;

		/** The shipping total for the order. */
		shipping_total?: number | null;

		/** The unique identifier for the store. */
		store_id?: string | null;

		/** The tax total associated with an order. */
		tax_total?: number | null;

		/** The tracking carrier associated with the order. */
		tracking_carrier?: string | null;

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code?: GetEcommerceOrdersReturnOrdersTracking_code | null;

		/** The tracking number associated with the order. */
		tracking_number?: string | null;

		/** The tracking URL associated with the order. */
		tracking_url?: string | null;

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnFormProperties {

		/** A string that uniquely identifies the campaign associated with an order. */
		campaign_id: FormControl<string | null | undefined>,

		/** The date and time the order was cancelled in ISO 8601 format. */
		cancelled_at_foreign: FormControl<Date | null | undefined>,

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total amount of the discounts to be applied to the price of the order. */
		discount_total: FormControl<number | null | undefined>,

		/** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		financial_status: FormControl<string | null | undefined>,

		/** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
		fulfillment_status: FormControl<string | null | undefined>,

		/** A unique identifier for the order. */
		id: FormControl<string | null | undefined>,

		/** The URL for the page where the buyer landed when entering the shop. */
		landing_site: FormControl<string | null | undefined>,

		/** The order total associated with an order. */
		order_total: FormControl<number | null | undefined>,

		/** The URL for the order. */
		order_url: FormControl<string | null | undefined>,

		/** The date and time the order was processed in ISO 8601 format. */
		processed_at_foreign: FormControl<Date | null | undefined>,

		/** The shipping total for the order. */
		shipping_total: FormControl<number | null | undefined>,

		/** The unique identifier for the store. */
		store_id: FormControl<string | null | undefined>,

		/** The tax total associated with an order. */
		tax_total: FormControl<number | null | undefined>,

		/** The tracking carrier associated with the order. */
		tracking_carrier: FormControl<string | null | undefined>,

		/** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
		tracking_code: FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>,

		/** The tracking number associated with the order. */
		tracking_number: FormControl<string | null | undefined>,

		/** The tracking URL associated with the order. */
		tracking_url: FormControl<string | null | undefined>,

		/** The date and time the order was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			cancelled_at_foreign: new FormControl<Date | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			discount_total: new FormControl<number | null | undefined>(undefined),
			financial_status: new FormControl<string | null | undefined>(undefined),
			fulfillment_status: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			landing_site: new FormControl<string | null | undefined>(undefined),
			order_total: new FormControl<number | null | undefined>(undefined),
			order_url: new FormControl<string | null | undefined>(undefined),
			processed_at_foreign: new FormControl<Date | null | undefined>(undefined),
			shipping_total: new FormControl<number | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			tax_total: new FormControl<number | null | undefined>(undefined),
			tracking_carrier: new FormControl<string | null | undefined>(undefined),
			tracking_code: new FormControl<GetEcommerceOrdersReturnOrdersTracking_code | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnBilling_address {

		/** The billing address for the order. */
		address1?: string | null;

		/** An additional field for the billing address. */
		address2?: string | null;

		/** The city in the billing address. */
		city?: string | null;

		/** The company associated with the billing address. */
		company?: string | null;

		/** The country in the billing address. */
		country?: string | null;

		/** The two-letter code for the country in the billing address. */
		country_code?: string | null;

		/** The latitude for the billing address location. */
		latitude?: number | null;

		/** The longitude for the billing address location. */
		longitude?: number | null;

		/** The name associated with an order's billing address. */
		name?: string | null;

		/** The phone number for the billing address. */
		phone?: string | null;

		/** The postal or zip code in the billing address. */
		postal_code?: string | null;

		/** The state or normalized province in the billing address. */
		province?: string | null;

		/** The two-letter code for the province or state in the billing address. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnBilling_addressFormProperties {

		/** The billing address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the billing address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the billing address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with the billing address. */
		company: FormControl<string | null | undefined>,

		/** The country in the billing address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the billing address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the billing address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the billing address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's billing address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the billing address. */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the billing address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the billing address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state in the billing address. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnBilling_addressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnBilling_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnCustomer {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdOrdersIdReturnCustomer_links?: Array<PatchEcommerceStoresIdOrdersIdReturnCustomer_links>;

		/** The customer's address. */
		address?: PatchEcommerceStoresIdOrdersIdReturnCustomerAddress;

		/** The customer's company. */
		company?: string | null;

		/** The date and time the customer was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The customer's email address. */
		email_address?: string | null;

		/** The customer's first name. */
		first_name?: string | null;

		/** A unique identifier for the customer. */
		id?: string | null;

		/** The customer's last name. */
		last_name?: string | null;

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status?: boolean | null;

		/** The customer's total order count. */
		orders_count?: number | null;

		/** The total amount the customer has spent. */
		total_spent?: number | null;

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnCustomerFormProperties {

		/** The customer's company. */
		company: FormControl<string | null | undefined>,

		/** The date and time the customer was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The customer's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The customer's first name. */
		first_name: FormControl<string | null | undefined>,

		/** A unique identifier for the customer. */
		id: FormControl<string | null | undefined>,

		/** The customer's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
		opt_in_status: FormControl<boolean | null | undefined>,

		/** The customer's total order count. */
		orders_count: FormControl<number | null | undefined>,

		/** The total amount the customer has spent. */
		total_spent: FormControl<number | null | undefined>,

		/** The date and time the customer was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnCustomerFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnCustomerFormProperties>({
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			opt_in_status: new FormControl<boolean | null | undefined>(undefined),
			orders_count: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnCustomer_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnCustomer_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnCustomer_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnCustomer_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnCustomerAddress {

		/** The mailing address of the customer. */
		address1?: string | null;

		/** An additional field for the customer's mailing address. */
		address2?: string | null;

		/** The city the customer is located in. */
		city?: string | null;

		/** The customer's country. */
		country?: string | null;

		/** The two-letter code for the customer's country. */
		country_code?: string | null;

		/** The customer's postal or zip code. */
		postal_code?: string | null;

		/** The customer's state name or normalized province. */
		province?: string | null;

		/** The two-letter code for the customer's province or state. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnCustomerAddressFormProperties {

		/** The mailing address of the customer. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the customer's mailing address. */
		address2: FormControl<string | null | undefined>,

		/** The city the customer is located in. */
		city: FormControl<string | null | undefined>,

		/** The customer's country. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's country. */
		country_code: FormControl<string | null | undefined>,

		/** The customer's postal or zip code. */
		postal_code: FormControl<string | null | undefined>,

		/** The customer's state name or normalized province. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the customer's province or state. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnCustomerAddressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnCustomerAddressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdOrdersIdReturnLines_links?: Array<PatchEcommerceStoresIdOrdersIdReturnLines_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnLinesFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnLinesFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnLines_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnOutreach {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id?: string | null;

		/** The name for the outreach. */
		name?: string | null;

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time?: Date | null;

		/** The type of the outreach. */
		type?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnOutreachFormProperties {

		/** A unique identifier for the outreach. Can be an email campaign ID. */
		id: FormControl<string | null | undefined>,

		/** The name for the outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the Outreach was published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** The type of the outreach. */
		type: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnOutreachFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnOutreachFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnPromos {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted?: number | null;

		/** The Promo Code */
		code?: string | null;

		/** Type of discount. For free shipping set type to fixed */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnPromosFormProperties {

		/** The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0 */
		amount_discounted: FormControl<number | null | undefined>,

		/** The Promo Code */
		code: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnPromosFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnPromosFormProperties>({
			amount_discounted: new FormControl<number | null | undefined>(undefined),
			code: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdReturnShipping_address {

		/** The shipping address for the order. */
		address1?: string | null;

		/** An additional field for the shipping address. */
		address2?: string | null;

		/** The city in the order's shipping address. */
		city?: string | null;

		/** The company associated with an order's shipping address. */
		company?: string | null;

		/** The country in the order's shipping address. */
		country?: string | null;

		/** The two-letter code for the country in the shipping address. */
		country_code?: string | null;

		/** The latitude for the shipping address location. */
		latitude?: number | null;

		/** The longitude for the shipping address location. */
		longitude?: number | null;

		/** The name associated with an order's shipping address. */
		name?: string | null;

		/** The phone number for the order's shipping address */
		phone?: string | null;

		/** The postal or zip code in the order's shipping address. */
		postal_code?: string | null;

		/** The state or normalized province in the order's shipping address. */
		province?: string | null;

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdReturnShipping_addressFormProperties {

		/** The shipping address for the order. */
		address1: FormControl<string | null | undefined>,

		/** An additional field for the shipping address. */
		address2: FormControl<string | null | undefined>,

		/** The city in the order's shipping address. */
		city: FormControl<string | null | undefined>,

		/** The company associated with an order's shipping address. */
		company: FormControl<string | null | undefined>,

		/** The country in the order's shipping address. */
		country: FormControl<string | null | undefined>,

		/** The two-letter code for the country in the shipping address. */
		country_code: FormControl<string | null | undefined>,

		/** The latitude for the shipping address location. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude for the shipping address location. */
		longitude: FormControl<number | null | undefined>,

		/** The name associated with an order's shipping address. */
		name: FormControl<string | null | undefined>,

		/** The phone number for the order's shipping address */
		phone: FormControl<string | null | undefined>,

		/** The postal or zip code in the order's shipping address. */
		postal_code: FormControl<string | null | undefined>,

		/** The state or normalized province in the order's shipping address. */
		province: FormControl<string | null | undefined>,

		/** The two-letter code for the province or state the order's shipping address is located in. */
		province_code: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdReturnShipping_addressFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdReturnShipping_addressFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			province: new FormControl<string | null | undefined>(undefined),
			province_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdLinesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersIdLinesReturn_links?: Array<GetEcommerceStoresIdOrdersIdLinesReturn_links>;

		/** An array of objects, each representing an order's line item. */
		GetEcommerceStoresIdOrdersIdLinesReturnLines?: Array<GetEcommerceStoresIdOrdersIdLinesReturnLines>;

		/** The order id. */
		order_id?: string | null;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdOrdersIdLinesReturnFormProperties {

		/** The order id. */
		order_id: FormControl<string | null | undefined>,

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdLinesReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdLinesReturnFormProperties>({
			order_id: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdLinesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdLinesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdLinesReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdLinesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdLinesReturnLines {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersIdLinesReturnLines_links?: Array<GetEcommerceStoresIdOrdersIdLinesReturnLines_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdOrdersIdLinesReturnLinesFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdLinesReturnLinesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdLinesReturnLinesFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdLinesReturnLines_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdLinesReturnLines_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdLinesReturnLines_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdLinesReturnLines_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersIdLinesPostBody {

		/** The total discount amount applied to this line item. */
		discount?: number | null;

		/**
		 * A unique identifier for the order line item.
		 * Required
		 */
		id: string;

		/**
		 * The price of an order line item.
		 * Required
		 */
		price: number;

		/**
		 * A unique identifier for the product associated with the order line item.
		 * Required
		 */
		product_id: string;

		/**
		 * A unique identifier for the product variant associated with the order line item.
		 * Required
		 */
		product_variant_id: string;

		/**
		 * The quantity of an order line item.
		 * Required
		 */
		quantity: number;
	}
	export interface PostEcommerceStoresIdOrdersIdLinesPostBodyFormProperties {

		/** The total discount amount applied to this line item. */
		discount: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the order line item.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The price of an order line item.
		 * Required
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the product associated with the order line item.
		 * Required
		 */
		product_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product variant associated with the order line item.
		 * Required
		 */
		product_variant_id: FormControl<string | null | undefined>,

		/**
		 * The quantity of an order line item.
		 * Required
		 */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersIdLinesPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersIdLinesPostBodyFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			product_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			product_variant_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdOrdersIdLinesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdOrdersIdLinesReturn_links?: Array<PostEcommerceStoresIdOrdersIdLinesReturn_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface PostEcommerceStoresIdOrdersIdLinesReturnFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersIdLinesReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersIdLinesReturnFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdOrdersIdLinesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdOrdersIdLinesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdOrdersIdLinesReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdOrdersIdLinesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdLinesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdOrdersIdLinesIdReturn_links?: Array<GetEcommerceStoresIdOrdersIdLinesIdReturn_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface GetEcommerceStoresIdOrdersIdLinesIdReturnFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdLinesIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdLinesIdReturnFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdOrdersIdLinesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdOrdersIdLinesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdOrdersIdLinesIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdOrdersIdLinesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdLinesIdPatchBody {

		/** The total discount amount applied to this line item. */
		discount?: number | null;

		/** The price of an order line item. */
		price?: number | null;

		/** A unique identifier for the product associated with the order line item. */
		product_id?: string | null;

		/** A unique identifier for the product variant associated with the order line item. */
		product_variant_id?: string | null;

		/** The quantity of an order line item. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdLinesIdPatchBodyFormProperties {

		/** The total discount amount applied to this line item. */
		discount: FormControl<number | null | undefined>,

		/** The price of an order line item. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with the order line item. */
		product_id: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with the order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The quantity of an order line item. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdLinesIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdLinesIdPatchBodyFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdLinesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdOrdersIdLinesIdReturn_links?: Array<PatchEcommerceStoresIdOrdersIdLinesIdReturn_links>;

		/** The total discount amount applied to a line item. */
		discount?: number | null;

		/** A unique identifier for an order line item. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** The order line item price. */
		price?: number | null;

		/** A unique identifier for the product associated with an order line item. */
		product_id?: string | null;

		/** The name of the product for an order line item. */
		product_title?: string | null;

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id?: string | null;

		/** The name of the product variant for an order line item. */
		product_variant_title?: string | null;

		/** The order line item quantity. */
		quantity?: number | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdLinesIdReturnFormProperties {

		/** The total discount amount applied to a line item. */
		discount: FormControl<number | null | undefined>,

		/** A unique identifier for an order line item. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The order line item price. */
		price: FormControl<number | null | undefined>,

		/** A unique identifier for the product associated with an order line item. */
		product_id: FormControl<string | null | undefined>,

		/** The name of the product for an order line item. */
		product_title: FormControl<string | null | undefined>,

		/** A unique identifier for the product variant associated with an order line item. */
		product_variant_id: FormControl<string | null | undefined>,

		/** The name of the product variant for an order line item. */
		product_variant_title: FormControl<string | null | undefined>,

		/** The order line item quantity. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdLinesIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdLinesIdReturnFormProperties>({
			discount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			product_id: new FormControl<string | null | undefined>(undefined),
			product_title: new FormControl<string | null | undefined>(undefined),
			product_variant_id: new FormControl<string | null | undefined>(undefined),
			product_variant_title: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdOrdersIdLinesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdOrdersIdLinesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdOrdersIdLinesIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdOrdersIdLinesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsReturn_links?: Array<GetEcommerceStoresIdProductsReturn_links>;

		/** An array of objects, each representing a store product. */
		GetEcommerceStoresIdProductsReturnProducts?: Array<GetEcommerceStoresIdProductsReturnProducts>;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdProductsReturnFormProperties {

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnFormProperties>({
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturnProducts {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsReturnProducts_links?: Array<GetEcommerceStoresIdProductsReturnProducts_links>;

		/** The currency code */
		currency_code?: string | null;

		/** The description of a product. */
		description?: string | null;

		/** The handle of a product. */
		handle?: string | null;

		/** A unique identifier for the product. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** An array of the product's images. */
		GetEcommerceStoresIdProductsReturnProductsImages?: Array<GetEcommerceStoresIdProductsReturnProductsImages>;

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign?: Date | null;

		/** The title of a product. */
		title?: string | null;

		/** The type of product. */
		type?: string | null;

		/** The URL for a product. */
		url?: string | null;

		/** Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/). */
		GetEcommerceStoresIdProductsReturnProductsVariants?: Array<GetEcommerceStoresIdProductsReturnProductsVariants>;

		/** The vendor for a product. */
		vendor?: string | null;
	}
	export interface GetEcommerceStoresIdProductsReturnProductsFormProperties {

		/** The currency code */
		currency_code: FormControl<string | null | undefined>,

		/** The description of a product. */
		description: FormControl<string | null | undefined>,

		/** The handle of a product. */
		handle: FormControl<string | null | undefined>,

		/** A unique identifier for the product. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign: FormControl<Date | null | undefined>,

		/** The title of a product. */
		title: FormControl<string | null | undefined>,

		/** The type of product. */
		type: FormControl<string | null | undefined>,

		/** The URL for a product. */
		url: FormControl<string | null | undefined>,

		/** The vendor for a product. */
		vendor: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnProductsFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnProductsFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			handle: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			published_at_foreign: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			vendor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturnProducts_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsReturnProducts_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnProducts_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnProducts_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturnProductsImages {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsReturnProductsImages_links?: Array<GetEcommerceStoresIdProductsReturnProductsImages_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface GetEcommerceStoresIdProductsReturnProductsImagesFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnProductsImagesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnProductsImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturnProductsImages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsReturnProductsImages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnProductsImages_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnProductsImages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturnProductsVariants {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsReturnProductsVariants_links?: Array<GetEcommerceStoresIdProductsReturnProductsVariants_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface GetEcommerceStoresIdProductsReturnProductsVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnProductsVariantsFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnProductsVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsReturnProductsVariants_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsReturnProductsVariants_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsReturnProductsVariants_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsReturnProductsVariants_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsPostBody {

		/** The description of a product. */
		description?: string | null;

		/** The handle of a product. */
		handle?: string | null;

		/**
		 * A unique identifier for the product.
		 * Required
		 */
		id: string;

		/** The image URL for a product. */
		image_url?: string | null;

		/** An array of the product's images. */
		PostEcommerceStoresIdProductsPostBodyImages?: Array<PostEcommerceStoresIdProductsPostBodyImages>;

		/** The date and time the product was published. */
		published_at_foreign?: Date | null;

		/**
		 * The title of a product.
		 * Required
		 */
		title: string;

		/** The type of product. */
		type?: string | null;

		/** The URL for a product. */
		url?: string | null;

		/**
		 * An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product.
		 * Required
		 */
		PostEcommerceStoresIdProductsPostBodyVariants: Array<PostEcommerceStoresIdProductsPostBodyVariants>;

		/** The vendor for a product. */
		vendor?: string | null;
	}
	export interface PostEcommerceStoresIdProductsPostBodyFormProperties {

		/** The description of a product. */
		description: FormControl<string | null | undefined>,

		/** The handle of a product. */
		handle: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The date and time the product was published. */
		published_at_foreign: FormControl<Date | null | undefined>,

		/**
		 * The title of a product.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** The type of product. */
		type: FormControl<string | null | undefined>,

		/** The URL for a product. */
		url: FormControl<string | null | undefined>,

		/** The vendor for a product. */
		vendor: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsPostBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			handle: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			image_url: new FormControl<string | null | undefined>(undefined),
			published_at_foreign: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			vendor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsPostBodyImages {

		/**
		 * A unique identifier for the product image.
		 * Required
		 */
		id: string;

		/**
		 * The URL for a product image.
		 * Required
		 */
		url: string;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PostEcommerceStoresIdProductsPostBodyImagesFormProperties {

		/**
		 * A unique identifier for the product image.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The URL for a product image.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsPostBodyImagesFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsPostBodyImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdProductsPostBodyVariants {

		/** The backorders of a product variant. */
		backorders?: string | null;

		/**
		 * A unique identifier for the product variant.
		 * Required
		 */
		id: string;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/**
		 * The title of a product variant.
		 * Required
		 */
		title: string;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PostEcommerceStoresIdProductsPostBodyVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the product variant.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/**
		 * The title of a product variant.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsPostBodyVariantsFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsPostBodyVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdProductsReturn_links?: Array<PostEcommerceStoresIdProductsReturn_links>;

		/** The currency code */
		currency_code?: string | null;

		/** The description of a product. */
		description?: string | null;

		/** The handle of a product. */
		handle?: string | null;

		/** A unique identifier for the product. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** An array of the product's images. */
		PostEcommerceStoresIdProductsReturnImages?: Array<PostEcommerceStoresIdProductsReturnImages>;

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign?: Date | null;

		/** The title of a product. */
		title?: string | null;

		/** The type of product. */
		type?: string | null;

		/** The URL for a product. */
		url?: string | null;

		/** Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/). */
		PostEcommerceStoresIdProductsReturnVariants?: Array<PostEcommerceStoresIdProductsReturnVariants>;

		/** The vendor for a product. */
		vendor?: string | null;
	}
	export interface PostEcommerceStoresIdProductsReturnFormProperties {

		/** The currency code */
		currency_code: FormControl<string | null | undefined>,

		/** The description of a product. */
		description: FormControl<string | null | undefined>,

		/** The handle of a product. */
		handle: FormControl<string | null | undefined>,

		/** A unique identifier for the product. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign: FormControl<Date | null | undefined>,

		/** The title of a product. */
		title: FormControl<string | null | undefined>,

		/** The type of product. */
		type: FormControl<string | null | undefined>,

		/** The URL for a product. */
		url: FormControl<string | null | undefined>,

		/** The vendor for a product. */
		vendor: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsReturnFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			handle: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			published_at_foreign: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			vendor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdProductsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsReturnImages {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdProductsReturnImages_links?: Array<PostEcommerceStoresIdProductsReturnImages_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PostEcommerceStoresIdProductsReturnImagesFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsReturnImagesFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsReturnImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsReturnImages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdProductsReturnImages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsReturnImages_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsReturnImages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsReturnVariants {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdProductsReturnVariants_links?: Array<PostEcommerceStoresIdProductsReturnVariants_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PostEcommerceStoresIdProductsReturnVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsReturnVariantsFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsReturnVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsReturnVariants_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdProductsReturnVariants_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsReturnVariants_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsReturnVariants_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdReturn_links?: Array<GetEcommerceStoresIdProductsIdReturn_links>;

		/** The currency code */
		currency_code?: string | null;

		/** The description of a product. */
		description?: string | null;

		/** The handle of a product. */
		handle?: string | null;

		/** A unique identifier for the product. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** An array of the product's images. */
		GetEcommerceStoresIdProductsIdReturnImages?: Array<GetEcommerceStoresIdProductsIdReturnImages>;

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign?: Date | null;

		/** The title of a product. */
		title?: string | null;

		/** The type of product. */
		type?: string | null;

		/** The URL for a product. */
		url?: string | null;

		/** Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/). */
		GetEcommerceStoresIdProductsIdReturnVariants?: Array<GetEcommerceStoresIdProductsIdReturnVariants>;

		/** The vendor for a product. */
		vendor?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdReturnFormProperties {

		/** The currency code */
		currency_code: FormControl<string | null | undefined>,

		/** The description of a product. */
		description: FormControl<string | null | undefined>,

		/** The handle of a product. */
		handle: FormControl<string | null | undefined>,

		/** A unique identifier for the product. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign: FormControl<Date | null | undefined>,

		/** The title of a product. */
		title: FormControl<string | null | undefined>,

		/** The type of product. */
		type: FormControl<string | null | undefined>,

		/** The URL for a product. */
		url: FormControl<string | null | undefined>,

		/** The vendor for a product. */
		vendor: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdReturnFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			handle: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			published_at_foreign: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			vendor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdReturnImages {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdReturnImages_links?: Array<GetEcommerceStoresIdProductsIdReturnImages_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface GetEcommerceStoresIdProductsIdReturnImagesFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdReturnImagesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdReturnImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdReturnImages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdReturnImages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdReturnImages_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdReturnImages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdReturnVariants {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdReturnVariants_links?: Array<GetEcommerceStoresIdProductsIdReturnVariants_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdReturnVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdReturnVariantsFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdReturnVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdReturnVariants_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdReturnVariants_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdReturnVariants_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdReturnVariants_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdPatchBody {

		/** The description of a product. */
		description?: string | null;

		/** The handle of a product. */
		handle?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** An array of the product's images. */
		PatchEcommerceStoresIdProductsIdPatchBodyImages?: Array<PatchEcommerceStoresIdProductsIdPatchBodyImages>;

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign?: Date | null;

		/** The title of a product. */
		title?: string | null;

		/** The type of product. */
		type?: string | null;

		/** The URL for a product. */
		url?: string | null;

		/** An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product. */
		PatchEcommerceStoresIdProductsIdPatchBodyVariants?: Array<PatchEcommerceStoresIdProductsIdPatchBodyVariants>;

		/** The vendor for a product. */
		vendor?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdPatchBodyFormProperties {

		/** The description of a product. */
		description: FormControl<string | null | undefined>,

		/** The handle of a product. */
		handle: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign: FormControl<Date | null | undefined>,

		/** The title of a product. */
		title: FormControl<string | null | undefined>,

		/** The type of product. */
		type: FormControl<string | null | undefined>,

		/** The URL for a product. */
		url: FormControl<string | null | undefined>,

		/** The vendor for a product. */
		vendor: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdPatchBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			handle: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			published_at_foreign: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			vendor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdPatchBodyImages {

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PatchEcommerceStoresIdProductsIdPatchBodyImagesFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdPatchBodyImagesFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdPatchBodyImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdPatchBodyVariants {

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdPatchBodyVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdPatchBodyVariantsFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdPatchBodyVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdProductsIdReturn_links?: Array<PatchEcommerceStoresIdProductsIdReturn_links>;

		/** The currency code */
		currency_code?: string | null;

		/** The description of a product. */
		description?: string | null;

		/** The handle of a product. */
		handle?: string | null;

		/** A unique identifier for the product. */
		id?: string | null;

		/** The image URL for a product. */
		image_url?: string | null;

		/** An array of the product's images. */
		PatchEcommerceStoresIdProductsIdReturnImages?: Array<PatchEcommerceStoresIdProductsIdReturnImages>;

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign?: Date | null;

		/** The title of a product. */
		title?: string | null;

		/** The type of product. */
		type?: string | null;

		/** The URL for a product. */
		url?: string | null;

		/** Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/). */
		PatchEcommerceStoresIdProductsIdReturnVariants?: Array<PatchEcommerceStoresIdProductsIdReturnVariants>;

		/** The vendor for a product. */
		vendor?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdReturnFormProperties {

		/** The currency code */
		currency_code: FormControl<string | null | undefined>,

		/** The description of a product. */
		description: FormControl<string | null | undefined>,

		/** The handle of a product. */
		handle: FormControl<string | null | undefined>,

		/** A unique identifier for the product. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product. */
		image_url: FormControl<string | null | undefined>,

		/** The date and time the product was published in ISO 8601 format. */
		published_at_foreign: FormControl<Date | null | undefined>,

		/** The title of a product. */
		title: FormControl<string | null | undefined>,

		/** The type of product. */
		type: FormControl<string | null | undefined>,

		/** The URL for a product. */
		url: FormControl<string | null | undefined>,

		/** The vendor for a product. */
		vendor: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdReturnFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			handle: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			published_at_foreign: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			vendor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdReturnImages {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdProductsIdReturnImages_links?: Array<PatchEcommerceStoresIdProductsIdReturnImages_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PatchEcommerceStoresIdProductsIdReturnImagesFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdReturnImagesFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdReturnImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdReturnImages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdReturnImages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdReturnImages_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdReturnImages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdReturnVariants {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdProductsIdReturnVariants_links?: Array<PatchEcommerceStoresIdProductsIdReturnVariants_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdReturnVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdReturnVariantsFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdReturnVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdReturnVariants_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdReturnVariants_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdReturnVariants_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdReturnVariants_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdImagesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdImagesReturn_links?: Array<GetEcommerceStoresIdProductsIdImagesReturn_links>;

		/** An array of objects, each representing a product image resource. */
		GetEcommerceStoresIdProductsIdImagesReturnImages?: Array<GetEcommerceStoresIdProductsIdImagesReturnImages>;

		/** The product id. */
		product_id?: string | null;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdProductsIdImagesReturnFormProperties {

		/** The product id. */
		product_id: FormControl<string | null | undefined>,

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdImagesReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdImagesReturnFormProperties>({
			product_id: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdImagesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdImagesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdImagesReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdImagesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdImagesReturnImages {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdImagesReturnImages_links?: Array<GetEcommerceStoresIdProductsIdImagesReturnImages_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface GetEcommerceStoresIdProductsIdImagesReturnImagesFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdImagesReturnImagesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdImagesReturnImagesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdImagesReturnImages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdImagesReturnImages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdImagesReturnImages_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdImagesReturnImages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsIdImagesPostBody {

		/**
		 * A unique identifier for the product image.
		 * Required
		 */
		id: string;

		/**
		 * The URL for a product image.
		 * Required
		 */
		url: string;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PostEcommerceStoresIdProductsIdImagesPostBodyFormProperties {

		/**
		 * A unique identifier for the product image.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The URL for a product image.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsIdImagesPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsIdImagesPostBodyFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostEcommerceStoresIdProductsIdImagesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdProductsIdImagesReturn_links?: Array<PostEcommerceStoresIdProductsIdImagesReturn_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PostEcommerceStoresIdProductsIdImagesReturnFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsIdImagesReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsIdImagesReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsIdImagesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdProductsIdImagesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsIdImagesReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsIdImagesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdImagesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdImagesIdReturn_links?: Array<GetEcommerceStoresIdProductsIdImagesIdReturn_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface GetEcommerceStoresIdProductsIdImagesIdReturnFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdImagesIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdImagesIdReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdImagesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdImagesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdImagesIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdImagesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdImagesIdPatchBody {

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PatchEcommerceStoresIdProductsIdImagesIdPatchBodyFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdImagesIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdImagesIdPatchBodyFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdImagesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdProductsIdImagesIdReturn_links?: Array<PatchEcommerceStoresIdProductsIdImagesIdReturn_links>;

		/** A unique identifier for the product image. */
		id?: string | null;

		/** The URL for a product image. */
		url?: string | null;

		/** The list of product variants using the image. */
		variant_ids?: Array<string>;
	}
	export interface PatchEcommerceStoresIdProductsIdImagesIdReturnFormProperties {

		/** A unique identifier for the product image. */
		id: FormControl<string | null | undefined>,

		/** The URL for a product image. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdImagesIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdImagesIdReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdImagesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdImagesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdImagesIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdImagesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdVariantsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdVariantsReturn_links?: Array<GetEcommerceStoresIdProductsIdVariantsReturn_links>;

		/** The product id. */
		product_id?: string | null;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** An array of objects, each representing a product's variants. */
		GetEcommerceStoresIdProductsIdVariantsReturnVariants?: Array<GetEcommerceStoresIdProductsIdVariantsReturnVariants>;
	}
	export interface GetEcommerceStoresIdProductsIdVariantsReturnFormProperties {

		/** The product id. */
		product_id: FormControl<string | null | undefined>,

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdVariantsReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdVariantsReturnFormProperties>({
			product_id: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdVariantsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdVariantsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdVariantsReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdVariantsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdVariantsReturnVariants {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdVariantsReturnVariants_links?: Array<GetEcommerceStoresIdProductsIdVariantsReturnVariants_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdVariantsReturnVariantsFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdVariantsReturnVariantsFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdVariantsReturnVariantsFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdVariantsReturnVariants_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdVariantsReturnVariants_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdVariantsReturnVariants_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdVariantsReturnVariants_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsIdVariantsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdProductsIdVariantsReturn_links?: Array<PostEcommerceStoresIdProductsIdVariantsReturn_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PostEcommerceStoresIdProductsIdVariantsReturnFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsIdVariantsReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsIdVariantsReturnFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdProductsIdVariantsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdProductsIdVariantsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdProductsIdVariantsReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdProductsIdVariantsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdVariantsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdProductsIdVariantsIdReturn_links?: Array<GetEcommerceStoresIdProductsIdVariantsIdReturn_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdVariantsIdReturnFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdVariantsIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdVariantsIdReturnFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdProductsIdVariantsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdProductsIdVariantsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdProductsIdVariantsIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdProductsIdVariantsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdVariantsIdPatchBody {

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdVariantsIdPatchBodyFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdVariantsIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdVariantsIdPatchBodyFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdVariantsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdProductsIdVariantsIdReturn_links?: Array<PatchEcommerceStoresIdProductsIdVariantsIdReturn_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdVariantsIdReturnFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdVariantsIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdVariantsIdReturnFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdProductsIdVariantsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdProductsIdVariantsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdProductsIdVariantsIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdProductsIdVariantsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutEcommerceStoresIdProductsIdVariantsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PutEcommerceStoresIdProductsIdVariantsIdReturn_links?: Array<PutEcommerceStoresIdProductsIdVariantsIdReturn_links>;

		/** The backorders of a product variant. */
		backorders?: string | null;

		/** The date and time the product was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A unique identifier for the product variant. */
		id?: string | null;

		/** The image URL for a product variant. */
		image_url?: string | null;

		/** The inventory quantity of a product variant. */
		inventory_quantity?: number | null;

		/** The price of a product variant. */
		price?: number | null;

		/** The stock keeping unit (SKU) of a product variant. */
		sku?: string | null;

		/** The title of a product variant. */
		title?: string | null;

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for a product variant. */
		url?: string | null;

		/** The visibility of a product variant. */
		visibility?: string | null;
	}
	export interface PutEcommerceStoresIdProductsIdVariantsIdReturnFormProperties {

		/** The backorders of a product variant. */
		backorders: FormControl<string | null | undefined>,

		/** The date and time the product was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier for the product variant. */
		id: FormControl<string | null | undefined>,

		/** The image URL for a product variant. */
		image_url: FormControl<string | null | undefined>,

		/** The inventory quantity of a product variant. */
		inventory_quantity: FormControl<number | null | undefined>,

		/** The price of a product variant. */
		price: FormControl<number | null | undefined>,

		/** The stock keeping unit (SKU) of a product variant. */
		sku: FormControl<string | null | undefined>,

		/** The title of a product variant. */
		title: FormControl<string | null | undefined>,

		/** The date and time the product was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for a product variant. */
		url: FormControl<string | null | undefined>,

		/** The visibility of a product variant. */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdProductsIdVariantsIdReturnFormGroup() {
		return new FormGroup<PutEcommerceStoresIdProductsIdVariantsIdReturnFormProperties>({
			backorders: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			inventory_quantity: new FormControl<number | null | undefined>(undefined),
			price: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutEcommerceStoresIdProductsIdVariantsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PutEcommerceStoresIdProductsIdVariantsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePutEcommerceStoresIdProductsIdVariantsIdReturn_linksFormGroup() {
		return new FormGroup<PutEcommerceStoresIdProductsIdVariantsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromorulesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdPromorulesReturn_links?: Array<GetEcommerceStoresIdPromorulesReturn_links>;

		/** An array of objects, each representing promo rules defined for a store. */
		GetEcommerceStoresIdPromorulesReturnPromo_rules?: Array<GetEcommerceStoresIdPromorulesReturnPromo_rules>;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdPromorulesReturnFormProperties {

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromorulesReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromorulesReturnFormProperties>({
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromorulesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdPromorulesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromorulesReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromorulesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromorulesReturnPromo_rules {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdPromorulesReturnPromo_rules_links?: Array<GetEcommerceStoresIdPromorulesReturnPromo_rules_links>;

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount?: number | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description?: string | null;

		/** Whether the promo rule is currently enabled. */
		enabled?: boolean | null;

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at?: string | null;

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id?: string | null;

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at?: Date | null;

		/** The target that the discount applies to. */
		target?: GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null;

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title?: string | null;

		/** Type of discount. For free shipping set type to fixed. */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface GetEcommerceStoresIdPromorulesReturnPromo_rulesFormProperties {

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount: FormControl<number | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description: FormControl<string | null | undefined>,

		/** Whether the promo rule is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at: FormControl<string | null | undefined>,

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id: FormControl<string | null | undefined>,

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at: FormControl<Date | null | undefined>,

		/** The target that the discount applies to. */
		target: FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>,

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed. */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromorulesReturnPromo_rulesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromorulesReturnPromo_rulesFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			ends_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			starts_at: new FormControl<Date | null | undefined>(undefined),
			target: new FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromorulesReturnPromo_rules_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdPromorulesReturnPromo_rules_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromorulesReturnPromo_rules_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromorulesReturnPromo_rules_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget { per_item = 0, total = 1, shipping = 2 }

	export interface PostEcommerceStoresIdPromorulesPostBody {

		/**
		 * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
		 * Required
		 */
		amount: number;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/**
		 * The description of a promotion restricted to UTF-8 characters with max length 255.
		 * Required
		 */
		description: string;

		/** Whether the promo rule is currently enabled. */
		enabled?: boolean | null;

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at?: string | null;

		/**
		 * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
		 * Required
		 */
		id: string;

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at?: Date | null;

		/**
		 * The target that the discount applies to.
		 * Required
		 */
		target: GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget;

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title?: string | null;

		/**
		 * Type of discount. For free shipping set type to fixed.
		 * Required
		 */
		type: GetEcommerceOrdersReturnOrdersPromosType;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PostEcommerceStoresIdPromorulesPostBodyFormProperties {

		/**
		 * The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/**
		 * The description of a promotion restricted to UTF-8 characters with max length 255.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/** Whether the promo rule is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at: FormControl<Date | null | undefined>,

		/**
		 * The target that the discount applies to.
		 * Required
		 */
		target: FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>,

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title: FormControl<string | null | undefined>,

		/**
		 * Type of discount. For free shipping set type to fixed.
		 * Required
		 */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdPromorulesPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdPromorulesPostBodyFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			ends_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			starts_at: new FormControl<Date | null | undefined>(undefined),
			target: new FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined, [Validators.required]),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdPromorulesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdPromorulesReturn_links?: Array<PostEcommerceStoresIdPromorulesReturn_links>;

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount?: number | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description?: string | null;

		/** Whether the promo rule is currently enabled. */
		enabled?: boolean | null;

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at?: string | null;

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id?: string | null;

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at?: Date | null;

		/** The target that the discount applies to. */
		target?: GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null;

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title?: string | null;

		/** Type of discount. For free shipping set type to fixed. */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PostEcommerceStoresIdPromorulesReturnFormProperties {

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount: FormControl<number | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description: FormControl<string | null | undefined>,

		/** Whether the promo rule is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at: FormControl<string | null | undefined>,

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id: FormControl<string | null | undefined>,

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at: FormControl<Date | null | undefined>,

		/** The target that the discount applies to. */
		target: FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>,

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed. */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdPromorulesReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdPromorulesReturnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			ends_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			starts_at: new FormControl<Date | null | undefined>(undefined),
			target: new FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdPromorulesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdPromorulesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdPromorulesReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdPromorulesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromorulesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdPromorulesIdReturn_links?: Array<GetEcommerceStoresIdPromorulesIdReturn_links>;

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount?: number | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description?: string | null;

		/** Whether the promo rule is currently enabled. */
		enabled?: boolean | null;

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at?: string | null;

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id?: string | null;

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at?: Date | null;

		/** The target that the discount applies to. */
		target?: GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null;

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title?: string | null;

		/** Type of discount. For free shipping set type to fixed. */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface GetEcommerceStoresIdPromorulesIdReturnFormProperties {

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount: FormControl<number | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description: FormControl<string | null | undefined>,

		/** Whether the promo rule is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at: FormControl<string | null | undefined>,

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id: FormControl<string | null | undefined>,

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at: FormControl<Date | null | undefined>,

		/** The target that the discount applies to. */
		target: FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>,

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed. */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromorulesIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromorulesIdReturnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			ends_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			starts_at: new FormControl<Date | null | undefined>(undefined),
			target: new FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromorulesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdPromorulesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromorulesIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromorulesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPromorulesIdPatchBody {

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount?: number | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description?: string | null;

		/** Whether the promo rule is currently enabled. */
		enabled?: boolean | null;

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at?: string | null;

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at?: Date | null;

		/** The target that the discount applies to. */
		target?: GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null;

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title?: string | null;

		/** Type of discount. For free shipping set type to fixed. */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PatchEcommerceStoresIdPromorulesIdPatchBodyFormProperties {

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount: FormControl<number | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description: FormControl<string | null | undefined>,

		/** Whether the promo rule is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at: FormControl<string | null | undefined>,

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at: FormControl<Date | null | undefined>,

		/** The target that the discount applies to. */
		target: FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>,

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed. */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPromorulesIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPromorulesIdPatchBodyFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			ends_at: new FormControl<string | null | undefined>(undefined),
			starts_at: new FormControl<Date | null | undefined>(undefined),
			target: new FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPromorulesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdPromorulesIdReturn_links?: Array<PatchEcommerceStoresIdPromorulesIdReturn_links>;

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount?: number | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description?: string | null;

		/** Whether the promo rule is currently enabled. */
		enabled?: boolean | null;

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at?: string | null;

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id?: string | null;

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at?: Date | null;

		/** The target that the discount applies to. */
		target?: GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null;

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title?: string | null;

		/** Type of discount. For free shipping set type to fixed. */
		type?: GetEcommerceOrdersReturnOrdersPromosType | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;
	}
	export interface PatchEcommerceStoresIdPromorulesIdReturnFormProperties {

		/** The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive. */
		amount: FormControl<number | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** The description of a promotion restricted to UTF-8 characters with max length 255. */
		description: FormControl<string | null | undefined>,

		/** Whether the promo rule is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format. */
		ends_at: FormControl<string | null | undefined>,

		/** A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50. */
		id: FormControl<string | null | undefined>,

		/** The date and time when the promotion is in effect in ISO 8601 format. */
		starts_at: FormControl<Date | null | undefined>,

		/** The target that the discount applies to. */
		target: FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>,

		/** The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes. */
		title: FormControl<string | null | undefined>,

		/** Type of discount. For free shipping set type to fixed. */
		type: FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPromorulesIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPromorulesIdReturnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			ends_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			starts_at: new FormControl<Date | null | undefined>(undefined),
			target: new FormControl<GetEcommerceStoresIdPromorulesReturnPromo_rulesTarget | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetEcommerceOrdersReturnOrdersPromosType | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPromorulesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdPromorulesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPromorulesIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPromorulesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromocodesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdPromocodesReturn_links?: Array<GetEcommerceStoresIdPromocodesReturn_links>;

		/** An array of objects, each representing promo codes defined for a store. */
		GetEcommerceStoresIdPromocodesReturnPromo_codes?: Array<GetEcommerceStoresIdPromocodesReturnPromo_codes>;

		/** The store id. */
		store_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetEcommerceStoresIdPromocodesReturnFormProperties {

		/** The store id. */
		store_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromocodesReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromocodesReturnFormProperties>({
			store_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromocodesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdPromocodesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromocodesReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromocodesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromocodesReturnPromo_codes {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdPromocodesReturnPromo_codes_links?: Array<GetEcommerceStoresIdPromocodesReturnPromo_codes_links>;

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code?: string | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** Whether the promo code is currently enabled. */
		enabled?: boolean | null;

		/** A unique identifier for the promo Code. */
		id?: string | null;

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url?: string | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;

		/** Number of times promo code has been used. */
		usage_count?: number | null;
	}
	export interface GetEcommerceStoresIdPromocodesReturnPromo_codesFormProperties {

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code: FormControl<string | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** Whether the promo code is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** A unique identifier for the promo Code. */
		id: FormControl<string | null | undefined>,

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url: FormControl<string | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,

		/** Number of times promo code has been used. */
		usage_count: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromocodesReturnPromo_codesFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromocodesReturnPromo_codesFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			redemption_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
			usage_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromocodesReturnPromo_codes_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdPromocodesReturnPromo_codes_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromocodesReturnPromo_codes_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromocodesReturnPromo_codes_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdPromocodesPostBody {

		/**
		 * The discount code. Restricted to UTF-8 characters with max length 50.
		 * Required
		 */
		code: string;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** Whether the promo code is currently enabled. */
		enabled?: boolean | null;

		/**
		 * A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50.
		 * Required
		 */
		id: string;

		/**
		 * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
		 * Required
		 */
		redemption_url: string;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;

		/** Number of times promo code has been used. */
		usage_count?: number | null;
	}
	export interface PostEcommerceStoresIdPromocodesPostBodyFormProperties {

		/**
		 * The discount code. Restricted to UTF-8 characters with max length 50.
		 * Required
		 */
		code: FormControl<string | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** Whether the promo code is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/**
		 * A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
		 * Required
		 */
		redemption_url: FormControl<string | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,

		/** Number of times promo code has been used. */
		usage_count: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdPromocodesPostBodyFormGroup() {
		return new FormGroup<PostEcommerceStoresIdPromocodesPostBodyFormProperties>({
			code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redemption_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
			usage_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdPromocodesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostEcommerceStoresIdPromocodesReturn_links?: Array<PostEcommerceStoresIdPromocodesReturn_links>;

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code?: string | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** Whether the promo code is currently enabled. */
		enabled?: boolean | null;

		/** A unique identifier for the promo Code. */
		id?: string | null;

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url?: string | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;

		/** Number of times promo code has been used. */
		usage_count?: number | null;
	}
	export interface PostEcommerceStoresIdPromocodesReturnFormProperties {

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code: FormControl<string | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** Whether the promo code is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** A unique identifier for the promo Code. */
		id: FormControl<string | null | undefined>,

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url: FormControl<string | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,

		/** Number of times promo code has been used. */
		usage_count: FormControl<number | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdPromocodesReturnFormGroup() {
		return new FormGroup<PostEcommerceStoresIdPromocodesReturnFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			redemption_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
			usage_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostEcommerceStoresIdPromocodesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostEcommerceStoresIdPromocodesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostEcommerceStoresIdPromocodesReturn_linksFormGroup() {
		return new FormGroup<PostEcommerceStoresIdPromocodesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromocodesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetEcommerceStoresIdPromocodesIdReturn_links?: Array<GetEcommerceStoresIdPromocodesIdReturn_links>;

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code?: string | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** Whether the promo code is currently enabled. */
		enabled?: boolean | null;

		/** A unique identifier for the promo Code. */
		id?: string | null;

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url?: string | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;

		/** Number of times promo code has been used. */
		usage_count?: number | null;
	}
	export interface GetEcommerceStoresIdPromocodesIdReturnFormProperties {

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code: FormControl<string | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** Whether the promo code is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** A unique identifier for the promo Code. */
		id: FormControl<string | null | undefined>,

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url: FormControl<string | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,

		/** Number of times promo code has been used. */
		usage_count: FormControl<number | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromocodesIdReturnFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromocodesIdReturnFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			redemption_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
			usage_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetEcommerceStoresIdPromocodesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetEcommerceStoresIdPromocodesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetEcommerceStoresIdPromocodesIdReturn_linksFormGroup() {
		return new FormGroup<GetEcommerceStoresIdPromocodesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPromocodesIdPatchBody {

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code?: string | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** Whether the promo code is currently enabled. */
		enabled?: boolean | null;

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url?: string | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;

		/** Number of times promo code has been used. */
		usage_count?: number | null;
	}
	export interface PatchEcommerceStoresIdPromocodesIdPatchBodyFormProperties {

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code: FormControl<string | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** Whether the promo code is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url: FormControl<string | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,

		/** Number of times promo code has been used. */
		usage_count: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPromocodesIdPatchBodyFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPromocodesIdPatchBodyFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			redemption_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
			usage_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPromocodesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchEcommerceStoresIdPromocodesIdReturn_links?: Array<PatchEcommerceStoresIdPromocodesIdReturn_links>;

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code?: string | null;

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign?: Date | null;

		/** Whether the promo code is currently enabled. */
		enabled?: boolean | null;

		/** A unique identifier for the promo Code. */
		id?: string | null;

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url?: string | null;

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign?: Date | null;

		/** Number of times promo code has been used. */
		usage_count?: number | null;
	}
	export interface PatchEcommerceStoresIdPromocodesIdReturnFormProperties {

		/** The discount code. Restricted to UTF-8 characters with max length 50. */
		code: FormControl<string | null | undefined>,

		/** The date and time the promotion was created in ISO 8601 format. */
		created_at_foreign: FormControl<Date | null | undefined>,

		/** Whether the promo code is currently enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** A unique identifier for the promo Code. */
		id: FormControl<string | null | undefined>,

		/** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
		redemption_url: FormControl<string | null | undefined>,

		/** The date and time the promotion was updated in ISO 8601 format. */
		updated_at_foreign: FormControl<Date | null | undefined>,

		/** Number of times promo code has been used. */
		usage_count: FormControl<number | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPromocodesIdReturnFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPromocodesIdReturnFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			created_at_foreign: new FormControl<Date | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			redemption_url: new FormControl<string | null | undefined>(undefined),
			updated_at_foreign: new FormControl<Date | null | undefined>(undefined),
			usage_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchEcommerceStoresIdPromocodesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchEcommerceStoresIdPromocodesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchEcommerceStoresIdPromocodesIdReturn_linksFormGroup() {
		return new FormGroup<PatchEcommerceStoresIdPromocodesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetAllFacebookAdsSort_field { created_at = 0, updated_at = 1, end_time = 2 }

	export interface GetAllFacebookAdsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAllFacebookAdsReturn_links?: Array<GetAllFacebookAdsReturn_links>;
		facebook_ads?: Array<string>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetAllFacebookAdsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetAllFacebookAdsReturnFormGroup() {
		return new FormGroup<GetAllFacebookAdsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAllFacebookAdsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAllFacebookAdsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAllFacebookAdsReturn_linksFormGroup() {
		return new FormGroup<GetAllFacebookAdsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFacebookAdsIdReturn {

		/** The date and time the outreach was canceled in ISO 8601 format. */
		canceled_at?: Date | null;

		/** The date and time the outreach was created in ISO 8601 format. */
		create_time?: Date | null;

		/** If this outreach targets a segment of your audience. */
		has_segment?: boolean | null;

		/** Unique ID of an Outreach. */
		id?: string | null;

		/** Title or name of an Outreach. */
		name?: string | null;

		/** The date and time the outreach was (or will be) published in ISO 8601 format. */
		published_time?: Date | null;

		/** High level audience information for who the outreach targets. */
		recipients?: GetFacebookAdsIdReturnRecipients;

		/** High level reporting stats for an outreach. */
		report_summary?: GetFacebookAdsIdReturnReport_summary;

		/** Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context. */
		show_report?: boolean | null;

		/** The date and time the outreach was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The status of this outreach. */
		status?: GetFacebookAdsIdReturnStatus | null;

		/** The URL of the thumbnail for this outreach. */
		thumbnail?: string | null;

		/** The type of outreach this object is. */
		type?: GetFacebookAdsIdReturnType | null;

		/** The date and time the outreach was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetFacebookAdsIdReturnFormProperties {

		/** The date and time the outreach was canceled in ISO 8601 format. */
		canceled_at: FormControl<Date | null | undefined>,

		/** The date and time the outreach was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** If this outreach targets a segment of your audience. */
		has_segment: FormControl<boolean | null | undefined>,

		/** Unique ID of an Outreach. */
		id: FormControl<string | null | undefined>,

		/** Title or name of an Outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the outreach was (or will be) published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context. */
		show_report: FormControl<boolean | null | undefined>,

		/** The date and time the outreach was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The status of this outreach. */
		status: FormControl<GetFacebookAdsIdReturnStatus | null | undefined>,

		/** The URL of the thumbnail for this outreach. */
		thumbnail: FormControl<string | null | undefined>,

		/** The type of outreach this object is. */
		type: FormControl<GetFacebookAdsIdReturnType | null | undefined>,

		/** The date and time the outreach was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetFacebookAdsIdReturnFormGroup() {
		return new FormGroup<GetFacebookAdsIdReturnFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			has_segment: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			show_report: new FormControl<boolean | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetFacebookAdsIdReturnStatus | null | undefined>(undefined),
			thumbnail: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFacebookAdsIdReturnType | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFacebookAdsIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetFacebookAdsIdReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetFacebookAdsIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetFacebookAdsIdReturnRecipientsFormGroup() {
		return new FormGroup<GetFacebookAdsIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFacebookAdsIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetFacebookAdsIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetFacebookAdsIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetFacebookAdsIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFacebookAdsIdReturnReport_summary {
		click_rate?: number | null;
		clicks?: number | null;
		conversion_rate?: number | null;
		ecommerce?: GetFacebookAdsIdReturnReport_summaryEcommerce;
		engagements?: number | null;
		impressions?: number | null;
		open_rate?: number | null;
		opens?: number | null;
		reach?: number | null;
		subscriber_clicks?: number | null;
		subscribes?: number | null;
		total_sent?: number | null;
		unique_opens?: number | null;
		unique_visits?: number | null;
		visits?: number | null;
	}
	export interface GetFacebookAdsIdReturnReport_summaryFormProperties {
		click_rate: FormControl<number | null | undefined>,
		clicks: FormControl<number | null | undefined>,
		conversion_rate: FormControl<number | null | undefined>,
		engagements: FormControl<number | null | undefined>,
		impressions: FormControl<number | null | undefined>,
		open_rate: FormControl<number | null | undefined>,
		opens: FormControl<number | null | undefined>,
		reach: FormControl<number | null | undefined>,
		subscriber_clicks: FormControl<number | null | undefined>,
		subscribes: FormControl<number | null | undefined>,
		total_sent: FormControl<number | null | undefined>,
		unique_opens: FormControl<number | null | undefined>,
		unique_visits: FormControl<number | null | undefined>,
		visits: FormControl<number | null | undefined>,
	}
	export function CreateGetFacebookAdsIdReturnReport_summaryFormGroup() {
		return new FormGroup<GetFacebookAdsIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			conversion_rate: new FormControl<number | null | undefined>(undefined),
			engagements: new FormControl<number | null | undefined>(undefined),
			impressions: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			reach: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			subscribes: new FormControl<number | null | undefined>(undefined),
			total_sent: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unique_visits: new FormControl<number | null | undefined>(undefined),
			visits: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFacebookAdsIdReturnReport_summaryEcommerce {
		average_order_revenue?: number | null;
		currency_code?: string | null;
		total_revenue?: number | null;
	}
	export interface GetFacebookAdsIdReturnReport_summaryEcommerceFormProperties {
		average_order_revenue: FormControl<number | null | undefined>,
		currency_code: FormControl<string | null | undefined>,
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetFacebookAdsIdReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<GetFacebookAdsIdReturnReport_summaryEcommerceFormProperties>({
			average_order_revenue: new FormControl<number | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetFacebookAdsIdReturnStatus { save = 0, paused = 1, schedule = 2, scheduled = 3, sending = 4, sent = 5, canceled = 6, canceling = 7, active = 8, disconnected = 9, somepaused = 10, draft = 11, completed = 12, partialRejected = 13, pending = 14, rejected = 15, published = 16, unpublished = 17 }

	export enum GetFacebookAdsIdReturnType { regular = 0, 'email-touchpoint' = 1, plaintext = 2, rss = 3, reconfirm = 4, variate = 5, absplit = 6, automation = 7, facebook = 8, google = 9, autoresponder = 10, transactional = 11, page = 12, website = 13, social_post = 14, survey = 15, customer_journey = 16 }

	export enum GetFileManagerFilesSort_field { added_date = 0, name = 1, size = 2 }

	export interface GetFileManagerFilesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFilesReturn_links?: Array<GetFileManagerFilesReturn_links>;

		/** A list of files and images in an account. */
		GetFileManagerFilesReturnFiles?: Array<GetFileManagerFilesReturnFiles>;

		/** The total size of all File Manager files in bytes. */
		total_file_size?: number | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetFileManagerFilesReturnFormProperties {

		/** The total size of all File Manager files in bytes. */
		total_file_size: FormControl<number | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetFileManagerFilesReturnFormGroup() {
		return new FormGroup<GetFileManagerFilesReturnFormProperties>({
			total_file_size: new FormControl<number | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFilesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFilesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFilesReturn_linksFormGroup() {
		return new FormGroup<GetFileManagerFilesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFilesReturnFiles {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFilesReturnFiles_links?: Array<GetFileManagerFilesReturnFiles_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that uploaded the file. */
		created_by?: string | null;

		/** The id of the folder. */
		folder_id?: number | null;

		/** The url of the full-size file. */
		full_size_url?: string | null;

		/** The height of an image. */
		height?: number | null;

		/** The unique id of the file. */
		id?: number | null;

		/** The name of the file. */
		name?: string | null;

		/** The size of the file in bytes. */
		size?: number | null;

		/** The url of the thumbnail preview. */
		thumbnail_url?: string | null;

		/** The type of file in the File Manager. */
		type?: GetFileManagerFilesReturnFilesType | null;

		/** The width of the image. */
		width?: number | null;
	}
	export interface GetFileManagerFilesReturnFilesFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that uploaded the file. */
		created_by: FormControl<string | null | undefined>,

		/** The id of the folder. */
		folder_id: FormControl<number | null | undefined>,

		/** The url of the full-size file. */
		full_size_url: FormControl<string | null | undefined>,

		/** The height of an image. */
		height: FormControl<number | null | undefined>,

		/** The unique id of the file. */
		id: FormControl<number | null | undefined>,

		/** The name of the file. */
		name: FormControl<string | null | undefined>,

		/** The size of the file in bytes. */
		size: FormControl<number | null | undefined>,

		/** The url of the thumbnail preview. */
		thumbnail_url: FormControl<string | null | undefined>,

		/** The type of file in the File Manager. */
		type: FormControl<GetFileManagerFilesReturnFilesType | null | undefined>,

		/** The width of the image. */
		width: FormControl<number | null | undefined>,
	}
	export function CreateGetFileManagerFilesReturnFilesFormGroup() {
		return new FormGroup<GetFileManagerFilesReturnFilesFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<number | null | undefined>(undefined),
			full_size_url: new FormControl<string | null | undefined>(undefined),
			height: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			thumbnail_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFileManagerFilesReturnFilesType | null | undefined>(undefined),
			width: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFilesReturnFiles_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFilesReturnFiles_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFilesReturnFiles_linksFormGroup() {
		return new FormGroup<GetFileManagerFilesReturnFiles_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetFileManagerFilesReturnFilesType { image = 0, file = 1 }

	export interface PostFileManagerFilesPostBody {

		/**
		 * The base64-encoded contents of the file.
		 * Required
		 */
		file_data: string;

		/** The id of the folder. */
		folder_id?: number | null;

		/**
		 * The name of the file.
		 * Required
		 */
		name: string;
	}
	export interface PostFileManagerFilesPostBodyFormProperties {

		/**
		 * The base64-encoded contents of the file.
		 * Required
		 */
		file_data: FormControl<string | null | undefined>,

		/** The id of the folder. */
		folder_id: FormControl<number | null | undefined>,

		/**
		 * The name of the file.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostFileManagerFilesPostBodyFormGroup() {
		return new FormGroup<PostFileManagerFilesPostBodyFormProperties>({
			file_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			folder_id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostFileManagerFilesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostFileManagerFilesReturn_links?: Array<PostFileManagerFilesReturn_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that uploaded the file. */
		created_by?: string | null;

		/** The id of the folder. */
		folder_id?: number | null;

		/** The url of the full-size file. */
		full_size_url?: string | null;

		/** The height of an image. */
		height?: number | null;

		/** The unique id of the file. */
		id?: number | null;

		/** The name of the file. */
		name?: string | null;

		/** The size of the file in bytes. */
		size?: number | null;

		/** The url of the thumbnail preview. */
		thumbnail_url?: string | null;

		/** The type of file in the File Manager. */
		type?: GetFileManagerFilesReturnFilesType | null;

		/** The width of the image. */
		width?: number | null;
	}
	export interface PostFileManagerFilesReturnFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that uploaded the file. */
		created_by: FormControl<string | null | undefined>,

		/** The id of the folder. */
		folder_id: FormControl<number | null | undefined>,

		/** The url of the full-size file. */
		full_size_url: FormControl<string | null | undefined>,

		/** The height of an image. */
		height: FormControl<number | null | undefined>,

		/** The unique id of the file. */
		id: FormControl<number | null | undefined>,

		/** The name of the file. */
		name: FormControl<string | null | undefined>,

		/** The size of the file in bytes. */
		size: FormControl<number | null | undefined>,

		/** The url of the thumbnail preview. */
		thumbnail_url: FormControl<string | null | undefined>,

		/** The type of file in the File Manager. */
		type: FormControl<GetFileManagerFilesReturnFilesType | null | undefined>,

		/** The width of the image. */
		width: FormControl<number | null | undefined>,
	}
	export function CreatePostFileManagerFilesReturnFormGroup() {
		return new FormGroup<PostFileManagerFilesReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<number | null | undefined>(undefined),
			full_size_url: new FormControl<string | null | undefined>(undefined),
			height: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			thumbnail_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFileManagerFilesReturnFilesType | null | undefined>(undefined),
			width: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostFileManagerFilesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostFileManagerFilesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostFileManagerFilesReturn_linksFormGroup() {
		return new FormGroup<PostFileManagerFilesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFilesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFilesIdReturn_links?: Array<GetFileManagerFilesIdReturn_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that uploaded the file. */
		created_by?: string | null;

		/** The id of the folder. */
		folder_id?: number | null;

		/** The url of the full-size file. */
		full_size_url?: string | null;

		/** The height of an image. */
		height?: number | null;

		/** The unique id of the file. */
		id?: number | null;

		/** The name of the file. */
		name?: string | null;

		/** The size of the file in bytes. */
		size?: number | null;

		/** The url of the thumbnail preview. */
		thumbnail_url?: string | null;

		/** The type of file in the File Manager. */
		type?: GetFileManagerFilesReturnFilesType | null;

		/** The width of the image. */
		width?: number | null;
	}
	export interface GetFileManagerFilesIdReturnFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that uploaded the file. */
		created_by: FormControl<string | null | undefined>,

		/** The id of the folder. */
		folder_id: FormControl<number | null | undefined>,

		/** The url of the full-size file. */
		full_size_url: FormControl<string | null | undefined>,

		/** The height of an image. */
		height: FormControl<number | null | undefined>,

		/** The unique id of the file. */
		id: FormControl<number | null | undefined>,

		/** The name of the file. */
		name: FormControl<string | null | undefined>,

		/** The size of the file in bytes. */
		size: FormControl<number | null | undefined>,

		/** The url of the thumbnail preview. */
		thumbnail_url: FormControl<string | null | undefined>,

		/** The type of file in the File Manager. */
		type: FormControl<GetFileManagerFilesReturnFilesType | null | undefined>,

		/** The width of the image. */
		width: FormControl<number | null | undefined>,
	}
	export function CreateGetFileManagerFilesIdReturnFormGroup() {
		return new FormGroup<GetFileManagerFilesIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<number | null | undefined>(undefined),
			full_size_url: new FormControl<string | null | undefined>(undefined),
			height: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			thumbnail_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFileManagerFilesReturnFilesType | null | undefined>(undefined),
			width: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFilesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFilesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFilesIdReturn_linksFormGroup() {
		return new FormGroup<GetFileManagerFilesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchFileManagerFilesIdPatchBody {

		/** The id of the folder. Setting `folder_id` to `0` will remove a file from its current folder. */
		folder_id?: number | null;

		/** The name of the file. */
		name?: string | null;
	}
	export interface PatchFileManagerFilesIdPatchBodyFormProperties {

		/** The id of the folder. Setting `folder_id` to `0` will remove a file from its current folder. */
		folder_id: FormControl<number | null | undefined>,

		/** The name of the file. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePatchFileManagerFilesIdPatchBodyFormGroup() {
		return new FormGroup<PatchFileManagerFilesIdPatchBodyFormProperties>({
			folder_id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchFileManagerFilesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchFileManagerFilesIdReturn_links?: Array<PatchFileManagerFilesIdReturn_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that uploaded the file. */
		created_by?: string | null;

		/** The id of the folder. */
		folder_id?: number | null;

		/** The url of the full-size file. */
		full_size_url?: string | null;

		/** The height of an image. */
		height?: number | null;

		/** The unique id of the file. */
		id?: number | null;

		/** The name of the file. */
		name?: string | null;

		/** The size of the file in bytes. */
		size?: number | null;

		/** The url of the thumbnail preview. */
		thumbnail_url?: string | null;

		/** The type of file in the File Manager. */
		type?: GetFileManagerFilesReturnFilesType | null;

		/** The width of the image. */
		width?: number | null;
	}
	export interface PatchFileManagerFilesIdReturnFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that uploaded the file. */
		created_by: FormControl<string | null | undefined>,

		/** The id of the folder. */
		folder_id: FormControl<number | null | undefined>,

		/** The url of the full-size file. */
		full_size_url: FormControl<string | null | undefined>,

		/** The height of an image. */
		height: FormControl<number | null | undefined>,

		/** The unique id of the file. */
		id: FormControl<number | null | undefined>,

		/** The name of the file. */
		name: FormControl<string | null | undefined>,

		/** The size of the file in bytes. */
		size: FormControl<number | null | undefined>,

		/** The url of the thumbnail preview. */
		thumbnail_url: FormControl<string | null | undefined>,

		/** The type of file in the File Manager. */
		type: FormControl<GetFileManagerFilesReturnFilesType | null | undefined>,

		/** The width of the image. */
		width: FormControl<number | null | undefined>,
	}
	export function CreatePatchFileManagerFilesIdReturnFormGroup() {
		return new FormGroup<PatchFileManagerFilesIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<number | null | undefined>(undefined),
			full_size_url: new FormControl<string | null | undefined>(undefined),
			height: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			thumbnail_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFileManagerFilesReturnFilesType | null | undefined>(undefined),
			width: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchFileManagerFilesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchFileManagerFilesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchFileManagerFilesIdReturn_linksFormGroup() {
		return new FormGroup<PatchFileManagerFilesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFoldersReturn_links?: Array<GetFileManagerFoldersReturn_links>;

		/** A list of all folders in the File Manager. */
		GetFileManagerFoldersReturnFolders?: Array<GetFileManagerFoldersReturnFolders>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetFileManagerFoldersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetFileManagerFoldersReturnFormGroup() {
		return new FormGroup<GetFileManagerFoldersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFoldersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersReturn_linksFormGroup() {
		return new FormGroup<GetFileManagerFoldersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersReturnFolders {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFoldersReturnFolders_links?: Array<GetFileManagerFoldersReturnFolders_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that created the folder. */
		created_by?: string | null;

		/** The number of files in the folder. */
		file_count?: number | null;

		/** The unique id for the folder. */
		id?: number | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface GetFileManagerFoldersReturnFoldersFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that created the folder. */
		created_by: FormControl<string | null | undefined>,

		/** The number of files in the folder. */
		file_count: FormControl<number | null | undefined>,

		/** The unique id for the folder. */
		id: FormControl<number | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersReturnFoldersFormGroup() {
		return new FormGroup<GetFileManagerFoldersReturnFoldersFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			file_count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersReturnFolders_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFoldersReturnFolders_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersReturnFolders_linksFormGroup() {
		return new FormGroup<GetFileManagerFoldersReturnFolders_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostFileManagerFoldersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostFileManagerFoldersReturn_links?: Array<PostFileManagerFoldersReturn_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that created the folder. */
		created_by?: string | null;

		/** The number of files in the folder. */
		file_count?: number | null;

		/** The unique id for the folder. */
		id?: number | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface PostFileManagerFoldersReturnFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that created the folder. */
		created_by: FormControl<string | null | undefined>,

		/** The number of files in the folder. */
		file_count: FormControl<number | null | undefined>,

		/** The unique id for the folder. */
		id: FormControl<number | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostFileManagerFoldersReturnFormGroup() {
		return new FormGroup<PostFileManagerFoldersReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			file_count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostFileManagerFoldersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostFileManagerFoldersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostFileManagerFoldersReturn_linksFormGroup() {
		return new FormGroup<PostFileManagerFoldersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFoldersIdReturn_links?: Array<GetFileManagerFoldersIdReturn_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that created the folder. */
		created_by?: string | null;

		/** The number of files in the folder. */
		file_count?: number | null;

		/** The unique id for the folder. */
		id?: number | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface GetFileManagerFoldersIdReturnFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that created the folder. */
		created_by: FormControl<string | null | undefined>,

		/** The number of files in the folder. */
		file_count: FormControl<number | null | undefined>,

		/** The unique id for the folder. */
		id: FormControl<number | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersIdReturnFormGroup() {
		return new FormGroup<GetFileManagerFoldersIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			file_count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFoldersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersIdReturn_linksFormGroup() {
		return new FormGroup<GetFileManagerFoldersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchFileManagerFoldersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchFileManagerFoldersIdReturn_links?: Array<PatchFileManagerFoldersIdReturn_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that created the folder. */
		created_by?: string | null;

		/** The number of files in the folder. */
		file_count?: number | null;

		/** The unique id for the folder. */
		id?: number | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface PatchFileManagerFoldersIdReturnFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that created the folder. */
		created_by: FormControl<string | null | undefined>,

		/** The number of files in the folder. */
		file_count: FormControl<number | null | undefined>,

		/** The unique id for the folder. */
		id: FormControl<number | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePatchFileManagerFoldersIdReturnFormGroup() {
		return new FormGroup<PatchFileManagerFoldersIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			file_count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchFileManagerFoldersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchFileManagerFoldersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchFileManagerFoldersIdReturn_linksFormGroup() {
		return new FormGroup<PatchFileManagerFoldersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersFilesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFoldersFilesReturn_links?: Array<GetFileManagerFoldersFilesReturn_links>;

		/** A list of files and images in an account. */
		GetFileManagerFoldersFilesReturnFiles?: Array<GetFileManagerFoldersFilesReturnFiles>;

		/** The total size of all File Manager files in bytes. */
		total_file_size?: number | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetFileManagerFoldersFilesReturnFormProperties {

		/** The total size of all File Manager files in bytes. */
		total_file_size: FormControl<number | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetFileManagerFoldersFilesReturnFormGroup() {
		return new FormGroup<GetFileManagerFoldersFilesReturnFormProperties>({
			total_file_size: new FormControl<number | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersFilesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFoldersFilesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersFilesReturn_linksFormGroup() {
		return new FormGroup<GetFileManagerFoldersFilesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersFilesReturnFiles {

		/** A list of link types and descriptions for the API schema documents. */
		GetFileManagerFoldersFilesReturnFiles_links?: Array<GetFileManagerFoldersFilesReturnFiles_links>;

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at?: Date | null;

		/** The username of the profile that uploaded the file. */
		created_by?: string | null;

		/** The id of the folder. */
		folder_id?: number | null;

		/** The url of the full-size file. */
		full_size_url?: string | null;

		/** The height of an image. */
		height?: number | null;

		/** The unique id of the file. */
		id?: number | null;

		/** The name of the file. */
		name?: string | null;

		/** The size of the file in bytes. */
		size?: number | null;

		/** The url of the thumbnail preview. */
		thumbnail_url?: string | null;

		/** The type of file in the File Manager. */
		type?: GetFileManagerFilesReturnFilesType | null;

		/** The width of the image. */
		width?: number | null;
	}
	export interface GetFileManagerFoldersFilesReturnFilesFormProperties {

		/** The date and time a file was added to the File Manager in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The username of the profile that uploaded the file. */
		created_by: FormControl<string | null | undefined>,

		/** The id of the folder. */
		folder_id: FormControl<number | null | undefined>,

		/** The url of the full-size file. */
		full_size_url: FormControl<string | null | undefined>,

		/** The height of an image. */
		height: FormControl<number | null | undefined>,

		/** The unique id of the file. */
		id: FormControl<number | null | undefined>,

		/** The name of the file. */
		name: FormControl<string | null | undefined>,

		/** The size of the file in bytes. */
		size: FormControl<number | null | undefined>,

		/** The url of the thumbnail preview. */
		thumbnail_url: FormControl<string | null | undefined>,

		/** The type of file in the File Manager. */
		type: FormControl<GetFileManagerFilesReturnFilesType | null | undefined>,

		/** The width of the image. */
		width: FormControl<number | null | undefined>,
	}
	export function CreateGetFileManagerFoldersFilesReturnFilesFormGroup() {
		return new FormGroup<GetFileManagerFoldersFilesReturnFilesFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<number | null | undefined>(undefined),
			full_size_url: new FormControl<string | null | undefined>(undefined),
			height: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			thumbnail_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFileManagerFilesReturnFilesType | null | undefined>(undefined),
			width: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetFileManagerFoldersFilesReturnFiles_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetFileManagerFoldersFilesReturnFiles_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetFileManagerFoldersFilesReturnFiles_linksFormGroup() {
		return new FormGroup<GetFileManagerFoldersFilesReturnFiles_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetAllLandingPagesSort_field { created_at = 0, updated_at = 1 }

	export interface GetAllLandingPagesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetAllLandingPagesReturn_links?: Array<GetAllLandingPagesReturn_links>;

		/** The landing pages on the account */
		GetAllLandingPagesReturnLanding_pages?: Array<GetAllLandingPagesReturnLanding_pages>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetAllLandingPagesReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetAllLandingPagesReturnFormGroup() {
		return new FormGroup<GetAllLandingPagesReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAllLandingPagesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAllLandingPagesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAllLandingPagesReturn_linksFormGroup() {
		return new FormGroup<GetAllLandingPagesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetAllLandingPagesReturnLanding_pages {

		/** A list of link types and descriptions for the API schema documents. */
		GetAllLandingPagesReturnLanding_pages_links?: Array<GetAllLandingPagesReturnLanding_pages_links>;

		/** The time this landing page was created. */
		created_at?: Date | null;

		/** Created by mobile or web */
		created_by_source?: string | null;

		/** The description of this landing page. */
		description?: string | null;

		/** A string that uniquely identifies this landing page. */
		id?: string | null;

		/** The list's ID associated with this landing page. */
		list_id?: string | null;

		/** The name of this landing page. */
		name?: string | null;

		/** The time this landing page was published. */
		published_at?: Date | null;

		/** The status of this landing page. */
		status?: GetAllLandingPagesReturnLanding_pagesStatus | null;

		/** The ID of the store associated with this landing page. */
		store_id?: string | null;

		/** The template_id of this landing page. */
		template_id?: number | null;

		/** The title of this landing page seen in the browser's title bar. */
		title?: string | null;

		/** The tracking settings applied to this landing page. */
		tracking?: GetAllLandingPagesReturnLanding_pagesTracking;

		/** The time this landing page was unpublished. */
		unpublished_at?: Date | null;

		/** The time this landing page was updated at. */
		updated_at?: Date | null;

		/** The url of the published landing page. */
		url?: string | null;

		/** The ID used in the Mailchimp web application. */
		web_id?: number | null;
	}
	export interface GetAllLandingPagesReturnLanding_pagesFormProperties {

		/** The time this landing page was created. */
		created_at: FormControl<Date | null | undefined>,

		/** Created by mobile or web */
		created_by_source: FormControl<string | null | undefined>,

		/** The description of this landing page. */
		description: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this landing page. */
		id: FormControl<string | null | undefined>,

		/** The list's ID associated with this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** The name of this landing page. */
		name: FormControl<string | null | undefined>,

		/** The time this landing page was published. */
		published_at: FormControl<Date | null | undefined>,

		/** The status of this landing page. */
		status: FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>,

		/** The ID of the store associated with this landing page. */
		store_id: FormControl<string | null | undefined>,

		/** The template_id of this landing page. */
		template_id: FormControl<number | null | undefined>,

		/** The title of this landing page seen in the browser's title bar. */
		title: FormControl<string | null | undefined>,

		/** The time this landing page was unpublished. */
		unpublished_at: FormControl<Date | null | undefined>,

		/** The time this landing page was updated at. */
		updated_at: FormControl<Date | null | undefined>,

		/** The url of the published landing page. */
		url: FormControl<string | null | undefined>,

		/** The ID used in the Mailchimp web application. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetAllLandingPagesReturnLanding_pagesFormGroup() {
		return new FormGroup<GetAllLandingPagesReturnLanding_pagesFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by_source: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			unpublished_at: new FormControl<Date | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetAllLandingPagesReturnLanding_pages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetAllLandingPagesReturnLanding_pages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetAllLandingPagesReturnLanding_pages_linksFormGroup() {
		return new FormGroup<GetAllLandingPagesReturnLanding_pages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetAllLandingPagesReturnLanding_pagesStatus { published = 0, unpublished = 1, draft = 2 }

	export interface GetAllLandingPagesReturnLanding_pagesTracking {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing?: boolean | null;

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp?: boolean | null;
	}
	export interface GetAllLandingPagesReturnLanding_pagesTrackingFormProperties {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing: FormControl<boolean | null | undefined>,

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp: FormControl<boolean | null | undefined>,
	}
	export function CreateGetAllLandingPagesReturnLanding_pagesTrackingFormGroup() {
		return new FormGroup<GetAllLandingPagesReturnLanding_pagesTrackingFormProperties>({
			enable_restricted_data_processing: new FormControl<boolean | null | undefined>(undefined),
			track_with_mailchimp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostAllLandingPagesPostBody {

		/** The description of this landing page. */
		description?: string | null;

		/** The list's ID associated with this landing page. */
		list_id?: string | null;

		/** The name of this landing page. */
		name?: string | null;

		/** The ID of the store associated with this landing page. */
		store_id?: string | null;

		/** The template_id of this landing page. */
		template_id?: number | null;

		/** The title of this landing page seen in the browser's title bar. */
		title?: string | null;

		/** The tracking settings applied to this landing page. */
		tracking?: PostAllLandingPagesPostBodyTracking;

		/** The type of template the landing page has. */
		type?: PostAllLandingPagesPostBodyType | null;
	}
	export interface PostAllLandingPagesPostBodyFormProperties {

		/** The description of this landing page. */
		description: FormControl<string | null | undefined>,

		/** The list's ID associated with this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** The name of this landing page. */
		name: FormControl<string | null | undefined>,

		/** The ID of the store associated with this landing page. */
		store_id: FormControl<string | null | undefined>,

		/** The template_id of this landing page. */
		template_id: FormControl<number | null | undefined>,

		/** The title of this landing page seen in the browser's title bar. */
		title: FormControl<string | null | undefined>,

		/** The type of template the landing page has. */
		type: FormControl<PostAllLandingPagesPostBodyType | null | undefined>,
	}
	export function CreatePostAllLandingPagesPostBodyFormGroup() {
		return new FormGroup<PostAllLandingPagesPostBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PostAllLandingPagesPostBodyType | null | undefined>(undefined),
		});

	}

	export interface PostAllLandingPagesPostBodyTracking {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing?: boolean | null;

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp?: boolean | null;
	}
	export interface PostAllLandingPagesPostBodyTrackingFormProperties {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing: FormControl<boolean | null | undefined>,

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp: FormControl<boolean | null | undefined>,
	}
	export function CreatePostAllLandingPagesPostBodyTrackingFormGroup() {
		return new FormGroup<PostAllLandingPagesPostBodyTrackingFormProperties>({
			enable_restricted_data_processing: new FormControl<boolean | null | undefined>(undefined),
			track_with_mailchimp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum PostAllLandingPagesPostBodyType { signup = 0, product = 1 }

	export interface PostAllLandingPagesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostAllLandingPagesReturn_links?: Array<PostAllLandingPagesReturn_links>;

		/** The time this landing page was created. */
		created_at?: Date | null;

		/** Created by mobile or web */
		created_by_source?: string | null;

		/** The description of this landing page. */
		description?: string | null;

		/** A string that uniquely identifies this landing page. */
		id?: string | null;

		/** The list's ID associated with this landing page. */
		list_id?: string | null;

		/** The name of this landing page. */
		name?: string | null;

		/** The time this landing page was published. */
		published_at?: Date | null;

		/** The status of this landing page. */
		status?: GetAllLandingPagesReturnLanding_pagesStatus | null;

		/** The ID of the store associated with this landing page. */
		store_id?: string | null;

		/** The template_id of this landing page. */
		template_id?: number | null;

		/** The title of this landing page seen in the browser's title bar. */
		title?: string | null;

		/** The tracking settings applied to this landing page. */
		tracking?: PostAllLandingPagesReturnTracking;

		/** The time this landing page was unpublished. */
		unpublished_at?: Date | null;

		/** The time this landing page was updated at. */
		updated_at?: Date | null;

		/** The url of the published landing page. */
		url?: string | null;

		/** The ID used in the Mailchimp web application. */
		web_id?: number | null;
	}
	export interface PostAllLandingPagesReturnFormProperties {

		/** The time this landing page was created. */
		created_at: FormControl<Date | null | undefined>,

		/** Created by mobile or web */
		created_by_source: FormControl<string | null | undefined>,

		/** The description of this landing page. */
		description: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this landing page. */
		id: FormControl<string | null | undefined>,

		/** The list's ID associated with this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** The name of this landing page. */
		name: FormControl<string | null | undefined>,

		/** The time this landing page was published. */
		published_at: FormControl<Date | null | undefined>,

		/** The status of this landing page. */
		status: FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>,

		/** The ID of the store associated with this landing page. */
		store_id: FormControl<string | null | undefined>,

		/** The template_id of this landing page. */
		template_id: FormControl<number | null | undefined>,

		/** The title of this landing page seen in the browser's title bar. */
		title: FormControl<string | null | undefined>,

		/** The time this landing page was unpublished. */
		unpublished_at: FormControl<Date | null | undefined>,

		/** The time this landing page was updated at. */
		updated_at: FormControl<Date | null | undefined>,

		/** The url of the published landing page. */
		url: FormControl<string | null | undefined>,

		/** The ID used in the Mailchimp web application. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostAllLandingPagesReturnFormGroup() {
		return new FormGroup<PostAllLandingPagesReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by_source: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			unpublished_at: new FormControl<Date | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostAllLandingPagesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostAllLandingPagesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostAllLandingPagesReturn_linksFormGroup() {
		return new FormGroup<PostAllLandingPagesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostAllLandingPagesReturnTracking {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing?: boolean | null;

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp?: boolean | null;
	}
	export interface PostAllLandingPagesReturnTrackingFormProperties {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing: FormControl<boolean | null | undefined>,

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp: FormControl<boolean | null | undefined>,
	}
	export function CreatePostAllLandingPagesReturnTrackingFormGroup() {
		return new FormGroup<PostAllLandingPagesReturnTrackingFormProperties>({
			enable_restricted_data_processing: new FormControl<boolean | null | undefined>(undefined),
			track_with_mailchimp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetLandingPageIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetLandingPageIdReturn_links?: Array<GetLandingPageIdReturn_links>;

		/** The time this landing page was created. */
		created_at?: Date | null;

		/** Created by mobile or web */
		created_by_source?: string | null;

		/** The description of this landing page. */
		description?: string | null;

		/** A string that uniquely identifies this landing page. */
		id?: string | null;

		/** The list's ID associated with this landing page. */
		list_id?: string | null;

		/** The name of this landing page. */
		name?: string | null;

		/** The time this landing page was published. */
		published_at?: Date | null;

		/** The status of this landing page. */
		status?: GetAllLandingPagesReturnLanding_pagesStatus | null;

		/** The ID of the store associated with this landing page. */
		store_id?: string | null;

		/** The template_id of this landing page. */
		template_id?: number | null;

		/** The title of this landing page seen in the browser's title bar. */
		title?: string | null;

		/** The tracking settings applied to this landing page. */
		tracking?: GetLandingPageIdReturnTracking;

		/** The time this landing page was unpublished. */
		unpublished_at?: Date | null;

		/** The time this landing page was updated at. */
		updated_at?: Date | null;

		/** The url of the published landing page. */
		url?: string | null;

		/** The ID used in the Mailchimp web application. */
		web_id?: number | null;
	}
	export interface GetLandingPageIdReturnFormProperties {

		/** The time this landing page was created. */
		created_at: FormControl<Date | null | undefined>,

		/** Created by mobile or web */
		created_by_source: FormControl<string | null | undefined>,

		/** The description of this landing page. */
		description: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this landing page. */
		id: FormControl<string | null | undefined>,

		/** The list's ID associated with this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** The name of this landing page. */
		name: FormControl<string | null | undefined>,

		/** The time this landing page was published. */
		published_at: FormControl<Date | null | undefined>,

		/** The status of this landing page. */
		status: FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>,

		/** The ID of the store associated with this landing page. */
		store_id: FormControl<string | null | undefined>,

		/** The template_id of this landing page. */
		template_id: FormControl<number | null | undefined>,

		/** The title of this landing page seen in the browser's title bar. */
		title: FormControl<string | null | undefined>,

		/** The time this landing page was unpublished. */
		unpublished_at: FormControl<Date | null | undefined>,

		/** The time this landing page was updated at. */
		updated_at: FormControl<Date | null | undefined>,

		/** The url of the published landing page. */
		url: FormControl<string | null | undefined>,

		/** The ID used in the Mailchimp web application. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetLandingPageIdReturnFormGroup() {
		return new FormGroup<GetLandingPageIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by_source: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			unpublished_at: new FormControl<Date | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetLandingPageIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetLandingPageIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetLandingPageIdReturn_linksFormGroup() {
		return new FormGroup<GetLandingPageIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetLandingPageIdReturnTracking {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing?: boolean | null;

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp?: boolean | null;
	}
	export interface GetLandingPageIdReturnTrackingFormProperties {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing: FormControl<boolean | null | undefined>,

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp: FormControl<boolean | null | undefined>,
	}
	export function CreateGetLandingPageIdReturnTrackingFormGroup() {
		return new FormGroup<GetLandingPageIdReturnTrackingFormProperties>({
			enable_restricted_data_processing: new FormControl<boolean | null | undefined>(undefined),
			track_with_mailchimp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchLandingPageIdPatchBody {

		/** The description of this landing page. */
		description?: string | null;

		/** The list's ID associated with this landing page. */
		list_id?: string | null;

		/** The name of this landing page. */
		name?: string | null;

		/** The ID of the store associated with this landing page. */
		store_id?: string | null;

		/** The title of this landing page seen in the browser's title bar. */
		title?: string | null;

		/** The tracking settings applied to this landing page. */
		tracking?: PatchLandingPageIdPatchBodyTracking;
	}
	export interface PatchLandingPageIdPatchBodyFormProperties {

		/** The description of this landing page. */
		description: FormControl<string | null | undefined>,

		/** The list's ID associated with this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** The name of this landing page. */
		name: FormControl<string | null | undefined>,

		/** The ID of the store associated with this landing page. */
		store_id: FormControl<string | null | undefined>,

		/** The title of this landing page seen in the browser's title bar. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePatchLandingPageIdPatchBodyFormGroup() {
		return new FormGroup<PatchLandingPageIdPatchBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchLandingPageIdPatchBodyTracking {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing?: boolean | null;

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp?: boolean | null;
	}
	export interface PatchLandingPageIdPatchBodyTrackingFormProperties {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing: FormControl<boolean | null | undefined>,

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchLandingPageIdPatchBodyTrackingFormGroup() {
		return new FormGroup<PatchLandingPageIdPatchBodyTrackingFormProperties>({
			enable_restricted_data_processing: new FormControl<boolean | null | undefined>(undefined),
			track_with_mailchimp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchLandingPageIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchLandingPageIdReturn_links?: Array<PatchLandingPageIdReturn_links>;

		/** The time this landing page was created. */
		created_at?: Date | null;

		/** Created by mobile or web */
		created_by_source?: string | null;

		/** The description of this landing page. */
		description?: string | null;

		/** A string that uniquely identifies this landing page. */
		id?: string | null;

		/** The list's ID associated with this landing page. */
		list_id?: string | null;

		/** The name of this landing page. */
		name?: string | null;

		/** The time this landing page was published. */
		published_at?: Date | null;

		/** The status of this landing page. */
		status?: GetAllLandingPagesReturnLanding_pagesStatus | null;

		/** The ID of the store associated with this landing page. */
		store_id?: string | null;

		/** The template_id of this landing page. */
		template_id?: number | null;

		/** The title of this landing page seen in the browser's title bar. */
		title?: string | null;

		/** The tracking settings applied to this landing page. */
		tracking?: PatchLandingPageIdReturnTracking;

		/** The time this landing page was unpublished. */
		unpublished_at?: Date | null;

		/** The time this landing page was updated at. */
		updated_at?: Date | null;

		/** The url of the published landing page. */
		url?: string | null;

		/** The ID used in the Mailchimp web application. */
		web_id?: number | null;
	}
	export interface PatchLandingPageIdReturnFormProperties {

		/** The time this landing page was created. */
		created_at: FormControl<Date | null | undefined>,

		/** Created by mobile or web */
		created_by_source: FormControl<string | null | undefined>,

		/** The description of this landing page. */
		description: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this landing page. */
		id: FormControl<string | null | undefined>,

		/** The list's ID associated with this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** The name of this landing page. */
		name: FormControl<string | null | undefined>,

		/** The time this landing page was published. */
		published_at: FormControl<Date | null | undefined>,

		/** The status of this landing page. */
		status: FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>,

		/** The ID of the store associated with this landing page. */
		store_id: FormControl<string | null | undefined>,

		/** The template_id of this landing page. */
		template_id: FormControl<number | null | undefined>,

		/** The title of this landing page seen in the browser's title bar. */
		title: FormControl<string | null | undefined>,

		/** The time this landing page was unpublished. */
		unpublished_at: FormControl<Date | null | undefined>,

		/** The time this landing page was updated at. */
		updated_at: FormControl<Date | null | undefined>,

		/** The url of the published landing page. */
		url: FormControl<string | null | undefined>,

		/** The ID used in the Mailchimp web application. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchLandingPageIdReturnFormGroup() {
		return new FormGroup<PatchLandingPageIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by_source: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetAllLandingPagesReturnLanding_pagesStatus | null | undefined>(undefined),
			store_id: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			unpublished_at: new FormControl<Date | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchLandingPageIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchLandingPageIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchLandingPageIdReturn_linksFormGroup() {
		return new FormGroup<PatchLandingPageIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchLandingPageIdReturnTracking {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing?: boolean | null;

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp?: boolean | null;
	}
	export interface PatchLandingPageIdReturnTrackingFormProperties {

		/** Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/). */
		enable_restricted_data_processing: FormControl<boolean | null | undefined>,

		/** Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/). */
		track_with_mailchimp: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchLandingPageIdReturnTrackingFormGroup() {
		return new FormGroup<PatchLandingPageIdReturnTrackingFormProperties>({
			enable_restricted_data_processing: new FormControl<boolean | null | undefined>(undefined),
			track_with_mailchimp: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetLandingPageIdContentReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetLandingPageIdContentReturn_links?: Array<GetLandingPageIdContentReturn_links>;

		/** The raw HTML for the landing page. */
		html?: string | null;

		/** The JSON Structure for the landing page */
		json?: string | null;
	}
	export interface GetLandingPageIdContentReturnFormProperties {

		/** The raw HTML for the landing page. */
		html: FormControl<string | null | undefined>,

		/** The JSON Structure for the landing page */
		json: FormControl<string | null | undefined>,
	}
	export function CreateGetLandingPageIdContentReturnFormGroup() {
		return new FormGroup<GetLandingPageIdContentReturnFormProperties>({
			html: new FormControl<string | null | undefined>(undefined),
			json: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetLandingPageIdContentReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetLandingPageIdContentReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetLandingPageIdContentReturn_linksFormGroup() {
		return new FormGroup<GetLandingPageIdContentReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetListsSort_field { date_created = 0 }

	export interface GetListsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsReturn_links?: Array<GetListsReturn_links>;

		/** Do particular authorization constraints around this collection limit creation of new instances? */
		constraints?: GetListsReturnConstraints;

		/**
		 * An array of objects, each representing a list.
		 * Required
		 */
		GetListsReturnLists: Array<GetListsReturnLists>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsReturnFormGroup() {
		return new FormGroup<GetListsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsReturn_linksFormGroup() {
		return new FormGroup<GetListsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsReturnConstraints {

		/** How many total instances of this resource are already in use? This is independent of any filter conditions applied to the query. Value may be larger than max_instances. As a special case, -1 is returned when access is unlimited. */
		current_total_instances?: number | null;

		/**
		 * How many total instances of this resource are allowed? This is independent of any filter conditions applied to the query. As a special case, -1 indicates unlimited.
		 * Required
		 */
		max_instances: number;

		/**
		 * May the user create additional instances of this resource?
		 * Required
		 */
		may_create: boolean;
	}
	export interface GetListsReturnConstraintsFormProperties {

		/** How many total instances of this resource are already in use? This is independent of any filter conditions applied to the query. Value may be larger than max_instances. As a special case, -1 is returned when access is unlimited. */
		current_total_instances: FormControl<number | null | undefined>,

		/**
		 * How many total instances of this resource are allowed? This is independent of any filter conditions applied to the query. As a special case, -1 indicates unlimited.
		 * Required
		 */
		max_instances: FormControl<number | null | undefined>,

		/**
		 * May the user create additional instances of this resource?
		 * Required
		 */
		may_create: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsReturnConstraintsFormGroup() {
		return new FormGroup<GetListsReturnConstraintsFormProperties>({
			current_total_instances: new FormControl<number | null | undefined>(undefined),
			max_instances: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			may_create: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetListsReturnLists {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsReturnLists_links?: Array<GetListsReturnLists_links>;

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address?: string | null;

		/** [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list. */
		campaign_defaults?: GetListsReturnListsCampaign_defaults;

		/** [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws. */
		contact?: GetListsReturnListsContact;

		/** The date and time that this list was created in ISO 8601 format. */
		date_created?: Date | null;

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin?: boolean | null;

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option?: boolean | null;

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome?: boolean | null;

		/** A string that uniquely identifies this list. */
		id?: string | null;

		/** An auto-generated activity score for the list (0-5). */
		list_rating?: number | null;

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions?: boolean | null;

		/** Any list-specific modules installed for this list. */
		modules?: Array<string>;

		/** The name of the list. */
		name?: string | null;

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe?: string | null;

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe?: string | null;

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder?: string | null;

		/** Stats for the list. Many of these are cached for at least five minutes. */
		stats?: GetListsReturnListsStats;

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long?: string | null;

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short?: string | null;

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar?: boolean | null;

		/** Legacy - visibility settings are no longer used */
		visibility?: GetListsReturnListsVisibility | null;

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetListsReturnListsFormProperties {

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address: FormControl<string | null | undefined>,

		/** The date and time that this list was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin: FormControl<boolean | null | undefined>,

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option: FormControl<boolean | null | undefined>,

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this list. */
		id: FormControl<string | null | undefined>,

		/** An auto-generated activity score for the list (0-5). */
		list_rating: FormControl<number | null | undefined>,

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		name: FormControl<string | null | undefined>,

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe: FormControl<string | null | undefined>,

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe: FormControl<string | null | undefined>,

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder: FormControl<string | null | undefined>,

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long: FormControl<string | null | undefined>,

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short: FormControl<string | null | undefined>,

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar: FormControl<boolean | null | undefined>,

		/** Legacy - visibility settings are no longer used */
		visibility: FormControl<GetListsReturnListsVisibility | null | undefined>,

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsReturnListsFormGroup() {
		return new FormGroup<GetListsReturnListsFormProperties>({
			beamer_address: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			double_optin: new FormControl<boolean | null | undefined>(undefined),
			email_type_option: new FormControl<boolean | null | undefined>(undefined),
			has_welcome: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_rating: new FormControl<number | null | undefined>(undefined),
			marketing_permissions: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notify_on_subscribe: new FormControl<string | null | undefined>(undefined),
			notify_on_unsubscribe: new FormControl<string | null | undefined>(undefined),
			permission_reminder: new FormControl<string | null | undefined>(undefined),
			subscribe_url_long: new FormControl<string | null | undefined>(undefined),
			subscribe_url_short: new FormControl<string | null | undefined>(undefined),
			use_archive_bar: new FormControl<boolean | null | undefined>(undefined),
			visibility: new FormControl<GetListsReturnListsVisibility | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsReturnLists_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsReturnLists_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsReturnLists_linksFormGroup() {
		return new FormGroup<GetListsReturnLists_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsReturnListsCampaign_defaults {

		/** The default from email for campaigns sent to this list. */
		from_email?: string | null;

		/** The default from name for campaigns sent to this list. */
		from_name?: string | null;

		/** The default language for this lists's forms. */
		language?: string | null;

		/** The default subject line for campaigns sent to this list. */
		subject?: string | null;
	}
	export interface GetListsReturnListsCampaign_defaultsFormProperties {

		/** The default from email for campaigns sent to this list. */
		from_email: FormControl<string | null | undefined>,

		/** The default from name for campaigns sent to this list. */
		from_name: FormControl<string | null | undefined>,

		/** The default language for this lists's forms. */
		language: FormControl<string | null | undefined>,

		/** The default subject line for campaigns sent to this list. */
		subject: FormControl<string | null | undefined>,
	}
	export function CreateGetListsReturnListsCampaign_defaultsFormGroup() {
		return new FormGroup<GetListsReturnListsCampaign_defaultsFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsReturnListsContact {

		/** The street address for the list contact. */
		address1?: string | null;

		/** The street address for the list contact. */
		address2?: string | null;

		/** The city for the list contact. */
		city?: string | null;

		/** The company name for the list. */
		company?: string | null;

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country?: string | null;

		/** The phone number for the list contact. */
		phone?: string | null;

		/** The state for the list contact. */
		state?: string | null;

		/** The postal or zip code for the list contact. */
		zip?: string | null;
	}
	export interface GetListsReturnListsContactFormProperties {

		/** The street address for the list contact. */
		address1: FormControl<string | null | undefined>,

		/** The street address for the list contact. */
		address2: FormControl<string | null | undefined>,

		/** The city for the list contact. */
		city: FormControl<string | null | undefined>,

		/** The company name for the list. */
		company: FormControl<string | null | undefined>,

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country: FormControl<string | null | undefined>,

		/** The phone number for the list contact. */
		phone: FormControl<string | null | undefined>,

		/** The state for the list contact. */
		state: FormControl<string | null | undefined>,

		/** The postal or zip code for the list contact. */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateGetListsReturnListsContactFormGroup() {
		return new FormGroup<GetListsReturnListsContactFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsReturnListsStats {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate?: number | null;

		/** The number of campaigns in any status that use this list. */
		campaign_count?: number | null;

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent?: Date | null;

		/** The number of members cleaned from the list. */
		cleaned_count?: number | null;

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send?: number | null;

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate?: number | null;

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date?: Date | null;

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date?: Date | null;

		/** The number of active members in the list. */
		member_count?: number | null;

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send?: number | null;

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate?: number | null;

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate?: number | null;

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts?: number | null;

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count?: number | null;

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send?: number | null;
	}
	export interface GetListsReturnListsStatsFormProperties {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate: FormControl<number | null | undefined>,

		/** The number of campaigns in any status that use this list. */
		campaign_count: FormControl<number | null | undefined>,

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent: FormControl<Date | null | undefined>,

		/** The number of members cleaned from the list. */
		cleaned_count: FormControl<number | null | undefined>,

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send: FormControl<number | null | undefined>,

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate: FormControl<number | null | undefined>,

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date: FormControl<Date | null | undefined>,

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date: FormControl<Date | null | undefined>,

		/** The number of active members in the list. */
		member_count: FormControl<number | null | undefined>,

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send: FormControl<number | null | undefined>,

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate: FormControl<number | null | undefined>,

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate: FormControl<number | null | undefined>,

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send: FormControl<number | null | undefined>,
	}
	export function CreateGetListsReturnListsStatsFormGroup() {
		return new FormGroup<GetListsReturnListsStatsFormProperties>({
			avg_sub_rate: new FormControl<number | null | undefined>(undefined),
			avg_unsub_rate: new FormControl<number | null | undefined>(undefined),
			campaign_count: new FormControl<number | null | undefined>(undefined),
			campaign_last_sent: new FormControl<Date | null | undefined>(undefined),
			cleaned_count: new FormControl<number | null | undefined>(undefined),
			cleaned_count_since_send: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			last_sub_date: new FormControl<Date | null | undefined>(undefined),
			last_unsub_date: new FormControl<Date | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			member_count_since_send: new FormControl<number | null | undefined>(undefined),
			merge_field_count: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			target_sub_rate: new FormControl<number | null | undefined>(undefined),
			total_contacts: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count_since_send: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetListsReturnListsVisibility { pub = 0, prv = 1 }

	export interface PostListsPostBody {

		/**
		 * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
		 * Required
		 */
		campaign_defaults: PostListsPostBodyCampaign_defaults;

		/**
		 * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
		 * Required
		 */
		contact: PostListsPostBodyContact;

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin?: boolean | null;

		/**
		 * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
		 * Required
		 */
		email_type_option: boolean;

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions?: boolean | null;

		/**
		 * The name of the list.
		 * Required
		 */
		name: string;

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe?: string | null;

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe?: string | null;

		/**
		 * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
		 * Required
		 */
		permission_reminder: string;

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar?: boolean | null;
	}
	export interface PostListsPostBodyFormProperties {

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin: FormControl<boolean | null | undefined>,

		/**
		 * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
		 * Required
		 */
		email_type_option: FormControl<boolean | null | undefined>,

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions: FormControl<boolean | null | undefined>,

		/**
		 * The name of the list.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe: FormControl<string | null | undefined>,

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe: FormControl<string | null | undefined>,

		/**
		 * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
		 * Required
		 */
		permission_reminder: FormControl<string | null | undefined>,

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsPostBodyFormGroup() {
		return new FormGroup<PostListsPostBodyFormProperties>({
			double_optin: new FormControl<boolean | null | undefined>(undefined),
			email_type_option: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			marketing_permissions: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notify_on_subscribe: new FormControl<string | null | undefined>(undefined),
			notify_on_unsubscribe: new FormControl<string | null | undefined>(undefined),
			permission_reminder: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			use_archive_bar: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsPostBodyCampaign_defaults {

		/**
		 * The default from email for campaigns sent to this list.
		 * Required
		 */
		from_email: string;

		/**
		 * The default from name for campaigns sent to this list.
		 * Required
		 */
		from_name: string;

		/**
		 * The default language for this lists's forms.
		 * Required
		 */
		language: string;

		/**
		 * The default subject line for campaigns sent to this list.
		 * Required
		 */
		subject: string;
	}
	export interface PostListsPostBodyCampaign_defaultsFormProperties {

		/**
		 * The default from email for campaigns sent to this list.
		 * Required
		 */
		from_email: FormControl<string | null | undefined>,

		/**
		 * The default from name for campaigns sent to this list.
		 * Required
		 */
		from_name: FormControl<string | null | undefined>,

		/**
		 * The default language for this lists's forms.
		 * Required
		 */
		language: FormControl<string | null | undefined>,

		/**
		 * The default subject line for campaigns sent to this list.
		 * Required
		 */
		subject: FormControl<string | null | undefined>,
	}
	export function CreatePostListsPostBodyCampaign_defaultsFormGroup() {
		return new FormGroup<PostListsPostBodyCampaign_defaultsFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			from_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subject: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostListsPostBodyContact {

		/**
		 * The street address for the list contact.
		 * Required
		 */
		address1: string;

		/** The street address for the list contact. */
		address2?: string | null;

		/**
		 * The city for the list contact.
		 * Required
		 */
		city: string;

		/**
		 * The company name for the list.
		 * Required
		 */
		company: string;

		/**
		 * A two-character ISO3166 country code. Defaults to US if invalid.
		 * Required
		 */
		country: string;

		/** The phone number for the list contact. */
		phone?: string | null;

		/** The state for the list contact. */
		state?: string | null;

		/** The postal or zip code for the list contact. */
		zip?: string | null;
	}
	export interface PostListsPostBodyContactFormProperties {

		/**
		 * The street address for the list contact.
		 * Required
		 */
		address1: FormControl<string | null | undefined>,

		/** The street address for the list contact. */
		address2: FormControl<string | null | undefined>,

		/**
		 * The city for the list contact.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The company name for the list.
		 * Required
		 */
		company: FormControl<string | null | undefined>,

		/**
		 * A two-character ISO3166 country code. Defaults to US if invalid.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/** The phone number for the list contact. */
		phone: FormControl<string | null | undefined>,

		/** The state for the list contact. */
		state: FormControl<string | null | undefined>,

		/** The postal or zip code for the list contact. */
		zip: FormControl<string | null | undefined>,
	}
	export function CreatePostListsPostBodyContactFormGroup() {
		return new FormGroup<PostListsPostBodyContactFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsReturn_links?: Array<PostListsReturn_links>;

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address?: string | null;

		/** [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list. */
		campaign_defaults?: PostListsReturnCampaign_defaults;

		/** [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws. */
		contact?: PostListsReturnContact;

		/** The date and time that this list was created in ISO 8601 format. */
		date_created?: Date | null;

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin?: boolean | null;

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option?: boolean | null;

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome?: boolean | null;

		/** A string that uniquely identifies this list. */
		id?: string | null;

		/** An auto-generated activity score for the list (0-5). */
		list_rating?: number | null;

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions?: boolean | null;

		/** Any list-specific modules installed for this list. */
		modules?: Array<string>;

		/** The name of the list. */
		name?: string | null;

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe?: string | null;

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe?: string | null;

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder?: string | null;

		/** Stats for the list. Many of these are cached for at least five minutes. */
		stats?: PostListsReturnStats;

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long?: string | null;

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short?: string | null;

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar?: boolean | null;

		/** Legacy - visibility settings are no longer used */
		visibility?: GetListsReturnListsVisibility | null;

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PostListsReturnFormProperties {

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address: FormControl<string | null | undefined>,

		/** The date and time that this list was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin: FormControl<boolean | null | undefined>,

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option: FormControl<boolean | null | undefined>,

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this list. */
		id: FormControl<string | null | undefined>,

		/** An auto-generated activity score for the list (0-5). */
		list_rating: FormControl<number | null | undefined>,

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		name: FormControl<string | null | undefined>,

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe: FormControl<string | null | undefined>,

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe: FormControl<string | null | undefined>,

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder: FormControl<string | null | undefined>,

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long: FormControl<string | null | undefined>,

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short: FormControl<string | null | undefined>,

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar: FormControl<boolean | null | undefined>,

		/** Legacy - visibility settings are no longer used */
		visibility: FormControl<GetListsReturnListsVisibility | null | undefined>,

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsReturnFormGroup() {
		return new FormGroup<PostListsReturnFormProperties>({
			beamer_address: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			double_optin: new FormControl<boolean | null | undefined>(undefined),
			email_type_option: new FormControl<boolean | null | undefined>(undefined),
			has_welcome: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_rating: new FormControl<number | null | undefined>(undefined),
			marketing_permissions: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notify_on_subscribe: new FormControl<string | null | undefined>(undefined),
			notify_on_unsubscribe: new FormControl<string | null | undefined>(undefined),
			permission_reminder: new FormControl<string | null | undefined>(undefined),
			subscribe_url_long: new FormControl<string | null | undefined>(undefined),
			subscribe_url_short: new FormControl<string | null | undefined>(undefined),
			use_archive_bar: new FormControl<boolean | null | undefined>(undefined),
			visibility: new FormControl<GetListsReturnListsVisibility | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsReturn_linksFormGroup() {
		return new FormGroup<PostListsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsReturnCampaign_defaults {

		/** The default from email for campaigns sent to this list. */
		from_email?: string | null;

		/** The default from name for campaigns sent to this list. */
		from_name?: string | null;

		/** The default language for this lists's forms. */
		language?: string | null;

		/** The default subject line for campaigns sent to this list. */
		subject?: string | null;
	}
	export interface PostListsReturnCampaign_defaultsFormProperties {

		/** The default from email for campaigns sent to this list. */
		from_email: FormControl<string | null | undefined>,

		/** The default from name for campaigns sent to this list. */
		from_name: FormControl<string | null | undefined>,

		/** The default language for this lists's forms. */
		language: FormControl<string | null | undefined>,

		/** The default subject line for campaigns sent to this list. */
		subject: FormControl<string | null | undefined>,
	}
	export function CreatePostListsReturnCampaign_defaultsFormGroup() {
		return new FormGroup<PostListsReturnCampaign_defaultsFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsReturnContact {

		/** The street address for the list contact. */
		address1?: string | null;

		/** The street address for the list contact. */
		address2?: string | null;

		/** The city for the list contact. */
		city?: string | null;

		/** The company name for the list. */
		company?: string | null;

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country?: string | null;

		/** The phone number for the list contact. */
		phone?: string | null;

		/** The state for the list contact. */
		state?: string | null;

		/** The postal or zip code for the list contact. */
		zip?: string | null;
	}
	export interface PostListsReturnContactFormProperties {

		/** The street address for the list contact. */
		address1: FormControl<string | null | undefined>,

		/** The street address for the list contact. */
		address2: FormControl<string | null | undefined>,

		/** The city for the list contact. */
		city: FormControl<string | null | undefined>,

		/** The company name for the list. */
		company: FormControl<string | null | undefined>,

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country: FormControl<string | null | undefined>,

		/** The phone number for the list contact. */
		phone: FormControl<string | null | undefined>,

		/** The state for the list contact. */
		state: FormControl<string | null | undefined>,

		/** The postal or zip code for the list contact. */
		zip: FormControl<string | null | undefined>,
	}
	export function CreatePostListsReturnContactFormGroup() {
		return new FormGroup<PostListsReturnContactFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsReturnStats {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate?: number | null;

		/** The number of campaigns in any status that use this list. */
		campaign_count?: number | null;

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent?: Date | null;

		/** The number of members cleaned from the list. */
		cleaned_count?: number | null;

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send?: number | null;

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate?: number | null;

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date?: Date | null;

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date?: Date | null;

		/** The number of active members in the list. */
		member_count?: number | null;

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send?: number | null;

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate?: number | null;

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate?: number | null;

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts?: number | null;

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count?: number | null;

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send?: number | null;
	}
	export interface PostListsReturnStatsFormProperties {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate: FormControl<number | null | undefined>,

		/** The number of campaigns in any status that use this list. */
		campaign_count: FormControl<number | null | undefined>,

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent: FormControl<Date | null | undefined>,

		/** The number of members cleaned from the list. */
		cleaned_count: FormControl<number | null | undefined>,

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send: FormControl<number | null | undefined>,

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate: FormControl<number | null | undefined>,

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date: FormControl<Date | null | undefined>,

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date: FormControl<Date | null | undefined>,

		/** The number of active members in the list. */
		member_count: FormControl<number | null | undefined>,

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send: FormControl<number | null | undefined>,

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate: FormControl<number | null | undefined>,

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate: FormControl<number | null | undefined>,

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send: FormControl<number | null | undefined>,
	}
	export function CreatePostListsReturnStatsFormGroup() {
		return new FormGroup<PostListsReturnStatsFormProperties>({
			avg_sub_rate: new FormControl<number | null | undefined>(undefined),
			avg_unsub_rate: new FormControl<number | null | undefined>(undefined),
			campaign_count: new FormControl<number | null | undefined>(undefined),
			campaign_last_sent: new FormControl<Date | null | undefined>(undefined),
			cleaned_count: new FormControl<number | null | undefined>(undefined),
			cleaned_count_since_send: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			last_sub_date: new FormControl<Date | null | undefined>(undefined),
			last_unsub_date: new FormControl<Date | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			member_count_since_send: new FormControl<number | null | undefined>(undefined),
			merge_field_count: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			target_sub_rate: new FormControl<number | null | undefined>(undefined),
			total_contacts: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count_since_send: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdReturn_links?: Array<GetListsIdReturn_links>;

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address?: string | null;

		/** [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list. */
		campaign_defaults?: GetListsIdReturnCampaign_defaults;

		/** [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws. */
		contact?: GetListsIdReturnContact;

		/** The date and time that this list was created in ISO 8601 format. */
		date_created?: Date | null;

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin?: boolean | null;

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option?: boolean | null;

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome?: boolean | null;

		/** A string that uniquely identifies this list. */
		id?: string | null;

		/** An auto-generated activity score for the list (0-5). */
		list_rating?: number | null;

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions?: boolean | null;

		/** Any list-specific modules installed for this list. */
		modules?: Array<string>;

		/** The name of the list. */
		name?: string | null;

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe?: string | null;

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe?: string | null;

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder?: string | null;

		/** Stats for the list. Many of these are cached for at least five minutes. */
		stats?: GetListsIdReturnStats;

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long?: string | null;

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short?: string | null;

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar?: boolean | null;

		/** Legacy - visibility settings are no longer used */
		visibility?: GetListsReturnListsVisibility | null;

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetListsIdReturnFormProperties {

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address: FormControl<string | null | undefined>,

		/** The date and time that this list was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin: FormControl<boolean | null | undefined>,

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option: FormControl<boolean | null | undefined>,

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this list. */
		id: FormControl<string | null | undefined>,

		/** An auto-generated activity score for the list (0-5). */
		list_rating: FormControl<number | null | undefined>,

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		name: FormControl<string | null | undefined>,

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe: FormControl<string | null | undefined>,

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe: FormControl<string | null | undefined>,

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder: FormControl<string | null | undefined>,

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long: FormControl<string | null | undefined>,

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short: FormControl<string | null | undefined>,

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar: FormControl<boolean | null | undefined>,

		/** Legacy - visibility settings are no longer used */
		visibility: FormControl<GetListsReturnListsVisibility | null | undefined>,

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdReturnFormGroup() {
		return new FormGroup<GetListsIdReturnFormProperties>({
			beamer_address: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			double_optin: new FormControl<boolean | null | undefined>(undefined),
			email_type_option: new FormControl<boolean | null | undefined>(undefined),
			has_welcome: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_rating: new FormControl<number | null | undefined>(undefined),
			marketing_permissions: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notify_on_subscribe: new FormControl<string | null | undefined>(undefined),
			notify_on_unsubscribe: new FormControl<string | null | undefined>(undefined),
			permission_reminder: new FormControl<string | null | undefined>(undefined),
			subscribe_url_long: new FormControl<string | null | undefined>(undefined),
			subscribe_url_short: new FormControl<string | null | undefined>(undefined),
			use_archive_bar: new FormControl<boolean | null | undefined>(undefined),
			visibility: new FormControl<GetListsReturnListsVisibility | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdReturnCampaign_defaults {

		/** The default from email for campaigns sent to this list. */
		from_email?: string | null;

		/** The default from name for campaigns sent to this list. */
		from_name?: string | null;

		/** The default language for this lists's forms. */
		language?: string | null;

		/** The default subject line for campaigns sent to this list. */
		subject?: string | null;
	}
	export interface GetListsIdReturnCampaign_defaultsFormProperties {

		/** The default from email for campaigns sent to this list. */
		from_email: FormControl<string | null | undefined>,

		/** The default from name for campaigns sent to this list. */
		from_name: FormControl<string | null | undefined>,

		/** The default language for this lists's forms. */
		language: FormControl<string | null | undefined>,

		/** The default subject line for campaigns sent to this list. */
		subject: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdReturnCampaign_defaultsFormGroup() {
		return new FormGroup<GetListsIdReturnCampaign_defaultsFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdReturnContact {

		/** The street address for the list contact. */
		address1?: string | null;

		/** The street address for the list contact. */
		address2?: string | null;

		/** The city for the list contact. */
		city?: string | null;

		/** The company name for the list. */
		company?: string | null;

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country?: string | null;

		/** The phone number for the list contact. */
		phone?: string | null;

		/** The state for the list contact. */
		state?: string | null;

		/** The postal or zip code for the list contact. */
		zip?: string | null;
	}
	export interface GetListsIdReturnContactFormProperties {

		/** The street address for the list contact. */
		address1: FormControl<string | null | undefined>,

		/** The street address for the list contact. */
		address2: FormControl<string | null | undefined>,

		/** The city for the list contact. */
		city: FormControl<string | null | undefined>,

		/** The company name for the list. */
		company: FormControl<string | null | undefined>,

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country: FormControl<string | null | undefined>,

		/** The phone number for the list contact. */
		phone: FormControl<string | null | undefined>,

		/** The state for the list contact. */
		state: FormControl<string | null | undefined>,

		/** The postal or zip code for the list contact. */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdReturnContactFormGroup() {
		return new FormGroup<GetListsIdReturnContactFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdReturnStats {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate?: number | null;

		/** The number of campaigns in any status that use this list. */
		campaign_count?: number | null;

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent?: Date | null;

		/** The number of members cleaned from the list. */
		cleaned_count?: number | null;

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send?: number | null;

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate?: number | null;

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date?: Date | null;

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date?: Date | null;

		/** The number of active members in the list. */
		member_count?: number | null;

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send?: number | null;

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate?: number | null;

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate?: number | null;

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts?: number | null;

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count?: number | null;

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send?: number | null;
	}
	export interface GetListsIdReturnStatsFormProperties {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate: FormControl<number | null | undefined>,

		/** The number of campaigns in any status that use this list. */
		campaign_count: FormControl<number | null | undefined>,

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent: FormControl<Date | null | undefined>,

		/** The number of members cleaned from the list. */
		cleaned_count: FormControl<number | null | undefined>,

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send: FormControl<number | null | undefined>,

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate: FormControl<number | null | undefined>,

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date: FormControl<Date | null | undefined>,

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date: FormControl<Date | null | undefined>,

		/** The number of active members in the list. */
		member_count: FormControl<number | null | undefined>,

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send: FormControl<number | null | undefined>,

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate: FormControl<number | null | undefined>,

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate: FormControl<number | null | undefined>,

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdReturnStatsFormGroup() {
		return new FormGroup<GetListsIdReturnStatsFormProperties>({
			avg_sub_rate: new FormControl<number | null | undefined>(undefined),
			avg_unsub_rate: new FormControl<number | null | undefined>(undefined),
			campaign_count: new FormControl<number | null | undefined>(undefined),
			campaign_last_sent: new FormControl<Date | null | undefined>(undefined),
			cleaned_count: new FormControl<number | null | undefined>(undefined),
			cleaned_count_since_send: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			last_sub_date: new FormControl<Date | null | undefined>(undefined),
			last_unsub_date: new FormControl<Date | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			member_count_since_send: new FormControl<number | null | undefined>(undefined),
			merge_field_count: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			target_sub_rate: new FormControl<number | null | undefined>(undefined),
			total_contacts: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count_since_send: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdPatchBody {

		/**
		 * [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list.
		 * Required
		 */
		campaign_defaults: PatchListsIdPatchBodyCampaign_defaults;

		/**
		 * [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
		 * Required
		 */
		contact: PatchListsIdPatchBodyContact;

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin?: boolean | null;

		/**
		 * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
		 * Required
		 */
		email_type_option: boolean;

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions?: boolean | null;

		/**
		 * The name of the list.
		 * Required
		 */
		name: string;

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe?: string | null;

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe?: string | null;

		/**
		 * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
		 * Required
		 */
		permission_reminder: string;

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar?: boolean | null;
	}
	export interface PatchListsIdPatchBodyFormProperties {

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin: FormControl<boolean | null | undefined>,

		/**
		 * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.
		 * Required
		 */
		email_type_option: FormControl<boolean | null | undefined>,

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions: FormControl<boolean | null | undefined>,

		/**
		 * The name of the list.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe: FormControl<string | null | undefined>,

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe: FormControl<string | null | undefined>,

		/**
		 * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
		 * Required
		 */
		permission_reminder: FormControl<string | null | undefined>,

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchListsIdPatchBodyFormGroup() {
		return new FormGroup<PatchListsIdPatchBodyFormProperties>({
			double_optin: new FormControl<boolean | null | undefined>(undefined),
			email_type_option: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			marketing_permissions: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notify_on_subscribe: new FormControl<string | null | undefined>(undefined),
			notify_on_unsubscribe: new FormControl<string | null | undefined>(undefined),
			permission_reminder: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			use_archive_bar: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdPatchBodyCampaign_defaults {

		/**
		 * The default from email for campaigns sent to this list.
		 * Required
		 */
		from_email: string;

		/**
		 * The default from name for campaigns sent to this list.
		 * Required
		 */
		from_name: string;

		/**
		 * The default language for this lists's forms.
		 * Required
		 */
		language: string;

		/**
		 * The default subject line for campaigns sent to this list.
		 * Required
		 */
		subject: string;
	}
	export interface PatchListsIdPatchBodyCampaign_defaultsFormProperties {

		/**
		 * The default from email for campaigns sent to this list.
		 * Required
		 */
		from_email: FormControl<string | null | undefined>,

		/**
		 * The default from name for campaigns sent to this list.
		 * Required
		 */
		from_name: FormControl<string | null | undefined>,

		/**
		 * The default language for this lists's forms.
		 * Required
		 */
		language: FormControl<string | null | undefined>,

		/**
		 * The default subject line for campaigns sent to this list.
		 * Required
		 */
		subject: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdPatchBodyCampaign_defaultsFormGroup() {
		return new FormGroup<PatchListsIdPatchBodyCampaign_defaultsFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			from_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subject: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchListsIdPatchBodyContact {

		/**
		 * The street address for the list contact.
		 * Required
		 */
		address1: string;

		/** The street address for the list contact. */
		address2?: string | null;

		/**
		 * The city for the list contact.
		 * Required
		 */
		city: string;

		/**
		 * The company name for the list.
		 * Required
		 */
		company: string;

		/**
		 * A two-character ISO3166 country code. Defaults to US if invalid.
		 * Required
		 */
		country: string;

		/** The phone number for the list contact. */
		phone?: string | null;

		/**
		 * The state for the list contact.
		 * Required
		 */
		state: string;

		/**
		 * The postal or zip code for the list contact.
		 * Required
		 */
		zip: string;
	}
	export interface PatchListsIdPatchBodyContactFormProperties {

		/**
		 * The street address for the list contact.
		 * Required
		 */
		address1: FormControl<string | null | undefined>,

		/** The street address for the list contact. */
		address2: FormControl<string | null | undefined>,

		/**
		 * The city for the list contact.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The company name for the list.
		 * Required
		 */
		company: FormControl<string | null | undefined>,

		/**
		 * A two-character ISO3166 country code. Defaults to US if invalid.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/** The phone number for the list contact. */
		phone: FormControl<string | null | undefined>,

		/**
		 * The state for the list contact.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The postal or zip code for the list contact.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdPatchBodyContactFormGroup() {
		return new FormGroup<PatchListsIdPatchBodyContactFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchListsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdReturn_links?: Array<PatchListsIdReturn_links>;

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address?: string | null;

		/** [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list. */
		campaign_defaults?: PatchListsIdReturnCampaign_defaults;

		/** [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws. */
		contact?: PatchListsIdReturnContact;

		/** The date and time that this list was created in ISO 8601 format. */
		date_created?: Date | null;

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin?: boolean | null;

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option?: boolean | null;

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome?: boolean | null;

		/** A string that uniquely identifies this list. */
		id?: string | null;

		/** An auto-generated activity score for the list (0-5). */
		list_rating?: number | null;

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions?: boolean | null;

		/** Any list-specific modules installed for this list. */
		modules?: Array<string>;

		/** The name of the list. */
		name?: string | null;

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe?: string | null;

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe?: string | null;

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder?: string | null;

		/** Stats for the list. Many of these are cached for at least five minutes. */
		stats?: PatchListsIdReturnStats;

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long?: string | null;

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short?: string | null;

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar?: boolean | null;

		/** Legacy - visibility settings are no longer used */
		visibility?: GetListsReturnListsVisibility | null;

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PatchListsIdReturnFormProperties {

		/** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
		beamer_address: FormControl<string | null | undefined>,

		/** The date and time that this list was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** Whether or not to require the subscriber to confirm subscription via email. */
		double_optin: FormControl<boolean | null | undefined>,

		/** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
		email_type_option: FormControl<boolean | null | undefined>,

		/** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
		has_welcome: FormControl<boolean | null | undefined>,

		/** A string that uniquely identifies this list. */
		id: FormControl<string | null | undefined>,

		/** An auto-generated activity score for the list (0-5). */
		list_rating: FormControl<number | null | undefined>,

		/** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
		marketing_permissions: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		name: FormControl<string | null | undefined>,

		/** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_subscribe: FormControl<string | null | undefined>,

		/** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
		notify_on_unsubscribe: FormControl<string | null | undefined>,

		/** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
		permission_reminder: FormControl<string | null | undefined>,

		/** The full version of this list's subscribe form (host will vary). */
		subscribe_url_long: FormControl<string | null | undefined>,

		/** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
		subscribe_url_short: FormControl<string | null | undefined>,

		/** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
		use_archive_bar: FormControl<boolean | null | undefined>,

		/** Legacy - visibility settings are no longer used */
		visibility: FormControl<GetListsReturnListsVisibility | null | undefined>,

		/** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdReturnFormGroup() {
		return new FormGroup<PatchListsIdReturnFormProperties>({
			beamer_address: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			double_optin: new FormControl<boolean | null | undefined>(undefined),
			email_type_option: new FormControl<boolean | null | undefined>(undefined),
			has_welcome: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_rating: new FormControl<number | null | undefined>(undefined),
			marketing_permissions: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notify_on_subscribe: new FormControl<string | null | undefined>(undefined),
			notify_on_unsubscribe: new FormControl<string | null | undefined>(undefined),
			permission_reminder: new FormControl<string | null | undefined>(undefined),
			subscribe_url_long: new FormControl<string | null | undefined>(undefined),
			subscribe_url_short: new FormControl<string | null | undefined>(undefined),
			use_archive_bar: new FormControl<boolean | null | undefined>(undefined),
			visibility: new FormControl<GetListsReturnListsVisibility | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdReturnCampaign_defaults {

		/** The default from email for campaigns sent to this list. */
		from_email?: string | null;

		/** The default from name for campaigns sent to this list. */
		from_name?: string | null;

		/** The default language for this lists's forms. */
		language?: string | null;

		/** The default subject line for campaigns sent to this list. */
		subject?: string | null;
	}
	export interface PatchListsIdReturnCampaign_defaultsFormProperties {

		/** The default from email for campaigns sent to this list. */
		from_email: FormControl<string | null | undefined>,

		/** The default from name for campaigns sent to this list. */
		from_name: FormControl<string | null | undefined>,

		/** The default language for this lists's forms. */
		language: FormControl<string | null | undefined>,

		/** The default subject line for campaigns sent to this list. */
		subject: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdReturnCampaign_defaultsFormGroup() {
		return new FormGroup<PatchListsIdReturnCampaign_defaultsFormProperties>({
			from_email: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			subject: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdReturnContact {

		/** The street address for the list contact. */
		address1?: string | null;

		/** The street address for the list contact. */
		address2?: string | null;

		/** The city for the list contact. */
		city?: string | null;

		/** The company name for the list. */
		company?: string | null;

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country?: string | null;

		/** The phone number for the list contact. */
		phone?: string | null;

		/** The state for the list contact. */
		state?: string | null;

		/** The postal or zip code for the list contact. */
		zip?: string | null;
	}
	export interface PatchListsIdReturnContactFormProperties {

		/** The street address for the list contact. */
		address1: FormControl<string | null | undefined>,

		/** The street address for the list contact. */
		address2: FormControl<string | null | undefined>,

		/** The city for the list contact. */
		city: FormControl<string | null | undefined>,

		/** The company name for the list. */
		company: FormControl<string | null | undefined>,

		/** A two-character ISO3166 country code. Defaults to US if invalid. */
		country: FormControl<string | null | undefined>,

		/** The phone number for the list contact. */
		phone: FormControl<string | null | undefined>,

		/** The state for the list contact. */
		state: FormControl<string | null | undefined>,

		/** The postal or zip code for the list contact. */
		zip: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdReturnContactFormGroup() {
		return new FormGroup<PatchListsIdReturnContactFormProperties>({
			address1: new FormControl<string | null | undefined>(undefined),
			address2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdReturnStats {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate?: number | null;

		/** The number of campaigns in any status that use this list. */
		campaign_count?: number | null;

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent?: Date | null;

		/** The number of members cleaned from the list. */
		cleaned_count?: number | null;

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send?: number | null;

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate?: number | null;

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date?: Date | null;

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date?: Date | null;

		/** The number of active members in the list. */
		member_count?: number | null;

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send?: number | null;

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate?: number | null;

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate?: number | null;

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts?: number | null;

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count?: number | null;

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send?: number | null;
	}
	export interface PatchListsIdReturnStatsFormProperties {

		/** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
		avg_unsub_rate: FormControl<number | null | undefined>,

		/** The number of campaigns in any status that use this list. */
		campaign_count: FormControl<number | null | undefined>,

		/** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
		campaign_last_sent: FormControl<Date | null | undefined>,

		/** The number of members cleaned from the list. */
		cleaned_count: FormControl<number | null | undefined>,

		/** The number of members cleaned from the list since the last campaign was sent. */
		cleaned_count_since_send: FormControl<number | null | undefined>,

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		click_rate: FormControl<number | null | undefined>,

		/** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
		last_sub_date: FormControl<Date | null | undefined>,

		/** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
		last_unsub_date: FormControl<Date | null | undefined>,

		/** The number of active members in the list. */
		member_count: FormControl<number | null | undefined>,

		/** The number of active members in the list since the last campaign was sent. */
		member_count_since_send: FormControl<number | null | undefined>,

		/** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
		merge_field_count: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
		open_rate: FormControl<number | null | undefined>,

		/** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
		target_sub_rate: FormControl<number | null | undefined>,

		/** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
		total_contacts: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed from the list. */
		unsubscribe_count: FormControl<number | null | undefined>,

		/** The number of members who have unsubscribed since the last campaign was sent. */
		unsubscribe_count_since_send: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdReturnStatsFormGroup() {
		return new FormGroup<PatchListsIdReturnStatsFormProperties>({
			avg_sub_rate: new FormControl<number | null | undefined>(undefined),
			avg_unsub_rate: new FormControl<number | null | undefined>(undefined),
			campaign_count: new FormControl<number | null | undefined>(undefined),
			campaign_last_sent: new FormControl<Date | null | undefined>(undefined),
			cleaned_count: new FormControl<number | null | undefined>(undefined),
			cleaned_count_since_send: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			last_sub_date: new FormControl<Date | null | undefined>(undefined),
			last_unsub_date: new FormControl<Date | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			member_count_since_send: new FormControl<number | null | undefined>(undefined),
			merge_field_count: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			target_sub_rate: new FormControl<number | null | undefined>(undefined),
			total_contacts: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count: new FormControl<number | null | undefined>(undefined),
			unsubscribe_count_since_send: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdPostBody {

		/**
		 * An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call.
		 * Required
		 */
		PostListsIdPostBodyMembers: Array<PostListsIdPostBodyMembers>;

		/** Whether this batch operation will replace all existing tags with tags in request. */
		sync_tags?: boolean | null;

		/** Whether this batch operation will change existing members' subscription status. */
		update_existing?: boolean | null;
	}
	export interface PostListsIdPostBodyFormProperties {

		/** Whether this batch operation will replace all existing tags with tags in request. */
		sync_tags: FormControl<boolean | null | undefined>,

		/** Whether this batch operation will change existing members' subscription status. */
		update_existing: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdPostBodyFormGroup() {
		return new FormGroup<PostListsIdPostBodyFormProperties>({
			sync_tags: new FormControl<boolean | null | undefined>(undefined),
			update_existing: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdPostBodyMembers {

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdPostBodyMembersLocation;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdPostBodyMembersFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdPostBodyMembersFormGroup() {
		return new FormGroup<PostListsIdPostBodyMembersFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdPostBodyMembersLocation {

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;
	}
	export interface PostListsIdPostBodyMembersLocationFormProperties {

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdPostBodyMembersLocationFormGroup() {
		return new FormGroup<PostListsIdPostBodyMembersLocationFormProperties>({
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum PostListsIdPostBodyMembersStatus { subscribed = 0, unsubscribed = 1, cleaned = 2, pending = 3, transactional = 4 }

	export interface PostListsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdReturn_links?: Array<PostListsIdReturn_links>;

		/** The total number of items matching the query, irrespective of pagination. */
		error_count?: number | null;

		/** An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details. */
		PostListsIdReturnErrors?: Array<PostListsIdReturnErrors>;

		/** An array of objects, each representing a new member that was added to the list. */
		PostListsIdReturnNew_members?: Array<PostListsIdReturnNew_members>;

		/** The total number of items matching the query, irrespective of pagination. */
		total_created?: number | null;

		/** The total number of items matching the query, irrespective of pagination. */
		total_updated?: number | null;

		/** An array of objects, each representing an existing list member whose subscription status was updated. */
		PostListsIdReturnUpdated_members?: Array<PostListsIdReturnUpdated_members>;
	}
	export interface PostListsIdReturnFormProperties {

		/** The total number of items matching the query, irrespective of pagination. */
		error_count: FormControl<number | null | undefined>,

		/** The total number of items matching the query, irrespective of pagination. */
		total_created: FormControl<number | null | undefined>,

		/** The total number of items matching the query, irrespective of pagination. */
		total_updated: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdReturnFormGroup() {
		return new FormGroup<PostListsIdReturnFormProperties>({
			error_count: new FormControl<number | null | undefined>(undefined),
			total_created: new FormControl<number | null | undefined>(undefined),
			total_updated: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturn_linksFormGroup() {
		return new FormGroup<PostListsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnErrors {

		/** The email address that could not be added or updated. */
		email_address?: string | null;

		/** The error message indicating why the email address could not be added or updated. */
		error?: string | null;

		/** A unique code that identifies this specifc error. */
		error_code?: PostListsIdReturnErrorsError_code | null;

		/** If the error is field-related, information about which field is at issue. */
		field?: string | null;

		/** Message indicating how to resolve a field-related error. */
		field_message?: string | null;
	}
	export interface PostListsIdReturnErrorsFormProperties {

		/** The email address that could not be added or updated. */
		email_address: FormControl<string | null | undefined>,

		/** The error message indicating why the email address could not be added or updated. */
		error: FormControl<string | null | undefined>,

		/** A unique code that identifies this specifc error. */
		error_code: FormControl<PostListsIdReturnErrorsError_code | null | undefined>,

		/** If the error is field-related, information about which field is at issue. */
		field: FormControl<string | null | undefined>,

		/** Message indicating how to resolve a field-related error. */
		field_message: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnErrorsFormGroup() {
		return new FormGroup<PostListsIdReturnErrorsFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			error: new FormControl<string | null | undefined>(undefined),
			error_code: new FormControl<PostListsIdReturnErrorsError_code | null | undefined>(undefined),
			field: new FormControl<string | null | undefined>(undefined),
			field_message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PostListsIdReturnErrorsError_code { ERROR_CONTACT_EXISTS = 0, ERROR_GENERIC = 1 }

	export interface PostListsIdReturnNew_members {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdReturnNew_members_links?: Array<PostListsIdReturnNew_members_links>;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PostListsIdReturnNew_membersLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdReturnNew_membersLocation;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** An individual merge var and value for a member. */
		merge_fields?: {[id: string]: any };

		/** Open and click rates for this subscriber. */
		stats?: PostListsIdReturnNew_membersStats;

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The tags applied to this member. */
		PostListsIdReturnNew_membersTags?: Array<PostListsIdReturnNew_membersTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdReturnNew_membersFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** An individual merge var and value for a member. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdReturnNew_membersFormGroup() {
		return new FormGroup<PostListsIdReturnNew_membersFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnNew_members_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdReturnNew_members_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnNew_members_linksFormGroup() {
		return new FormGroup<PostListsIdReturnNew_members_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnNew_membersLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PostListsIdReturnNew_membersLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdReturnNew_membersLast_noteFormGroup() {
		return new FormGroup<PostListsIdReturnNew_membersLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnNew_membersLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PostListsIdReturnNew_membersLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnNew_membersLocationFormGroup() {
		return new FormGroup<PostListsIdReturnNew_membersLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnNew_membersStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;
	}
	export interface PostListsIdReturnNew_membersStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdReturnNew_membersStatsFormGroup() {
		return new FormGroup<PostListsIdReturnNew_membersStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnNew_membersTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PostListsIdReturnNew_membersTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnNew_membersTagsFormGroup() {
		return new FormGroup<PostListsIdReturnNew_membersTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnUpdated_members {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdReturnUpdated_members_links?: Array<PostListsIdReturnUpdated_members_links>;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PostListsIdReturnUpdated_membersLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdReturnUpdated_membersLocation;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** An individual merge var and value for a member. */
		merge_fields?: {[id: string]: any };

		/** Open and click rates for this subscriber. */
		stats?: PostListsIdReturnUpdated_membersStats;

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The tags applied to this member. */
		PostListsIdReturnUpdated_membersTags?: Array<PostListsIdReturnUpdated_membersTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdReturnUpdated_membersFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** An individual merge var and value for a member. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdReturnUpdated_membersFormGroup() {
		return new FormGroup<PostListsIdReturnUpdated_membersFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnUpdated_members_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdReturnUpdated_members_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnUpdated_members_linksFormGroup() {
		return new FormGroup<PostListsIdReturnUpdated_members_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnUpdated_membersLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PostListsIdReturnUpdated_membersLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdReturnUpdated_membersLast_noteFormGroup() {
		return new FormGroup<PostListsIdReturnUpdated_membersLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnUpdated_membersLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PostListsIdReturnUpdated_membersLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnUpdated_membersLocationFormGroup() {
		return new FormGroup<PostListsIdReturnUpdated_membersLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnUpdated_membersStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;
	}
	export interface PostListsIdReturnUpdated_membersStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdReturnUpdated_membersStatsFormGroup() {
		return new FormGroup<PostListsIdReturnUpdated_membersStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdReturnUpdated_membersTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PostListsIdReturnUpdated_membersTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdReturnUpdated_membersTagsFormGroup() {
		return new FormGroup<PostListsIdReturnUpdated_membersTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdAbuseReportsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdAbuseReportsReturn_links?: Array<GetListsIdAbuseReportsReturn_links>;

		/** An array of objects, each representing an abuse report resource. */
		GetListsIdAbuseReportsReturnAbuse_reports?: Array<GetListsIdAbuseReportsReturnAbuse_reports>;

		/** The list id for the abuse report. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdAbuseReportsReturnFormProperties {

		/** The list id for the abuse report. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdAbuseReportsReturnFormGroup() {
		return new FormGroup<GetListsIdAbuseReportsReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdAbuseReportsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdAbuseReportsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdAbuseReportsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdAbuseReportsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdAbuseReportsReturnAbuse_reports {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdAbuseReportsReturnAbuse_reports_links?: Array<GetListsIdAbuseReportsReturnAbuse_reports_links>;

		/** The campaign id for the abuse report */
		campaign_id?: string | null;

		/** Date for the abuse report */
		date?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The id for the abuse report */
		id?: number | null;

		/** The list id for the abuse report. */
		list_id?: string | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetListsIdAbuseReportsReturnAbuse_reportsFormProperties {

		/** The campaign id for the abuse report */
		campaign_id: FormControl<string | null | undefined>,

		/** Date for the abuse report */
		date: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The id for the abuse report */
		id: FormControl<number | null | undefined>,

		/** The list id for the abuse report. */
		list_id: FormControl<string | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdAbuseReportsReturnAbuse_reportsFormGroup() {
		return new FormGroup<GetListsIdAbuseReportsReturnAbuse_reportsFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetListsIdAbuseReportsReturnAbuse_reports_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdAbuseReportsReturnAbuse_reports_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdAbuseReportsReturnAbuse_reports_linksFormGroup() {
		return new FormGroup<GetListsIdAbuseReportsReturnAbuse_reports_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdAbuseReportsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdAbuseReportsIdReturn_links?: Array<GetListsIdAbuseReportsIdReturn_links>;

		/** The campaign id for the abuse report */
		campaign_id?: string | null;

		/** Date for the abuse report */
		date?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The id for the abuse report */
		id?: number | null;

		/** The list id for the abuse report. */
		list_id?: string | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetListsIdAbuseReportsIdReturnFormProperties {

		/** The campaign id for the abuse report */
		campaign_id: FormControl<string | null | undefined>,

		/** Date for the abuse report */
		date: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The id for the abuse report */
		id: FormControl<number | null | undefined>,

		/** The list id for the abuse report. */
		list_id: FormControl<string | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdAbuseReportsIdReturnFormGroup() {
		return new FormGroup<GetListsIdAbuseReportsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetListsIdAbuseReportsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdAbuseReportsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdAbuseReportsIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdAbuseReportsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdActivityReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdActivityReturn_links?: Array<GetListsIdActivityReturn_links>;

		/** Recent list activity. */
		GetListsIdActivityReturnActivity?: Array<GetListsIdActivityReturnActivity>;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdActivityReturnFormProperties {

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdActivityReturnFormGroup() {
		return new FormGroup<GetListsIdActivityReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdActivityReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdActivityReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdActivityReturn_linksFormGroup() {
		return new FormGroup<GetListsIdActivityReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdActivityReturnActivity {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdActivityReturnActivity_links?: Array<GetListsIdActivityReturnActivity_links>;

		/** The date for the activity summary. */
		day?: string | null;

		/** The total number of emails sent on the date for the activity summary. */
		emails_sent?: number | null;

		/** The number of hard bounces. */
		hard_bounce?: number | null;

		/** The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity. */
		other_adds?: number | null;

		/** The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers). */
		other_removes?: number | null;

		/** The number of clicks. */
		recipient_clicks?: number | null;

		/** The number of soft bounces */
		soft_bounce?: number | null;

		/** The number of subscribes. */
		subs?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;

		/** The number of unsubscribes. */
		unsubs?: number | null;
	}
	export interface GetListsIdActivityReturnActivityFormProperties {

		/** The date for the activity summary. */
		day: FormControl<string | null | undefined>,

		/** The total number of emails sent on the date for the activity summary. */
		emails_sent: FormControl<number | null | undefined>,

		/** The number of hard bounces. */
		hard_bounce: FormControl<number | null | undefined>,

		/** The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity. */
		other_adds: FormControl<number | null | undefined>,

		/** The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers). */
		other_removes: FormControl<number | null | undefined>,

		/** The number of clicks. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** The number of soft bounces */
		soft_bounce: FormControl<number | null | undefined>,

		/** The number of subscribes. */
		subs: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,

		/** The number of unsubscribes. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdActivityReturnActivityFormGroup() {
		return new FormGroup<GetListsIdActivityReturnActivityFormProperties>({
			day: new FormControl<string | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			hard_bounce: new FormControl<number | null | undefined>(undefined),
			other_adds: new FormControl<number | null | undefined>(undefined),
			other_removes: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			soft_bounce: new FormControl<number | null | undefined>(undefined),
			subs: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdActivityReturnActivity_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdActivityReturnActivity_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdActivityReturnActivity_linksFormGroup() {
		return new FormGroup<GetListsIdActivityReturnActivity_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdClientsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdClientsReturn_links?: Array<GetListsIdClientsReturn_links>;

		/** An array of top email clients. */
		GetListsIdClientsReturnClients?: Array<GetListsIdClientsReturnClients>;

		/** The list id. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdClientsReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdClientsReturnFormGroup() {
		return new FormGroup<GetListsIdClientsReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdClientsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdClientsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdClientsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdClientsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdClientsReturnClients {

		/** The name of the email client. */
		client?: string | null;

		/** The number of subscribed members who used this email client. */
		members?: number | null;
	}
	export interface GetListsIdClientsReturnClientsFormProperties {

		/** The name of the email client. */
		client: FormControl<string | null | undefined>,

		/** The number of subscribed members who used this email client. */
		members: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdClientsReturnClientsFormGroup() {
		return new FormGroup<GetListsIdClientsReturnClientsFormProperties>({
			client: new FormControl<string | null | undefined>(undefined),
			members: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetListsIdGrowthHistorySort_field { month = 0 }

	export interface GetListsIdGrowthHistoryReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdGrowthHistoryReturn_links?: Array<GetListsIdGrowthHistoryReturn_links>;

		/** An array of objects, each representing a monthly growth report for a list. */
		GetListsIdGrowthHistoryReturnHistory?: Array<GetListsIdGrowthHistoryReturnHistory>;

		/** The list id. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdGrowthHistoryReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdGrowthHistoryReturnFormGroup() {
		return new FormGroup<GetListsIdGrowthHistoryReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdGrowthHistoryReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdGrowthHistoryReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdGrowthHistoryReturn_linksFormGroup() {
		return new FormGroup<GetListsIdGrowthHistoryReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdGrowthHistoryReturnHistory {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdGrowthHistoryReturnHistory_links?: Array<GetListsIdGrowthHistoryReturnHistory_links>;

		/** Newly cleaned (hard-bounced) members on the list for a specific month. */
		cleaned?: number | null;

		/** Newly deleted members on the list for a specific month. */
		deleted?: number | null;

		/** (deprecated) */
		existing?: number | null;

		/** (deprecated) */
		imports?: number | null;

		/** The list id for the growth activity report. */
		list_id?: string | null;

		/** The month that the growth history is describing. */
		month?: string | null;

		/** (deprecated) */
		optins?: number | null;

		/** Pending members on the list for a specific month. */
		pending?: number | null;

		/** Newly reconfirmed members on the list for a specific month. */
		reconfirm?: number | null;

		/** Total subscribed members on the list at the end of the month. */
		subscribed?: number | null;

		/** Subscribers that have been sent transactional emails via Mandrill. */
		transactional?: number | null;

		/** Newly unsubscribed members on the list for a specific month. */
		unsubscribed?: number | null;
	}
	export interface GetListsIdGrowthHistoryReturnHistoryFormProperties {

		/** Newly cleaned (hard-bounced) members on the list for a specific month. */
		cleaned: FormControl<number | null | undefined>,

		/** Newly deleted members on the list for a specific month. */
		deleted: FormControl<number | null | undefined>,

		/** (deprecated) */
		existing: FormControl<number | null | undefined>,

		/** (deprecated) */
		imports: FormControl<number | null | undefined>,

		/** The list id for the growth activity report. */
		list_id: FormControl<string | null | undefined>,

		/** The month that the growth history is describing. */
		month: FormControl<string | null | undefined>,

		/** (deprecated) */
		optins: FormControl<number | null | undefined>,

		/** Pending members on the list for a specific month. */
		pending: FormControl<number | null | undefined>,

		/** Newly reconfirmed members on the list for a specific month. */
		reconfirm: FormControl<number | null | undefined>,

		/** Total subscribed members on the list at the end of the month. */
		subscribed: FormControl<number | null | undefined>,

		/** Subscribers that have been sent transactional emails via Mandrill. */
		transactional: FormControl<number | null | undefined>,

		/** Newly unsubscribed members on the list for a specific month. */
		unsubscribed: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdGrowthHistoryReturnHistoryFormGroup() {
		return new FormGroup<GetListsIdGrowthHistoryReturnHistoryFormProperties>({
			cleaned: new FormControl<number | null | undefined>(undefined),
			deleted: new FormControl<number | null | undefined>(undefined),
			existing: new FormControl<number | null | undefined>(undefined),
			imports: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			month: new FormControl<string | null | undefined>(undefined),
			optins: new FormControl<number | null | undefined>(undefined),
			pending: new FormControl<number | null | undefined>(undefined),
			reconfirm: new FormControl<number | null | undefined>(undefined),
			subscribed: new FormControl<number | null | undefined>(undefined),
			transactional: new FormControl<number | null | undefined>(undefined),
			unsubscribed: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdGrowthHistoryReturnHistory_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdGrowthHistoryReturnHistory_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdGrowthHistoryReturnHistory_linksFormGroup() {
		return new FormGroup<GetListsIdGrowthHistoryReturnHistory_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdGrowthHistoryIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdGrowthHistoryIdReturn_links?: Array<GetListsIdGrowthHistoryIdReturn_links>;

		/** Newly cleaned (hard-bounced) members on the list for a specific month. */
		cleaned?: number | null;

		/** Newly deleted members on the list for a specific month. */
		deleted?: number | null;

		/** (deprecated) */
		existing?: number | null;

		/** (deprecated) */
		imports?: number | null;

		/** The list id for the growth activity report. */
		list_id?: string | null;

		/** The month that the growth history is describing. */
		month?: string | null;

		/** (deprecated) */
		optins?: number | null;

		/** Pending members on the list for a specific month. */
		pending?: number | null;

		/** Newly reconfirmed members on the list for a specific month. */
		reconfirm?: number | null;

		/** Total subscribed members on the list at the end of the month. */
		subscribed?: number | null;

		/** Subscribers that have been sent transactional emails via Mandrill. */
		transactional?: number | null;

		/** Newly unsubscribed members on the list for a specific month. */
		unsubscribed?: number | null;
	}
	export interface GetListsIdGrowthHistoryIdReturnFormProperties {

		/** Newly cleaned (hard-bounced) members on the list for a specific month. */
		cleaned: FormControl<number | null | undefined>,

		/** Newly deleted members on the list for a specific month. */
		deleted: FormControl<number | null | undefined>,

		/** (deprecated) */
		existing: FormControl<number | null | undefined>,

		/** (deprecated) */
		imports: FormControl<number | null | undefined>,

		/** The list id for the growth activity report. */
		list_id: FormControl<string | null | undefined>,

		/** The month that the growth history is describing. */
		month: FormControl<string | null | undefined>,

		/** (deprecated) */
		optins: FormControl<number | null | undefined>,

		/** Pending members on the list for a specific month. */
		pending: FormControl<number | null | undefined>,

		/** Newly reconfirmed members on the list for a specific month. */
		reconfirm: FormControl<number | null | undefined>,

		/** Total subscribed members on the list at the end of the month. */
		subscribed: FormControl<number | null | undefined>,

		/** Subscribers that have been sent transactional emails via Mandrill. */
		transactional: FormControl<number | null | undefined>,

		/** Newly unsubscribed members on the list for a specific month. */
		unsubscribed: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdGrowthHistoryIdReturnFormGroup() {
		return new FormGroup<GetListsIdGrowthHistoryIdReturnFormProperties>({
			cleaned: new FormControl<number | null | undefined>(undefined),
			deleted: new FormControl<number | null | undefined>(undefined),
			existing: new FormControl<number | null | undefined>(undefined),
			imports: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			month: new FormControl<string | null | undefined>(undefined),
			optins: new FormControl<number | null | undefined>(undefined),
			pending: new FormControl<number | null | undefined>(undefined),
			reconfirm: new FormControl<number | null | undefined>(undefined),
			subscribed: new FormControl<number | null | undefined>(undefined),
			transactional: new FormControl<number | null | undefined>(undefined),
			unsubscribed: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdGrowthHistoryIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdGrowthHistoryIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdGrowthHistoryIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdGrowthHistoryIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdInterestCategoriesReturn_links?: Array<GetListsIdInterestCategoriesReturn_links>;

		/** This array contains individual interest categories. */
		GetListsIdInterestCategoriesReturnCategories?: Array<GetListsIdInterestCategoriesReturnCategories>;

		/** The ID for the list that this category belongs to. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdInterestCategoriesReturnFormProperties {

		/** The ID for the list that this category belongs to. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesReturnFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdInterestCategoriesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesReturn_linksFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesReturnCategories {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdInterestCategoriesReturnCategories_links?: Array<GetListsIdInterestCategoriesReturnCategories_links>;

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order?: number | null;

		/** The id for the interest category. */
		id?: string | null;

		/** The unique list id for the category. */
		list_id?: string | null;

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title?: string | null;

		/** Determines how this category’s interests appear on signup forms. */
		type?: PostListsIdInterestCategoriesBodyType | null;
	}
	export interface GetListsIdInterestCategoriesReturnCategoriesFormProperties {

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order: FormControl<number | null | undefined>,

		/** The id for the interest category. */
		id: FormControl<string | null | undefined>,

		/** The unique list id for the category. */
		list_id: FormControl<string | null | undefined>,

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title: FormControl<string | null | undefined>,

		/** Determines how this category’s interests appear on signup forms. */
		type: FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesReturnCategoriesFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesReturnCategoriesFormProperties>({
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesReturnCategories_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdInterestCategoriesReturnCategories_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesReturnCategories_linksFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesReturnCategories_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdInterestCategoriesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdInterestCategoriesReturn_links?: Array<PostListsIdInterestCategoriesReturn_links>;

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order?: number | null;

		/** The id for the interest category. */
		id?: string | null;

		/** The unique list id for the category. */
		list_id?: string | null;

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title?: string | null;

		/** Determines how this category’s interests appear on signup forms. */
		type?: PostListsIdInterestCategoriesBodyType | null;
	}
	export interface PostListsIdInterestCategoriesReturnFormProperties {

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order: FormControl<number | null | undefined>,

		/** The id for the interest category. */
		id: FormControl<string | null | undefined>,

		/** The unique list id for the category. */
		list_id: FormControl<string | null | undefined>,

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title: FormControl<string | null | undefined>,

		/** Determines how this category’s interests appear on signup forms. */
		type: FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>,
	}
	export function CreatePostListsIdInterestCategoriesReturnFormGroup() {
		return new FormGroup<PostListsIdInterestCategoriesReturnFormProperties>({
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>(undefined),
		});

	}

	export interface PostListsIdInterestCategoriesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdInterestCategoriesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdInterestCategoriesReturn_linksFormGroup() {
		return new FormGroup<PostListsIdInterestCategoriesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdInterestCategoriesIdReturn_links?: Array<GetListsIdInterestCategoriesIdReturn_links>;

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order?: number | null;

		/** The id for the interest category. */
		id?: string | null;

		/** The unique list id for the category. */
		list_id?: string | null;

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title?: string | null;

		/** Determines how this category’s interests appear on signup forms. */
		type?: PostListsIdInterestCategoriesBodyType | null;
	}
	export interface GetListsIdInterestCategoriesIdReturnFormProperties {

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order: FormControl<number | null | undefined>,

		/** The id for the interest category. */
		id: FormControl<string | null | undefined>,

		/** The unique list id for the category. */
		list_id: FormControl<string | null | undefined>,

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title: FormControl<string | null | undefined>,

		/** Determines how this category’s interests appear on signup forms. */
		type: FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdReturnFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdReturnFormProperties>({
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdInterestCategoriesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdInterestCategoriesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdInterestCategoriesIdReturn_links?: Array<PatchListsIdInterestCategoriesIdReturn_links>;

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order?: number | null;

		/** The id for the interest category. */
		id?: string | null;

		/** The unique list id for the category. */
		list_id?: string | null;

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title?: string | null;

		/** Determines how this category’s interests appear on signup forms. */
		type?: PostListsIdInterestCategoriesBodyType | null;
	}
	export interface PatchListsIdInterestCategoriesIdReturnFormProperties {

		/** The order that the categories are displayed in the list. Lower numbers display first. */
		display_order: FormControl<number | null | undefined>,

		/** The id for the interest category. */
		id: FormControl<string | null | undefined>,

		/** The unique list id for the category. */
		list_id: FormControl<string | null | undefined>,

		/** The text description of this category. This field appears on signup forms and is often phrased as a question. */
		title: FormControl<string | null | undefined>,

		/** Determines how this category’s interests appear on signup forms. */
		type: FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>,
	}
	export function CreatePatchListsIdInterestCategoriesIdReturnFormGroup() {
		return new FormGroup<PatchListsIdInterestCategoriesIdReturnFormProperties>({
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PostListsIdInterestCategoriesBodyType | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdInterestCategoriesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdInterestCategoriesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdInterestCategoriesIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdInterestCategoriesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdInterestsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdInterestCategoriesIdInterestsReturn_links?: Array<GetListsIdInterestCategoriesIdInterestsReturn_links>;

		/** The id for the interest category. */
		category_id?: string | null;

		/** An array of this category's interests */
		GetListsIdInterestCategoriesIdInterestsReturnInterests?: Array<GetListsIdInterestCategoriesIdInterestsReturnInterests>;

		/** The unique list id that the interests belong to. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdInterestCategoriesIdInterestsReturnFormProperties {

		/** The id for the interest category. */
		category_id: FormControl<string | null | undefined>,

		/** The unique list id that the interests belong to. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdInterestsReturnFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdInterestsReturnFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdInterestsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdInterestCategoriesIdInterestsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdInterestsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdInterestsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdInterestsReturnInterests {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdInterestCategoriesIdInterestsReturnInterests_links?: Array<GetListsIdInterestCategoriesIdInterestsReturnInterests_links>;

		/** The id for the interest category. */
		category_id?: string | null;

		/** The display order for interests. */
		display_order?: number | null;

		/** The ID for the interest. */
		id?: string | null;

		/** The ID for the list that this interest belongs to. */
		list_id?: string | null;

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name?: string | null;

		/** The number of subscribers associated with this interest. */
		subscriber_count?: string | null;
	}
	export interface GetListsIdInterestCategoriesIdInterestsReturnInterestsFormProperties {

		/** The id for the interest category. */
		category_id: FormControl<string | null | undefined>,

		/** The display order for interests. */
		display_order: FormControl<number | null | undefined>,

		/** The ID for the interest. */
		id: FormControl<string | null | undefined>,

		/** The ID for the list that this interest belongs to. */
		list_id: FormControl<string | null | undefined>,

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name: FormControl<string | null | undefined>,

		/** The number of subscribers associated with this interest. */
		subscriber_count: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdInterestsReturnInterestsFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdInterestsReturnInterestsFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			subscriber_count: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdInterestsReturnInterests_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdInterestCategoriesIdInterestsReturnInterests_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdInterestsReturnInterests_linksFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdInterestsReturnInterests_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdInterestCategoriesIdInterestsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdInterestCategoriesIdInterestsReturn_links?: Array<PostListsIdInterestCategoriesIdInterestsReturn_links>;

		/** The id for the interest category. */
		category_id?: string | null;

		/** The display order for interests. */
		display_order?: number | null;

		/** The ID for the interest. */
		id?: string | null;

		/** The ID for the list that this interest belongs to. */
		list_id?: string | null;

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name?: string | null;

		/** The number of subscribers associated with this interest. */
		subscriber_count?: string | null;
	}
	export interface PostListsIdInterestCategoriesIdInterestsReturnFormProperties {

		/** The id for the interest category. */
		category_id: FormControl<string | null | undefined>,

		/** The display order for interests. */
		display_order: FormControl<number | null | undefined>,

		/** The ID for the interest. */
		id: FormControl<string | null | undefined>,

		/** The ID for the list that this interest belongs to. */
		list_id: FormControl<string | null | undefined>,

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name: FormControl<string | null | undefined>,

		/** The number of subscribers associated with this interest. */
		subscriber_count: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdInterestCategoriesIdInterestsReturnFormGroup() {
		return new FormGroup<PostListsIdInterestCategoriesIdInterestsReturnFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			subscriber_count: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdInterestCategoriesIdInterestsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdInterestCategoriesIdInterestsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdInterestCategoriesIdInterestsReturn_linksFormGroup() {
		return new FormGroup<PostListsIdInterestCategoriesIdInterestsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdInterestsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdInterestCategoriesIdInterestsIdReturn_links?: Array<GetListsIdInterestCategoriesIdInterestsIdReturn_links>;

		/** The id for the interest category. */
		category_id?: string | null;

		/** The display order for interests. */
		display_order?: number | null;

		/** The ID for the interest. */
		id?: string | null;

		/** The ID for the list that this interest belongs to. */
		list_id?: string | null;

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name?: string | null;

		/** The number of subscribers associated with this interest. */
		subscriber_count?: string | null;
	}
	export interface GetListsIdInterestCategoriesIdInterestsIdReturnFormProperties {

		/** The id for the interest category. */
		category_id: FormControl<string | null | undefined>,

		/** The display order for interests. */
		display_order: FormControl<number | null | undefined>,

		/** The ID for the interest. */
		id: FormControl<string | null | undefined>,

		/** The ID for the list that this interest belongs to. */
		list_id: FormControl<string | null | undefined>,

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name: FormControl<string | null | undefined>,

		/** The number of subscribers associated with this interest. */
		subscriber_count: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdInterestsIdReturnFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdInterestsIdReturnFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			subscriber_count: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdInterestCategoriesIdInterestsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdInterestCategoriesIdInterestsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdInterestCategoriesIdInterestsIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdInterestCategoriesIdInterestsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdInterestCategoriesIdInterestsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdInterestCategoriesIdInterestsIdReturn_links?: Array<PatchListsIdInterestCategoriesIdInterestsIdReturn_links>;

		/** The id for the interest category. */
		category_id?: string | null;

		/** The display order for interests. */
		display_order?: number | null;

		/** The ID for the interest. */
		id?: string | null;

		/** The ID for the list that this interest belongs to. */
		list_id?: string | null;

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name?: string | null;

		/** The number of subscribers associated with this interest. */
		subscriber_count?: string | null;
	}
	export interface PatchListsIdInterestCategoriesIdInterestsIdReturnFormProperties {

		/** The id for the interest category. */
		category_id: FormControl<string | null | undefined>,

		/** The display order for interests. */
		display_order: FormControl<number | null | undefined>,

		/** The ID for the interest. */
		id: FormControl<string | null | undefined>,

		/** The ID for the list that this interest belongs to. */
		list_id: FormControl<string | null | undefined>,

		/** The name of the interest. This can be shown publicly on a subscription form. */
		name: FormControl<string | null | undefined>,

		/** The number of subscribers associated with this interest. */
		subscriber_count: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdInterestCategoriesIdInterestsIdReturnFormGroup() {
		return new FormGroup<PatchListsIdInterestCategoriesIdInterestsIdReturnFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			subscriber_count: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdInterestCategoriesIdInterestsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdInterestCategoriesIdInterestsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdInterestCategoriesIdInterestsIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdInterestCategoriesIdInterestsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdLocationsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdLocationsReturn_links?: Array<GetListsIdLocationsReturn_links>;

		/** The unique id for the list. */
		list_id?: string | null;

		/** An array of objects, each representing a list's top subscriber locations. */
		GetListsIdLocationsReturnLocations?: Array<GetListsIdLocationsReturnLocations>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdLocationsReturnFormProperties {

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdLocationsReturnFormGroup() {
		return new FormGroup<GetListsIdLocationsReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdLocationsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdLocationsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdLocationsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdLocationsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdLocationsReturnLocations {

		/** The ISO 3166 2 digit country code. */
		cc?: string | null;

		/** The name of the country. */
		country?: string | null;

		/** The percent of subscribers in the country. */
		percent?: number | null;

		/** The total number of subscribers in the country. */
		total?: number | null;
	}
	export interface GetListsIdLocationsReturnLocationsFormProperties {

		/** The ISO 3166 2 digit country code. */
		cc: FormControl<string | null | undefined>,

		/** The name of the country. */
		country: FormControl<string | null | undefined>,

		/** The percent of subscribers in the country. */
		percent: FormControl<number | null | undefined>,

		/** The total number of subscribers in the country. */
		total: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdLocationsReturnLocationsFormGroup() {
		return new FormGroup<GetListsIdLocationsReturnLocationsFormProperties>({
			cc: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			percent: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetListsIdMembersStatus { subscribed = 0, unsubscribed = 1, cleaned = 2, pending = 3, transactional = 4, archived = 5 }

	export enum GetListsIdMembersInterest_match { any = 0, all = 1, none = 2 }

	export enum GetListsIdMembersSort_field { timestamp_opt = 0, timestamp_signup = 1, last_changed = 2 }

	export interface GetListsIdMembersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersReturn_links?: Array<GetListsIdMembersReturn_links>;

		/** The list id. */
		list_id?: string | null;

		/** An array of objects, each representing a specific list member. */
		GetListsIdMembersReturnMembers?: Array<GetListsIdMembersReturnMembers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdMembersReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnFormGroup() {
		return new FormGroup<GetListsIdMembersReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembers {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersReturnMembers_links?: Array<GetListsIdMembersReturnMembers_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: GetListsIdMembersReturnMembersLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: GetListsIdMembersReturnMembersLocation;

		/** The marketing permissions for the subscriber. */
		GetListsIdMembersReturnMembersMarketing_permissions?: Array<GetListsIdMembersReturnMembersMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: GetListsIdMembersReturnMembersStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		GetListsIdMembersReturnMembersTags?: Array<GetListsIdMembersReturnMembersTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetListsIdMembersReturnMembersFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersReturnMembers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembers_linksFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembersLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface GetListsIdMembersReturnMembersLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersLast_noteFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembersLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface GetListsIdMembersReturnMembersLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersLocationFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembersMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface GetListsIdMembersReturnMembersMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersMarketing_permissionsFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembersStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: GetListsIdMembersReturnMembersStatsEcommerce_data;
	}
	export interface GetListsIdMembersReturnMembersStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersStatsFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembersStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface GetListsIdMembersReturnMembersStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersStatsEcommerce_dataFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersReturnMembersTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface GetListsIdMembersReturnMembersTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersReturnMembersTagsFormGroup() {
		return new FormGroup<GetListsIdMembersReturnMembersTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersPostBody {

		/**
		 * Email address for a subscriber.
		 * Required
		 */
		email_address: string;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdMembersPostBodyLocation;

		/** The marketing permissions for the subscriber. */
		PostListsIdMembersPostBodyMarketing_permissions?: Array<PostListsIdMembersPostBodyMarketing_permissions>;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/**
		 * Subscriber's current status.
		 * Required
		 */
		status: PostListsIdPostBodyMembersStatus;

		/** The tags that are associated with a member. */
		tags?: Array<string>;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdMembersPostBodyFormProperties {

		/**
		 * Email address for a subscriber.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/**
		 * Subscriber's current status.
		 * Required
		 */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdMembersPostBodyFormGroup() {
		return new FormGroup<PostListsIdMembersPostBodyFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email_type: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined, [Validators.required]),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersPostBodyLocation {

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;
	}
	export interface PostListsIdMembersPostBodyLocationFormProperties {

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMembersPostBodyLocationFormGroup() {
		return new FormGroup<PostListsIdMembersPostBodyLocationFormProperties>({
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersPostBodyMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;
	}
	export interface PostListsIdMembersPostBodyMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersPostBodyMarketing_permissionsFormGroup() {
		return new FormGroup<PostListsIdMembersPostBodyMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdMembersReturn_links?: Array<PostListsIdMembersReturn_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PostListsIdMembersReturnLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdMembersReturnLocation;

		/** The marketing permissions for the subscriber. */
		PostListsIdMembersReturnMarketing_permissions?: Array<PostListsIdMembersReturnMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: PostListsIdMembersReturnStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		PostListsIdMembersReturnTags?: Array<PostListsIdMembersReturnTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PostListsIdMembersReturnFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnFormGroup() {
		return new FormGroup<PostListsIdMembersReturnFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdMembersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersReturn_linksFormGroup() {
		return new FormGroup<PostListsIdMembersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturnLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PostListsIdMembersReturnLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnLast_noteFormGroup() {
		return new FormGroup<PostListsIdMembersReturnLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturnLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PostListsIdMembersReturnLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnLocationFormGroup() {
		return new FormGroup<PostListsIdMembersReturnLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturnMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface PostListsIdMembersReturnMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnMarketing_permissionsFormGroup() {
		return new FormGroup<PostListsIdMembersReturnMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturnStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: PostListsIdMembersReturnStatsEcommerce_data;
	}
	export interface PostListsIdMembersReturnStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnStatsFormGroup() {
		return new FormGroup<PostListsIdMembersReturnStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturnStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface PostListsIdMembersReturnStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnStatsEcommerce_dataFormGroup() {
		return new FormGroup<PostListsIdMembersReturnStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersReturnTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PostListsIdMembersReturnTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersReturnTagsFormGroup() {
		return new FormGroup<PostListsIdMembersReturnTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdReturn_links?: Array<GetListsIdMembersIdReturn_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: GetListsIdMembersIdReturnLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: GetListsIdMembersIdReturnLocation;

		/** The marketing permissions for the subscriber. */
		GetListsIdMembersIdReturnMarketing_permissions?: Array<GetListsIdMembersIdReturnMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: GetListsIdMembersIdReturnStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		GetListsIdMembersIdReturnTags?: Array<GetListsIdMembersIdReturnTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetListsIdMembersIdReturnFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturnLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface GetListsIdMembersIdReturnLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnLast_noteFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturnLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface GetListsIdMembersIdReturnLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnLocationFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturnMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface GetListsIdMembersIdReturnMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnMarketing_permissionsFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturnStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: GetListsIdMembersIdReturnStatsEcommerce_data;
	}
	export interface GetListsIdMembersIdReturnStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnStatsFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturnStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface GetListsIdMembersIdReturnStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnStatsEcommerce_dataFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdReturnTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface GetListsIdMembersIdReturnTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdReturnTagsFormGroup() {
		return new FormGroup<GetListsIdMembersIdReturnTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdPatchBody {

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** Subscriber location information. */
		location?: PatchListsIdMembersIdPatchBodyLocation;

		/** The marketing permissions for the subscriber. */
		PatchListsIdMembersIdPatchBodyMarketing_permissions?: Array<PatchListsIdMembersIdPatchBodyMarketing_permissions>;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** Subscriber's current status. */
		status?: PatchListsIdMembersIdPatchBodyStatus | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PatchListsIdMembersIdPatchBodyFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PatchListsIdMembersIdPatchBodyStatus | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdPatchBodyFormGroup() {
		return new FormGroup<PatchListsIdMembersIdPatchBodyFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PatchListsIdMembersIdPatchBodyStatus | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdPatchBodyLocation {

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;
	}
	export interface PatchListsIdMembersIdPatchBodyLocationFormProperties {

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdPatchBodyLocationFormGroup() {
		return new FormGroup<PatchListsIdMembersIdPatchBodyLocationFormProperties>({
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdPatchBodyMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;
	}
	export interface PatchListsIdMembersIdPatchBodyMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdPatchBodyMarketing_permissionsFormGroup() {
		return new FormGroup<PatchListsIdMembersIdPatchBodyMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PatchListsIdMembersIdPatchBodyStatus { subscribed = 0, unsubscribed = 1, cleaned = 2, pending = 3 }

	export interface PatchListsIdMembersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdMembersIdReturn_links?: Array<PatchListsIdMembersIdReturn_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PatchListsIdMembersIdReturnLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PatchListsIdMembersIdReturnLocation;

		/** The marketing permissions for the subscriber. */
		PatchListsIdMembersIdReturnMarketing_permissions?: Array<PatchListsIdMembersIdReturnMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: PatchListsIdMembersIdReturnStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		PatchListsIdMembersIdReturnTags?: Array<PatchListsIdMembersIdReturnTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PatchListsIdMembersIdReturnFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdMembersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturnLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PatchListsIdMembersIdReturnLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnLast_noteFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturnLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PatchListsIdMembersIdReturnLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnLocationFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturnMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface PatchListsIdMembersIdReturnMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnMarketing_permissionsFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturnStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: PatchListsIdMembersIdReturnStatsEcommerce_data;
	}
	export interface PatchListsIdMembersIdReturnStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnStatsFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturnStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface PatchListsIdMembersIdReturnStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnStatsEcommerce_dataFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdReturnTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PatchListsIdMembersIdReturnTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdReturnTagsFormGroup() {
		return new FormGroup<PatchListsIdMembersIdReturnTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdPutBody {

		/**
		 * Email address for a subscriber. This value is required only if the email address is not already present on the list.
		 * Required
		 */
		email_address: string;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** Subscriber location information. */
		location?: PutListsIdMembersIdPutBodyLocation;

		/** The marketing permissions for the subscriber. */
		PutListsIdMembersIdPutBodyMarketing_permissions?: Array<PutListsIdMembersIdPutBodyMarketing_permissions>;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/**
		 * Subscriber's status. This value is required only if the email address is not already present on the list.
		 * Required
		 */
		status_if_new: PostListsIdPostBodyMembersStatus;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PutListsIdMembersIdPutBodyFormProperties {

		/**
		 * Email address for a subscriber. This value is required only if the email address is not already present on the list.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/**
		 * Subscriber's status. This value is required only if the email address is not already present on the list.
		 * Required
		 */
		status_if_new: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePutListsIdMembersIdPutBodyFormGroup() {
		return new FormGroup<PutListsIdMembersIdPutBodyFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email_type: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			status_if_new: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined, [Validators.required]),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdPutBodyLocation {

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;
	}
	export interface PutListsIdMembersIdPutBodyLocationFormProperties {

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,
	}
	export function CreatePutListsIdMembersIdPutBodyLocationFormGroup() {
		return new FormGroup<PutListsIdMembersIdPutBodyLocationFormProperties>({
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdPutBodyMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;
	}
	export interface PutListsIdMembersIdPutBodyMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,
	}
	export function CreatePutListsIdMembersIdPutBodyMarketing_permissionsFormGroup() {
		return new FormGroup<PutListsIdMembersIdPutBodyMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PutListsIdMembersIdReturn_links?: Array<PutListsIdMembersIdReturn_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PutListsIdMembersIdReturnLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PutListsIdMembersIdReturnLocation;

		/** The marketing permissions for the subscriber. */
		PutListsIdMembersIdReturnMarketing_permissions?: Array<PutListsIdMembersIdReturnMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: PutListsIdMembersIdReturnStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		PutListsIdMembersIdReturnTags?: Array<PutListsIdMembersIdReturnTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PutListsIdMembersIdReturnFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PutListsIdMembersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturn_linksFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturnLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PutListsIdMembersIdReturnLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnLast_noteFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturnLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PutListsIdMembersIdReturnLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnLocationFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturnMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface PutListsIdMembersIdReturnMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnMarketing_permissionsFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturnStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: PutListsIdMembersIdReturnStatsEcommerce_data;
	}
	export interface PutListsIdMembersIdReturnStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnStatsFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturnStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface PutListsIdMembersIdReturnStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnStatsEcommerce_dataFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PutListsIdMembersIdReturnTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PutListsIdMembersIdReturnTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePutListsIdMembersIdReturnTagsFormGroup() {
		return new FormGroup<PutListsIdMembersIdReturnTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdActivityReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdActivityReturn_links?: Array<GetListsIdMembersIdActivityReturn_links>;

		/** An array of objects, each representing a member event. */
		GetListsIdMembersIdActivityReturnActivity?: Array<GetListsIdMembersIdActivityReturnActivity>;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdMembersIdActivityReturnFormProperties {

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdActivityReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdActivityReturnFormProperties>({
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdActivityReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdActivityReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdActivityReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdActivityReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdActivityReturnActivity {

		/** The type of action recorded for the subscriber. */
		action?: string | null;

		/** The web-based ID for the campaign. */
		campaign_id?: string | null;

		/** The ID of the parent campaign. */
		parent_campaign?: string | null;

		/** The date and time recorded for the action. */
		timestamp?: Date | null;

		/** If set, the campaign's title. */
		title?: string | null;

		/** The type of campaign that was sent. */
		type?: string | null;

		/** For clicks, the URL the subscriber clicked on. */
		url?: string | null;
	}
	export interface GetListsIdMembersIdActivityReturnActivityFormProperties {

		/** The type of action recorded for the subscriber. */
		action: FormControl<string | null | undefined>,

		/** The web-based ID for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The ID of the parent campaign. */
		parent_campaign: FormControl<string | null | undefined>,

		/** The date and time recorded for the action. */
		timestamp: FormControl<Date | null | undefined>,

		/** If set, the campaign's title. */
		title: FormControl<string | null | undefined>,

		/** The type of campaign that was sent. */
		type: FormControl<string | null | undefined>,

		/** For clicks, the URL the subscriber clicked on. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdActivityReturnActivityFormGroup() {
		return new FormGroup<GetListsIdMembersIdActivityReturnActivityFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			parent_campaign: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdActivityFeedReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdActivityFeedReturn_links?: Array<GetListsIdMembersIdActivityFeedReturn_links>;

		/** An array of objects, each representing a contact event. There are multiple possible types, see the [activity schema documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#activity-schemas). */
		activity?: Array<string>;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;
	}
	export interface GetListsIdMembersIdActivityFeedReturnFormProperties {

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdActivityFeedReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdActivityFeedReturnFormProperties>({
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdActivityFeedReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdActivityFeedReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdActivityFeedReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdActivityFeedReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdEventsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdEventsReturn_links?: Array<GetListsIdMembersIdEventsReturn_links>;

		/** An array of objects, each representing an event. */
		GetListsIdMembersIdEventsReturnEvents?: Array<GetListsIdMembersIdEventsReturnEvents>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdMembersIdEventsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdEventsReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdEventsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdEventsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdEventsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdEventsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdEventsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdEventsReturnEvents {

		/** The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length */
		name?: string | null;

		/** The date and time the event occurred in ISO 8601 format. */
		occurred_at?: Date | null;

		/** An optional list of properties */
		properties?: {[id: string]: string };
	}
	export interface GetListsIdMembersIdEventsReturnEventsFormProperties {

		/** The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length */
		name: FormControl<string | null | undefined>,

		/** The date and time the event occurred in ISO 8601 format. */
		occurred_at: FormControl<Date | null | undefined>,

		/** An optional list of properties */
		properties: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGetListsIdMembersIdEventsReturnEventsFormGroup() {
		return new FormGroup<GetListsIdMembersIdEventsReturnEventsFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			occurred_at: new FormControl<Date | null | undefined>(undefined),
			properties: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface PostListMemberEventsPostBody {

		/** Events created with the is_syncing value set to `true` will not trigger automations. */
		is_syncing?: boolean | null;

		/**
		 * The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
		 * Required
		 */
		name: string;

		/** The date and time the event occurred in ISO 8601 format. */
		occurred_at?: Date | null;

		/** An optional list of properties */
		properties?: {[id: string]: string };
	}
	export interface PostListMemberEventsPostBodyFormProperties {

		/** Events created with the is_syncing value set to `true` will not trigger automations. */
		is_syncing: FormControl<boolean | null | undefined>,

		/**
		 * The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The date and time the event occurred in ISO 8601 format. */
		occurred_at: FormControl<Date | null | undefined>,

		/** An optional list of properties */
		properties: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreatePostListMemberEventsPostBodyFormGroup() {
		return new FormGroup<PostListMemberEventsPostBodyFormProperties>({
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			occurred_at: new FormControl<Date | null | undefined>(undefined),
			properties: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdGoalsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdGoalsReturn_links?: Array<GetListsIdMembersIdGoalsReturn_links>;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The last 50 Goal events triggered by a member. */
		GetListsIdMembersIdGoalsReturnGoals?: Array<GetListsIdMembersIdGoalsReturnGoals>;

		/** The list id. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdMembersIdGoalsReturnFormProperties {

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdGoalsReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdGoalsReturnFormProperties>({
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdGoalsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdGoalsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdGoalsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdGoalsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdGoalsReturnGoals {

		/** Any extra data passed with the Goal event. */
		data?: string | null;

		/** The name/type of Goal event triggered. */
		event?: string | null;

		/** The id for a Goal event. */
		goal_id?: number | null;

		/** The date and time the user last triggered the Goal event in ISO 8601 format. */
		last_visited_at?: Date | null;
	}
	export interface GetListsIdMembersIdGoalsReturnGoalsFormProperties {

		/** Any extra data passed with the Goal event. */
		data: FormControl<string | null | undefined>,

		/** The name/type of Goal event triggered. */
		event: FormControl<string | null | undefined>,

		/** The id for a Goal event. */
		goal_id: FormControl<number | null | undefined>,

		/** The date and time the user last triggered the Goal event in ISO 8601 format. */
		last_visited_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetListsIdMembersIdGoalsReturnGoalsFormGroup() {
		return new FormGroup<GetListsIdMembersIdGoalsReturnGoalsFormProperties>({
			data: new FormControl<string | null | undefined>(undefined),
			event: new FormControl<string | null | undefined>(undefined),
			goal_id: new FormControl<number | null | undefined>(undefined),
			last_visited_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum GetListsIdMembersIdNotesSort_field { created_at = 0, updated_at = 1, note_id = 2 }

	export interface GetListsIdMembersIdNotesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdNotesReturn_links?: Array<GetListsIdMembersIdNotesReturn_links>;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;

		/** An array of objects, each representing a note resource. */
		GetListsIdMembersIdNotesReturnNotes?: Array<GetListsIdMembersIdNotesReturnNotes>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdMembersIdNotesReturnFormProperties {

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMembersIdNotesReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdNotesReturnFormProperties>({
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdNotesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdNotesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdNotesReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdNotesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdNotesReturnNotes {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdNotesReturnNotes_links?: Array<GetListsIdMembersIdNotesReturnNotes_links>;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The note id. */
		id?: number | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetListsIdMembersIdNotesReturnNotesFormProperties {

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The note id. */
		id: FormControl<number | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetListsIdMembersIdNotesReturnNotesFormGroup() {
		return new FormGroup<GetListsIdMembersIdNotesReturnNotesFormProperties>({
			contact_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdNotesReturnNotes_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdNotesReturnNotes_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdNotesReturnNotes_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdNotesReturnNotes_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersIdNotesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdMembersIdNotesReturn_links?: Array<PostListsIdMembersIdNotesReturn_links>;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The note id. */
		id?: number | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostListsIdMembersIdNotesReturnFormProperties {

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The note id. */
		id: FormControl<number | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostListsIdMembersIdNotesReturnFormGroup() {
		return new FormGroup<PostListsIdMembersIdNotesReturnFormProperties>({
			contact_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMembersIdNotesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdMembersIdNotesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMembersIdNotesReturn_linksFormGroup() {
		return new FormGroup<PostListsIdMembersIdNotesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdNotesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMembersIdNotesIdReturn_links?: Array<GetListsIdMembersIdNotesIdReturn_links>;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The note id. */
		id?: number | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetListsIdMembersIdNotesIdReturnFormProperties {

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The note id. */
		id: FormControl<number | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetListsIdMembersIdNotesIdReturnFormGroup() {
		return new FormGroup<GetListsIdMembersIdNotesIdReturnFormProperties>({
			contact_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMembersIdNotesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMembersIdNotesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMembersIdNotesIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMembersIdNotesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdNotesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdMembersIdNotesIdReturn_links?: Array<PatchListsIdMembersIdNotesIdReturn_links>;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The note id. */
		id?: number | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchListsIdMembersIdNotesIdReturnFormProperties {

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The note id. */
		id: FormControl<number | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The date and time the note was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdNotesIdReturnFormGroup() {
		return new FormGroup<PatchListsIdMembersIdNotesIdReturnFormProperties>({
			contact_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMembersIdNotesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdMembersIdNotesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMembersIdNotesIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdMembersIdNotesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListMemberTagsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListMemberTagsReturn_links?: Array<GetListMemberTagsReturn_links>;

		/** A list of tags assigned to the list member. */
		GetListMemberTagsReturnTags?: Array<GetListMemberTagsReturnTags>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListMemberTagsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListMemberTagsReturnFormGroup() {
		return new FormGroup<GetListMemberTagsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListMemberTagsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListMemberTagsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListMemberTagsReturn_linksFormGroup() {
		return new FormGroup<GetListMemberTagsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListMemberTagsReturnTags {

		/** The date and time the tag was added to the list member in ISO 8601 format. */
		date_added?: Date | null;

		/** The unique id for the tag. */
		id?: number | null;

		/** The name of the tag. */
		name?: string | null;
	}
	export interface GetListMemberTagsReturnTagsFormProperties {

		/** The date and time the tag was added to the list member in ISO 8601 format. */
		date_added: FormControl<Date | null | undefined>,

		/** The unique id for the tag. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetListMemberTagsReturnTagsFormGroup() {
		return new FormGroup<GetListMemberTagsReturnTagsFormProperties>({
			date_added: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListMemberTagsPostBody {

		/** When is_syncing is true, automations based on the tags in the request will not fire */
		is_syncing?: boolean | null;

		/**
		 * A list of tags assigned to the list member.
		 * Required
		 */
		PostListMemberTagsPostBodyTags: Array<PostListMemberTagsPostBodyTags>;
	}
	export interface PostListMemberTagsPostBodyFormProperties {

		/** When is_syncing is true, automations based on the tags in the request will not fire */
		is_syncing: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListMemberTagsPostBodyFormGroup() {
		return new FormGroup<PostListMemberTagsPostBodyFormProperties>({
			is_syncing: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListMemberTagsPostBodyTags {

		/**
		 * The name of the tag.
		 * Required
		 */
		name: string;

		/**
		 * The status for the tag on the member, pass in active to add a tag or inactive to remove it.
		 * Required
		 */
		status: PostListMemberTagsPostBodyTagsStatus;
	}
	export interface PostListMemberTagsPostBodyTagsFormProperties {

		/**
		 * The name of the tag.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The status for the tag on the member, pass in active to add a tag or inactive to remove it.
		 * Required
		 */
		status: FormControl<PostListMemberTagsPostBodyTagsStatus | null | undefined>,
	}
	export function CreatePostListMemberTagsPostBodyTagsFormGroup() {
		return new FormGroup<PostListMemberTagsPostBodyTagsFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PostListMemberTagsPostBodyTagsStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PostListMemberTagsPostBodyTagsStatus { inactive = 0, active = 1 }

	export interface GetListsIdMergeFieldsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMergeFieldsReturn_links?: Array<GetListsIdMergeFieldsReturn_links>;

		/** The list id. */
		list_id?: string | null;

		/** An array of objects, each representing a merge field resource. */
		GetListsIdMergeFieldsReturnMerge_fields?: Array<GetListsIdMergeFieldsReturnMerge_fields>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdMergeFieldsReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsReturnFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMergeFieldsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsReturnMerge_fields {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMergeFieldsReturnMerge_fields_links?: Array<GetListsIdMergeFieldsReturnMerge_fields_links>;

		/** The default value for the merge field if `null`. */
		default_value?: string | null;

		/** The order that the merge field displays on the list signup form. */
		display_order?: number | null;

		/** Extra text to help the subscriber fill out the form. */
		help_text?: string | null;

		/** The ID that identifies this merge field's audience'. */
		list_id?: string | null;

		/** An unchanging id for the merge field. */
		merge_id?: number | null;

		/** The name of the merge field (audience field). */
		name?: string | null;

		/** Extra options for some merge field types. */
		options?: GetListsIdMergeFieldsReturnMerge_fieldsOptions;

		/** Whether the merge field is displayed on the signup form. */
		public?: boolean | null;

		/** The boolean value if the merge field is required. */
		required?: boolean | null;

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag?: string | null;

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type?: GetListsIdMergeFieldsReturnMerge_fieldsType | null;
	}
	export interface GetListsIdMergeFieldsReturnMerge_fieldsFormProperties {

		/** The default value for the merge field if `null`. */
		default_value: FormControl<string | null | undefined>,

		/** The order that the merge field displays on the list signup form. */
		display_order: FormControl<number | null | undefined>,

		/** Extra text to help the subscriber fill out the form. */
		help_text: FormControl<string | null | undefined>,

		/** The ID that identifies this merge field's audience'. */
		list_id: FormControl<string | null | undefined>,

		/** An unchanging id for the merge field. */
		merge_id: FormControl<number | null | undefined>,

		/** The name of the merge field (audience field). */
		name: FormControl<string | null | undefined>,

		/** Whether the merge field is displayed on the signup form. */
		public: FormControl<boolean | null | undefined>,

		/** The boolean value if the merge field is required. */
		required: FormControl<boolean | null | undefined>,

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag: FormControl<string | null | undefined>,

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsReturnMerge_fieldsFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsReturnMerge_fieldsFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			help_text: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			merge_id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsReturnMerge_fields_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMergeFieldsReturnMerge_fields_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsReturnMerge_fields_linksFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsReturnMerge_fields_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsReturnMerge_fieldsOptions {

		/** In a radio or dropdown non-group field, the available options for contacts to pick from. */
		choices?: Array<string>;

		/** In a date or birthday field, the format of the date. */
		date_format?: string | null;

		/** In an address field, the default country code if none supplied. */
		default_country?: number | null;

		/** In a phone field, the phone number type: US or International. */
		phone_format?: string | null;

		/** In a text field, the default length of the text field. */
		size?: number | null;
	}
	export interface GetListsIdMergeFieldsReturnMerge_fieldsOptionsFormProperties {

		/** In a date or birthday field, the format of the date. */
		date_format: FormControl<string | null | undefined>,

		/** In an address field, the default country code if none supplied. */
		default_country: FormControl<number | null | undefined>,

		/** In a phone field, the phone number type: US or International. */
		phone_format: FormControl<string | null | undefined>,

		/** In a text field, the default length of the text field. */
		size: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsReturnMerge_fieldsOptionsFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsReturnMerge_fieldsOptionsFormProperties>({
			date_format: new FormControl<string | null | undefined>(undefined),
			default_country: new FormControl<number | null | undefined>(undefined),
			phone_format: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetListsIdMergeFieldsReturnMerge_fieldsType { text = 0, number = 1, address = 2, phone = 3, date = 4, url = 5, imageurl = 6, radio = 7, dropdown = 8, birthday = 9, zip = 10 }

	export interface PostListsIdMergeFieldsPostBody {

		/** The default value for the merge field if `null`. */
		default_value?: string | null;

		/** The order that the merge field displays on the list signup form. */
		display_order?: number | null;

		/** Extra text to help the subscriber fill out the form. */
		help_text?: string | null;

		/**
		 * The name of the merge field (audience field).
		 * Required
		 */
		name: string;

		/** Extra options for some merge field types. */
		options?: PostListsIdMergeFieldsPostBodyOptions;

		/** Whether the merge field is displayed on the signup form. */
		public?: boolean | null;

		/** Whether the merge field is required to import a contact. */
		required?: boolean | null;

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag?: string | null;

		/**
		 * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
		 * Required
		 */
		type: GetListsIdMergeFieldsReturnMerge_fieldsType;
	}
	export interface PostListsIdMergeFieldsPostBodyFormProperties {

		/** The default value for the merge field if `null`. */
		default_value: FormControl<string | null | undefined>,

		/** The order that the merge field displays on the list signup form. */
		display_order: FormControl<number | null | undefined>,

		/** Extra text to help the subscriber fill out the form. */
		help_text: FormControl<string | null | undefined>,

		/**
		 * The name of the merge field (audience field).
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Whether the merge field is displayed on the signup form. */
		public: FormControl<boolean | null | undefined>,

		/** Whether the merge field is required to import a contact. */
		required: FormControl<boolean | null | undefined>,

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag: FormControl<string | null | undefined>,

		/**
		 * The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
		 * Required
		 */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreatePostListsIdMergeFieldsPostBodyFormGroup() {
		return new FormGroup<PostListsIdMergeFieldsPostBodyFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			help_text: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostListsIdMergeFieldsPostBodyOptions {

		/** In a radio or dropdown non-group field, the available options for contacts to pick from. */
		choices?: Array<string>;

		/** In a date or birthday field, the format of the date. */
		date_format?: string | null;

		/** In an address field, the default country code if none supplied. */
		default_country?: number | null;

		/** In a phone field, the phone number type: US or International. */
		phone_format?: string | null;

		/** In a text field, the default length of the text field. */
		size?: number | null;
	}
	export interface PostListsIdMergeFieldsPostBodyOptionsFormProperties {

		/** In a date or birthday field, the format of the date. */
		date_format: FormControl<string | null | undefined>,

		/** In an address field, the default country code if none supplied. */
		default_country: FormControl<number | null | undefined>,

		/** In a phone field, the phone number type: US or International. */
		phone_format: FormControl<string | null | undefined>,

		/** In a text field, the default length of the text field. */
		size: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMergeFieldsPostBodyOptionsFormGroup() {
		return new FormGroup<PostListsIdMergeFieldsPostBodyOptionsFormProperties>({
			date_format: new FormControl<string | null | undefined>(undefined),
			default_country: new FormControl<number | null | undefined>(undefined),
			phone_format: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMergeFieldsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdMergeFieldsReturn_links?: Array<PostListsIdMergeFieldsReturn_links>;

		/** The default value for the merge field if `null`. */
		default_value?: string | null;

		/** The order that the merge field displays on the list signup form. */
		display_order?: number | null;

		/** Extra text to help the subscriber fill out the form. */
		help_text?: string | null;

		/** The ID that identifies this merge field's audience'. */
		list_id?: string | null;

		/** An unchanging id for the merge field. */
		merge_id?: number | null;

		/** The name of the merge field (audience field). */
		name?: string | null;

		/** Extra options for some merge field types. */
		options?: PostListsIdMergeFieldsReturnOptions;

		/** Whether the merge field is displayed on the signup form. */
		public?: boolean | null;

		/** The boolean value if the merge field is required. */
		required?: boolean | null;

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag?: string | null;

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type?: GetListsIdMergeFieldsReturnMerge_fieldsType | null;
	}
	export interface PostListsIdMergeFieldsReturnFormProperties {

		/** The default value for the merge field if `null`. */
		default_value: FormControl<string | null | undefined>,

		/** The order that the merge field displays on the list signup form. */
		display_order: FormControl<number | null | undefined>,

		/** Extra text to help the subscriber fill out the form. */
		help_text: FormControl<string | null | undefined>,

		/** The ID that identifies this merge field's audience'. */
		list_id: FormControl<string | null | undefined>,

		/** An unchanging id for the merge field. */
		merge_id: FormControl<number | null | undefined>,

		/** The name of the merge field (audience field). */
		name: FormControl<string | null | undefined>,

		/** Whether the merge field is displayed on the signup form. */
		public: FormControl<boolean | null | undefined>,

		/** The boolean value if the merge field is required. */
		required: FormControl<boolean | null | undefined>,

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag: FormControl<string | null | undefined>,

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreatePostListsIdMergeFieldsReturnFormGroup() {
		return new FormGroup<PostListsIdMergeFieldsReturnFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			help_text: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			merge_id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMergeFieldsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdMergeFieldsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdMergeFieldsReturn_linksFormGroup() {
		return new FormGroup<PostListsIdMergeFieldsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdMergeFieldsReturnOptions {

		/** In a radio or dropdown non-group field, the available options for contacts to pick from. */
		choices?: Array<string>;

		/** In a date or birthday field, the format of the date. */
		date_format?: string | null;

		/** In an address field, the default country code if none supplied. */
		default_country?: number | null;

		/** In a phone field, the phone number type: US or International. */
		phone_format?: string | null;

		/** In a text field, the default length of the text field. */
		size?: number | null;
	}
	export interface PostListsIdMergeFieldsReturnOptionsFormProperties {

		/** In a date or birthday field, the format of the date. */
		date_format: FormControl<string | null | undefined>,

		/** In an address field, the default country code if none supplied. */
		default_country: FormControl<number | null | undefined>,

		/** In a phone field, the phone number type: US or International. */
		phone_format: FormControl<string | null | undefined>,

		/** In a text field, the default length of the text field. */
		size: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdMergeFieldsReturnOptionsFormGroup() {
		return new FormGroup<PostListsIdMergeFieldsReturnOptionsFormProperties>({
			date_format: new FormControl<string | null | undefined>(undefined),
			default_country: new FormControl<number | null | undefined>(undefined),
			phone_format: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdMergeFieldsIdReturn_links?: Array<GetListsIdMergeFieldsIdReturn_links>;

		/** The default value for the merge field if `null`. */
		default_value?: string | null;

		/** The order that the merge field displays on the list signup form. */
		display_order?: number | null;

		/** Extra text to help the subscriber fill out the form. */
		help_text?: string | null;

		/** The ID that identifies this merge field's audience'. */
		list_id?: string | null;

		/** An unchanging id for the merge field. */
		merge_id?: number | null;

		/** The name of the merge field (audience field). */
		name?: string | null;

		/** Extra options for some merge field types. */
		options?: GetListsIdMergeFieldsIdReturnOptions;

		/** Whether the merge field is displayed on the signup form. */
		public?: boolean | null;

		/** The boolean value if the merge field is required. */
		required?: boolean | null;

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag?: string | null;

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type?: GetListsIdMergeFieldsReturnMerge_fieldsType | null;
	}
	export interface GetListsIdMergeFieldsIdReturnFormProperties {

		/** The default value for the merge field if `null`. */
		default_value: FormControl<string | null | undefined>,

		/** The order that the merge field displays on the list signup form. */
		display_order: FormControl<number | null | undefined>,

		/** Extra text to help the subscriber fill out the form. */
		help_text: FormControl<string | null | undefined>,

		/** The ID that identifies this merge field's audience'. */
		list_id: FormControl<string | null | undefined>,

		/** An unchanging id for the merge field. */
		merge_id: FormControl<number | null | undefined>,

		/** The name of the merge field (audience field). */
		name: FormControl<string | null | undefined>,

		/** Whether the merge field is displayed on the signup form. */
		public: FormControl<boolean | null | undefined>,

		/** The boolean value if the merge field is required. */
		required: FormControl<boolean | null | undefined>,

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag: FormControl<string | null | undefined>,

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsIdReturnFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsIdReturnFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			help_text: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			merge_id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdMergeFieldsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdMergeFieldsIdReturnOptions {

		/** In a radio or dropdown non-group field, the available options for contacts to pick from. */
		choices?: Array<string>;

		/** In a date or birthday field, the format of the date. */
		date_format?: string | null;

		/** In an address field, the default country code if none supplied. */
		default_country?: number | null;

		/** In a phone field, the phone number type: US or International. */
		phone_format?: string | null;

		/** In a text field, the default length of the text field. */
		size?: number | null;
	}
	export interface GetListsIdMergeFieldsIdReturnOptionsFormProperties {

		/** In a date or birthday field, the format of the date. */
		date_format: FormControl<string | null | undefined>,

		/** In an address field, the default country code if none supplied. */
		default_country: FormControl<number | null | undefined>,

		/** In a phone field, the phone number type: US or International. */
		phone_format: FormControl<string | null | undefined>,

		/** In a text field, the default length of the text field. */
		size: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdMergeFieldsIdReturnOptionsFormGroup() {
		return new FormGroup<GetListsIdMergeFieldsIdReturnOptionsFormProperties>({
			date_format: new FormControl<string | null | undefined>(undefined),
			default_country: new FormControl<number | null | undefined>(undefined),
			phone_format: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMergeFieldsIdPatchBody {

		/** The default value for the merge field if `null`. */
		default_value?: string | null;

		/** The order that the merge field displays on the list signup form. */
		display_order?: number | null;

		/** Extra text to help the subscriber fill out the form. */
		help_text?: string | null;

		/**
		 * The name of the merge field (audience field).
		 * Required
		 */
		name: string;

		/** Extra options for some merge field types. */
		options?: PatchListsIdMergeFieldsIdPatchBodyOptions;

		/** Whether the merge field is displayed on the signup form. */
		public?: boolean | null;

		/** Whether the merge field is required to import a contact. */
		required?: boolean | null;

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag?: string | null;
	}
	export interface PatchListsIdMergeFieldsIdPatchBodyFormProperties {

		/** The default value for the merge field if `null`. */
		default_value: FormControl<string | null | undefined>,

		/** The order that the merge field displays on the list signup form. */
		display_order: FormControl<number | null | undefined>,

		/** Extra text to help the subscriber fill out the form. */
		help_text: FormControl<string | null | undefined>,

		/**
		 * The name of the merge field (audience field).
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Whether the merge field is displayed on the signup form. */
		public: FormControl<boolean | null | undefined>,

		/** Whether the merge field is required to import a contact. */
		required: FormControl<boolean | null | undefined>,

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMergeFieldsIdPatchBodyFormGroup() {
		return new FormGroup<PatchListsIdMergeFieldsIdPatchBodyFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			help_text: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMergeFieldsIdPatchBodyOptions {

		/** In a radio or dropdown non-group field, the available options for members to pick from. */
		choices?: Array<string>;

		/** In a date or birthday field, the format of the date. */
		date_format?: string | null;

		/** In an address field, the default country code if none supplied. */
		default_country?: number | null;

		/** In a phone field, the phone number type: US or International. */
		phone_format?: string | null;
	}
	export interface PatchListsIdMergeFieldsIdPatchBodyOptionsFormProperties {

		/** In a date or birthday field, the format of the date. */
		date_format: FormControl<string | null | undefined>,

		/** In an address field, the default country code if none supplied. */
		default_country: FormControl<number | null | undefined>,

		/** In a phone field, the phone number type: US or International. */
		phone_format: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMergeFieldsIdPatchBodyOptionsFormGroup() {
		return new FormGroup<PatchListsIdMergeFieldsIdPatchBodyOptionsFormProperties>({
			date_format: new FormControl<string | null | undefined>(undefined),
			default_country: new FormControl<number | null | undefined>(undefined),
			phone_format: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMergeFieldsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdMergeFieldsIdReturn_links?: Array<PatchListsIdMergeFieldsIdReturn_links>;

		/** The default value for the merge field if `null`. */
		default_value?: string | null;

		/** The order that the merge field displays on the list signup form. */
		display_order?: number | null;

		/** Extra text to help the subscriber fill out the form. */
		help_text?: string | null;

		/** The ID that identifies this merge field's audience'. */
		list_id?: string | null;

		/** An unchanging id for the merge field. */
		merge_id?: number | null;

		/** The name of the merge field (audience field). */
		name?: string | null;

		/** Extra options for some merge field types. */
		options?: PatchListsIdMergeFieldsIdReturnOptions;

		/** Whether the merge field is displayed on the signup form. */
		public?: boolean | null;

		/** The boolean value if the merge field is required. */
		required?: boolean | null;

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag?: string | null;

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type?: GetListsIdMergeFieldsReturnMerge_fieldsType | null;
	}
	export interface PatchListsIdMergeFieldsIdReturnFormProperties {

		/** The default value for the merge field if `null`. */
		default_value: FormControl<string | null | undefined>,

		/** The order that the merge field displays on the list signup form. */
		display_order: FormControl<number | null | undefined>,

		/** Extra text to help the subscriber fill out the form. */
		help_text: FormControl<string | null | undefined>,

		/** The ID that identifies this merge field's audience'. */
		list_id: FormControl<string | null | undefined>,

		/** An unchanging id for the merge field. */
		merge_id: FormControl<number | null | undefined>,

		/** The name of the merge field (audience field). */
		name: FormControl<string | null | undefined>,

		/** Whether the merge field is displayed on the signup form. */
		public: FormControl<boolean | null | undefined>,

		/** The boolean value if the merge field is required. */
		required: FormControl<boolean | null | undefined>,

		/** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
		tag: FormControl<string | null | undefined>,

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreatePatchListsIdMergeFieldsIdReturnFormGroup() {
		return new FormGroup<PatchListsIdMergeFieldsIdReturnFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined),
			display_order: new FormControl<number | null | undefined>(undefined),
			help_text: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			merge_id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMergeFieldsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdMergeFieldsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdMergeFieldsIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdMergeFieldsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdMergeFieldsIdReturnOptions {

		/** In a radio or dropdown non-group field, the available options for contacts to pick from. */
		choices?: Array<string>;

		/** In a date or birthday field, the format of the date. */
		date_format?: string | null;

		/** In an address field, the default country code if none supplied. */
		default_country?: number | null;

		/** In a phone field, the phone number type: US or International. */
		phone_format?: string | null;

		/** In a text field, the default length of the text field. */
		size?: number | null;
	}
	export interface PatchListsIdMergeFieldsIdReturnOptionsFormProperties {

		/** In a date or birthday field, the format of the date. */
		date_format: FormControl<string | null | undefined>,

		/** In an address field, the default country code if none supplied. */
		default_country: FormControl<number | null | undefined>,

		/** In a phone field, the phone number type: US or International. */
		phone_format: FormControl<string | null | undefined>,

		/** In a text field, the default length of the text field. */
		size: FormControl<number | null | undefined>,
	}
	export function CreatePatchListsIdMergeFieldsIdReturnOptionsFormGroup() {
		return new FormGroup<PatchListsIdMergeFieldsIdReturnOptionsFormProperties>({
			date_format: new FormControl<string | null | undefined>(undefined),
			default_country: new FormControl<number | null | undefined>(undefined),
			phone_format: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PreviewASegmentReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PreviewASegmentReturn_links?: Array<PreviewASegmentReturn_links>;

		/** The list id. */
		list_id?: string | null;

		/** An array of objects, each representing a list segment. */
		PreviewASegmentReturnSegments?: Array<PreviewASegmentReturnSegments>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface PreviewASegmentReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreatePreviewASegmentReturnFormGroup() {
		return new FormGroup<PreviewASegmentReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PreviewASegmentReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PreviewASegmentReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePreviewASegmentReturn_linksFormGroup() {
		return new FormGroup<PreviewASegmentReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PreviewASegmentReturnSegments {

		/** A list of link types and descriptions for the API schema documents. */
		PreviewASegmentReturnSegments_links?: Array<PreviewASegmentReturnSegments_links>;

		/** The date and time the segment was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The unique id for the segment. */
		id?: number | null;

		/** The list id. */
		list_id?: string | null;

		/** The number of active subscribers currently included in the segment. */
		member_count?: number | null;

		/** The name of the segment. */
		name?: string | null;

		/** The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions. */
		options?: PreviewASegmentReturnSegmentsOptions;

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type?: PreviewASegmentReturnSegmentsType | null;

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PreviewASegmentReturnSegmentsFormProperties {

		/** The date and time the segment was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The unique id for the segment. */
		id: FormControl<number | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The number of active subscribers currently included in the segment. */
		member_count: FormControl<number | null | undefined>,

		/** The name of the segment. */
		name: FormControl<string | null | undefined>,

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type: FormControl<PreviewASegmentReturnSegmentsType | null | undefined>,

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePreviewASegmentReturnSegmentsFormGroup() {
		return new FormGroup<PreviewASegmentReturnSegmentsFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PreviewASegmentReturnSegmentsType | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PreviewASegmentReturnSegments_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PreviewASegmentReturnSegments_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePreviewASegmentReturnSegments_linksFormGroup() {
		return new FormGroup<PreviewASegmentReturnSegments_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PreviewASegmentReturnSegmentsOptions {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;
	}
	export interface PreviewASegmentReturnSegmentsOptionsFormProperties {

		/** Match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,
	}
	export function CreatePreviewASegmentReturnSegmentsOptionsFormGroup() {
		return new FormGroup<PreviewASegmentReturnSegmentsOptionsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
		});

	}

	export enum PreviewASegmentReturnSegmentsType { saved = 0, static = 1, fuzzy = 2 }

	export interface PostListsIdSegmentsPostBody {

		/**
		 * The name of the segment.
		 * Required
		 */
		name: string;

		/** The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions. */
		options?: PostListsIdSegmentsPostBodyOptions;

		/** An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field. */
		static_segment?: Array<string>;
	}
	export interface PostListsIdSegmentsPostBodyFormProperties {

		/**
		 * The name of the segment.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsPostBodyFormGroup() {
		return new FormGroup<PostListsIdSegmentsPostBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostListsIdSegmentsPostBodyOptions {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;
	}
	export interface PostListsIdSegmentsPostBodyOptionsFormProperties {

		/** Match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,
	}
	export function CreatePostListsIdSegmentsPostBodyOptionsFormGroup() {
		return new FormGroup<PostListsIdSegmentsPostBodyOptionsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSegmentsReturn_links?: Array<PostListsIdSegmentsReturn_links>;

		/** The date and time the segment was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The unique id for the segment. */
		id?: number | null;

		/** The list id. */
		list_id?: string | null;

		/** The number of active subscribers currently included in the segment. */
		member_count?: number | null;

		/** The name of the segment. */
		name?: string | null;

		/** The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions. */
		options?: PostListsIdSegmentsReturnOptions;

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type?: PreviewASegmentReturnSegmentsType | null;

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PostListsIdSegmentsReturnFormProperties {

		/** The date and time the segment was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The unique id for the segment. */
		id: FormControl<number | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The number of active subscribers currently included in the segment. */
		member_count: FormControl<number | null | undefined>,

		/** The name of the segment. */
		name: FormControl<string | null | undefined>,

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type: FormControl<PreviewASegmentReturnSegmentsType | null | undefined>,

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePostListsIdSegmentsReturnFormGroup() {
		return new FormGroup<PostListsIdSegmentsReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PreviewASegmentReturnSegmentsType | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSegmentsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsReturn_linksFormGroup() {
		return new FormGroup<PostListsIdSegmentsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsReturnOptions {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;
	}
	export interface PostListsIdSegmentsReturnOptionsFormProperties {

		/** Match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,
	}
	export function CreatePostListsIdSegmentsReturnOptionsFormGroup() {
		return new FormGroup<PostListsIdSegmentsReturnOptionsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdSegmentsIdReturn_links?: Array<GetListsIdSegmentsIdReturn_links>;

		/** The date and time the segment was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The unique id for the segment. */
		id?: number | null;

		/** The list id. */
		list_id?: string | null;

		/** The number of active subscribers currently included in the segment. */
		member_count?: number | null;

		/** The name of the segment. */
		name?: string | null;

		/** The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions. */
		options?: GetListsIdSegmentsIdReturnOptions;

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type?: PreviewASegmentReturnSegmentsType | null;

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface GetListsIdSegmentsIdReturnFormProperties {

		/** The date and time the segment was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The unique id for the segment. */
		id: FormControl<number | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The number of active subscribers currently included in the segment. */
		member_count: FormControl<number | null | undefined>,

		/** The name of the segment. */
		name: FormControl<string | null | undefined>,

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type: FormControl<PreviewASegmentReturnSegmentsType | null | undefined>,

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdReturnFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PreviewASegmentReturnSegmentsType | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdSegmentsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdReturnOptions {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;
	}
	export interface GetListsIdSegmentsIdReturnOptionsFormProperties {

		/** Match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdReturnOptionsFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdReturnOptionsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdSegmentsIdPatchBody {

		/**
		 * The name of the segment.
		 * Required
		 */
		name: string;

		/** The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions. */
		options?: PatchListsIdSegmentsIdPatchBodyOptions;

		/** An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array for an existing static segment will reset that segment and remove all members. This field cannot be provided with the `options` field. */
		static_segment?: Array<string>;
	}
	export interface PatchListsIdSegmentsIdPatchBodyFormProperties {

		/**
		 * The name of the segment.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdSegmentsIdPatchBodyFormGroup() {
		return new FormGroup<PatchListsIdSegmentsIdPatchBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PatchListsIdSegmentsIdPatchBodyOptions {

		/** An array of segment conditions. */
		conditions?: Array<string>;

		/** Match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;
	}
	export interface PatchListsIdSegmentsIdPatchBodyOptionsFormProperties {

		/** Match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,
	}
	export function CreatePatchListsIdSegmentsIdPatchBodyOptionsFormGroup() {
		return new FormGroup<PatchListsIdSegmentsIdPatchBodyOptionsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdSegmentsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdSegmentsIdReturn_links?: Array<PatchListsIdSegmentsIdReturn_links>;

		/** The date and time the segment was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The unique id for the segment. */
		id?: number | null;

		/** The list id. */
		list_id?: string | null;

		/** The number of active subscribers currently included in the segment. */
		member_count?: number | null;

		/** The name of the segment. */
		name?: string | null;

		/** The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions. */
		options?: PatchListsIdSegmentsIdReturnOptions;

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type?: PreviewASegmentReturnSegmentsType | null;

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at?: Date | null;
	}
	export interface PatchListsIdSegmentsIdReturnFormProperties {

		/** The date and time the segment was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The unique id for the segment. */
		id: FormControl<number | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The number of active subscribers currently included in the segment. */
		member_count: FormControl<number | null | undefined>,

		/** The name of the segment. */
		name: FormControl<string | null | undefined>,

		/** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
		type: FormControl<PreviewASegmentReturnSegmentsType | null | undefined>,

		/** The date and time the segment was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePatchListsIdSegmentsIdReturnFormGroup() {
		return new FormGroup<PatchListsIdSegmentsIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_count: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PreviewASegmentReturnSegmentsType | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdSegmentsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdSegmentsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdSegmentsIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdSegmentsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdSegmentsIdReturnOptions {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;
	}
	export interface PatchListsIdSegmentsIdReturnOptionsFormProperties {

		/** Match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,
	}
	export function CreatePatchListsIdSegmentsIdReturnOptionsFormGroup() {
		return new FormGroup<PatchListsIdSegmentsIdReturnOptionsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdPostBody {

		/** An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent. */
		members_to_add?: Array<string>;

		/** An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent. */
		members_to_remove?: Array<string>;
	}
	export interface PostListsIdSegmentsIdPostBodyFormProperties {
	}
	export function CreatePostListsIdSegmentsIdPostBodyFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdPostBodyFormProperties>({
		});

	}

	export interface PostListsIdSegmentsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSegmentsIdReturn_links?: Array<PostListsIdSegmentsIdReturn_links>;

		/** The total number of items matching the query, irrespective of pagination. */
		error_count?: number | null;

		/** An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details. */
		PostListsIdSegmentsIdReturnErrors?: Array<PostListsIdSegmentsIdReturnErrors>;

		/** An array of objects, each representing a new member that was added to the static segment. */
		PostListsIdSegmentsIdReturnMembers_added?: Array<PostListsIdSegmentsIdReturnMembers_added>;

		/** An array of objects, each representing an existing list member that got deleted from the static segment. */
		PostListsIdSegmentsIdReturnMembers_removed?: Array<PostListsIdSegmentsIdReturnMembers_removed>;

		/** The total number of items matching the query, irrespective of pagination. */
		total_added?: number | null;

		/** The total number of items matching the query, irrespective of pagination. */
		total_removed?: number | null;
	}
	export interface PostListsIdSegmentsIdReturnFormProperties {

		/** The total number of items matching the query, irrespective of pagination. */
		error_count: FormControl<number | null | undefined>,

		/** The total number of items matching the query, irrespective of pagination. */
		total_added: FormControl<number | null | undefined>,

		/** The total number of items matching the query, irrespective of pagination. */
		total_removed: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnFormProperties>({
			error_count: new FormControl<number | null | undefined>(undefined),
			total_added: new FormControl<number | null | undefined>(undefined),
			total_removed: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSegmentsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturn_linksFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnErrors {

		/** Email addresses added to the static segment or removed */
		email_addresses?: Array<string>;

		/** The error message indicating why the email addresses could not be added or updated. */
		error?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnErrorsFormProperties {

		/** The error message indicating why the email addresses could not be added or updated. */
		error: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnErrorsFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnErrorsFormProperties>({
			error: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_added {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSegmentsIdReturnMembers_added_links?: Array<PostListsIdSegmentsIdReturnMembers_added_links>;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PostListsIdSegmentsIdReturnMembers_addedLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdSegmentsIdReturnMembers_addedLocation;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** An individual merge var and value for a member. */
		merge_fields?: {[id: string]: any };

		/** Open and click rates for this subscriber. */
		stats?: PostListsIdSegmentsIdReturnMembers_addedStats;

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The tags applied to this member. */
		PostListsIdSegmentsIdReturnMembers_addedTags?: Array<PostListsIdSegmentsIdReturnMembers_addedTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_addedFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** An individual merge var and value for a member. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_addedFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_addedFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_added_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_added_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_added_linksFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_added_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_addedLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_addedLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_addedLast_noteFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_addedLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_addedLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_addedLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_addedLocationFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_addedLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_addedStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_addedStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_addedStatsFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_addedStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_addedTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_addedTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_addedTagsFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_addedTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_removed {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSegmentsIdReturnMembers_removed_links?: Array<PostListsIdSegmentsIdReturnMembers_removed_links>;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PostListsIdSegmentsIdReturnMembers_removedLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdSegmentsIdReturnMembers_removedLocation;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** An individual merge var and value for a member. */
		merge_fields?: {[id: string]: any };

		/** Open and click rates for this subscriber. */
		stats?: PostListsIdSegmentsIdReturnMembers_removedStats;

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The tags applied to this member. */
		PostListsIdSegmentsIdReturnMembers_removedTags?: Array<PostListsIdSegmentsIdReturnMembers_removedTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_removedFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** An individual merge var and value for a member. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_removedFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_removedFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_removed_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_removed_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_removed_linksFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_removed_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_removedLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_removedLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_removedLast_noteFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_removedLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_removedLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_removedLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_removedLocationFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_removedLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_removedStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_removedStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_removedStatsFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_removedStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdReturnMembers_removedTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface PostListsIdSegmentsIdReturnMembers_removedTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdReturnMembers_removedTagsFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdReturnMembers_removedTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdSegmentsIdMembersReturn_links?: Array<GetListsIdSegmentsIdMembersReturn_links>;

		/** An array of objects, each representing a specific list member. */
		GetListsIdSegmentsIdMembersReturnMembers?: Array<GetListsIdSegmentsIdMembersReturnMembers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdSegmentsIdMembersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturnFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdSegmentsIdMembersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturn_linksFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturnMembers {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdSegmentsIdMembersReturnMembers_links?: Array<GetListsIdSegmentsIdMembersReturnMembers_links>;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: GetListsIdSegmentsIdMembersReturnMembersLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: GetListsIdSegmentsIdMembersReturnMembersLocation;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** Open and click rates for this subscriber. */
		stats?: GetListsIdSegmentsIdMembersReturnMembersStats;

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetListsIdSegmentsIdMembersReturnMembersFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturnMembersFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturnMembersFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturnMembers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdSegmentsIdMembersReturnMembers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturnMembers_linksFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturnMembers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturnMembersLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface GetListsIdSegmentsIdMembersReturnMembersLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturnMembersLast_noteFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturnMembersLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturnMembersLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface GetListsIdSegmentsIdMembersReturnMembersLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturnMembersLocationFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturnMembersLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSegmentsIdMembersReturnMembersStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;
	}
	export interface GetListsIdSegmentsIdMembersReturnMembersStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdSegmentsIdMembersReturnMembersStatsFormGroup() {
		return new FormGroup<GetListsIdSegmentsIdMembersReturnMembersStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdMembersPostBody {

		/**
		 * Email address for a subscriber.
		 * Required
		 */
		email_address: string;
	}
	export interface PostListsIdSegmentsIdMembersPostBodyFormProperties {

		/**
		 * Email address for a subscriber.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdMembersPostBodyFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdMembersPostBodyFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PostListsIdSegmentsIdMembersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSegmentsIdMembersReturn_links?: Array<PostListsIdSegmentsIdMembersReturn_links>;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: PostListsIdSegmentsIdMembersReturnLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: PostListsIdSegmentsIdMembersReturnLocation;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** Open and click rates for this subscriber. */
		stats?: PostListsIdSegmentsIdMembersReturnStats;

		/** Subscriber's current status. */
		status?: PostListsIdPostBodyMembersStatus | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface PostListsIdSegmentsIdMembersReturnFormProperties {

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<PostListsIdPostBodyMembersStatus | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdMembersReturnFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdMembersReturnFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<PostListsIdPostBodyMembersStatus | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdMembersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSegmentsIdMembersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdMembersReturn_linksFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdMembersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdMembersReturnLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface PostListsIdSegmentsIdMembersReturnLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdMembersReturnLast_noteFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdMembersReturnLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdMembersReturnLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface PostListsIdSegmentsIdMembersReturnLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdMembersReturnLocationFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdMembersReturnLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSegmentsIdMembersReturnStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;
	}
	export interface PostListsIdSegmentsIdMembersReturnStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSegmentsIdMembersReturnStatsFormGroup() {
		return new FormGroup<PostListsIdSegmentsIdMembersReturnStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSignupFormsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdSignupFormsReturn_links?: Array<GetListsIdSignupFormsReturn_links>;

		/** The list id. */
		list_id?: string | null;

		/** List signup form. */
		GetListsIdSignupFormsReturnSignup_forms?: Array<GetListsIdSignupFormsReturnSignup_forms>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetListsIdSignupFormsReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSignupFormsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdSignupFormsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturn_linksFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSignupFormsReturnSignup_forms {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdSignupFormsReturnSignup_forms_links?: Array<GetListsIdSignupFormsReturnSignup_forms_links>;

		/** The signup form body content. */
		GetListsIdSignupFormsReturnSignup_formsContents?: Array<GetListsIdSignupFormsReturnSignup_formsContents>;

		/** Options for customizing your signup form header. */
		header?: GetListsIdSignupFormsReturnSignup_formsHeader;

		/** The signup form's list id. */
		list_id?: string | null;

		/** Signup form URL. */
		signup_form_url?: string | null;

		/** An array of objects, each representing an element style for the signup form. */
		GetListsIdSignupFormsReturnSignup_formsStyles?: Array<GetListsIdSignupFormsReturnSignup_formsStyles>;
	}
	export interface GetListsIdSignupFormsReturnSignup_formsFormProperties {

		/** The signup form's list id. */
		list_id: FormControl<string | null | undefined>,

		/** Signup form URL. */
		signup_form_url: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnSignup_formsFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnSignup_formsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			signup_form_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSignupFormsReturnSignup_forms_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdSignupFormsReturnSignup_forms_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnSignup_forms_linksFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnSignup_forms_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSignupFormsReturnSignup_formsContents {

		/** The content section name. */
		section?: GetListsIdSignupFormsReturnSignup_formsContentsSection | null;

		/** The content section text. */
		value?: string | null;
	}
	export interface GetListsIdSignupFormsReturnSignup_formsContentsFormProperties {

		/** The content section name. */
		section: FormControl<GetListsIdSignupFormsReturnSignup_formsContentsSection | null | undefined>,

		/** The content section text. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnSignup_formsContentsFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnSignup_formsContentsFormProperties>({
			section: new FormControl<GetListsIdSignupFormsReturnSignup_formsContentsSection | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetListsIdSignupFormsReturnSignup_formsContentsSection { signup_message = 0, unsub_message = 1, signup_thank_you_title = 2 }

	export interface GetListsIdSignupFormsReturnSignup_formsHeader {

		/** Image alignment. */
		image_align?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null;

		/** Alt text for the image. */
		image_alt?: string | null;

		/** Image border color. */
		image_border_color?: string | null;

		/** Image border style. */
		image_border_style?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null;

		/** Image border width. */
		image_border_width?: string | null;

		/** Image height, in pixels. */
		image_height?: string | null;

		/** The URL that the header image will link to. */
		image_link?: string | null;

		/** Image link target. */
		image_target?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null;

		/** Header image URL. */
		image_url?: string | null;

		/** Image width, in pixels. */
		image_width?: string | null;

		/** Header text. */
		text?: string | null;
	}
	export interface GetListsIdSignupFormsReturnSignup_formsHeaderFormProperties {

		/** Image alignment. */
		image_align: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null | undefined>,

		/** Alt text for the image. */
		image_alt: FormControl<string | null | undefined>,

		/** Image border color. */
		image_border_color: FormControl<string | null | undefined>,

		/** Image border style. */
		image_border_style: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null | undefined>,

		/** Image border width. */
		image_border_width: FormControl<string | null | undefined>,

		/** Image height, in pixels. */
		image_height: FormControl<string | null | undefined>,

		/** The URL that the header image will link to. */
		image_link: FormControl<string | null | undefined>,

		/** Image link target. */
		image_target: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null | undefined>,

		/** Header image URL. */
		image_url: FormControl<string | null | undefined>,

		/** Image width, in pixels. */
		image_width: FormControl<string | null | undefined>,

		/** Header text. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnSignup_formsHeaderFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnSignup_formsHeaderFormProperties>({
			image_align: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null | undefined>(undefined),
			image_alt: new FormControl<string | null | undefined>(undefined),
			image_border_color: new FormControl<string | null | undefined>(undefined),
			image_border_style: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null | undefined>(undefined),
			image_border_width: new FormControl<string | null | undefined>(undefined),
			image_height: new FormControl<string | null | undefined>(undefined),
			image_link: new FormControl<string | null | undefined>(undefined),
			image_target: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			image_width: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetListsIdSignupFormsReturnSignup_formsHeaderImage_align { none = 0, left = 1, center = 2, right = 3 }

	export enum GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style { none = 0, solid = 1, dotted = 2, dashed = 3, double = 4, groove = 5, outset = 6, inset = 7, ridge = 8 }

	export enum GetListsIdSignupFormsReturnSignup_formsHeaderImage_target { _blank = 0, null = 1 }

	export interface GetListsIdSignupFormsReturnSignup_formsStyles {

		/** A collection of options for a selector. */
		GetListsIdSignupFormsReturnSignup_formsStylesOptions?: Array<GetListsIdSignupFormsReturnSignup_formsStylesOptions>;

		/** A string that identifies the element selector. */
		selector?: GetListsIdSignupFormsReturnSignup_formsStylesSelector | null;
	}
	export interface GetListsIdSignupFormsReturnSignup_formsStylesFormProperties {

		/** A string that identifies the element selector. */
		selector: FormControl<GetListsIdSignupFormsReturnSignup_formsStylesSelector | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnSignup_formsStylesFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnSignup_formsStylesFormProperties>({
			selector: new FormControl<GetListsIdSignupFormsReturnSignup_formsStylesSelector | null | undefined>(undefined),
		});

	}

	export interface GetListsIdSignupFormsReturnSignup_formsStylesOptions {

		/** A string that identifies the property. */
		property?: string | null;

		/** A string that identifies value of the property. */
		value?: string | null;
	}
	export interface GetListsIdSignupFormsReturnSignup_formsStylesOptionsFormProperties {

		/** A string that identifies the property. */
		property: FormControl<string | null | undefined>,

		/** A string that identifies value of the property. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdSignupFormsReturnSignup_formsStylesOptionsFormGroup() {
		return new FormGroup<GetListsIdSignupFormsReturnSignup_formsStylesOptionsFormProperties>({
			property: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetListsIdSignupFormsReturnSignup_formsStylesSelector { page_background = 0, page_header = 1, page_outer_wrapper = 2, body_background = 3, body_link_style = 4, forms_buttons = 5, forms_buttons_hovered = 6, forms_field_label = 7, forms_field_text = 8, forms_required = 9, forms_required_legend = 10, forms_help_text = 11, forms_errors = 12, monkey_rewards_badge = 13 }

	export interface PostListsIdSignupFormsPostBody {

		/** The signup form body content. */
		PostListsIdSignupFormsPostBodyContents?: Array<PostListsIdSignupFormsPostBodyContents>;

		/** Options for customizing your signup form header. */
		header?: PostListsIdSignupFormsPostBodyHeader;

		/** An array of objects, each representing an element style for the signup form. */
		PostListsIdSignupFormsPostBodyStyles?: Array<PostListsIdSignupFormsPostBodyStyles>;
	}
	export interface PostListsIdSignupFormsPostBodyFormProperties {
	}
	export function CreatePostListsIdSignupFormsPostBodyFormGroup() {
		return new FormGroup<PostListsIdSignupFormsPostBodyFormProperties>({
		});

	}

	export interface PostListsIdSignupFormsPostBodyContents {

		/** The content section name. */
		section?: GetListsIdSignupFormsReturnSignup_formsContentsSection | null;

		/** The content section text. */
		value?: string | null;
	}
	export interface PostListsIdSignupFormsPostBodyContentsFormProperties {

		/** The content section name. */
		section: FormControl<GetListsIdSignupFormsReturnSignup_formsContentsSection | null | undefined>,

		/** The content section text. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsPostBodyContentsFormGroup() {
		return new FormGroup<PostListsIdSignupFormsPostBodyContentsFormProperties>({
			section: new FormControl<GetListsIdSignupFormsReturnSignup_formsContentsSection | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsPostBodyHeader {

		/** Image alignment. */
		image_align?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null;

		/** Alt text for the image. */
		image_alt?: string | null;

		/** Image border color. */
		image_border_color?: string | null;

		/** Image border style. */
		image_border_style?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null;

		/** Image border width. */
		image_border_width?: string | null;

		/** Image height, in pixels. */
		image_height?: string | null;

		/** The URL that the header image will link to. */
		image_link?: string | null;

		/** Image link target. */
		image_target?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null;

		/** Header image URL. */
		image_url?: string | null;

		/** Image width, in pixels. */
		image_width?: string | null;

		/** Header text. */
		text?: string | null;
	}
	export interface PostListsIdSignupFormsPostBodyHeaderFormProperties {

		/** Image alignment. */
		image_align: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null | undefined>,

		/** Alt text for the image. */
		image_alt: FormControl<string | null | undefined>,

		/** Image border color. */
		image_border_color: FormControl<string | null | undefined>,

		/** Image border style. */
		image_border_style: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null | undefined>,

		/** Image border width. */
		image_border_width: FormControl<string | null | undefined>,

		/** Image height, in pixels. */
		image_height: FormControl<string | null | undefined>,

		/** The URL that the header image will link to. */
		image_link: FormControl<string | null | undefined>,

		/** Image link target. */
		image_target: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null | undefined>,

		/** Header image URL. */
		image_url: FormControl<string | null | undefined>,

		/** Image width, in pixels. */
		image_width: FormControl<string | null | undefined>,

		/** Header text. */
		text: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsPostBodyHeaderFormGroup() {
		return new FormGroup<PostListsIdSignupFormsPostBodyHeaderFormProperties>({
			image_align: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null | undefined>(undefined),
			image_alt: new FormControl<string | null | undefined>(undefined),
			image_border_color: new FormControl<string | null | undefined>(undefined),
			image_border_style: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null | undefined>(undefined),
			image_border_width: new FormControl<string | null | undefined>(undefined),
			image_height: new FormControl<string | null | undefined>(undefined),
			image_link: new FormControl<string | null | undefined>(undefined),
			image_target: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			image_width: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsPostBodyStyles {

		/** A collection of options for a selector. */
		PostListsIdSignupFormsPostBodyStylesOptions?: Array<PostListsIdSignupFormsPostBodyStylesOptions>;

		/** A string that identifies the element selector. */
		selector?: GetListsIdSignupFormsReturnSignup_formsStylesSelector | null;
	}
	export interface PostListsIdSignupFormsPostBodyStylesFormProperties {

		/** A string that identifies the element selector. */
		selector: FormControl<GetListsIdSignupFormsReturnSignup_formsStylesSelector | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsPostBodyStylesFormGroup() {
		return new FormGroup<PostListsIdSignupFormsPostBodyStylesFormProperties>({
			selector: new FormControl<GetListsIdSignupFormsReturnSignup_formsStylesSelector | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsPostBodyStylesOptions {

		/** A string that identifies the property. */
		property?: string | null;

		/** A string that identifies value of the property. */
		value?: string | null;
	}
	export interface PostListsIdSignupFormsPostBodyStylesOptionsFormProperties {

		/** A string that identifies the property. */
		property: FormControl<string | null | undefined>,

		/** A string that identifies value of the property. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsPostBodyStylesOptionsFormGroup() {
		return new FormGroup<PostListsIdSignupFormsPostBodyStylesOptionsFormProperties>({
			property: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSignupFormsReturn_links?: Array<PostListsIdSignupFormsReturn_links>;

		/** The signup form body content. */
		PostListsIdSignupFormsReturnContents?: Array<PostListsIdSignupFormsReturnContents>;

		/** Options for customizing your signup form header. */
		header?: PostListsIdSignupFormsReturnHeader;

		/** The signup form's list id. */
		list_id?: string | null;

		/** Signup form URL. */
		signup_form_url?: string | null;

		/** An array of objects, each representing an element style for the signup form. */
		PostListsIdSignupFormsReturnStyles?: Array<PostListsIdSignupFormsReturnStyles>;
	}
	export interface PostListsIdSignupFormsReturnFormProperties {

		/** The signup form's list id. */
		list_id: FormControl<string | null | undefined>,

		/** Signup form URL. */
		signup_form_url: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsReturnFormGroup() {
		return new FormGroup<PostListsIdSignupFormsReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			signup_form_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSignupFormsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsReturn_linksFormGroup() {
		return new FormGroup<PostListsIdSignupFormsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsReturnContents {

		/** The content section name. */
		section?: GetListsIdSignupFormsReturnSignup_formsContentsSection | null;

		/** The content section text. */
		value?: string | null;
	}
	export interface PostListsIdSignupFormsReturnContentsFormProperties {

		/** The content section name. */
		section: FormControl<GetListsIdSignupFormsReturnSignup_formsContentsSection | null | undefined>,

		/** The content section text. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsReturnContentsFormGroup() {
		return new FormGroup<PostListsIdSignupFormsReturnContentsFormProperties>({
			section: new FormControl<GetListsIdSignupFormsReturnSignup_formsContentsSection | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsReturnHeader {

		/** Image alignment. */
		image_align?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null;

		/** Alt text for the image. */
		image_alt?: string | null;

		/** Image border color. */
		image_border_color?: string | null;

		/** Image border style. */
		image_border_style?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null;

		/** Image border width. */
		image_border_width?: string | null;

		/** Image height, in pixels. */
		image_height?: string | null;

		/** The URL that the header image will link to. */
		image_link?: string | null;

		/** Image link target. */
		image_target?: GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null;

		/** Header image URL. */
		image_url?: string | null;

		/** Image width, in pixels. */
		image_width?: string | null;

		/** Header text. */
		text?: string | null;
	}
	export interface PostListsIdSignupFormsReturnHeaderFormProperties {

		/** Image alignment. */
		image_align: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null | undefined>,

		/** Alt text for the image. */
		image_alt: FormControl<string | null | undefined>,

		/** Image border color. */
		image_border_color: FormControl<string | null | undefined>,

		/** Image border style. */
		image_border_style: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null | undefined>,

		/** Image border width. */
		image_border_width: FormControl<string | null | undefined>,

		/** Image height, in pixels. */
		image_height: FormControl<string | null | undefined>,

		/** The URL that the header image will link to. */
		image_link: FormControl<string | null | undefined>,

		/** Image link target. */
		image_target: FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null | undefined>,

		/** Header image URL. */
		image_url: FormControl<string | null | undefined>,

		/** Image width, in pixels. */
		image_width: FormControl<string | null | undefined>,

		/** Header text. */
		text: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsReturnHeaderFormGroup() {
		return new FormGroup<PostListsIdSignupFormsReturnHeaderFormProperties>({
			image_align: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_align | null | undefined>(undefined),
			image_alt: new FormControl<string | null | undefined>(undefined),
			image_border_color: new FormControl<string | null | undefined>(undefined),
			image_border_style: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_border_style | null | undefined>(undefined),
			image_border_width: new FormControl<string | null | undefined>(undefined),
			image_height: new FormControl<string | null | undefined>(undefined),
			image_link: new FormControl<string | null | undefined>(undefined),
			image_target: new FormControl<GetListsIdSignupFormsReturnSignup_formsHeaderImage_target | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			image_width: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsReturnStyles {

		/** A collection of options for a selector. */
		PostListsIdSignupFormsReturnStylesOptions?: Array<PostListsIdSignupFormsReturnStylesOptions>;

		/** A string that identifies the element selector. */
		selector?: GetListsIdSignupFormsReturnSignup_formsStylesSelector | null;
	}
	export interface PostListsIdSignupFormsReturnStylesFormProperties {

		/** A string that identifies the element selector. */
		selector: FormControl<GetListsIdSignupFormsReturnSignup_formsStylesSelector | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsReturnStylesFormGroup() {
		return new FormGroup<PostListsIdSignupFormsReturnStylesFormProperties>({
			selector: new FormControl<GetListsIdSignupFormsReturnSignup_formsStylesSelector | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSignupFormsReturnStylesOptions {

		/** A string that identifies the property. */
		property?: string | null;

		/** A string that identifies value of the property. */
		value?: string | null;
	}
	export interface PostListsIdSignupFormsReturnStylesOptionsFormProperties {

		/** A string that identifies the property. */
		property: FormControl<string | null | undefined>,

		/** A string that identifies value of the property. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSignupFormsReturnStylesOptionsFormGroup() {
		return new FormGroup<PostListsIdSignupFormsReturnStylesOptionsFormProperties>({
			property: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdSurveysIdActionsCreateEmailReturn_links?: Array<PostListsIdSurveysIdActionsCreateEmailReturn_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: PostListsIdSurveysIdActionsCreateEmailReturnAb_split_opts;

		/** The link to the campaign's archive version. */
		archive_url?: string | null;

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type?: string | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: PostListsIdSurveysIdActionsCreateEmailReturnDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: PostListsIdSurveysIdActionsCreateEmailReturnRecipients;

		/** For sent campaigns, a summary of opens and clicks. */
		report_summary?: PostListsIdSurveysIdActionsCreateEmailReturnReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: PostListsIdSurveysIdActionsCreateEmailReturnRss_opts;

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: PostListsIdSurveysIdActionsCreateEmailReturnSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: PostListsIdSurveysIdActionsCreateEmailReturnSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: PostListsIdSurveysIdActionsCreateEmailReturnTracking;

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: GetCampaignsType;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: PostListsIdSurveysIdActionsCreateEmailReturnVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnFormProperties {

		/** The link to the campaign's archive version. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
		content_type: FormControl<string | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/**
		 * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
		 * Required
		 */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined, [Validators.required]),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturn_linksFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnAb_split_optsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnDelivery_statusFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnRecipients {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: string;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: PostListsIdSurveysIdActionsCreateEmailReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnRecipientsFormProperties {

		/**
		 * The unique list id.
		 * Required
		 */
		list_id: FormControl<string | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnRecipientsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: PostListsIdSurveysIdActionsCreateEmailReturnReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnReport_summaryFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: string;

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: GetCampaignsReturnCampaignsRss_optsFrequency;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: PostListsIdSurveysIdActionsCreateEmailReturnRss_optsSchedule;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/**
		 * The URL for the RSS feed.
		 * Required
		 */
		feed_url: FormControl<string | null | undefined>,

		/**
		 * The frequency of the RSS Campaign.
		 * Required
		 */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnRss_optsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined, [Validators.required]),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: PostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage replies. */
		use_conversation?: boolean | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnSettingsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnSocial_cardFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnTracking {

		/** Deprecated */
		capsule?: PostListsIdSurveysIdActionsCreateEmailReturnTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: PostListsIdSurveysIdActionsCreateEmailReturnTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnTrackingFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnTrackingCapsuleFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnTrackingSalesforceFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnVariate_settings {

		/** Combinations of possible variables used to build emails. */
		PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsCombinations?: Array<PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/**
		 * The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.
		 * Required
		 */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined, [Validators.required]),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreatePostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsCombinationsFormGroup() {
		return new FormGroup<PostListsIdSurveysIdActionsCreateEmailReturnVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchTagsByNameReturn {

		/** A list of matching tags. */
		SearchTagsByNameReturnTags?: Array<SearchTagsByNameReturnTags>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface SearchTagsByNameReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateSearchTagsByNameReturnFormGroup() {
		return new FormGroup<SearchTagsByNameReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchTagsByNameReturnTags {

		/** The unique id for the tag. */
		id?: number | null;

		/** The name of the tag. */
		name?: string | null;
	}
	export interface SearchTagsByNameReturnTagsFormProperties {

		/** The unique id for the tag. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateSearchTagsByNameReturnTagsFormGroup() {
		return new FormGroup<SearchTagsByNameReturnTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdWebhooksReturn_links?: Array<GetListsIdWebhooksReturn_links>;

		/** The list id. */
		list_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** An array of objects, each representing a specific list member. */
		GetListsIdWebhooksReturnWebhooks?: Array<GetListsIdWebhooksReturnWebhooks>;
	}
	export interface GetListsIdWebhooksReturnFormProperties {

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetListsIdWebhooksReturnFormGroup() {
		return new FormGroup<GetListsIdWebhooksReturnFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdWebhooksReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdWebhooksReturn_linksFormGroup() {
		return new FormGroup<GetListsIdWebhooksReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksReturnWebhooks {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdWebhooksReturnWebhooks_links?: Array<GetListsIdWebhooksReturnWebhooks_links>;

		/** The events that can trigger the webhook and whether they are enabled. */
		events?: GetListsIdWebhooksReturnWebhooksEvents;

		/** An string that uniquely identifies this webhook. */
		id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The possible sources of any events that can trigger the webhook and whether they are enabled. */
		sources?: GetListsIdWebhooksReturnWebhooksSources;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface GetListsIdWebhooksReturnWebhooksFormProperties {

		/** An string that uniquely identifies this webhook. */
		id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdWebhooksReturnWebhooksFormGroup() {
		return new FormGroup<GetListsIdWebhooksReturnWebhooksFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksReturnWebhooks_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdWebhooksReturnWebhooks_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdWebhooksReturnWebhooks_linksFormGroup() {
		return new FormGroup<GetListsIdWebhooksReturnWebhooks_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksReturnWebhooksEvents {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile?: boolean | null;

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe?: boolean | null;

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail?: boolean | null;
	}
	export interface GetListsIdWebhooksReturnWebhooksEventsFormProperties {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdWebhooksReturnWebhooksEventsFormGroup() {
		return new FormGroup<GetListsIdWebhooksReturnWebhooksEventsFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			cleaned: new FormControl<boolean | null | undefined>(undefined),
			profile: new FormControl<boolean | null | undefined>(undefined),
			subscribe: new FormControl<boolean | null | undefined>(undefined),
			unsubscribe: new FormControl<boolean | null | undefined>(undefined),
			upemail: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksReturnWebhooksSources {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin?: boolean | null;

		/** Whether the webhook is triggered by actions initiated via the API. */
		api?: boolean | null;

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user?: boolean | null;
	}
	export interface GetListsIdWebhooksReturnWebhooksSourcesFormProperties {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by actions initiated via the API. */
		api: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdWebhooksReturnWebhooksSourcesFormGroup() {
		return new FormGroup<GetListsIdWebhooksReturnWebhooksSourcesFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			api: new FormControl<boolean | null | undefined>(undefined),
			user: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdWebhooksReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostListsIdWebhooksReturn_links?: Array<PostListsIdWebhooksReturn_links>;

		/** The events that can trigger the webhook and whether they are enabled. */
		events?: PostListsIdWebhooksReturnEvents;

		/** An string that uniquely identifies this webhook. */
		id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The possible sources of any events that can trigger the webhook and whether they are enabled. */
		sources?: PostListsIdWebhooksReturnSources;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface PostListsIdWebhooksReturnFormProperties {

		/** An string that uniquely identifies this webhook. */
		id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdWebhooksReturnFormGroup() {
		return new FormGroup<PostListsIdWebhooksReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdWebhooksReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostListsIdWebhooksReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostListsIdWebhooksReturn_linksFormGroup() {
		return new FormGroup<PostListsIdWebhooksReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostListsIdWebhooksReturnEvents {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile?: boolean | null;

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe?: boolean | null;

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail?: boolean | null;
	}
	export interface PostListsIdWebhooksReturnEventsFormProperties {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdWebhooksReturnEventsFormGroup() {
		return new FormGroup<PostListsIdWebhooksReturnEventsFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			cleaned: new FormControl<boolean | null | undefined>(undefined),
			profile: new FormControl<boolean | null | undefined>(undefined),
			subscribe: new FormControl<boolean | null | undefined>(undefined),
			unsubscribe: new FormControl<boolean | null | undefined>(undefined),
			upemail: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PostListsIdWebhooksReturnSources {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin?: boolean | null;

		/** Whether the webhook is triggered by actions initiated via the API. */
		api?: boolean | null;

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user?: boolean | null;
	}
	export interface PostListsIdWebhooksReturnSourcesFormProperties {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by actions initiated via the API. */
		api: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user: FormControl<boolean | null | undefined>,
	}
	export function CreatePostListsIdWebhooksReturnSourcesFormGroup() {
		return new FormGroup<PostListsIdWebhooksReturnSourcesFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			api: new FormControl<boolean | null | undefined>(undefined),
			user: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetListsIdWebhooksIdReturn_links?: Array<GetListsIdWebhooksIdReturn_links>;

		/** The events that can trigger the webhook and whether they are enabled. */
		events?: GetListsIdWebhooksIdReturnEvents;

		/** An string that uniquely identifies this webhook. */
		id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The possible sources of any events that can trigger the webhook and whether they are enabled. */
		sources?: GetListsIdWebhooksIdReturnSources;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface GetListsIdWebhooksIdReturnFormProperties {

		/** An string that uniquely identifies this webhook. */
		id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdWebhooksIdReturnFormGroup() {
		return new FormGroup<GetListsIdWebhooksIdReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetListsIdWebhooksIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetListsIdWebhooksIdReturn_linksFormGroup() {
		return new FormGroup<GetListsIdWebhooksIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksIdReturnEvents {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile?: boolean | null;

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe?: boolean | null;

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail?: boolean | null;
	}
	export interface GetListsIdWebhooksIdReturnEventsFormProperties {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdWebhooksIdReturnEventsFormGroup() {
		return new FormGroup<GetListsIdWebhooksIdReturnEventsFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			cleaned: new FormControl<boolean | null | undefined>(undefined),
			profile: new FormControl<boolean | null | undefined>(undefined),
			subscribe: new FormControl<boolean | null | undefined>(undefined),
			unsubscribe: new FormControl<boolean | null | undefined>(undefined),
			upemail: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetListsIdWebhooksIdReturnSources {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin?: boolean | null;

		/** Whether the webhook is triggered by actions initiated via the API. */
		api?: boolean | null;

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user?: boolean | null;
	}
	export interface GetListsIdWebhooksIdReturnSourcesFormProperties {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by actions initiated via the API. */
		api: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user: FormControl<boolean | null | undefined>,
	}
	export function CreateGetListsIdWebhooksIdReturnSourcesFormGroup() {
		return new FormGroup<GetListsIdWebhooksIdReturnSourcesFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			api: new FormControl<boolean | null | undefined>(undefined),
			user: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdWebhooksIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchListsIdWebhooksIdReturn_links?: Array<PatchListsIdWebhooksIdReturn_links>;

		/** The events that can trigger the webhook and whether they are enabled. */
		events?: PatchListsIdWebhooksIdReturnEvents;

		/** An string that uniquely identifies this webhook. */
		id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The possible sources of any events that can trigger the webhook and whether they are enabled. */
		sources?: PatchListsIdWebhooksIdReturnSources;

		/** A valid URL for the Webhook. */
		url?: string | null;
	}
	export interface PatchListsIdWebhooksIdReturnFormProperties {

		/** An string that uniquely identifies this webhook. */
		id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** A valid URL for the Webhook. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdWebhooksIdReturnFormGroup() {
		return new FormGroup<PatchListsIdWebhooksIdReturnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdWebhooksIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchListsIdWebhooksIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchListsIdWebhooksIdReturn_linksFormGroup() {
		return new FormGroup<PatchListsIdWebhooksIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdWebhooksIdReturnEvents {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile?: boolean | null;

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe?: boolean | null;

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe?: boolean | null;

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail?: boolean | null;
	}
	export interface PatchListsIdWebhooksIdReturnEventsFormProperties {

		/** Whether the webhook is triggered when a campaign is sent or cancelled. */
		campaign: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
		cleaned: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's profile is updated. */
		profile: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list subscriber is added. */
		subscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a list member unsubscribes. */
		unsubscribe: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered when a subscriber's email address is changed. */
		upemail: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchListsIdWebhooksIdReturnEventsFormGroup() {
		return new FormGroup<PatchListsIdWebhooksIdReturnEventsFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			cleaned: new FormControl<boolean | null | undefined>(undefined),
			profile: new FormControl<boolean | null | undefined>(undefined),
			subscribe: new FormControl<boolean | null | undefined>(undefined),
			unsubscribe: new FormControl<boolean | null | undefined>(undefined),
			upemail: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PatchListsIdWebhooksIdReturnSources {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin?: boolean | null;

		/** Whether the webhook is triggered by actions initiated via the API. */
		api?: boolean | null;

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user?: boolean | null;
	}
	export interface PatchListsIdWebhooksIdReturnSourcesFormProperties {

		/** Whether the webhook is triggered by admin-initiated actions in the web interface. */
		admin: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by actions initiated via the API. */
		api: FormControl<boolean | null | undefined>,

		/** Whether the webhook is triggered by subscriber-initiated actions. */
		user: FormControl<boolean | null | undefined>,
	}
	export function CreatePatchListsIdWebhooksIdReturnSourcesFormGroup() {
		return new FormGroup<PatchListsIdWebhooksIdReturnSourcesFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			api: new FormControl<boolean | null | undefined>(undefined),
			user: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetPingReturn {

		/** This will return a constant string value if the request is successful. Ex. "Everything's Chimpy!" */
		health_status?: string | null;
	}
	export interface GetPingReturnFormProperties {

		/** This will return a constant string value if the request is successful. Ex. "Everything's Chimpy!" */
		health_status: FormControl<string | null | undefined>,
	}
	export function CreateGetPingReturnFormGroup() {
		return new FormGroup<GetPingReturnFormProperties>({
			health_status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingFacebookAdsReturn_links?: Array<GetReportingFacebookAdsReturn_links>;
		facebook_ads?: Array<string>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingFacebookAdsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsReturnFormGroup() {
		return new FormGroup<GetReportingFacebookAdsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingFacebookAdsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsReturn_linksFormGroup() {
		return new FormGroup<GetReportingFacebookAdsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdReturn {

		/** The date and time the outreach was canceled in ISO 8601 format. */
		canceled_at?: Date | null;

		/** The date and time the outreach was created in ISO 8601 format. */
		create_time?: Date | null;

		/** If this outreach targets a segment of your audience. */
		has_segment?: boolean | null;

		/** Unique ID of an Outreach. */
		id?: string | null;

		/** Title or name of an Outreach. */
		name?: string | null;

		/** The date and time the outreach was (or will be) published in ISO 8601 format. */
		published_time?: Date | null;

		/** High level audience information for who the outreach targets. */
		recipients?: GetReportingFacebookAdsIdReturnRecipients;

		/** High level reporting stats for an outreach. */
		report_summary?: GetReportingFacebookAdsIdReturnReport_summary;

		/** Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context. */
		show_report?: boolean | null;

		/** The date and time the outreach was started in ISO 8601 format. */
		start_time?: Date | null;

		/** The status of this outreach. */
		status?: GetFacebookAdsIdReturnStatus | null;

		/** The URL of the thumbnail for this outreach. */
		thumbnail?: string | null;

		/** The type of outreach this object is. */
		type?: GetFacebookAdsIdReturnType | null;

		/** The date and time the outreach was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetReportingFacebookAdsIdReturnFormProperties {

		/** The date and time the outreach was canceled in ISO 8601 format. */
		canceled_at: FormControl<Date | null | undefined>,

		/** The date and time the outreach was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** If this outreach targets a segment of your audience. */
		has_segment: FormControl<boolean | null | undefined>,

		/** Unique ID of an Outreach. */
		id: FormControl<string | null | undefined>,

		/** Title or name of an Outreach. */
		name: FormControl<string | null | undefined>,

		/** The date and time the outreach was (or will be) published in ISO 8601 format. */
		published_time: FormControl<Date | null | undefined>,

		/** Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context. */
		show_report: FormControl<boolean | null | undefined>,

		/** The date and time the outreach was started in ISO 8601 format. */
		start_time: FormControl<Date | null | undefined>,

		/** The status of this outreach. */
		status: FormControl<GetFacebookAdsIdReturnStatus | null | undefined>,

		/** The URL of the thumbnail for this outreach. */
		thumbnail: FormControl<string | null | undefined>,

		/** The type of outreach this object is. */
		type: FormControl<GetFacebookAdsIdReturnType | null | undefined>,

		/** The date and time the outreach was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdReturnFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdReturnFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			has_segment: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_time: new FormControl<Date | null | undefined>(undefined),
			show_report: new FormControl<boolean | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetFacebookAdsIdReturnStatus | null | undefined>(undefined),
			thumbnail: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetFacebookAdsIdReturnType | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdReturnRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetReportingFacebookAdsIdReturnRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetReportingFacebookAdsIdReturnRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdReturnRecipientsFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdReturnRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdReturnRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetReportingFacebookAdsIdReturnRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdReturnRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdReturnRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdReturnReport_summary {
		click_rate?: number | null;
		clicks?: number | null;
		conversion_rate?: number | null;
		ecommerce?: GetReportingFacebookAdsIdReturnReport_summaryEcommerce;
		engagements?: number | null;
		impressions?: number | null;
		open_rate?: number | null;
		opens?: number | null;
		reach?: number | null;
		subscriber_clicks?: number | null;
		subscribes?: number | null;
		total_sent?: number | null;
		unique_opens?: number | null;
		unique_visits?: number | null;
		visits?: number | null;
	}
	export interface GetReportingFacebookAdsIdReturnReport_summaryFormProperties {
		click_rate: FormControl<number | null | undefined>,
		clicks: FormControl<number | null | undefined>,
		conversion_rate: FormControl<number | null | undefined>,
		engagements: FormControl<number | null | undefined>,
		impressions: FormControl<number | null | undefined>,
		open_rate: FormControl<number | null | undefined>,
		opens: FormControl<number | null | undefined>,
		reach: FormControl<number | null | undefined>,
		subscriber_clicks: FormControl<number | null | undefined>,
		subscribes: FormControl<number | null | undefined>,
		total_sent: FormControl<number | null | undefined>,
		unique_opens: FormControl<number | null | undefined>,
		unique_visits: FormControl<number | null | undefined>,
		visits: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdReturnReport_summaryFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdReturnReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			conversion_rate: new FormControl<number | null | undefined>(undefined),
			engagements: new FormControl<number | null | undefined>(undefined),
			impressions: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			reach: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			subscribes: new FormControl<number | null | undefined>(undefined),
			total_sent: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unique_visits: new FormControl<number | null | undefined>(undefined),
			visits: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdReturnReport_summaryEcommerce {
		average_order_revenue?: number | null;
		currency_code?: string | null;
		total_revenue?: number | null;
	}
	export interface GetReportingFacebookAdsIdReturnReport_summaryEcommerceFormProperties {
		average_order_revenue: FormControl<number | null | undefined>,
		currency_code: FormControl<string | null | undefined>,
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdReturnReport_summaryEcommerceFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdReturnReport_summaryEcommerceFormProperties>({
			average_order_revenue: new FormControl<number | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetReportingFacebookAdsIdEcommerceProductActivitySort_field { title = 0, total_revenue = 1, total_purchased = 2 }

	export interface GetReportingFacebookAdsIdEcommerceProductActivityReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingFacebookAdsIdEcommerceProductActivityReturn_links?: Array<GetReportingFacebookAdsIdEcommerceProductActivityReturn_links>;
		GetReportingFacebookAdsIdEcommerceProductActivityReturnProducts?: Array<GetReportingFacebookAdsIdEcommerceProductActivityReturnProducts>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingFacebookAdsIdEcommerceProductActivityReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdEcommerceProductActivityReturnFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdEcommerceProductActivityReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdEcommerceProductActivityReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingFacebookAdsIdEcommerceProductActivityReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdEcommerceProductActivityReturn_linksFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdEcommerceProductActivityReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingFacebookAdsIdEcommerceProductActivityReturnProducts {
		currency_code?: string | null;
		image_url?: string | null;
		recommendation_purchased?: number | null;
		recommendation_total?: number | null;
		sku?: string | null;
		title?: string | null;
		total_purchased?: number | null;
		total_revenue?: number | null;
	}
	export interface GetReportingFacebookAdsIdEcommerceProductActivityReturnProductsFormProperties {
		currency_code: FormControl<string | null | undefined>,
		image_url: FormControl<string | null | undefined>,
		recommendation_purchased: FormControl<number | null | undefined>,
		recommendation_total: FormControl<number | null | undefined>,
		sku: FormControl<string | null | undefined>,
		title: FormControl<string | null | undefined>,
		total_purchased: FormControl<number | null | undefined>,
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingFacebookAdsIdEcommerceProductActivityReturnProductsFormGroup() {
		return new FormGroup<GetReportingFacebookAdsIdEcommerceProductActivityReturnProductsFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			recommendation_purchased: new FormControl<number | null | undefined>(undefined),
			recommendation_total: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			total_purchased: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingLandingPagesReturn_links?: Array<GetReportingLandingPagesReturn_links>;
		GetReportingLandingPagesReturnLanding_pages?: Array<GetReportingLandingPagesReturnLanding_pages>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingLandingPagesReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingLandingPagesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturn_linksFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pages {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingLandingPagesReturnLanding_pages_links?: Array<GetReportingLandingPagesReturnLanding_pages_links>;

		/** The number of clicks to this landing pages. */
		clicks?: number | null;

		/** The percentage of people who visited your landing page and were added to your list. */
		conversion_rate?: number | null;
		ecommerce?: GetReportingLandingPagesReturnLanding_pagesEcommerce;

		/** A string that uniquely identifies this landing page. */
		id?: string | null;

		/** The list id connected to this landing page. */
		list_id?: string | null;

		/** List Name */
		list_name?: string | null;

		/** The name of this landing page the user will see. */
		name?: string | null;

		/** The time this landing page was published. */
		published_at?: Date | null;

		/** A list of tags associated to the landing page. */
		GetReportingLandingPagesReturnLanding_pagesSignup_tags?: Array<GetReportingLandingPagesReturnLanding_pagesSignup_tags>;

		/** The status of the landing page. */
		status?: string | null;

		/** The number of subscribes to this landing pages. */
		subscribes?: number | null;
		timeseries?: GetReportingLandingPagesReturnLanding_pagesTimeseries;

		/** The name of the landing page the user's customers will see. */
		title?: string | null;

		/** The number of unique visits to this landing pages. */
		unique_visits?: number | null;

		/** The time this landing page was unpublished. */
		unpublished_at?: Date | null;

		/** The landing page url. */
		url?: string | null;

		/** The number of visits to this landing pages. */
		visits?: number | null;

		/** The ID used in the Mailchimp web application. */
		web_id?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesFormProperties {

		/** The number of clicks to this landing pages. */
		clicks: FormControl<number | null | undefined>,

		/** The percentage of people who visited your landing page and were added to your list. */
		conversion_rate: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this landing page. */
		id: FormControl<string | null | undefined>,

		/** The list id connected to this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** List Name */
		list_name: FormControl<string | null | undefined>,

		/** The name of this landing page the user will see. */
		name: FormControl<string | null | undefined>,

		/** The time this landing page was published. */
		published_at: FormControl<Date | null | undefined>,

		/** The status of the landing page. */
		status: FormControl<string | null | undefined>,

		/** The number of subscribes to this landing pages. */
		subscribes: FormControl<number | null | undefined>,

		/** The name of the landing page the user's customers will see. */
		title: FormControl<string | null | undefined>,

		/** The number of unique visits to this landing pages. */
		unique_visits: FormControl<number | null | undefined>,

		/** The time this landing page was unpublished. */
		unpublished_at: FormControl<Date | null | undefined>,

		/** The landing page url. */
		url: FormControl<string | null | undefined>,

		/** The number of visits to this landing pages. */
		visits: FormControl<number | null | undefined>,

		/** The ID used in the Mailchimp web application. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesFormProperties>({
			clicks: new FormControl<number | null | undefined>(undefined),
			conversion_rate: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			subscribes: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			unique_visits: new FormControl<number | null | undefined>(undefined),
			unpublished_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visits: new FormControl<number | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pages_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pages_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pages_linksFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pages_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesEcommerce {

		/** The average order revenue of this landing page. */
		average_order_revenue?: number | null;

		/** The user's currency code. */
		currency_code?: string | null;

		/** The total number of orders associated with this landing page. */
		total_orders?: number | null;

		/** The total revenue of this landing page. */
		total_revenue?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesEcommerceFormProperties {

		/** The average order revenue of this landing page. */
		average_order_revenue: FormControl<number | null | undefined>,

		/** The user's currency code. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders associated with this landing page. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue of this landing page. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesEcommerceFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesEcommerceFormProperties>({
			average_order_revenue: new FormControl<number | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesSignup_tags {

		/** The unique id for the tag. */
		tag_id?: number | null;

		/** The name of the tag. */
		tag_name?: string | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesSignup_tagsFormProperties {

		/** The unique id for the tag. */
		tag_id: FormControl<number | null | undefined>,

		/** The name of the tag. */
		tag_name: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesSignup_tagsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesSignup_tagsFormProperties>({
			tag_id: new FormControl<number | null | undefined>(undefined),
			tag_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseries {

		/** The clicks and visits data from the last seven days. */
		daily_stats?: GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_stats;

		/** The clicks and visits data from the last five weeks. */
		weekly_stats?: GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_stats;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesFormProperties {
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesFormProperties>({
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_stats {
		GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsClicks?: Array<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsClicks>;
		GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsUnique_visits?: Array<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsUnique_visits>;
		GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsVisits?: Array<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsVisits>;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsFormProperties {
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsFormProperties>({
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsClicks {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsClicksFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsClicksFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsClicksFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsUnique_visits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsUnique_visitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsUnique_visitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsUnique_visitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsVisits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsVisitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsVisitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesDaily_statsVisitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_stats {

		/** The total number of clicks in a week. */
		GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsClicks?: Array<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsClicks>;
		GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsUnique_visits?: Array<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsUnique_visits>;

		/** The total number of visits in a week. */
		GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsVisits?: Array<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsVisits>;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsFormProperties {
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsFormProperties>({
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsClicks {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsClicksFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsClicksFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsClicksFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsUnique_visits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsUnique_visitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsUnique_visitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsUnique_visitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsVisits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsVisitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsVisitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesReturnLanding_pagesTimeseriesWeekly_statsVisitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingLandingPagesIdReturn_links?: Array<GetReportingLandingPagesIdReturn_links>;

		/** The number of clicks to this landing pages. */
		clicks?: number | null;

		/** The percentage of people who visited your landing page and were added to your list. */
		conversion_rate?: number | null;
		ecommerce?: GetReportingLandingPagesIdReturnEcommerce;

		/** A string that uniquely identifies this landing page. */
		id?: string | null;

		/** The list id connected to this landing page. */
		list_id?: string | null;

		/** List Name */
		list_name?: string | null;

		/** The name of this landing page the user will see. */
		name?: string | null;

		/** The time this landing page was published. */
		published_at?: Date | null;

		/** A list of tags associated to the landing page. */
		GetReportingLandingPagesIdReturnSignup_tags?: Array<GetReportingLandingPagesIdReturnSignup_tags>;

		/** The status of the landing page. */
		status?: string | null;

		/** The number of subscribes to this landing pages. */
		subscribes?: number | null;
		timeseries?: GetReportingLandingPagesIdReturnTimeseries;

		/** The name of the landing page the user's customers will see. */
		title?: string | null;

		/** The number of unique visits to this landing pages. */
		unique_visits?: number | null;

		/** The time this landing page was unpublished. */
		unpublished_at?: Date | null;

		/** The landing page url. */
		url?: string | null;

		/** The number of visits to this landing pages. */
		visits?: number | null;

		/** The ID used in the Mailchimp web application. */
		web_id?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnFormProperties {

		/** The number of clicks to this landing pages. */
		clicks: FormControl<number | null | undefined>,

		/** The percentage of people who visited your landing page and were added to your list. */
		conversion_rate: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this landing page. */
		id: FormControl<string | null | undefined>,

		/** The list id connected to this landing page. */
		list_id: FormControl<string | null | undefined>,

		/** List Name */
		list_name: FormControl<string | null | undefined>,

		/** The name of this landing page the user will see. */
		name: FormControl<string | null | undefined>,

		/** The time this landing page was published. */
		published_at: FormControl<Date | null | undefined>,

		/** The status of the landing page. */
		status: FormControl<string | null | undefined>,

		/** The number of subscribes to this landing pages. */
		subscribes: FormControl<number | null | undefined>,

		/** The name of the landing page the user's customers will see. */
		title: FormControl<string | null | undefined>,

		/** The number of unique visits to this landing pages. */
		unique_visits: FormControl<number | null | undefined>,

		/** The time this landing page was unpublished. */
		unpublished_at: FormControl<Date | null | undefined>,

		/** The landing page url. */
		url: FormControl<string | null | undefined>,

		/** The number of visits to this landing pages. */
		visits: FormControl<number | null | undefined>,

		/** The ID used in the Mailchimp web application. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnFormProperties>({
			clicks: new FormControl<number | null | undefined>(undefined),
			conversion_rate: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			subscribes: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			unique_visits: new FormControl<number | null | undefined>(undefined),
			unpublished_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visits: new FormControl<number | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingLandingPagesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturn_linksFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnEcommerce {

		/** The average order revenue of this landing page. */
		average_order_revenue?: number | null;

		/** The user's currency code. */
		currency_code?: string | null;

		/** The total number of orders associated with this landing page. */
		total_orders?: number | null;

		/** The total revenue of this landing page. */
		total_revenue?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnEcommerceFormProperties {

		/** The average order revenue of this landing page. */
		average_order_revenue: FormControl<number | null | undefined>,

		/** The user's currency code. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders associated with this landing page. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue of this landing page. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnEcommerceFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnEcommerceFormProperties>({
			average_order_revenue: new FormControl<number | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnSignup_tags {

		/** The unique id for the tag. */
		tag_id?: number | null;

		/** The name of the tag. */
		tag_name?: string | null;
	}
	export interface GetReportingLandingPagesIdReturnSignup_tagsFormProperties {

		/** The unique id for the tag. */
		tag_id: FormControl<number | null | undefined>,

		/** The name of the tag. */
		tag_name: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnSignup_tagsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnSignup_tagsFormProperties>({
			tag_id: new FormControl<number | null | undefined>(undefined),
			tag_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseries {

		/** The clicks and visits data from the last seven days. */
		daily_stats?: GetReportingLandingPagesIdReturnTimeseriesDaily_stats;

		/** The clicks and visits data from the last five weeks. */
		weekly_stats?: GetReportingLandingPagesIdReturnTimeseriesWeekly_stats;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesFormProperties {
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesFormProperties>({
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_stats {
		GetReportingLandingPagesIdReturnTimeseriesDaily_statsClicks?: Array<GetReportingLandingPagesIdReturnTimeseriesDaily_statsClicks>;
		GetReportingLandingPagesIdReturnTimeseriesDaily_statsUnique_visits?: Array<GetReportingLandingPagesIdReturnTimeseriesDaily_statsUnique_visits>;
		GetReportingLandingPagesIdReturnTimeseriesDaily_statsVisits?: Array<GetReportingLandingPagesIdReturnTimeseriesDaily_statsVisits>;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsFormProperties {
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesDaily_statsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesDaily_statsFormProperties>({
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsClicks {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsClicksFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesDaily_statsClicksFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesDaily_statsClicksFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsUnique_visits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsUnique_visitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesDaily_statsUnique_visitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesDaily_statsUnique_visitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsVisits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesDaily_statsVisitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesDaily_statsVisitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesDaily_statsVisitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_stats {

		/** The total number of clicks in a week. */
		GetReportingLandingPagesIdReturnTimeseriesWeekly_statsClicks?: Array<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsClicks>;
		GetReportingLandingPagesIdReturnTimeseriesWeekly_statsUnique_visits?: Array<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsUnique_visits>;

		/** The total number of visits in a week. */
		GetReportingLandingPagesIdReturnTimeseriesWeekly_statsVisits?: Array<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsVisits>;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsFormProperties {
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesWeekly_statsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsFormProperties>({
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsClicks {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsClicksFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesWeekly_statsClicksFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsClicksFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsUnique_visits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsUnique_visitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesWeekly_statsUnique_visitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsUnique_visitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsVisits {
		date?: string | null;
		val?: number | null;
	}
	export interface GetReportingLandingPagesIdReturnTimeseriesWeekly_statsVisitsFormProperties {
		date: FormControl<string | null | undefined>,
		val: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingLandingPagesIdReturnTimeseriesWeekly_statsVisitsFormGroup() {
		return new FormGroup<GetReportingLandingPagesIdReturnTimeseriesWeekly_statsVisitsFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			val: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingSurveysReturn_links?: Array<GetReportingSurveysReturn_links>;

		/** The surveys that have reports available. */
		GetReportingSurveysReturnSurveys?: Array<GetReportingSurveysReturnSurveys>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingSurveysReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysReturnFormGroup() {
		return new FormGroup<GetReportingSurveysReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingSurveysReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysReturn_linksFormGroup() {
		return new FormGroup<GetReportingSurveysReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysReturnSurveys {

		/** The date and time the survey was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A string that uniquely identifies this survey. */
		id?: string | null;

		/** The ID of the list connected to this survey. */
		list_id?: string | null;

		/** The name of the list connected to this survey. */
		list_name?: string | null;

		/** The date and time the survey was published in ISO 8601 format. */
		published_at?: Date | null;

		/** The survey's status. */
		status?: GetReportingSurveysReturnSurveysStatus | null;

		/** The title of the survey. */
		title?: string | null;

		/** The total number of responses to this survey. */
		total_responses?: number | null;

		/** The date and time the survey was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for the survey. */
		url?: string | null;

		/** The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetReportingSurveysReturnSurveysFormProperties {

		/** The date and time the survey was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies this survey. */
		id: FormControl<string | null | undefined>,

		/** The ID of the list connected to this survey. */
		list_id: FormControl<string | null | undefined>,

		/** The name of the list connected to this survey. */
		list_name: FormControl<string | null | undefined>,

		/** The date and time the survey was published in ISO 8601 format. */
		published_at: FormControl<Date | null | undefined>,

		/** The survey's status. */
		status: FormControl<GetReportingSurveysReturnSurveysStatus | null | undefined>,

		/** The title of the survey. */
		title: FormControl<string | null | undefined>,

		/** The total number of responses to this survey. */
		total_responses: FormControl<number | null | undefined>,

		/** The date and time the survey was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for the survey. */
		url: FormControl<string | null | undefined>,

		/** The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysReturnSurveysFormGroup() {
		return new FormGroup<GetReportingSurveysReturnSurveysFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetReportingSurveysReturnSurveysStatus | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			total_responses: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GetReportingSurveysReturnSurveysStatus { published = 0, unpublished = 1 }

	export interface GetReportingSurveysIdReturn {

		/** The date and time the survey was created in ISO 8601 format. */
		created_at?: Date | null;

		/** A string that uniquely identifies this survey. */
		id?: string | null;

		/** The ID of the list connected to this survey. */
		list_id?: string | null;

		/** The name of the list connected to this survey. */
		list_name?: string | null;

		/** The date and time the survey was published in ISO 8601 format. */
		published_at?: Date | null;

		/** The survey's status. */
		status?: GetReportingSurveysReturnSurveysStatus | null;

		/** The title of the survey. */
		title?: string | null;

		/** The total number of responses to this survey. */
		total_responses?: number | null;

		/** The date and time the survey was last updated in ISO 8601 format. */
		updated_at?: Date | null;

		/** The URL for the survey. */
		url?: string | null;

		/** The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetReportingSurveysIdReturnFormProperties {

		/** The date and time the survey was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies this survey. */
		id: FormControl<string | null | undefined>,

		/** The ID of the list connected to this survey. */
		list_id: FormControl<string | null | undefined>,

		/** The name of the list connected to this survey. */
		list_name: FormControl<string | null | undefined>,

		/** The date and time the survey was published in ISO 8601 format. */
		published_at: FormControl<Date | null | undefined>,

		/** The survey's status. */
		status: FormControl<GetReportingSurveysReturnSurveysStatus | null | undefined>,

		/** The title of the survey. */
		title: FormControl<string | null | undefined>,

		/** The total number of responses to this survey. */
		total_responses: FormControl<number | null | undefined>,

		/** The date and time the survey was last updated in ISO 8601 format. */
		updated_at: FormControl<Date | null | undefined>,

		/** The URL for the survey. */
		url: FormControl<string | null | undefined>,

		/** The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysIdReturnFormGroup() {
		return new FormGroup<GetReportingSurveysIdReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			published_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetReportingSurveysReturnSurveysStatus | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			total_responses: new FormControl<number | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingSurveysIdQuestionsReturn_links?: Array<GetReportingSurveysIdQuestionsReturn_links>;

		/** An array of reports for each question on the survey. */
		GetReportingSurveysIdQuestionsReturnQuestions?: Array<GetReportingSurveysIdQuestionsReturnQuestions>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingSurveysIdQuestionsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsReturnFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingSurveysIdQuestionsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsReturn_linksFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsReturnQuestions {

		/** The average rating for this range question. */
		average_rating?: number | null;

		/** For email question types, how many are new, known, or unknown contacts. */
		contact_counts?: GetReportingSurveysIdQuestionsReturnQuestionsContact_counts;

		/** Whether this survey question has an 'other' option. */
		has_other?: boolean | null;

		/** The ID of the survey question. */
		id?: string | null;

		/** Whether this survey question is required to answer. */
		is_required?: boolean | null;

		/** A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience. */
		merge_field?: GetReportingSurveysIdQuestionsReturnQuestionsMerge_field;

		/** The answer choices for this question. */
		GetReportingSurveysIdQuestionsReturnQuestionsOptions?: Array<GetReportingSurveysIdQuestionsReturnQuestionsOptions>;

		/** Label used for the 'other' option of this survey question. */
		other_label?: string | null;

		/** Placeholder text for this survey question's answer box. */
		placeholder_label?: string | null;

		/** The query of the survey question. */
		query?: string | null;

		/** Label for the high end of the range. */
		range_high_label?: string | null;

		/** Label for the low end of the range. */
		range_low_label?: string | null;

		/** Whether the subscribe checkbox is shown for this email question. */
		subscribe_checkbox_enabled?: boolean | null;

		/** Label used for the subscribe checkbox for this email question. */
		subscribe_checkbox_label?: string | null;

		/** The unique ID of the survey. */
		survey_id?: string | null;

		/** The total number of responses to this question. */
		total_responses?: number | null;

		/** The response type of the survey question. */
		type?: GetReportingSurveysIdQuestionsReturnQuestionsType | null;
	}
	export interface GetReportingSurveysIdQuestionsReturnQuestionsFormProperties {

		/** The average rating for this range question. */
		average_rating: FormControl<number | null | undefined>,

		/** Whether this survey question has an 'other' option. */
		has_other: FormControl<boolean | null | undefined>,

		/** The ID of the survey question. */
		id: FormControl<string | null | undefined>,

		/** Whether this survey question is required to answer. */
		is_required: FormControl<boolean | null | undefined>,

		/** Label used for the 'other' option of this survey question. */
		other_label: FormControl<string | null | undefined>,

		/** Placeholder text for this survey question's answer box. */
		placeholder_label: FormControl<string | null | undefined>,

		/** The query of the survey question. */
		query: FormControl<string | null | undefined>,

		/** Label for the high end of the range. */
		range_high_label: FormControl<string | null | undefined>,

		/** Label for the low end of the range. */
		range_low_label: FormControl<string | null | undefined>,

		/** Whether the subscribe checkbox is shown for this email question. */
		subscribe_checkbox_enabled: FormControl<boolean | null | undefined>,

		/** Label used for the subscribe checkbox for this email question. */
		subscribe_checkbox_label: FormControl<string | null | undefined>,

		/** The unique ID of the survey. */
		survey_id: FormControl<string | null | undefined>,

		/** The total number of responses to this question. */
		total_responses: FormControl<number | null | undefined>,

		/** The response type of the survey question. */
		type: FormControl<GetReportingSurveysIdQuestionsReturnQuestionsType | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsReturnQuestionsFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsReturnQuestionsFormProperties>({
			average_rating: new FormControl<number | null | undefined>(undefined),
			has_other: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_required: new FormControl<boolean | null | undefined>(undefined),
			other_label: new FormControl<string | null | undefined>(undefined),
			placeholder_label: new FormControl<string | null | undefined>(undefined),
			query: new FormControl<string | null | undefined>(undefined),
			range_high_label: new FormControl<string | null | undefined>(undefined),
			range_low_label: new FormControl<string | null | undefined>(undefined),
			subscribe_checkbox_enabled: new FormControl<boolean | null | undefined>(undefined),
			subscribe_checkbox_label: new FormControl<string | null | undefined>(undefined),
			survey_id: new FormControl<string | null | undefined>(undefined),
			total_responses: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<GetReportingSurveysIdQuestionsReturnQuestionsType | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsReturnQuestionsContact_counts {

		/** The number of known contacts that responded to this survey. */
		known?: number | null;

		/** The number of new contacts that responded to this survey. */
		new?: number | null;

		/** The number of unknown contacts that responded to this survey. */
		unknown?: number | null;
	}
	export interface GetReportingSurveysIdQuestionsReturnQuestionsContact_countsFormProperties {

		/** The number of known contacts that responded to this survey. */
		known: FormControl<number | null | undefined>,

		/** The number of new contacts that responded to this survey. */
		new: FormControl<number | null | undefined>,

		/** The number of unknown contacts that responded to this survey. */
		unknown: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsReturnQuestionsContact_countsFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsReturnQuestionsContact_countsFormProperties>({
			known: new FormControl<number | null | undefined>(undefined),
			new: new FormControl<number | null | undefined>(undefined),
			unknown: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsReturnQuestionsMerge_field {

		/** An unchanging id for the merge field. */
		id?: number | null;

		/** The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		label?: string | null;

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type?: GetListsIdMergeFieldsReturnMerge_fieldsType | null;
	}
	export interface GetReportingSurveysIdQuestionsReturnQuestionsMerge_fieldFormProperties {

		/** An unchanging id for the merge field. */
		id: FormControl<number | null | undefined>,

		/** The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		label: FormControl<string | null | undefined>,

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsReturnQuestionsMerge_fieldFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsReturnQuestionsMerge_fieldFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			label: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsReturnQuestionsOptions {

		/** The count of responses that selected this survey question option. */
		count?: number | null;

		/** The ID for this survey question option. */
		id?: string | null;

		/** The label for this survey question option. */
		label?: string | null;
	}
	export interface GetReportingSurveysIdQuestionsReturnQuestionsOptionsFormProperties {

		/** The count of responses that selected this survey question option. */
		count: FormControl<number | null | undefined>,

		/** The ID for this survey question option. */
		id: FormControl<string | null | undefined>,

		/** The label for this survey question option. */
		label: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsReturnQuestionsOptionsFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsReturnQuestionsOptionsFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			label: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetReportingSurveysIdQuestionsReturnQuestionsType { pickOne = 0, pickMany = 1, range = 2, text = 3, email = 4 }

	export interface GetReportingSurveysIdQuestionsIdReturn {

		/** The average rating for this range question. */
		average_rating?: number | null;

		/** For email question types, how many are new, known, or unknown contacts. */
		contact_counts?: GetReportingSurveysIdQuestionsIdReturnContact_counts;

		/** Whether this survey question has an 'other' option. */
		has_other?: boolean | null;

		/** The ID of the survey question. */
		id?: string | null;

		/** Whether this survey question is required to answer. */
		is_required?: boolean | null;

		/** A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience. */
		merge_field?: GetReportingSurveysIdQuestionsIdReturnMerge_field;

		/** The answer choices for this question. */
		GetReportingSurveysIdQuestionsIdReturnOptions?: Array<GetReportingSurveysIdQuestionsIdReturnOptions>;

		/** Label used for the 'other' option of this survey question. */
		other_label?: string | null;

		/** Placeholder text for this survey question's answer box. */
		placeholder_label?: string | null;

		/** The query of the survey question. */
		query?: string | null;

		/** Label for the high end of the range. */
		range_high_label?: string | null;

		/** Label for the low end of the range. */
		range_low_label?: string | null;

		/** Whether the subscribe checkbox is shown for this email question. */
		subscribe_checkbox_enabled?: boolean | null;

		/** Label used for the subscribe checkbox for this email question. */
		subscribe_checkbox_label?: string | null;

		/** The unique ID of the survey. */
		survey_id?: string | null;

		/** The total number of responses to this question. */
		total_responses?: number | null;

		/** The response type of the survey question. */
		type?: GetReportingSurveysIdQuestionsReturnQuestionsType | null;
	}
	export interface GetReportingSurveysIdQuestionsIdReturnFormProperties {

		/** The average rating for this range question. */
		average_rating: FormControl<number | null | undefined>,

		/** Whether this survey question has an 'other' option. */
		has_other: FormControl<boolean | null | undefined>,

		/** The ID of the survey question. */
		id: FormControl<string | null | undefined>,

		/** Whether this survey question is required to answer. */
		is_required: FormControl<boolean | null | undefined>,

		/** Label used for the 'other' option of this survey question. */
		other_label: FormControl<string | null | undefined>,

		/** Placeholder text for this survey question's answer box. */
		placeholder_label: FormControl<string | null | undefined>,

		/** The query of the survey question. */
		query: FormControl<string | null | undefined>,

		/** Label for the high end of the range. */
		range_high_label: FormControl<string | null | undefined>,

		/** Label for the low end of the range. */
		range_low_label: FormControl<string | null | undefined>,

		/** Whether the subscribe checkbox is shown for this email question. */
		subscribe_checkbox_enabled: FormControl<boolean | null | undefined>,

		/** Label used for the subscribe checkbox for this email question. */
		subscribe_checkbox_label: FormControl<string | null | undefined>,

		/** The unique ID of the survey. */
		survey_id: FormControl<string | null | undefined>,

		/** The total number of responses to this question. */
		total_responses: FormControl<number | null | undefined>,

		/** The response type of the survey question. */
		type: FormControl<GetReportingSurveysIdQuestionsReturnQuestionsType | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdReturnFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdReturnFormProperties>({
			average_rating: new FormControl<number | null | undefined>(undefined),
			has_other: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_required: new FormControl<boolean | null | undefined>(undefined),
			other_label: new FormControl<string | null | undefined>(undefined),
			placeholder_label: new FormControl<string | null | undefined>(undefined),
			query: new FormControl<string | null | undefined>(undefined),
			range_high_label: new FormControl<string | null | undefined>(undefined),
			range_low_label: new FormControl<string | null | undefined>(undefined),
			subscribe_checkbox_enabled: new FormControl<boolean | null | undefined>(undefined),
			subscribe_checkbox_label: new FormControl<string | null | undefined>(undefined),
			survey_id: new FormControl<string | null | undefined>(undefined),
			total_responses: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<GetReportingSurveysIdQuestionsReturnQuestionsType | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsIdReturnContact_counts {

		/** The number of known contacts that responded to this survey. */
		known?: number | null;

		/** The number of new contacts that responded to this survey. */
		new?: number | null;

		/** The number of unknown contacts that responded to this survey. */
		unknown?: number | null;
	}
	export interface GetReportingSurveysIdQuestionsIdReturnContact_countsFormProperties {

		/** The number of known contacts that responded to this survey. */
		known: FormControl<number | null | undefined>,

		/** The number of new contacts that responded to this survey. */
		new: FormControl<number | null | undefined>,

		/** The number of unknown contacts that responded to this survey. */
		unknown: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdReturnContact_countsFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdReturnContact_countsFormProperties>({
			known: new FormControl<number | null | undefined>(undefined),
			new: new FormControl<number | null | undefined>(undefined),
			unknown: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsIdReturnMerge_field {

		/** An unchanging id for the merge field. */
		id?: number | null;

		/** The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		label?: string | null;

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type?: GetListsIdMergeFieldsReturnMerge_fieldsType | null;
	}
	export interface GetReportingSurveysIdQuestionsIdReturnMerge_fieldFormProperties {

		/** An unchanging id for the merge field. */
		id: FormControl<number | null | undefined>,

		/** The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		label: FormControl<string | null | undefined>,

		/** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
		type: FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdReturnMerge_fieldFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdReturnMerge_fieldFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			label: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetListsIdMergeFieldsReturnMerge_fieldsType | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsIdReturnOptions {

		/** The count of responses that selected this survey question option. */
		count?: number | null;

		/** The ID for this survey question option. */
		id?: string | null;

		/** The label for this survey question option. */
		label?: string | null;
	}
	export interface GetReportingSurveysIdQuestionsIdReturnOptionsFormProperties {

		/** The count of responses that selected this survey question option. */
		count: FormControl<number | null | undefined>,

		/** The ID for this survey question option. */
		id: FormControl<string | null | undefined>,

		/** The label for this survey question option. */
		label: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdReturnOptionsFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdReturnOptionsFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			label: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetReportingSurveysIdQuestionsIdAnswersRespondent_familiarity_is { new = 0, known = 1, unknown = 2 }

	export interface GetReportingSurveysIdQuestionsIdAnswersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingSurveysIdQuestionsIdAnswersReturn_links?: Array<GetReportingSurveysIdQuestionsIdAnswersReturn_links>;

		/** An array of answers for a question on the survey. */
		GetReportingSurveysIdQuestionsIdAnswersReturnAnswers?: Array<GetReportingSurveysIdQuestionsIdAnswersReturnAnswers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingSurveysIdQuestionsIdAnswersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdAnswersReturnFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdAnswersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsIdAnswersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingSurveysIdQuestionsIdAnswersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdAnswersReturn_linksFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdAnswersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsIdAnswersReturnAnswers {

		/** Information about the contact. */
		contact?: GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContact;

		/** The ID of the answer. */
		id?: string | null;

		/** If this contact was added to the Mailchimp audience via this survey. */
		is_new_contact?: boolean | null;

		/** The ID of the survey response. */
		response_id?: string | null;

		/** The date and time when the survey response was submitted in ISO 8601 format. */
		submitted_at?: Date | null;

		/** The raw text answer. */
		value?: string | null;
	}
	export interface GetReportingSurveysIdQuestionsIdAnswersReturnAnswersFormProperties {

		/** The ID of the answer. */
		id: FormControl<string | null | undefined>,

		/** If this contact was added to the Mailchimp audience via this survey. */
		is_new_contact: FormControl<boolean | null | undefined>,

		/** The ID of the survey response. */
		response_id: FormControl<string | null | undefined>,

		/** The date and time when the survey response was submitted in ISO 8601 format. */
		submitted_at: FormControl<Date | null | undefined>,

		/** The raw text answer. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdAnswersReturnAnswersFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_new_contact: new FormControl<boolean | null | undefined>(undefined),
			response_id: new FormControl<string | null | undefined>(undefined),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContact {

		/** URL for the contact's avatar or profile image. */
		avatar_url?: string | null;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** The ID of this contact. */
		contact_id?: string | null;

		/** The contact's email address. */
		email?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The contact's current status. */
		status?: GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null;
	}
	export interface GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactFormProperties {

		/** URL for the contact's avatar or profile image. */
		avatar_url: FormControl<string | null | undefined>,

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** The ID of this contact. */
		contact_id: FormControl<string | null | undefined>,

		/** The contact's email address. */
		email: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The contact's current status. */
		status: FormControl<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null | undefined>,
	}
	export function CreateGetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactFormGroup() {
		return new FormGroup<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null | undefined>(undefined),
		});

	}

	export enum GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus { Subscribed = 0, Unsubscribed = 1, 'Non-Subscribed' = 2, Cleaned = 3, Archived = 4 }

	export interface GetReportingSurveysIdResponsesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportingSurveysIdResponsesReturn_links?: Array<GetReportingSurveysIdResponsesReturn_links>;

		/** An array of responses to a survey. */
		GetReportingSurveysIdResponsesReturnResponses?: Array<GetReportingSurveysIdResponsesReturnResponses>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportingSurveysIdResponsesReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesReturnFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdResponsesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportingSurveysIdResponsesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesReturn_linksFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdResponsesReturnResponses {

		/** Information about the contact. */
		contact?: GetReportingSurveysIdResponsesReturnResponsesContact;

		/** If this contact was added to the Mailchimp audience via this survey. */
		is_new_contact?: boolean | null;

		/** The ID for the survey response. */
		response_id?: string | null;

		/** The date and time when the survey response was submitted in ISO 8601 format. */
		submitted_at?: Date | null;
	}
	export interface GetReportingSurveysIdResponsesReturnResponsesFormProperties {

		/** If this contact was added to the Mailchimp audience via this survey. */
		is_new_contact: FormControl<boolean | null | undefined>,

		/** The ID for the survey response. */
		response_id: FormControl<string | null | undefined>,

		/** The date and time when the survey response was submitted in ISO 8601 format. */
		submitted_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesReturnResponsesFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesReturnResponsesFormProperties>({
			is_new_contact: new FormControl<boolean | null | undefined>(undefined),
			response_id: new FormControl<string | null | undefined>(undefined),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdResponsesReturnResponsesContact {

		/** URL for the contact's avatar or profile image. */
		avatar_url?: string | null;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** The ID of this contact. */
		contact_id?: string | null;

		/** The contact's email address. */
		email?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The contact's current status. */
		status?: GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null;
	}
	export interface GetReportingSurveysIdResponsesReturnResponsesContactFormProperties {

		/** URL for the contact's avatar or profile image. */
		avatar_url: FormControl<string | null | undefined>,

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** The ID of this contact. */
		contact_id: FormControl<string | null | undefined>,

		/** The contact's email address. */
		email: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The contact's current status. */
		status: FormControl<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesReturnResponsesContactFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesReturnResponsesContactFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdResponsesIdReturn {

		/** Information about the contact. */
		contact?: GetReportingSurveysIdResponsesIdReturnContact;

		/** If this contact was added to the Mailchimp audience via this survey. */
		is_new_contact?: boolean | null;

		/** The ID for the survey response. */
		response_id?: string | null;

		/** The survey questions and the answers to those questions. */
		GetReportingSurveysIdResponsesIdReturnResults?: Array<GetReportingSurveysIdResponsesIdReturnResults>;

		/** The date and time when the survey response was submitted in ISO 8601 format. */
		submitted_at?: Date | null;
	}
	export interface GetReportingSurveysIdResponsesIdReturnFormProperties {

		/** If this contact was added to the Mailchimp audience via this survey. */
		is_new_contact: FormControl<boolean | null | undefined>,

		/** The ID for the survey response. */
		response_id: FormControl<string | null | undefined>,

		/** The date and time when the survey response was submitted in ISO 8601 format. */
		submitted_at: FormControl<Date | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesIdReturnFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesIdReturnFormProperties>({
			is_new_contact: new FormControl<boolean | null | undefined>(undefined),
			response_id: new FormControl<string | null | undefined>(undefined),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdResponsesIdReturnContact {

		/** URL for the contact's avatar or profile image. */
		avatar_url?: string | null;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** The ID of this contact. */
		contact_id?: string | null;

		/** The contact's email address. */
		email?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The contact's current status. */
		status?: GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null;
	}
	export interface GetReportingSurveysIdResponsesIdReturnContactFormProperties {

		/** URL for the contact's avatar or profile image. */
		avatar_url: FormControl<string | null | undefined>,

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** The ID of this contact. */
		contact_id: FormControl<string | null | undefined>,

		/** The contact's email address. */
		email: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The contact's current status. */
		status: FormControl<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesIdReturnContactFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesIdReturnContactFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetReportingSurveysIdQuestionsIdAnswersReturnAnswersContactStatus | null | undefined>(undefined),
		});

	}

	export interface GetReportingSurveysIdResponsesIdReturnResults {

		/** The answer to this survey question. */
		answer?: string | null;

		/** The survey question. */
		query?: string | null;

		/** The unique ID for this question. */
		question_id?: string | null;

		/** The type of question this is. */
		question_type?: GetReportingSurveysIdQuestionsReturnQuestionsType | null;
	}
	export interface GetReportingSurveysIdResponsesIdReturnResultsFormProperties {

		/** The answer to this survey question. */
		answer: FormControl<string | null | undefined>,

		/** The survey question. */
		query: FormControl<string | null | undefined>,

		/** The unique ID for this question. */
		question_id: FormControl<string | null | undefined>,

		/** The type of question this is. */
		question_type: FormControl<GetReportingSurveysIdQuestionsReturnQuestionsType | null | undefined>,
	}
	export function CreateGetReportingSurveysIdResponsesIdReturnResultsFormGroup() {
		return new FormGroup<GetReportingSurveysIdResponsesIdReturnResultsFormProperties>({
			answer: new FormControl<string | null | undefined>(undefined),
			query: new FormControl<string | null | undefined>(undefined),
			question_id: new FormControl<string | null | undefined>(undefined),
			question_type: new FormControl<GetReportingSurveysIdQuestionsReturnQuestionsType | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsReturn_links?: Array<GetReportsReturn_links>;

		/** An array of objects, each representing a report resource. */
		GetReportsReturnReports?: Array<GetReportsReturnReports>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnFormGroup() {
		return new FormGroup<GetReportsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsReturn_linksFormGroup() {
		return new FormGroup<GetReportsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReports {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsReturnReports_links?: Array<GetReportsReturnReports_links>;

		/** General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns. */
		ab_split?: GetReportsReturnReportsAb_split;

		/** The number of abuse reports generated for this campaign. */
		abuse_reports?: number | null;

		/** An object describing the bounce summary for the campaign. */
		bounces?: GetReportsReturnReportsBounces;

		/** The title of the campaign. */
		campaign_title?: string | null;

		/** An object describing the click activity for the campaign. */
		clicks?: GetReportsReturnReportsClicks;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: GetReportsReturnReportsDelivery_status;

		/** E-Commerce stats for a campaign. */
		ecommerce?: GetReportsReturnReportsEcommerce;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** An object describing campaign engagement on Facebook. */
		facebook_likes?: GetReportsReturnReportsFacebook_likes;

		/** An object describing the forwards and forward activity for the campaign. */
		forwards?: GetReportsReturnReportsForwards;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The average campaign statistics for your industry. */
		industry_stats?: GetReportsReturnReportsIndustry_stats;

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list. */
		list_stats?: GetReportsReturnReportsList_stats;

		/** An object describing the open activity for the campaign. */
		opens?: GetReportsReturnReportsOpens;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
		rss_last_send?: Date | null;

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time?: Date | null;

		/** The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/). */
		share_report?: GetReportsReturnReportsShare_report;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** An hourly breakdown of the performance of the campaign over the first 24 hours. */
		GetReportsReturnReportsTimeseries?: Array<GetReportsReturnReportsTimeseries>;

		/** An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp. */
		GetReportsReturnReportsTimewarp?: Array<GetReportsReturnReportsTimewarp>;

		/** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
		type?: string | null;

		/** The total number of unsubscribed members for this campaign. */
		unsubscribed?: number | null;
	}
	export interface GetReportsReturnReportsFormProperties {

		/** The number of abuse reports generated for this campaign. */
		abuse_reports: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		campaign_title: FormControl<string | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
		rss_last_send: FormControl<Date | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time: FormControl<Date | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
		type: FormControl<string | null | undefined>,

		/** The total number of unsubscribed members for this campaign. */
		unsubscribed: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsFormGroup() {
		return new FormGroup<GetReportsReturnReportsFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			campaign_title: new FormControl<string | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			rss_last_send: new FormControl<Date | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unsubscribed: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReports_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsReturnReports_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsReturnReports_linksFormGroup() {
		return new FormGroup<GetReportsReturnReports_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsAb_split {

		/** Stats for Campaign A. */
		a?: GetReportsReturnReportsAb_splitA;

		/** Stats for Campaign B. */
		b?: GetReportsReturnReportsAb_splitB;
	}
	export interface GetReportsReturnReportsAb_splitFormProperties {
	}
	export function CreateGetReportsReturnReportsAb_splitFormGroup() {
		return new FormGroup<GetReportsReturnReportsAb_splitFormProperties>({
		});

	}

	export interface GetReportsReturnReportsAb_splitA {

		/** Abuse reports for Campaign A. */
		abuse_reports?: number | null;

		/** Bounces for Campaign A. */
		bounces?: number | null;

		/** Forwards for Campaign A. */
		forwards?: number | null;

		/** Opens from forwards for Campaign A. */
		forwards_opens?: number | null;

		/** The last open for Campaign A. */
		last_open?: string | null;

		/** Opens for Campaign A. */
		opens?: number | null;

		/** Recipient Clicks for Campaign A. */
		recipient_clicks?: number | null;

		/** Unique opens for Campaign A. */
		unique_opens?: number | null;

		/** Unsubscribes for Campaign A. */
		unsubs?: number | null;
	}
	export interface GetReportsReturnReportsAb_splitAFormProperties {

		/** Abuse reports for Campaign A. */
		abuse_reports: FormControl<number | null | undefined>,

		/** Bounces for Campaign A. */
		bounces: FormControl<number | null | undefined>,

		/** Forwards for Campaign A. */
		forwards: FormControl<number | null | undefined>,

		/** Opens from forwards for Campaign A. */
		forwards_opens: FormControl<number | null | undefined>,

		/** The last open for Campaign A. */
		last_open: FormControl<string | null | undefined>,

		/** Opens for Campaign A. */
		opens: FormControl<number | null | undefined>,

		/** Recipient Clicks for Campaign A. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** Unique opens for Campaign A. */
		unique_opens: FormControl<number | null | undefined>,

		/** Unsubscribes for Campaign A. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsAb_splitAFormGroup() {
		return new FormGroup<GetReportsReturnReportsAb_splitAFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			bounces: new FormControl<number | null | undefined>(undefined),
			forwards: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsAb_splitB {

		/** Abuse reports for Campaign B. */
		abuse_reports?: number | null;

		/** Bounces for Campaign B. */
		bounces?: number | null;

		/** Forwards for Campaign B. */
		forwards?: number | null;

		/** Opens for forwards from Campaign B. */
		forwards_opens?: number | null;

		/** The last open for Campaign B. */
		last_open?: string | null;

		/** Opens for Campaign B. */
		opens?: number | null;

		/** Recipients clicks for Campaign B. */
		recipient_clicks?: number | null;

		/** Unique opens for Campaign B. */
		unique_opens?: number | null;

		/** Unsubscribes for Campaign B. */
		unsubs?: number | null;
	}
	export interface GetReportsReturnReportsAb_splitBFormProperties {

		/** Abuse reports for Campaign B. */
		abuse_reports: FormControl<number | null | undefined>,

		/** Bounces for Campaign B. */
		bounces: FormControl<number | null | undefined>,

		/** Forwards for Campaign B. */
		forwards: FormControl<number | null | undefined>,

		/** Opens for forwards from Campaign B. */
		forwards_opens: FormControl<number | null | undefined>,

		/** The last open for Campaign B. */
		last_open: FormControl<string | null | undefined>,

		/** Opens for Campaign B. */
		opens: FormControl<number | null | undefined>,

		/** Recipients clicks for Campaign B. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** Unique opens for Campaign B. */
		unique_opens: FormControl<number | null | undefined>,

		/** Unsubscribes for Campaign B. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsAb_splitBFormGroup() {
		return new FormGroup<GetReportsReturnReportsAb_splitBFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			bounces: new FormControl<number | null | undefined>(undefined),
			forwards: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsBounces {

		/** The total number of hard bounced email addresses. */
		hard_bounces?: number | null;

		/** The total number of soft bounced email addresses. */
		soft_bounces?: number | null;

		/** The total number of addresses that were syntax-related bounces. */
		syntax_errors?: number | null;
	}
	export interface GetReportsReturnReportsBouncesFormProperties {

		/** The total number of hard bounced email addresses. */
		hard_bounces: FormControl<number | null | undefined>,

		/** The total number of soft bounced email addresses. */
		soft_bounces: FormControl<number | null | undefined>,

		/** The total number of addresses that were syntax-related bounces. */
		syntax_errors: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsBouncesFormGroup() {
		return new FormGroup<GetReportsReturnReportsBouncesFormProperties>({
			hard_bounces: new FormControl<number | null | undefined>(undefined),
			soft_bounces: new FormControl<number | null | undefined>(undefined),
			syntax_errors: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsClicks {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for the campaign. */
		clicks_total?: number | null;

		/** The date and time of the last recorded click for the campaign in ISO 8601 format. */
		last_click?: Date | null;

		/** The total number of unique clicks for links across a campaign. */
		unique_clicks?: number | null;

		/** The total number of subscribers who clicked on a campaign. */
		unique_subscriber_clicks?: number | null;
	}
	export interface GetReportsReturnReportsClicksFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for the campaign. */
		clicks_total: FormControl<number | null | undefined>,

		/** The date and time of the last recorded click for the campaign in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The total number of unique clicks for links across a campaign. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The total number of subscribers who clicked on a campaign. */
		unique_subscriber_clicks: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsClicksFormGroup() {
		return new FormGroup<GetReportsReturnReportsClicksFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks_total: new FormControl<number | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			unique_subscriber_clicks: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface GetReportsReturnReportsDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreateGetReportsReturnReportsDelivery_statusFormGroup() {
		return new FormGroup<GetReportsReturnReportsDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsEcommerce {
		currency_code?: string | null;

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface GetReportsReturnReportsEcommerceFormProperties {
		currency_code: FormControl<string | null | undefined>,

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsEcommerceFormGroup() {
		return new FormGroup<GetReportsReturnReportsEcommerceFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsFacebook_likes {

		/** The number of Facebook likes for the campaign. */
		facebook_likes?: number | null;

		/** The number of recipients who liked the campaign on Facebook. */
		recipient_likes?: number | null;

		/** The number of unique likes. */
		unique_likes?: number | null;
	}
	export interface GetReportsReturnReportsFacebook_likesFormProperties {

		/** The number of Facebook likes for the campaign. */
		facebook_likes: FormControl<number | null | undefined>,

		/** The number of recipients who liked the campaign on Facebook. */
		recipient_likes: FormControl<number | null | undefined>,

		/** The number of unique likes. */
		unique_likes: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsFacebook_likesFormGroup() {
		return new FormGroup<GetReportsReturnReportsFacebook_likesFormProperties>({
			facebook_likes: new FormControl<number | null | undefined>(undefined),
			recipient_likes: new FormControl<number | null | undefined>(undefined),
			unique_likes: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsForwards {

		/** How many times the campaign has been forwarded. */
		forwards_count?: number | null;

		/** How many times the forwarded campaign has been opened. */
		forwards_opens?: number | null;
	}
	export interface GetReportsReturnReportsForwardsFormProperties {

		/** How many times the campaign has been forwarded. */
		forwards_count: FormControl<number | null | undefined>,

		/** How many times the forwarded campaign has been opened. */
		forwards_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsForwardsFormGroup() {
		return new FormGroup<GetReportsReturnReportsForwardsFormProperties>({
			forwards_count: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsIndustry_stats {

		/** The industry abuse rate. */
		abuse_rate?: number | null;

		/** The industry bounce rate. */
		bounce_rate?: number | null;

		/** The industry click rate. */
		click_rate?: number | null;

		/** The industry open rate. */
		open_rate?: number | null;

		/** The type of business industry associated with your account. For example: retail, education, etc. */
		type?: string | null;

		/** The industry unopened rate. */
		unopen_rate?: number | null;

		/** The industry unsubscribe rate. */
		unsub_rate?: number | null;
	}
	export interface GetReportsReturnReportsIndustry_statsFormProperties {

		/** The industry abuse rate. */
		abuse_rate: FormControl<number | null | undefined>,

		/** The industry bounce rate. */
		bounce_rate: FormControl<number | null | undefined>,

		/** The industry click rate. */
		click_rate: FormControl<number | null | undefined>,

		/** The industry open rate. */
		open_rate: FormControl<number | null | undefined>,

		/** The type of business industry associated with your account. For example: retail, education, etc. */
		type: FormControl<string | null | undefined>,

		/** The industry unopened rate. */
		unopen_rate: FormControl<number | null | undefined>,

		/** The industry unsubscribe rate. */
		unsub_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsIndustry_statsFormGroup() {
		return new FormGroup<GetReportsReturnReportsIndustry_statsFormProperties>({
			abuse_rate: new FormControl<number | null | undefined>(undefined),
			bounce_rate: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unopen_rate: new FormControl<number | null | undefined>(undefined),
			unsub_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsList_stats {

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		click_rate?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		open_rate?: number | null;

		/** The average number of subscriptions per month for the list. */
		sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list. */
		unsub_rate?: number | null;
	}
	export interface GetReportsReturnReportsList_statsFormProperties {

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		click_rate: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		open_rate: FormControl<number | null | undefined>,

		/** The average number of subscriptions per month for the list. */
		sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list. */
		unsub_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsList_statsFormGroup() {
		return new FormGroup<GetReportsReturnReportsList_statsFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			sub_rate: new FormControl<number | null | undefined>(undefined),
			unsub_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsOpens {

		/** The date and time of the last recorded open in ISO 8601 format. */
		last_open?: Date | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens_total?: number | null;

		/** The total number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetReportsReturnReportsOpensFormProperties {

		/** The date and time of the last recorded open in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens_total: FormControl<number | null | undefined>,

		/** The total number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsOpensFormGroup() {
		return new FormGroup<GetReportsReturnReportsOpensFormProperties>({
			last_open: new FormControl<Date | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens_total: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsShare_report {

		/** If password protected, the password for the VIP report. */
		share_password?: string | null;

		/** The URL for the VIP report. */
		share_url?: string | null;
	}
	export interface GetReportsReturnReportsShare_reportFormProperties {

		/** If password protected, the password for the VIP report. */
		share_password: FormControl<string | null | undefined>,

		/** The URL for the VIP report. */
		share_url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsReturnReportsShare_reportFormGroup() {
		return new FormGroup<GetReportsReturnReportsShare_reportFormProperties>({
			share_password: new FormControl<string | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsTimeseries {

		/** The number of emails sent in the timeseries. */
		emails_sent?: number | null;

		/** The number of clicks in the timeseries. */
		recipients_clicks?: number | null;

		/** The date and time for the series in ISO 8601 format. */
		timestamp?: Date | null;

		/** The number of unique opens in the timeseries. */
		unique_opens?: number | null;
	}
	export interface GetReportsReturnReportsTimeseriesFormProperties {

		/** The number of emails sent in the timeseries. */
		emails_sent: FormControl<number | null | undefined>,

		/** The number of clicks in the timeseries. */
		recipients_clicks: FormControl<number | null | undefined>,

		/** The date and time for the series in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** The number of unique opens in the timeseries. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsTimeseriesFormGroup() {
		return new FormGroup<GetReportsReturnReportsTimeseriesFormProperties>({
			emails_sent: new FormControl<number | null | undefined>(undefined),
			recipients_clicks: new FormControl<number | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsReturnReportsTimewarp {

		/** The number of bounces. */
		bounces?: number | null;

		/** The number of clicks. */
		clicks?: number | null;

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset?: number | null;

		/** The date and time of the last click in ISO 8601 format. */
		last_click?: Date | null;

		/** The date and time of the last open in ISO 8601 format. */
		last_open?: Date | null;

		/** The number of opens. */
		opens?: number | null;

		/** The number of unique clicks. */
		unique_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetReportsReturnReportsTimewarpFormProperties {

		/** The number of bounces. */
		bounces: FormControl<number | null | undefined>,

		/** The number of clicks. */
		clicks: FormControl<number | null | undefined>,

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset: FormControl<number | null | undefined>,

		/** The date and time of the last click in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The date and time of the last open in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The number of opens. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsReturnReportsTimewarpFormGroup() {
		return new FormGroup<GetReportsReturnReportsTimewarpFormProperties>({
			bounces: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			gmt_offset: new FormControl<number | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			last_open: new FormControl<Date | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdReturn_links?: Array<GetReportsIdReturn_links>;

		/** General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns. */
		ab_split?: GetReportsIdReturnAb_split;

		/** The number of abuse reports generated for this campaign. */
		abuse_reports?: number | null;

		/** An object describing the bounce summary for the campaign. */
		bounces?: GetReportsIdReturnBounces;

		/** The title of the campaign. */
		campaign_title?: string | null;

		/** An object describing the click activity for the campaign. */
		clicks?: GetReportsIdReturnClicks;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: GetReportsIdReturnDelivery_status;

		/** E-Commerce stats for a campaign. */
		ecommerce?: GetReportsIdReturnEcommerce;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** An object describing campaign engagement on Facebook. */
		facebook_likes?: GetReportsIdReturnFacebook_likes;

		/** An object describing the forwards and forward activity for the campaign. */
		forwards?: GetReportsIdReturnForwards;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The average campaign statistics for your industry. */
		industry_stats?: GetReportsIdReturnIndustry_stats;

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list. */
		list_stats?: GetReportsIdReturnList_stats;

		/** An object describing the open activity for the campaign. */
		opens?: GetReportsIdReturnOpens;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
		rss_last_send?: Date | null;

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time?: Date | null;

		/** The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/). */
		share_report?: GetReportsIdReturnShare_report;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** An hourly breakdown of the performance of the campaign over the first 24 hours. */
		GetReportsIdReturnTimeseries?: Array<GetReportsIdReturnTimeseries>;

		/** An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp. */
		GetReportsIdReturnTimewarp?: Array<GetReportsIdReturnTimewarp>;

		/** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
		type?: string | null;

		/** The total number of unsubscribed members for this campaign. */
		unsubscribed?: number | null;
	}
	export interface GetReportsIdReturnFormProperties {

		/** The number of abuse reports generated for this campaign. */
		abuse_reports: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		campaign_title: FormControl<string | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
		rss_last_send: FormControl<Date | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time: FormControl<Date | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
		type: FormControl<string | null | undefined>,

		/** The total number of unsubscribed members for this campaign. */
		unsubscribed: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnFormGroup() {
		return new FormGroup<GetReportsIdReturnFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			campaign_title: new FormControl<string | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			rss_last_send: new FormControl<Date | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unsubscribed: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnAb_split {

		/** Stats for Campaign A. */
		a?: GetReportsIdReturnAb_splitA;

		/** Stats for Campaign B. */
		b?: GetReportsIdReturnAb_splitB;
	}
	export interface GetReportsIdReturnAb_splitFormProperties {
	}
	export function CreateGetReportsIdReturnAb_splitFormGroup() {
		return new FormGroup<GetReportsIdReturnAb_splitFormProperties>({
		});

	}

	export interface GetReportsIdReturnAb_splitA {

		/** Abuse reports for Campaign A. */
		abuse_reports?: number | null;

		/** Bounces for Campaign A. */
		bounces?: number | null;

		/** Forwards for Campaign A. */
		forwards?: number | null;

		/** Opens from forwards for Campaign A. */
		forwards_opens?: number | null;

		/** The last open for Campaign A. */
		last_open?: string | null;

		/** Opens for Campaign A. */
		opens?: number | null;

		/** Recipient Clicks for Campaign A. */
		recipient_clicks?: number | null;

		/** Unique opens for Campaign A. */
		unique_opens?: number | null;

		/** Unsubscribes for Campaign A. */
		unsubs?: number | null;
	}
	export interface GetReportsIdReturnAb_splitAFormProperties {

		/** Abuse reports for Campaign A. */
		abuse_reports: FormControl<number | null | undefined>,

		/** Bounces for Campaign A. */
		bounces: FormControl<number | null | undefined>,

		/** Forwards for Campaign A. */
		forwards: FormControl<number | null | undefined>,

		/** Opens from forwards for Campaign A. */
		forwards_opens: FormControl<number | null | undefined>,

		/** The last open for Campaign A. */
		last_open: FormControl<string | null | undefined>,

		/** Opens for Campaign A. */
		opens: FormControl<number | null | undefined>,

		/** Recipient Clicks for Campaign A. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** Unique opens for Campaign A. */
		unique_opens: FormControl<number | null | undefined>,

		/** Unsubscribes for Campaign A. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnAb_splitAFormGroup() {
		return new FormGroup<GetReportsIdReturnAb_splitAFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			bounces: new FormControl<number | null | undefined>(undefined),
			forwards: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnAb_splitB {

		/** Abuse reports for Campaign B. */
		abuse_reports?: number | null;

		/** Bounces for Campaign B. */
		bounces?: number | null;

		/** Forwards for Campaign B. */
		forwards?: number | null;

		/** Opens for forwards from Campaign B. */
		forwards_opens?: number | null;

		/** The last open for Campaign B. */
		last_open?: string | null;

		/** Opens for Campaign B. */
		opens?: number | null;

		/** Recipients clicks for Campaign B. */
		recipient_clicks?: number | null;

		/** Unique opens for Campaign B. */
		unique_opens?: number | null;

		/** Unsubscribes for Campaign B. */
		unsubs?: number | null;
	}
	export interface GetReportsIdReturnAb_splitBFormProperties {

		/** Abuse reports for Campaign B. */
		abuse_reports: FormControl<number | null | undefined>,

		/** Bounces for Campaign B. */
		bounces: FormControl<number | null | undefined>,

		/** Forwards for Campaign B. */
		forwards: FormControl<number | null | undefined>,

		/** Opens for forwards from Campaign B. */
		forwards_opens: FormControl<number | null | undefined>,

		/** The last open for Campaign B. */
		last_open: FormControl<string | null | undefined>,

		/** Opens for Campaign B. */
		opens: FormControl<number | null | undefined>,

		/** Recipients clicks for Campaign B. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** Unique opens for Campaign B. */
		unique_opens: FormControl<number | null | undefined>,

		/** Unsubscribes for Campaign B. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnAb_splitBFormGroup() {
		return new FormGroup<GetReportsIdReturnAb_splitBFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			bounces: new FormControl<number | null | undefined>(undefined),
			forwards: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnBounces {

		/** The total number of hard bounced email addresses. */
		hard_bounces?: number | null;

		/** The total number of soft bounced email addresses. */
		soft_bounces?: number | null;

		/** The total number of addresses that were syntax-related bounces. */
		syntax_errors?: number | null;
	}
	export interface GetReportsIdReturnBouncesFormProperties {

		/** The total number of hard bounced email addresses. */
		hard_bounces: FormControl<number | null | undefined>,

		/** The total number of soft bounced email addresses. */
		soft_bounces: FormControl<number | null | undefined>,

		/** The total number of addresses that were syntax-related bounces. */
		syntax_errors: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnBouncesFormGroup() {
		return new FormGroup<GetReportsIdReturnBouncesFormProperties>({
			hard_bounces: new FormControl<number | null | undefined>(undefined),
			soft_bounces: new FormControl<number | null | undefined>(undefined),
			syntax_errors: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnClicks {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for the campaign. */
		clicks_total?: number | null;

		/** The date and time of the last recorded click for the campaign in ISO 8601 format. */
		last_click?: Date | null;

		/** The total number of unique clicks for links across a campaign. */
		unique_clicks?: number | null;

		/** The total number of subscribers who clicked on a campaign. */
		unique_subscriber_clicks?: number | null;
	}
	export interface GetReportsIdReturnClicksFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for the campaign. */
		clicks_total: FormControl<number | null | undefined>,

		/** The date and time of the last recorded click for the campaign in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The total number of unique clicks for links across a campaign. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The total number of subscribers who clicked on a campaign. */
		unique_subscriber_clicks: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnClicksFormGroup() {
		return new FormGroup<GetReportsIdReturnClicksFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks_total: new FormControl<number | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			unique_subscriber_clicks: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface GetReportsIdReturnDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreateGetReportsIdReturnDelivery_statusFormGroup() {
		return new FormGroup<GetReportsIdReturnDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnEcommerce {
		currency_code?: string | null;

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface GetReportsIdReturnEcommerceFormProperties {
		currency_code: FormControl<string | null | undefined>,

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnEcommerceFormGroup() {
		return new FormGroup<GetReportsIdReturnEcommerceFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnFacebook_likes {

		/** The number of Facebook likes for the campaign. */
		facebook_likes?: number | null;

		/** The number of recipients who liked the campaign on Facebook. */
		recipient_likes?: number | null;

		/** The number of unique likes. */
		unique_likes?: number | null;
	}
	export interface GetReportsIdReturnFacebook_likesFormProperties {

		/** The number of Facebook likes for the campaign. */
		facebook_likes: FormControl<number | null | undefined>,

		/** The number of recipients who liked the campaign on Facebook. */
		recipient_likes: FormControl<number | null | undefined>,

		/** The number of unique likes. */
		unique_likes: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnFacebook_likesFormGroup() {
		return new FormGroup<GetReportsIdReturnFacebook_likesFormProperties>({
			facebook_likes: new FormControl<number | null | undefined>(undefined),
			recipient_likes: new FormControl<number | null | undefined>(undefined),
			unique_likes: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnForwards {

		/** How many times the campaign has been forwarded. */
		forwards_count?: number | null;

		/** How many times the forwarded campaign has been opened. */
		forwards_opens?: number | null;
	}
	export interface GetReportsIdReturnForwardsFormProperties {

		/** How many times the campaign has been forwarded. */
		forwards_count: FormControl<number | null | undefined>,

		/** How many times the forwarded campaign has been opened. */
		forwards_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnForwardsFormGroup() {
		return new FormGroup<GetReportsIdReturnForwardsFormProperties>({
			forwards_count: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnIndustry_stats {

		/** The industry abuse rate. */
		abuse_rate?: number | null;

		/** The industry bounce rate. */
		bounce_rate?: number | null;

		/** The industry click rate. */
		click_rate?: number | null;

		/** The industry open rate. */
		open_rate?: number | null;

		/** The type of business industry associated with your account. For example: retail, education, etc. */
		type?: string | null;

		/** The industry unopened rate. */
		unopen_rate?: number | null;

		/** The industry unsubscribe rate. */
		unsub_rate?: number | null;
	}
	export interface GetReportsIdReturnIndustry_statsFormProperties {

		/** The industry abuse rate. */
		abuse_rate: FormControl<number | null | undefined>,

		/** The industry bounce rate. */
		bounce_rate: FormControl<number | null | undefined>,

		/** The industry click rate. */
		click_rate: FormControl<number | null | undefined>,

		/** The industry open rate. */
		open_rate: FormControl<number | null | undefined>,

		/** The type of business industry associated with your account. For example: retail, education, etc. */
		type: FormControl<string | null | undefined>,

		/** The industry unopened rate. */
		unopen_rate: FormControl<number | null | undefined>,

		/** The industry unsubscribe rate. */
		unsub_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnIndustry_statsFormGroup() {
		return new FormGroup<GetReportsIdReturnIndustry_statsFormProperties>({
			abuse_rate: new FormControl<number | null | undefined>(undefined),
			bounce_rate: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unopen_rate: new FormControl<number | null | undefined>(undefined),
			unsub_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnList_stats {

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		click_rate?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		open_rate?: number | null;

		/** The average number of subscriptions per month for the list. */
		sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list. */
		unsub_rate?: number | null;
	}
	export interface GetReportsIdReturnList_statsFormProperties {

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		click_rate: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		open_rate: FormControl<number | null | undefined>,

		/** The average number of subscriptions per month for the list. */
		sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list. */
		unsub_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnList_statsFormGroup() {
		return new FormGroup<GetReportsIdReturnList_statsFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			sub_rate: new FormControl<number | null | undefined>(undefined),
			unsub_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnOpens {

		/** The date and time of the last recorded open in ISO 8601 format. */
		last_open?: Date | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens_total?: number | null;

		/** The total number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetReportsIdReturnOpensFormProperties {

		/** The date and time of the last recorded open in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens_total: FormControl<number | null | undefined>,

		/** The total number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnOpensFormGroup() {
		return new FormGroup<GetReportsIdReturnOpensFormProperties>({
			last_open: new FormControl<Date | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens_total: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnShare_report {

		/** If password protected, the password for the VIP report. */
		share_password?: string | null;

		/** The URL for the VIP report. */
		share_url?: string | null;
	}
	export interface GetReportsIdReturnShare_reportFormProperties {

		/** If password protected, the password for the VIP report. */
		share_password: FormControl<string | null | undefined>,

		/** The URL for the VIP report. */
		share_url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdReturnShare_reportFormGroup() {
		return new FormGroup<GetReportsIdReturnShare_reportFormProperties>({
			share_password: new FormControl<string | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnTimeseries {

		/** The number of emails sent in the timeseries. */
		emails_sent?: number | null;

		/** The number of clicks in the timeseries. */
		recipients_clicks?: number | null;

		/** The date and time for the series in ISO 8601 format. */
		timestamp?: Date | null;

		/** The number of unique opens in the timeseries. */
		unique_opens?: number | null;
	}
	export interface GetReportsIdReturnTimeseriesFormProperties {

		/** The number of emails sent in the timeseries. */
		emails_sent: FormControl<number | null | undefined>,

		/** The number of clicks in the timeseries. */
		recipients_clicks: FormControl<number | null | undefined>,

		/** The date and time for the series in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** The number of unique opens in the timeseries. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnTimeseriesFormGroup() {
		return new FormGroup<GetReportsIdReturnTimeseriesFormProperties>({
			emails_sent: new FormControl<number | null | undefined>(undefined),
			recipients_clicks: new FormControl<number | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdReturnTimewarp {

		/** The number of bounces. */
		bounces?: number | null;

		/** The number of clicks. */
		clicks?: number | null;

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset?: number | null;

		/** The date and time of the last click in ISO 8601 format. */
		last_click?: Date | null;

		/** The date and time of the last open in ISO 8601 format. */
		last_open?: Date | null;

		/** The number of opens. */
		opens?: number | null;

		/** The number of unique clicks. */
		unique_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetReportsIdReturnTimewarpFormProperties {

		/** The number of bounces. */
		bounces: FormControl<number | null | undefined>,

		/** The number of clicks. */
		clicks: FormControl<number | null | undefined>,

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset: FormControl<number | null | undefined>,

		/** The date and time of the last click in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The date and time of the last open in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The number of opens. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdReturnTimewarpFormGroup() {
		return new FormGroup<GetReportsIdReturnTimewarpFormProperties>({
			bounces: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			gmt_offset: new FormControl<number | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			last_open: new FormControl<Date | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAbuseReportsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdAbuseReportsIdReturn_links?: Array<GetReportsIdAbuseReportsIdReturn_links>;

		/** An array of objects, each representing an abuse report resource. */
		GetReportsIdAbuseReportsIdReturnAbuse_reports?: Array<GetReportsIdAbuseReportsIdReturnAbuse_reports>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdAbuseReportsIdReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdAbuseReportsIdReturnFormGroup() {
		return new FormGroup<GetReportsIdAbuseReportsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAbuseReportsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdAbuseReportsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdAbuseReportsIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdAbuseReportsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAbuseReportsIdReturnAbuse_reports {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdAbuseReportsIdReturnAbuse_reports_links?: Array<GetReportsIdAbuseReportsIdReturnAbuse_reports_links>;

		/** The campaign id for the abuse report */
		campaign_id?: string | null;

		/** Date for the abuse report */
		date?: Date | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The id for the abuse report */
		id?: number | null;

		/** The unique id of the list for the abuse report. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdAbuseReportsIdReturnAbuse_reportsFormProperties {

		/** The campaign id for the abuse report */
		campaign_id: FormControl<string | null | undefined>,

		/** Date for the abuse report */
		date: FormControl<Date | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The id for the abuse report */
		id: FormControl<number | null | undefined>,

		/** The unique id of the list for the abuse report. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdAbuseReportsIdReturnAbuse_reportsFormGroup() {
		return new FormGroup<GetReportsIdAbuseReportsIdReturnAbuse_reportsFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAbuseReportsIdReturnAbuse_reports_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdAbuseReportsIdReturnAbuse_reports_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdAbuseReportsIdReturnAbuse_reports_linksFormGroup() {
		return new FormGroup<GetReportsIdAbuseReportsIdReturnAbuse_reports_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAbuseReportsIdIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdAbuseReportsIdIdReturn_links?: Array<GetReportsIdAbuseReportsIdIdReturn_links>;

		/** The campaign id for the abuse report */
		campaign_id?: string | null;

		/** Date for the abuse report */
		date?: Date | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The id for the abuse report */
		id?: number | null;

		/** The unique id of the list for the abuse report. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdAbuseReportsIdIdReturnFormProperties {

		/** The campaign id for the abuse report */
		campaign_id: FormControl<string | null | undefined>,

		/** Date for the abuse report */
		date: FormControl<Date | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The id for the abuse report */
		id: FormControl<number | null | undefined>,

		/** The unique id of the list for the abuse report. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdAbuseReportsIdIdReturnFormGroup() {
		return new FormGroup<GetReportsIdAbuseReportsIdIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAbuseReportsIdIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdAbuseReportsIdIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdAbuseReportsIdIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdAbuseReportsIdIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAdviceReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdAdviceReturn_links?: Array<GetReportsIdAdviceReturn_links>;

		/** An array of objects, each representing a point of campaign feedback. */
		GetReportsIdAdviceReturnAdvice?: Array<GetReportsIdAdviceReturnAdvice>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdAdviceReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdAdviceReturnFormGroup() {
		return new FormGroup<GetReportsIdAdviceReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAdviceReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdAdviceReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdAdviceReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdAdviceReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAdviceReturnAdvice {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdAdviceReturnAdvice_links?: Array<GetReportsIdAdviceReturnAdvice_links>;

		/** The advice message. */
		message?: string | null;

		/** The sentiment type for a feedback message. */
		type?: GetReportsIdAdviceReturnAdviceType | null;
	}
	export interface GetReportsIdAdviceReturnAdviceFormProperties {

		/** The advice message. */
		message: FormControl<string | null | undefined>,

		/** The sentiment type for a feedback message. */
		type: FormControl<GetReportsIdAdviceReturnAdviceType | null | undefined>,
	}
	export function CreateGetReportsIdAdviceReturnAdviceFormGroup() {
		return new FormGroup<GetReportsIdAdviceReturnAdviceFormProperties>({
			message: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GetReportsIdAdviceReturnAdviceType | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdAdviceReturnAdvice_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdAdviceReturnAdvice_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdAdviceReturnAdvice_linksFormGroup() {
		return new FormGroup<GetReportsIdAdviceReturnAdvice_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetReportsIdAdviceReturnAdviceType { negative = 0, positive = 1, neutral = 2 }

	export enum GetReportsIdClickDetailsSort_field { total_clicks = 0, unique_clicks = 1 }

	export interface GetReportsIdClickDetailsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdClickDetailsReturn_links?: Array<GetReportsIdClickDetailsReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** An array of objects, each representing a specific URL contained in the campaign. */
		GetReportsIdClickDetailsReturnUrls_clicked?: Array<GetReportsIdClickDetailsReturnUrls_clicked>;
	}
	export interface GetReportsIdClickDetailsReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsReturnFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdClickDetailsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsReturnUrls_clicked {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdClickDetailsReturnUrls_clicked_links?: Array<GetReportsIdClickDetailsReturnUrls_clicked_links>;

		/** A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns. */
		ab_split?: GetReportsIdClickDetailsReturnUrls_clickedAb_split;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The percentage of total clicks a link generated for a campaign. */
		click_percentage?: number | null;

		/** The unique id for the link. */
		id?: string | null;

		/** The date and time for the last recorded click for a link in ISO 8601 format. */
		last_click?: Date | null;

		/** The number of total clicks for a link. */
		total_clicks?: number | null;

		/** The percentage of unique clicks a link generated for a campaign. */
		unique_click_percentage?: number | null;

		/** Number of unique clicks for a link. */
		unique_clicks?: number | null;

		/** The URL for the link in the campaign. */
		url?: string | null;
	}
	export interface GetReportsIdClickDetailsReturnUrls_clickedFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The percentage of total clicks a link generated for a campaign. */
		click_percentage: FormControl<number | null | undefined>,

		/** The unique id for the link. */
		id: FormControl<string | null | undefined>,

		/** The date and time for the last recorded click for a link in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The number of total clicks for a link. */
		total_clicks: FormControl<number | null | undefined>,

		/** The percentage of unique clicks a link generated for a campaign. */
		unique_click_percentage: FormControl<number | null | undefined>,

		/** Number of unique clicks for a link. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The URL for the link in the campaign. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsReturnUrls_clickedFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturnUrls_clickedFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			click_percentage: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			total_clicks: new FormControl<number | null | undefined>(undefined),
			unique_click_percentage: new FormControl<number | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsReturnUrls_clicked_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdClickDetailsReturnUrls_clicked_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsReturnUrls_clicked_linksFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturnUrls_clicked_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsReturnUrls_clickedAb_split {

		/** Stats for Group A. */
		a?: GetReportsIdClickDetailsReturnUrls_clickedAb_splitA;

		/** Stats for Group B. */
		b?: GetReportsIdClickDetailsReturnUrls_clickedAb_splitB;
	}
	export interface GetReportsIdClickDetailsReturnUrls_clickedAb_splitFormProperties {
	}
	export function CreateGetReportsIdClickDetailsReturnUrls_clickedAb_splitFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturnUrls_clickedAb_splitFormProperties>({
		});

	}

	export interface GetReportsIdClickDetailsReturnUrls_clickedAb_splitA {

		/** The percentage of total clicks for Group A. */
		click_percentage_a?: number | null;

		/** The total number of clicks for Group A. */
		total_clicks_a?: number | null;

		/** The percentage of unique clicks for Group A. */
		unique_click_percentage_a?: number | null;

		/** The number of unique clicks for Group A. */
		unique_clicks_a?: number | null;
	}
	export interface GetReportsIdClickDetailsReturnUrls_clickedAb_splitAFormProperties {

		/** The percentage of total clicks for Group A. */
		click_percentage_a: FormControl<number | null | undefined>,

		/** The total number of clicks for Group A. */
		total_clicks_a: FormControl<number | null | undefined>,

		/** The percentage of unique clicks for Group A. */
		unique_click_percentage_a: FormControl<number | null | undefined>,

		/** The number of unique clicks for Group A. */
		unique_clicks_a: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsReturnUrls_clickedAb_splitAFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturnUrls_clickedAb_splitAFormProperties>({
			click_percentage_a: new FormControl<number | null | undefined>(undefined),
			total_clicks_a: new FormControl<number | null | undefined>(undefined),
			unique_click_percentage_a: new FormControl<number | null | undefined>(undefined),
			unique_clicks_a: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsReturnUrls_clickedAb_splitB {

		/** The percentage of total clicks for Group B. */
		click_percentage_b?: number | null;

		/** The total number of clicks for Group B. */
		total_clicks_b?: number | null;

		/** The percentage of unique clicks for Group B. */
		unique_click_percentage_b?: number | null;

		/** The number of unique clicks for Group B. */
		unique_clicks_b?: number | null;
	}
	export interface GetReportsIdClickDetailsReturnUrls_clickedAb_splitBFormProperties {

		/** The percentage of total clicks for Group B. */
		click_percentage_b: FormControl<number | null | undefined>,

		/** The total number of clicks for Group B. */
		total_clicks_b: FormControl<number | null | undefined>,

		/** The percentage of unique clicks for Group B. */
		unique_click_percentage_b: FormControl<number | null | undefined>,

		/** The number of unique clicks for Group B. */
		unique_clicks_b: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsReturnUrls_clickedAb_splitBFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsReturnUrls_clickedAb_splitBFormProperties>({
			click_percentage_b: new FormControl<number | null | undefined>(undefined),
			total_clicks_b: new FormControl<number | null | undefined>(undefined),
			unique_click_percentage_b: new FormControl<number | null | undefined>(undefined),
			unique_clicks_b: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdClickDetailsIdReturn_links?: Array<GetReportsIdClickDetailsIdReturn_links>;

		/** A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns. */
		ab_split?: GetReportsIdClickDetailsIdReturnAb_split;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The percentage of total clicks a link generated for a campaign. */
		click_percentage?: number | null;

		/** The unique id for the link. */
		id?: string | null;

		/** The date and time for the last recorded click for a link in ISO 8601 format. */
		last_click?: Date | null;

		/** The number of total clicks for a link. */
		total_clicks?: number | null;

		/** The percentage of unique clicks a link generated for a campaign. */
		unique_click_percentage?: number | null;

		/** Number of unique clicks for a link. */
		unique_clicks?: number | null;

		/** The URL for the link in the campaign. */
		url?: string | null;
	}
	export interface GetReportsIdClickDetailsIdReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The percentage of total clicks a link generated for a campaign. */
		click_percentage: FormControl<number | null | undefined>,

		/** The unique id for the link. */
		id: FormControl<string | null | undefined>,

		/** The date and time for the last recorded click for a link in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The number of total clicks for a link. */
		total_clicks: FormControl<number | null | undefined>,

		/** The percentage of unique clicks a link generated for a campaign. */
		unique_click_percentage: FormControl<number | null | undefined>,

		/** Number of unique clicks for a link. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The URL for the link in the campaign. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdReturnFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			click_percentage: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			total_clicks: new FormControl<number | null | undefined>(undefined),
			unique_click_percentage: new FormControl<number | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdClickDetailsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdReturnAb_split {

		/** Stats for Group A. */
		a?: GetReportsIdClickDetailsIdReturnAb_splitA;

		/** Stats for Group B. */
		b?: GetReportsIdClickDetailsIdReturnAb_splitB;
	}
	export interface GetReportsIdClickDetailsIdReturnAb_splitFormProperties {
	}
	export function CreateGetReportsIdClickDetailsIdReturnAb_splitFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdReturnAb_splitFormProperties>({
		});

	}

	export interface GetReportsIdClickDetailsIdReturnAb_splitA {

		/** The percentage of total clicks for Group A. */
		click_percentage_a?: number | null;

		/** The total number of clicks for Group A. */
		total_clicks_a?: number | null;

		/** The percentage of unique clicks for Group A. */
		unique_click_percentage_a?: number | null;

		/** The number of unique clicks for Group A. */
		unique_clicks_a?: number | null;
	}
	export interface GetReportsIdClickDetailsIdReturnAb_splitAFormProperties {

		/** The percentage of total clicks for Group A. */
		click_percentage_a: FormControl<number | null | undefined>,

		/** The total number of clicks for Group A. */
		total_clicks_a: FormControl<number | null | undefined>,

		/** The percentage of unique clicks for Group A. */
		unique_click_percentage_a: FormControl<number | null | undefined>,

		/** The number of unique clicks for Group A. */
		unique_clicks_a: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdReturnAb_splitAFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdReturnAb_splitAFormProperties>({
			click_percentage_a: new FormControl<number | null | undefined>(undefined),
			total_clicks_a: new FormControl<number | null | undefined>(undefined),
			unique_click_percentage_a: new FormControl<number | null | undefined>(undefined),
			unique_clicks_a: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdReturnAb_splitB {

		/** The percentage of total clicks for Group B. */
		click_percentage_b?: number | null;

		/** The total number of clicks for Group B. */
		total_clicks_b?: number | null;

		/** The percentage of unique clicks for Group B. */
		unique_click_percentage_b?: number | null;

		/** The number of unique clicks for Group B. */
		unique_clicks_b?: number | null;
	}
	export interface GetReportsIdClickDetailsIdReturnAb_splitBFormProperties {

		/** The percentage of total clicks for Group B. */
		click_percentage_b: FormControl<number | null | undefined>,

		/** The total number of clicks for Group B. */
		total_clicks_b: FormControl<number | null | undefined>,

		/** The percentage of unique clicks for Group B. */
		unique_click_percentage_b: FormControl<number | null | undefined>,

		/** The number of unique clicks for Group B. */
		unique_clicks_b: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdReturnAb_splitBFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdReturnAb_splitBFormProperties>({
			click_percentage_b: new FormControl<number | null | undefined>(undefined),
			total_clicks_b: new FormControl<number | null | undefined>(undefined),
			unique_click_percentage_b: new FormControl<number | null | undefined>(undefined),
			unique_clicks_b: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdMembersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdClickDetailsIdMembersReturn_links?: Array<GetReportsIdClickDetailsIdMembersReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** An array of objects, each representing a member who clicked a specific link within a campaign. */
		GetReportsIdClickDetailsIdMembersReturnMembers?: Array<GetReportsIdClickDetailsIdMembersReturnMembers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdClickDetailsIdMembersReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdMembersReturnFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdMembersReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdMembersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdClickDetailsIdMembersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdMembersReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdMembersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdMembersReturnMembers {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdClickDetailsIdMembersReturnMembers_links?: Array<GetReportsIdClickDetailsIdMembersReturnMembers_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The total number of times the subscriber clicked on the link. */
		clicks?: number | null;

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The id for the tracked URL in the campaign. */
		url_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdClickDetailsIdMembersReturnMembersFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of times the subscriber clicked on the link. */
		clicks: FormControl<number | null | undefined>,

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The id for the tracked URL in the campaign. */
		url_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdMembersReturnMembersFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdMembersReturnMembersFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			contact_status: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			url_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdMembersReturnMembers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdClickDetailsIdMembersReturnMembers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdMembersReturnMembers_linksFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdMembersReturnMembers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdMembersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdClickDetailsIdMembersIdReturn_links?: Array<GetReportsIdClickDetailsIdMembersIdReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The total number of times the subscriber clicked on the link. */
		clicks?: number | null;

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The id for the tracked URL in the campaign. */
		url_id?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdClickDetailsIdMembersIdReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of times the subscriber clicked on the link. */
		clicks: FormControl<number | null | undefined>,

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The id for the tracked URL in the campaign. */
		url_id: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdMembersIdReturnFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdMembersIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			contact_status: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			url_id: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdClickDetailsIdMembersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdClickDetailsIdMembersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdClickDetailsIdMembersIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdClickDetailsIdMembersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdDomainPerformanceReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdDomainPerformanceReturn_links?: Array<GetReportsIdDomainPerformanceReturn_links>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The top 5 email domains based on total delivered emails. */
		GetReportsIdDomainPerformanceReturnDomains?: Array<GetReportsIdDomainPerformanceReturnDomains>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** The total number of emails sent for the campaign. */
		total_sent?: number | null;
	}
	export interface GetReportsIdDomainPerformanceReturnFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,

		/** The total number of emails sent for the campaign. */
		total_sent: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdDomainPerformanceReturnFormGroup() {
		return new FormGroup<GetReportsIdDomainPerformanceReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
			total_sent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdDomainPerformanceReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdDomainPerformanceReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdDomainPerformanceReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdDomainPerformanceReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdDomainPerformanceReturnDomains {

		/** The number of bounces at a domain. */
		bounces?: number | null;

		/** The percentage of total bounces from this domain. */
		bounces_pct?: number | null;

		/** The number of clicks for a domain. */
		clicks?: number | null;

		/** The percentage of total clicks from this domain. */
		clicks_pct?: number | null;

		/** The number of successful deliveries for a domain. */
		delivered?: number | null;

		/** The name of the domain (gmail.com, hotmail.com, yahoo.com). */
		domain?: string | null;

		/** The percentage of total emails that went to this domain. */
		emails_pct?: number | null;

		/** The number of emails sent to that specific domain. */
		emails_sent?: number | null;

		/** The number of opens for a domain. */
		opens?: number | null;

		/** The percentage of total opens from this domain. */
		opens_pct?: number | null;

		/** The total number of unsubscribes for a domain. */
		unsubs?: number | null;

		/** The percentage of total unsubscribes from this domain. */
		unsubs_pct?: number | null;
	}
	export interface GetReportsIdDomainPerformanceReturnDomainsFormProperties {

		/** The number of bounces at a domain. */
		bounces: FormControl<number | null | undefined>,

		/** The percentage of total bounces from this domain. */
		bounces_pct: FormControl<number | null | undefined>,

		/** The number of clicks for a domain. */
		clicks: FormControl<number | null | undefined>,

		/** The percentage of total clicks from this domain. */
		clicks_pct: FormControl<number | null | undefined>,

		/** The number of successful deliveries for a domain. */
		delivered: FormControl<number | null | undefined>,

		/** The name of the domain (gmail.com, hotmail.com, yahoo.com). */
		domain: FormControl<string | null | undefined>,

		/** The percentage of total emails that went to this domain. */
		emails_pct: FormControl<number | null | undefined>,

		/** The number of emails sent to that specific domain. */
		emails_sent: FormControl<number | null | undefined>,

		/** The number of opens for a domain. */
		opens: FormControl<number | null | undefined>,

		/** The percentage of total opens from this domain. */
		opens_pct: FormControl<number | null | undefined>,

		/** The total number of unsubscribes for a domain. */
		unsubs: FormControl<number | null | undefined>,

		/** The percentage of total unsubscribes from this domain. */
		unsubs_pct: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdDomainPerformanceReturnDomainsFormGroup() {
		return new FormGroup<GetReportsIdDomainPerformanceReturnDomainsFormProperties>({
			bounces: new FormControl<number | null | undefined>(undefined),
			bounces_pct: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			clicks_pct: new FormControl<number | null | undefined>(undefined),
			delivered: new FormControl<number | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			emails_pct: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			opens_pct: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
			unsubs_pct: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEcommerceProductActivityReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdEcommerceProductActivityReturn_links?: Array<GetReportsIdEcommerceProductActivityReturn_links>;
		GetReportsIdEcommerceProductActivityReturnProducts?: Array<GetReportsIdEcommerceProductActivityReturnProducts>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdEcommerceProductActivityReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdEcommerceProductActivityReturnFormGroup() {
		return new FormGroup<GetReportsIdEcommerceProductActivityReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEcommerceProductActivityReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdEcommerceProductActivityReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEcommerceProductActivityReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdEcommerceProductActivityReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEcommerceProductActivityReturnProducts {
		currency_code?: string | null;
		image_url?: string | null;
		recommendation_purchased?: number | null;
		recommendation_total?: number | null;
		sku?: string | null;
		title?: string | null;
		total_purchased?: number | null;
		total_revenue?: number | null;
	}
	export interface GetReportsIdEcommerceProductActivityReturnProductsFormProperties {
		currency_code: FormControl<string | null | undefined>,
		image_url: FormControl<string | null | undefined>,
		recommendation_purchased: FormControl<number | null | undefined>,
		recommendation_total: FormControl<number | null | undefined>,
		sku: FormControl<string | null | undefined>,
		title: FormControl<string | null | undefined>,
		total_purchased: FormControl<number | null | undefined>,
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdEcommerceProductActivityReturnProductsFormGroup() {
		return new FormGroup<GetReportsIdEcommerceProductActivityReturnProductsFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			recommendation_purchased: new FormControl<number | null | undefined>(undefined),
			recommendation_total: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			total_purchased: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdEepurlReturn_links?: Array<GetReportsIdEepurlReturn_links>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** A summary of the click-throughs on the campaign's URL. */
		clicks?: GetReportsIdEepurlReturnClicks;

		/** The shortened link used for tracking. */
		eepurl?: string | null;

		/** A summary of the top referrers for the campaign. */
		GetReportsIdEepurlReturnReferrers?: Array<GetReportsIdEepurlReturnReferrers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** A summary of Twitter activity for a campaign. */
		twitter?: GetReportsIdEepurlReturnTwitter;
	}
	export interface GetReportsIdEepurlReturnFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The shortened link used for tracking. */
		eepurl: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturnFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			eepurl: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdEepurlReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturnClicks {

		/** The total number of clicks to the campaign's URL. */
		clicks?: number | null;

		/** The timestamp for the first click to the URL. */
		first_click?: Date | null;

		/** The timestamp for the last click to the URL. */
		last_click?: Date | null;

		/** A summary of the top click locations. */
		GetReportsIdEepurlReturnClicksLocations?: Array<GetReportsIdEepurlReturnClicksLocations>;
	}
	export interface GetReportsIdEepurlReturnClicksFormProperties {

		/** The total number of clicks to the campaign's URL. */
		clicks: FormControl<number | null | undefined>,

		/** The timestamp for the first click to the URL. */
		first_click: FormControl<Date | null | undefined>,

		/** The timestamp for the last click to the URL. */
		last_click: FormControl<Date | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturnClicksFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturnClicksFormProperties>({
			clicks: new FormControl<number | null | undefined>(undefined),
			first_click: new FormControl<Date | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturnClicksLocations {

		/** The two-digit country code for a recorded click. */
		country?: string | null;

		/** If available, a specific region where the click was recorded. */
		region?: string | null;
	}
	export interface GetReportsIdEepurlReturnClicksLocationsFormProperties {

		/** The two-digit country code for a recorded click. */
		country: FormControl<string | null | undefined>,

		/** If available, a specific region where the click was recorded. */
		region: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturnClicksLocationsFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturnClicksLocationsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturnReferrers {

		/** The number of clicks a single referrer generated. */
		clicks?: number | null;

		/** The timestamp for the first click from this referrer. */
		first_click?: Date | null;

		/** The timestamp for the last click from this referrer. */
		last_click?: Date | null;

		/** A referrer (truncated to 100 bytes). */
		referrer?: string | null;
	}
	export interface GetReportsIdEepurlReturnReferrersFormProperties {

		/** The number of clicks a single referrer generated. */
		clicks: FormControl<number | null | undefined>,

		/** The timestamp for the first click from this referrer. */
		first_click: FormControl<Date | null | undefined>,

		/** The timestamp for the last click from this referrer. */
		last_click: FormControl<Date | null | undefined>,

		/** A referrer (truncated to 100 bytes). */
		referrer: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturnReferrersFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturnReferrersFormProperties>({
			clicks: new FormControl<number | null | undefined>(undefined),
			first_click: new FormControl<Date | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			referrer: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturnTwitter {

		/** The day and time of the first recorded tweet with a link to the campaign. */
		first_tweet?: string | null;

		/** The day and time of the last recorded tweet with a link to the campaign. */
		last_tweet?: string | null;

		/** The number of retweets that include a link to the campaign. */
		retweets?: number | null;

		/** A summary of tweets that include a link to the campaign. */
		GetReportsIdEepurlReturnTwitterStatuses?: Array<GetReportsIdEepurlReturnTwitterStatuses>;

		/** The number of tweets including a link to the campaign. */
		tweets?: number | null;
	}
	export interface GetReportsIdEepurlReturnTwitterFormProperties {

		/** The day and time of the first recorded tweet with a link to the campaign. */
		first_tweet: FormControl<string | null | undefined>,

		/** The day and time of the last recorded tweet with a link to the campaign. */
		last_tweet: FormControl<string | null | undefined>,

		/** The number of retweets that include a link to the campaign. */
		retweets: FormControl<number | null | undefined>,

		/** The number of tweets including a link to the campaign. */
		tweets: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturnTwitterFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturnTwitterFormProperties>({
			first_tweet: new FormControl<string | null | undefined>(undefined),
			last_tweet: new FormControl<string | null | undefined>(undefined),
			retweets: new FormControl<number | null | undefined>(undefined),
			tweets: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEepurlReturnTwitterStatuses {

		/** A timestamp for the tweet. */
		datetime?: Date | null;

		/** A 'true' or 'false' status of whether the tweet is a retweet. */
		is_retweet?: boolean | null;

		/** The Twitter handle for the author of the tweet. */
		screen_name?: string | null;

		/** The body of the tweet. */
		status?: string | null;

		/** The individual id for the tweet. */
		status_id?: string | null;
	}
	export interface GetReportsIdEepurlReturnTwitterStatusesFormProperties {

		/** A timestamp for the tweet. */
		datetime: FormControl<Date | null | undefined>,

		/** A 'true' or 'false' status of whether the tweet is a retweet. */
		is_retweet: FormControl<boolean | null | undefined>,

		/** The Twitter handle for the author of the tweet. */
		screen_name: FormControl<string | null | undefined>,

		/** The body of the tweet. */
		status: FormControl<string | null | undefined>,

		/** The individual id for the tweet. */
		status_id: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEepurlReturnTwitterStatusesFormGroup() {
		return new FormGroup<GetReportsIdEepurlReturnTwitterStatusesFormProperties>({
			datetime: new FormControl<Date | null | undefined>(undefined),
			is_retweet: new FormControl<boolean | null | undefined>(undefined),
			screen_name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			status_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdEmailActivityReturn_links?: Array<GetReportsIdEmailActivityReturn_links>;

		/** The unique id for the sent campaign. */
		campaign_id?: string | null;

		/** An array of members that were sent the campaign. */
		GetReportsIdEmailActivityReturnEmails?: Array<GetReportsIdEmailActivityReturnEmails>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdEmailActivityReturnFormProperties {

		/** The unique id for the sent campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityReturnFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdEmailActivityReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityReturnEmails {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdEmailActivityReturnEmails_links?: Array<GetReportsIdEmailActivityReturnEmails_links>;

		/** An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign. */
		GetReportsIdEmailActivityReturnEmailsActivity?: Array<GetReportsIdEmailActivityReturnEmailsActivity>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;
	}
	export interface GetReportsIdEmailActivityReturnEmailsFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityReturnEmailsFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityReturnEmailsFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityReturnEmails_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdEmailActivityReturnEmails_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityReturnEmails_linksFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityReturnEmails_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityReturnEmailsActivity {

		/** One of the following actions: 'open', 'click', or 'bounce' */
		action?: string | null;

		/** The IP address recorded for the action. */
		ip?: string | null;

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp?: Date | null;

		/** If the action is a 'bounce', the type of bounce received: 'hard', 'soft'. */
		type?: string | null;

		/** If the action is a 'click', the URL on which the member clicked. */
		url?: string | null;
	}
	export interface GetReportsIdEmailActivityReturnEmailsActivityFormProperties {

		/** One of the following actions: 'open', 'click', or 'bounce' */
		action: FormControl<string | null | undefined>,

		/** The IP address recorded for the action. */
		ip: FormControl<string | null | undefined>,

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** If the action is a 'bounce', the type of bounce received: 'hard', 'soft'. */
		type: FormControl<string | null | undefined>,

		/** If the action is a 'click', the URL on which the member clicked. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityReturnEmailsActivityFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityReturnEmailsActivityFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			ip: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdEmailActivityIdReturn_links?: Array<GetReportsIdEmailActivityIdReturn_links>;

		/** An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign. */
		GetReportsIdEmailActivityIdReturnActivity?: Array<GetReportsIdEmailActivityIdReturnActivity>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;
	}
	export interface GetReportsIdEmailActivityIdReturnFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityIdReturnFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdEmailActivityIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdEmailActivityIdReturnActivity {

		/** One of the following actions: 'open', 'click', or 'bounce' */
		action?: string | null;

		/** The IP address recorded for the action. */
		ip?: string | null;

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp?: Date | null;

		/** If the action is a 'bounce', the type of bounce received: 'hard', 'soft'. */
		type?: string | null;

		/** If the action is a 'click', the URL on which the member clicked. */
		url?: string | null;
	}
	export interface GetReportsIdEmailActivityIdReturnActivityFormProperties {

		/** One of the following actions: 'open', 'click', or 'bounce' */
		action: FormControl<string | null | undefined>,

		/** The IP address recorded for the action. */
		ip: FormControl<string | null | undefined>,

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** If the action is a 'bounce', the type of bounce received: 'hard', 'soft'. */
		type: FormControl<string | null | undefined>,

		/** If the action is a 'click', the URL on which the member clicked. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdEmailActivityIdReturnActivityFormGroup() {
		return new FormGroup<GetReportsIdEmailActivityIdReturnActivityFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			ip: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdLocationsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdLocationsReturn_links?: Array<GetReportsIdLocationsReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** An array of objects, each representing a top location for opens. */
		GetReportsIdLocationsReturnLocations?: Array<GetReportsIdLocationsReturnLocations>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdLocationsReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdLocationsReturnFormGroup() {
		return new FormGroup<GetReportsIdLocationsReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdLocationsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdLocationsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdLocationsReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdLocationsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdLocationsReturnLocations {

		/** The ISO 3166 2 digit country code. */
		country_code?: string | null;

		/** The number of unique campaign opens for a region. */
		opens?: number | null;

		/** An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region. */
		region?: string | null;

		/** The name of the region, if we have one. For blank "region" values, this will be "Rest of Country". */
		region_name?: string | null;
	}
	export interface GetReportsIdLocationsReturnLocationsFormProperties {

		/** The ISO 3166 2 digit country code. */
		country_code: FormControl<string | null | undefined>,

		/** The number of unique campaign opens for a region. */
		opens: FormControl<number | null | undefined>,

		/** An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region. */
		region: FormControl<string | null | undefined>,

		/** The name of the region, if we have one. For blank "region" values, this will be "Rest of Country". */
		region_name: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdLocationsReturnLocationsFormGroup() {
		return new FormGroup<GetReportsIdLocationsReturnLocationsFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			region_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetReportsIdOpenDetailsSort_field { opens_count = 0 }

	export interface GetReportsIdOpenDetailsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdOpenDetailsReturn_links?: Array<GetReportsIdOpenDetailsReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** An array of objects, each representing a list member who opened a campaign email. Each members object will contain information about the number of total opens by a single member, as well as timestamps for each open event. */
		GetReportsIdOpenDetailsReturnMembers?: Array<GetReportsIdOpenDetailsReturnMembers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** The total number of opens matching the query regardless of pagination. */
		total_opens?: number | null;
	}
	export interface GetReportsIdOpenDetailsReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,

		/** The total number of opens matching the query regardless of pagination. */
		total_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsReturnFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
			total_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdOpenDetailsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsReturnMembers {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdOpenDetailsReturnMembers_links?: Array<GetReportsIdOpenDetailsReturnMembers_links>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event. */
		GetReportsIdOpenDetailsReturnMembersOpens?: Array<GetReportsIdOpenDetailsReturnMembersOpens>;

		/** The total number of times the this campaign was opened by the list member. */
		opens_count?: number | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdOpenDetailsReturnMembersFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The total number of times the this campaign was opened by the list member. */
		opens_count: FormControl<number | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsReturnMembersFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsReturnMembersFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			contact_status: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			opens_count: new FormControl<number | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsReturnMembers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdOpenDetailsReturnMembers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsReturnMembers_linksFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsReturnMembers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsReturnMembersOpens {

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp?: Date | null;
	}
	export interface GetReportsIdOpenDetailsReturnMembersOpensFormProperties {

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsReturnMembersOpensFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsReturnMembersOpensFormProperties>({
			timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsIdMembersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdOpenDetailsIdMembersIdReturn_links?: Array<GetReportsIdOpenDetailsIdMembersIdReturn_links>;

		/** The unique id for the campaign. */
		campaign_id?: string | null;

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The unique id for the list. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event. */
		GetReportsIdOpenDetailsIdMembersIdReturnOpens?: Array<GetReportsIdOpenDetailsIdMembersIdReturnOpens>;

		/** The total number of times the this campaign was opened by the list member. */
		opens_count?: number | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdOpenDetailsIdMembersIdReturnFormProperties {

		/** The unique id for the campaign. */
		campaign_id: FormControl<string | null | undefined>,

		/** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
		contact_status: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The unique id for the list. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The total number of times the this campaign was opened by the list member. */
		opens_count: FormControl<number | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsIdMembersIdReturnFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsIdMembersIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			contact_status: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			opens_count: new FormControl<number | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsIdMembersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdOpenDetailsIdMembersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsIdMembersIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsIdMembersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdOpenDetailsIdMembersIdReturnOpens {

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp?: Date | null;
	}
	export interface GetReportsIdOpenDetailsIdMembersIdReturnOpensFormProperties {

		/** The date and time recorded for the action in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateGetReportsIdOpenDetailsIdMembersIdReturnOpensFormGroup() {
		return new FormGroup<GetReportsIdOpenDetailsIdMembersIdReturnOpensFormProperties>({
			timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSentToReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdSentToReturn_links?: Array<GetReportsIdSentToReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** An array of objects, each representing a campaign recipient. */
		GetReportsIdSentToReturnSent_to?: Array<GetReportsIdSentToReturnSent_to>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdSentToReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSentToReturnFormGroup() {
		return new FormGroup<GetReportsIdSentToReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSentToReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdSentToReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdSentToReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdSentToReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSentToReturnSent_to {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdSentToReturnSent_to_links?: Array<GetReportsIdSentToReturnSent_to_links>;

		/** For A/B Split Campaigns, the group the member was apart of. */
		absplit_group?: GetReportsIdSentToReturnSent_toAbsplit_group | null;

		/** The campaign id. */
		campaign_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset?: number | null;

		/** The date and time of the last open for this member in ISO 8601 format. */
		last_open?: Date | null;

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The number of times a campaign was opened by this member. */
		open_count?: number | null;

		/** The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/). */
		status?: GetReportsIdSentToReturnSent_toStatus | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdSentToReturnSent_toFormProperties {

		/** For A/B Split Campaigns, the group the member was apart of. */
		absplit_group: FormControl<GetReportsIdSentToReturnSent_toAbsplit_group | null | undefined>,

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset: FormControl<number | null | undefined>,

		/** The date and time of the last open for this member in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The number of times a campaign was opened by this member. */
		open_count: FormControl<number | null | undefined>,

		/** The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/). */
		status: FormControl<GetReportsIdSentToReturnSent_toStatus | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdSentToReturnSent_toFormGroup() {
		return new FormGroup<GetReportsIdSentToReturnSent_toFormProperties>({
			absplit_group: new FormControl<GetReportsIdSentToReturnSent_toAbsplit_group | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			gmt_offset: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			open_count: new FormControl<number | null | undefined>(undefined),
			status: new FormControl<GetReportsIdSentToReturnSent_toStatus | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSentToReturnSent_to_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdSentToReturnSent_to_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdSentToReturnSent_to_linksFormGroup() {
		return new FormGroup<GetReportsIdSentToReturnSent_to_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetReportsIdSentToReturnSent_toAbsplit_group { a = 0, b = 1, winner = 2 }

	export enum GetReportsIdSentToReturnSent_toStatus { sent = 0, hard = 1, soft = 2 }

	export interface GetReportsIdSentToIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdSentToIdReturn_links?: Array<GetReportsIdSentToIdReturn_links>;

		/** For A/B Split Campaigns, the group the member was apart of. */
		absplit_group?: GetReportsIdSentToReturnSent_toAbsplit_group | null;

		/** The campaign id. */
		campaign_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset?: number | null;

		/** The date and time of the last open for this member in ISO 8601 format. */
		last_open?: Date | null;

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The number of times a campaign was opened by this member. */
		open_count?: number | null;

		/** The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/). */
		status?: GetReportsIdSentToReturnSent_toStatus | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdSentToIdReturnFormProperties {

		/** For A/B Split Campaigns, the group the member was apart of. */
		absplit_group: FormControl<GetReportsIdSentToReturnSent_toAbsplit_group | null | undefined>,

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset: FormControl<number | null | undefined>,

		/** The date and time of the last open for this member in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The number of times a campaign was opened by this member. */
		open_count: FormControl<number | null | undefined>,

		/** The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/). */
		status: FormControl<GetReportsIdSentToReturnSent_toStatus | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdSentToIdReturnFormGroup() {
		return new FormGroup<GetReportsIdSentToIdReturnFormProperties>({
			absplit_group: new FormControl<GetReportsIdSentToReturnSent_toAbsplit_group | null | undefined>(undefined),
			campaign_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			gmt_offset: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			open_count: new FormControl<number | null | undefined>(undefined),
			status: new FormControl<GetReportsIdSentToReturnSent_toStatus | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSentToIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdSentToIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdSentToIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdSentToIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdSubReportsIdReturn_links?: Array<GetReportsIdSubReportsIdReturn_links>;

		/** Unique identifier of the parent campaign */
		campaign_id?: string | null;

		/** An array of objects, each representing a report resource. */
		GetReportsIdSubReportsIdReturnReports?: Array<GetReportsIdSubReportsIdReturnReports>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnFormProperties {

		/** Unique identifier of the parent campaign */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdSubReportsIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReports {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdSubReportsIdReturnReports_links?: Array<GetReportsIdSubReportsIdReturnReports_links>;

		/** General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns. */
		ab_split?: GetReportsIdSubReportsIdReturnReportsAb_split;

		/** The number of abuse reports generated for this campaign. */
		abuse_reports?: number | null;

		/** An object describing the bounce summary for the campaign. */
		bounces?: GetReportsIdSubReportsIdReturnReportsBounces;

		/** The title of the campaign. */
		campaign_title?: string | null;

		/** An object describing the click activity for the campaign. */
		clicks?: GetReportsIdSubReportsIdReturnReportsClicks;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: GetReportsIdSubReportsIdReturnReportsDelivery_status;

		/** E-Commerce stats for a campaign. */
		ecommerce?: GetReportsIdSubReportsIdReturnReportsEcommerce;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** An object describing campaign engagement on Facebook. */
		facebook_likes?: GetReportsIdSubReportsIdReturnReportsFacebook_likes;

		/** An object describing the forwards and forward activity for the campaign. */
		forwards?: GetReportsIdSubReportsIdReturnReportsForwards;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The average campaign statistics for your industry. */
		industry_stats?: GetReportsIdSubReportsIdReturnReportsIndustry_stats;

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list. */
		list_stats?: GetReportsIdSubReportsIdReturnReportsList_stats;

		/** An object describing the open activity for the campaign. */
		opens?: GetReportsIdSubReportsIdReturnReportsOpens;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
		rss_last_send?: Date | null;

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time?: Date | null;

		/** The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/). */
		share_report?: GetReportsIdSubReportsIdReturnReportsShare_report;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** An hourly breakdown of the performance of the campaign over the first 24 hours. */
		GetReportsIdSubReportsIdReturnReportsTimeseries?: Array<GetReportsIdSubReportsIdReturnReportsTimeseries>;

		/** An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp. */
		GetReportsIdSubReportsIdReturnReportsTimewarp?: Array<GetReportsIdSubReportsIdReturnReportsTimewarp>;

		/** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
		type?: string | null;

		/** The total number of unsubscribed members for this campaign. */
		unsubscribed?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsFormProperties {

		/** The number of abuse reports generated for this campaign. */
		abuse_reports: FormControl<number | null | undefined>,

		/** The title of the campaign. */
		campaign_title: FormControl<string | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
		rss_last_send: FormControl<Date | null | undefined>,

		/** The date and time a campaign was sent in ISO 8601 format. */
		send_time: FormControl<Date | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
		type: FormControl<string | null | undefined>,

		/** The total number of unsubscribed members for this campaign. */
		unsubscribed: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			campaign_title: new FormControl<string | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			rss_last_send: new FormControl<Date | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unsubscribed: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReports_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdSubReportsIdReturnReports_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReports_linksFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReports_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsAb_split {

		/** Stats for Campaign A. */
		a?: GetReportsIdSubReportsIdReturnReportsAb_splitA;

		/** Stats for Campaign B. */
		b?: GetReportsIdSubReportsIdReturnReportsAb_splitB;
	}
	export interface GetReportsIdSubReportsIdReturnReportsAb_splitFormProperties {
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsAb_splitFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsAb_splitFormProperties>({
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsAb_splitA {

		/** Abuse reports for Campaign A. */
		abuse_reports?: number | null;

		/** Bounces for Campaign A. */
		bounces?: number | null;

		/** Forwards for Campaign A. */
		forwards?: number | null;

		/** Opens from forwards for Campaign A. */
		forwards_opens?: number | null;

		/** The last open for Campaign A. */
		last_open?: string | null;

		/** Opens for Campaign A. */
		opens?: number | null;

		/** Recipient Clicks for Campaign A. */
		recipient_clicks?: number | null;

		/** Unique opens for Campaign A. */
		unique_opens?: number | null;

		/** Unsubscribes for Campaign A. */
		unsubs?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsAb_splitAFormProperties {

		/** Abuse reports for Campaign A. */
		abuse_reports: FormControl<number | null | undefined>,

		/** Bounces for Campaign A. */
		bounces: FormControl<number | null | undefined>,

		/** Forwards for Campaign A. */
		forwards: FormControl<number | null | undefined>,

		/** Opens from forwards for Campaign A. */
		forwards_opens: FormControl<number | null | undefined>,

		/** The last open for Campaign A. */
		last_open: FormControl<string | null | undefined>,

		/** Opens for Campaign A. */
		opens: FormControl<number | null | undefined>,

		/** Recipient Clicks for Campaign A. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** Unique opens for Campaign A. */
		unique_opens: FormControl<number | null | undefined>,

		/** Unsubscribes for Campaign A. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsAb_splitAFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsAb_splitAFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			bounces: new FormControl<number | null | undefined>(undefined),
			forwards: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsAb_splitB {

		/** Abuse reports for Campaign B. */
		abuse_reports?: number | null;

		/** Bounces for Campaign B. */
		bounces?: number | null;

		/** Forwards for Campaign B. */
		forwards?: number | null;

		/** Opens for forwards from Campaign B. */
		forwards_opens?: number | null;

		/** The last open for Campaign B. */
		last_open?: string | null;

		/** Opens for Campaign B. */
		opens?: number | null;

		/** Recipients clicks for Campaign B. */
		recipient_clicks?: number | null;

		/** Unique opens for Campaign B. */
		unique_opens?: number | null;

		/** Unsubscribes for Campaign B. */
		unsubs?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsAb_splitBFormProperties {

		/** Abuse reports for Campaign B. */
		abuse_reports: FormControl<number | null | undefined>,

		/** Bounces for Campaign B. */
		bounces: FormControl<number | null | undefined>,

		/** Forwards for Campaign B. */
		forwards: FormControl<number | null | undefined>,

		/** Opens for forwards from Campaign B. */
		forwards_opens: FormControl<number | null | undefined>,

		/** The last open for Campaign B. */
		last_open: FormControl<string | null | undefined>,

		/** Opens for Campaign B. */
		opens: FormControl<number | null | undefined>,

		/** Recipients clicks for Campaign B. */
		recipient_clicks: FormControl<number | null | undefined>,

		/** Unique opens for Campaign B. */
		unique_opens: FormControl<number | null | undefined>,

		/** Unsubscribes for Campaign B. */
		unsubs: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsAb_splitBFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsAb_splitBFormProperties>({
			abuse_reports: new FormControl<number | null | undefined>(undefined),
			bounces: new FormControl<number | null | undefined>(undefined),
			forwards: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
			last_open: new FormControl<string | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			recipient_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
			unsubs: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsBounces {

		/** The total number of hard bounced email addresses. */
		hard_bounces?: number | null;

		/** The total number of soft bounced email addresses. */
		soft_bounces?: number | null;

		/** The total number of addresses that were syntax-related bounces. */
		syntax_errors?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsBouncesFormProperties {

		/** The total number of hard bounced email addresses. */
		hard_bounces: FormControl<number | null | undefined>,

		/** The total number of soft bounced email addresses. */
		soft_bounces: FormControl<number | null | undefined>,

		/** The total number of addresses that were syntax-related bounces. */
		syntax_errors: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsBouncesFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsBouncesFormProperties>({
			hard_bounces: new FormControl<number | null | undefined>(undefined),
			soft_bounces: new FormControl<number | null | undefined>(undefined),
			syntax_errors: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsClicks {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for the campaign. */
		clicks_total?: number | null;

		/** The date and time of the last recorded click for the campaign in ISO 8601 format. */
		last_click?: Date | null;

		/** The total number of unique clicks for links across a campaign. */
		unique_clicks?: number | null;

		/** The total number of subscribers who clicked on a campaign. */
		unique_subscriber_clicks?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsClicksFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for the campaign. */
		clicks_total: FormControl<number | null | undefined>,

		/** The date and time of the last recorded click for the campaign in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The total number of unique clicks for links across a campaign. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The total number of subscribers who clicked on a campaign. */
		unique_subscriber_clicks: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsClicksFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsClicksFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks_total: new FormControl<number | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			unique_subscriber_clicks: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsDelivery_statusFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsEcommerce {
		currency_code?: string | null;

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsEcommerceFormProperties {
		currency_code: FormControl<string | null | undefined>,

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsEcommerceFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsEcommerceFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsFacebook_likes {

		/** The number of Facebook likes for the campaign. */
		facebook_likes?: number | null;

		/** The number of recipients who liked the campaign on Facebook. */
		recipient_likes?: number | null;

		/** The number of unique likes. */
		unique_likes?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsFacebook_likesFormProperties {

		/** The number of Facebook likes for the campaign. */
		facebook_likes: FormControl<number | null | undefined>,

		/** The number of recipients who liked the campaign on Facebook. */
		recipient_likes: FormControl<number | null | undefined>,

		/** The number of unique likes. */
		unique_likes: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsFacebook_likesFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsFacebook_likesFormProperties>({
			facebook_likes: new FormControl<number | null | undefined>(undefined),
			recipient_likes: new FormControl<number | null | undefined>(undefined),
			unique_likes: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsForwards {

		/** How many times the campaign has been forwarded. */
		forwards_count?: number | null;

		/** How many times the forwarded campaign has been opened. */
		forwards_opens?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsForwardsFormProperties {

		/** How many times the campaign has been forwarded. */
		forwards_count: FormControl<number | null | undefined>,

		/** How many times the forwarded campaign has been opened. */
		forwards_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsForwardsFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsForwardsFormProperties>({
			forwards_count: new FormControl<number | null | undefined>(undefined),
			forwards_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsIndustry_stats {

		/** The industry abuse rate. */
		abuse_rate?: number | null;

		/** The industry bounce rate. */
		bounce_rate?: number | null;

		/** The industry click rate. */
		click_rate?: number | null;

		/** The industry open rate. */
		open_rate?: number | null;

		/** The type of business industry associated with your account. For example: retail, education, etc. */
		type?: string | null;

		/** The industry unopened rate. */
		unopen_rate?: number | null;

		/** The industry unsubscribe rate. */
		unsub_rate?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsIndustry_statsFormProperties {

		/** The industry abuse rate. */
		abuse_rate: FormControl<number | null | undefined>,

		/** The industry bounce rate. */
		bounce_rate: FormControl<number | null | undefined>,

		/** The industry click rate. */
		click_rate: FormControl<number | null | undefined>,

		/** The industry open rate. */
		open_rate: FormControl<number | null | undefined>,

		/** The type of business industry associated with your account. For example: retail, education, etc. */
		type: FormControl<string | null | undefined>,

		/** The industry unopened rate. */
		unopen_rate: FormControl<number | null | undefined>,

		/** The industry unsubscribe rate. */
		unsub_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsIndustry_statsFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsIndustry_statsFormProperties>({
			abuse_rate: new FormControl<number | null | undefined>(undefined),
			bounce_rate: new FormControl<number | null | undefined>(undefined),
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unopen_rate: new FormControl<number | null | undefined>(undefined),
			unsub_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsList_stats {

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		click_rate?: number | null;

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		open_rate?: number | null;

		/** The average number of subscriptions per month for the list. */
		sub_rate?: number | null;

		/** The average number of unsubscriptions per month for the list. */
		unsub_rate?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsList_statsFormProperties {

		/** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		click_rate: FormControl<number | null | undefined>,

		/** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list. */
		open_rate: FormControl<number | null | undefined>,

		/** The average number of subscriptions per month for the list. */
		sub_rate: FormControl<number | null | undefined>,

		/** The average number of unsubscriptions per month for the list. */
		unsub_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsList_statsFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsList_statsFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			sub_rate: new FormControl<number | null | undefined>(undefined),
			unsub_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsOpens {

		/** The date and time of the last recorded open in ISO 8601 format. */
		last_open?: Date | null;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens_total?: number | null;

		/** The total number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsOpensFormProperties {

		/** The date and time of the last recorded open in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens_total: FormControl<number | null | undefined>,

		/** The total number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsOpensFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsOpensFormProperties>({
			last_open: new FormControl<Date | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens_total: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsShare_report {

		/** If password protected, the password for the VIP report. */
		share_password?: string | null;

		/** The URL for the VIP report. */
		share_url?: string | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsShare_reportFormProperties {

		/** If password protected, the password for the VIP report. */
		share_password: FormControl<string | null | undefined>,

		/** The URL for the VIP report. */
		share_url: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsShare_reportFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsShare_reportFormProperties>({
			share_password: new FormControl<string | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsTimeseries {

		/** The number of emails sent in the timeseries. */
		emails_sent?: number | null;

		/** The number of clicks in the timeseries. */
		recipients_clicks?: number | null;

		/** The date and time for the series in ISO 8601 format. */
		timestamp?: Date | null;

		/** The number of unique opens in the timeseries. */
		unique_opens?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsTimeseriesFormProperties {

		/** The number of emails sent in the timeseries. */
		emails_sent: FormControl<number | null | undefined>,

		/** The number of clicks in the timeseries. */
		recipients_clicks: FormControl<number | null | undefined>,

		/** The date and time for the series in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** The number of unique opens in the timeseries. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsTimeseriesFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsTimeseriesFormProperties>({
			emails_sent: new FormControl<number | null | undefined>(undefined),
			recipients_clicks: new FormControl<number | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdSubReportsIdReturnReportsTimewarp {

		/** The number of bounces. */
		bounces?: number | null;

		/** The number of clicks. */
		clicks?: number | null;

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset?: number | null;

		/** The date and time of the last click in ISO 8601 format. */
		last_click?: Date | null;

		/** The date and time of the last open in ISO 8601 format. */
		last_open?: Date | null;

		/** The number of opens. */
		opens?: number | null;

		/** The number of unique clicks. */
		unique_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetReportsIdSubReportsIdReturnReportsTimewarpFormProperties {

		/** The number of bounces. */
		bounces: FormControl<number | null | undefined>,

		/** The number of clicks. */
		clicks: FormControl<number | null | undefined>,

		/** For campaigns sent with timewarp, the time zone group the member is apart of. */
		gmt_offset: FormControl<number | null | undefined>,

		/** The date and time of the last click in ISO 8601 format. */
		last_click: FormControl<Date | null | undefined>,

		/** The date and time of the last open in ISO 8601 format. */
		last_open: FormControl<Date | null | undefined>,

		/** The number of opens. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		unique_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdSubReportsIdReturnReportsTimewarpFormGroup() {
		return new FormGroup<GetReportsIdSubReportsIdReturnReportsTimewarpFormProperties>({
			bounces: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			gmt_offset: new FormControl<number | null | undefined>(undefined),
			last_click: new FormControl<Date | null | undefined>(undefined),
			last_open: new FormControl<Date | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			unique_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdUnsubscribedReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdUnsubscribedReturn_links?: Array<GetReportsIdUnsubscribedReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;

		/** An array of objects, each representing a member who unsubscribed from a campaign. */
		GetReportsIdUnsubscribedReturnUnsubscribes?: Array<GetReportsIdUnsubscribedReturnUnsubscribes>;
	}
	export interface GetReportsIdUnsubscribedReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetReportsIdUnsubscribedReturnFormGroup() {
		return new FormGroup<GetReportsIdUnsubscribedReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdUnsubscribedReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdUnsubscribedReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdUnsubscribedReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdUnsubscribedReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdUnsubscribedReturnUnsubscribes {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdUnsubscribedReturnUnsubscribes_links?: Array<GetReportsIdUnsubscribedReturnUnsubscribes_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** If available, the reason listed by the member for unsubscribing. */
		reason?: string | null;

		/** The date and time the member opted-out in ISO 8601 format. */
		timestamp?: Date | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdUnsubscribedReturnUnsubscribesFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** If available, the reason listed by the member for unsubscribing. */
		reason: FormControl<string | null | undefined>,

		/** The date and time the member opted-out in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdUnsubscribedReturnUnsubscribesFormGroup() {
		return new FormGroup<GetReportsIdUnsubscribedReturnUnsubscribesFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			reason: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdUnsubscribedReturnUnsubscribes_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdUnsubscribedReturnUnsubscribes_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdUnsubscribedReturnUnsubscribes_linksFormGroup() {
		return new FormGroup<GetReportsIdUnsubscribedReturnUnsubscribes_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdUnsubscribedIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetReportsIdUnsubscribedIdReturn_links?: Array<GetReportsIdUnsubscribedIdReturn_links>;

		/** The campaign id. */
		campaign_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id?: string | null;

		/** The list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** If available, the reason listed by the member for unsubscribing. */
		reason?: string | null;

		/** The date and time the member opted-out in ISO 8601 format. */
		timestamp?: Date | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;
	}
	export interface GetReportsIdUnsubscribedIdReturnFormProperties {

		/** The campaign id. */
		campaign_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		email_id: FormControl<string | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** If available, the reason listed by the member for unsubscribing. */
		reason: FormControl<string | null | undefined>,

		/** The date and time the member opted-out in ISO 8601 format. */
		timestamp: FormControl<Date | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,
	}
	export function CreateGetReportsIdUnsubscribedIdReturnFormGroup() {
		return new FormGroup<GetReportsIdUnsubscribedIdReturnFormProperties>({
			campaign_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_id: new FormControl<string | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			reason: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetReportsIdUnsubscribedIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetReportsIdUnsubscribedIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetReportsIdUnsubscribedIdReturn_linksFormGroup() {
		return new FormGroup<GetReportsIdUnsubscribedIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetSearchCampaignsReturn_links?: Array<GetSearchCampaignsReturn_links>;

		/** An array of matching campaigns and snippets. */
		GetSearchCampaignsReturnResults?: Array<GetSearchCampaignsReturnResults>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetSearchCampaignsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetSearchCampaignsReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturn_linksFormGroup() {
		return new FormGroup<GetSearchCampaignsReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResults {

		/** A summary of an individual campaign's settings and content. */
		campaign?: GetSearchCampaignsReturnResultsCampaign;
		snippet?: string | null;
	}
	export interface GetSearchCampaignsReturnResultsFormProperties {
		snippet: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsFormProperties>({
			snippet: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaign {

		/** A list of link types and descriptions for the API schema documents. */
		GetSearchCampaignsReturnResultsCampaign_links?: Array<GetSearchCampaignsReturnResultsCampaign_links>;

		/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
		ab_split_opts?: GetSearchCampaignsReturnResultsCampaignAb_split_opts;

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url?: string | null;

		/** How the campaign's content is put together. */
		content_type?: GetCampaignsReturnCampaignsContent_type | null;

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time?: Date | null;

		/** Updates on campaigns in the process of sending. */
		delivery_status?: GetSearchCampaignsReturnResultsCampaignDelivery_status;

		/** The total number of emails sent for this campaign. */
		emails_sent?: number | null;

		/** A string that uniquely identifies this campaign. */
		id?: string | null;

		/** The original link to the campaign's archive version. */
		long_archive_url?: string | null;

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh?: boolean | null;

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id?: string | null;

		/** List settings for the campaign. */
		recipients?: GetSearchCampaignsReturnResultsCampaignRecipients;

		/** For sent campaigns, a summary of opens, clicks, and e-commerce data. */
		report_summary?: GetSearchCampaignsReturnResultsCampaignReport_summary;

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable?: boolean | null;

		/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign. */
		rss_opts?: GetSearchCampaignsReturnResultsCampaignRss_opts;

		/** The date and time a campaign was sent. */
		send_time?: Date | null;

		/** The settings for your campaign, including subject, from name, reply-to address, and more. */
		settings?: GetSearchCampaignsReturnResultsCampaignSettings;

		/** The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/). */
		social_card?: GetSearchCampaignsReturnResultsCampaignSocial_card;

		/** The current status of the campaign. */
		status?: GetCampaignsReturnCampaignsStatus | null;

		/** The tracking options for a campaign. */
		tracking?: GetSearchCampaignsReturnResultsCampaignTracking;

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type?: GetCampaignsType | null;

		/** The settings specific to A/B test campaigns. */
		variate_settings?: GetSearchCampaignsReturnResultsCampaignVariate_settings;

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignFormProperties {

		/** The link to the campaign's archive version in ISO 8601 format. */
		archive_url: FormControl<string | null | undefined>,

		/** How the campaign's content is put together. */
		content_type: FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>,

		/** The date and time the campaign was created in ISO 8601 format. */
		create_time: FormControl<Date | null | undefined>,

		/** The total number of emails sent for this campaign. */
		emails_sent: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this campaign. */
		id: FormControl<string | null | undefined>,

		/** The original link to the campaign's archive version. */
		long_archive_url: FormControl<string | null | undefined>,

		/** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
		needs_block_refresh: FormControl<boolean | null | undefined>,

		/** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
		parent_campaign_id: FormControl<string | null | undefined>,

		/** Determines if the campaign qualifies to be resent to non-openers. */
		resendable: FormControl<boolean | null | undefined>,

		/** The date and time a campaign was sent. */
		send_time: FormControl<Date | null | undefined>,

		/** The current status of the campaign. */
		status: FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>,

		/** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
		type: FormControl<GetCampaignsType | null | undefined>,

		/** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignFormProperties>({
			archive_url: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetCampaignsReturnCampaignsContent_type | null | undefined>(undefined),
			create_time: new FormControl<Date | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			long_archive_url: new FormControl<string | null | undefined>(undefined),
			needs_block_refresh: new FormControl<boolean | null | undefined>(undefined),
			parent_campaign_id: new FormControl<string | null | undefined>(undefined),
			resendable: new FormControl<boolean | null | undefined>(undefined),
			send_time: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsStatus | null | undefined>(undefined),
			type: new FormControl<GetCampaignsType | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaign_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaign_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaign_linksFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaign_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignAb_split_opts {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a?: string | null;

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b?: string | null;

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner?: GetCampaignsReturnCampaignsAb_split_optsPick_winner | null;

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a?: string | null;

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b?: string | null;

		/** The send time for Group A. */
		send_time_a?: Date | null;

		/** The send time for Group B. */
		send_time_b?: Date | null;

		/** The send time for the winning version. */
		send_time_winner?: string | null;

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size?: number | null;

		/** The type of AB split to run. */
		split_test?: GetCampaignsReturnCampaignsAb_split_optsSplit_test | null;

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a?: string | null;

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b?: string | null;

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time?: number | null;

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units?: GetCampaignsReturnCampaignsAb_split_optsWait_units | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignAb_split_optsFormProperties {

		/** For campaigns split on 'From Name', the name for Group A. */
		from_name_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the name for Group B. */
		from_name_b: FormControl<string | null | undefined>,

		/** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
		pick_winner: FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group A. */
		reply_email_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'From Name', the reply-to address for Group B. */
		reply_email_b: FormControl<string | null | undefined>,

		/** The send time for Group A. */
		send_time_a: FormControl<Date | null | undefined>,

		/** The send time for Group B. */
		send_time_b: FormControl<Date | null | undefined>,

		/** The send time for the winning version. */
		send_time_winner: FormControl<string | null | undefined>,

		/**
		 * The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
		 * Minimum: 1
		 * Maximum: 50
		 */
		split_size: FormControl<number | null | undefined>,

		/** The type of AB split to run. */
		split_test: FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group A. */
		subject_a: FormControl<string | null | undefined>,

		/** For campaigns split on 'Subject Line', the subject line for Group B. */
		subject_b: FormControl<string | null | undefined>,

		/** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
		wait_time: FormControl<number | null | undefined>,

		/** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
		wait_units: FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignAb_split_optsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignAb_split_optsFormProperties>({
			from_name_a: new FormControl<string | null | undefined>(undefined),
			from_name_b: new FormControl<string | null | undefined>(undefined),
			pick_winner: new FormControl<GetCampaignsReturnCampaignsAb_split_optsPick_winner | null | undefined>(undefined),
			reply_email_a: new FormControl<string | null | undefined>(undefined),
			reply_email_b: new FormControl<string | null | undefined>(undefined),
			send_time_a: new FormControl<Date | null | undefined>(undefined),
			send_time_b: new FormControl<Date | null | undefined>(undefined),
			send_time_winner: new FormControl<string | null | undefined>(undefined),
			split_size: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			split_test: new FormControl<GetCampaignsReturnCampaignsAb_split_optsSplit_test | null | undefined>(undefined),
			subject_a: new FormControl<string | null | undefined>(undefined),
			subject_b: new FormControl<string | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			wait_units: new FormControl<GetCampaignsReturnCampaignsAb_split_optsWait_units | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignDelivery_status {

		/** Whether a campaign send can be canceled. */
		can_cancel?: boolean | null;

		/** The total number of emails canceled for this campaign. */
		emails_canceled?: number | null;

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent?: number | null;

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled?: boolean | null;

		/** The current state of a campaign delivery. */
		status?: GetCampaignsReturnCampaignsDelivery_statusStatus | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignDelivery_statusFormProperties {

		/** Whether a campaign send can be canceled. */
		can_cancel: FormControl<boolean | null | undefined>,

		/** The total number of emails canceled for this campaign. */
		emails_canceled: FormControl<number | null | undefined>,

		/** The total number of emails confirmed sent for this campaign so far. */
		emails_sent: FormControl<number | null | undefined>,

		/** Whether Campaign Delivery Status is enabled for this account and campaign. */
		enabled: FormControl<boolean | null | undefined>,

		/** The current state of a campaign delivery. */
		status: FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignDelivery_statusFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignDelivery_statusFormProperties>({
			can_cancel: new FormControl<boolean | null | undefined>(undefined),
			emails_canceled: new FormControl<number | null | undefined>(undefined),
			emails_sent: new FormControl<number | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<GetCampaignsReturnCampaignsDelivery_statusStatus | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignRecipients {

		/** The unique list id. */
		list_id?: string | null;

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active?: boolean | null;

		/** The name of the list. */
		list_name?: string | null;

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count?: number | null;

		/** An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options. */
		segment_opts?: GetSearchCampaignsReturnResultsCampaignRecipientsSegment_opts;

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text?: string | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignRecipientsFormProperties {

		/** The unique list id. */
		list_id: FormControl<string | null | undefined>,

		/** The status of the list used, namely if it's deleted or disabled. */
		list_is_active: FormControl<boolean | null | undefined>,

		/** The name of the list. */
		list_name: FormControl<string | null | undefined>,

		/** Count of the recipients on the associated list. Formatted as an integer. */
		recipient_count: FormControl<number | null | undefined>,

		/** A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML. */
		segment_text: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignRecipientsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignRecipientsFormProperties>({
			list_id: new FormControl<string | null | undefined>(undefined),
			list_is_active: new FormControl<boolean | null | undefined>(undefined),
			list_name: new FormControl<string | null | undefined>(undefined),
			recipient_count: new FormControl<number | null | undefined>(undefined),
			segment_text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignRecipientsSegment_opts {

		/** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
		conditions?: Array<string>;

		/** Segment match type. */
		match?: GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null;

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id?: string | null;

		/** The id for an existing saved segment. */
		saved_segment_id?: number | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignRecipientsSegment_optsFormProperties {

		/** Segment match type. */
		match: FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>,

		/** The prebuilt segment id, if a prebuilt segment has been designated for this campaign. */
		prebuilt_segment_id: FormControl<string | null | undefined>,

		/** The id for an existing saved segment. */
		saved_segment_id: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignRecipientsSegment_optsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignRecipientsSegment_optsFormProperties>({
			match: new FormControl<GetAutomationsReturnAutomationsRecipientsSegment_optsMatch | null | undefined>(undefined),
			prebuilt_segment_id: new FormControl<string | null | undefined>(undefined),
			saved_segment_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignReport_summary {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate?: number | null;

		/** The total number of clicks for an campaign. */
		clicks?: number | null;

		/** E-Commerce stats for a campaign. */
		ecommerce?: GetSearchCampaignsReturnResultsCampaignReport_summaryEcommerce;

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate?: number | null;

		/** The total number of opens for a campaign. */
		opens?: number | null;

		/** The number of unique clicks. */
		subscriber_clicks?: number | null;

		/** The number of unique opens. */
		unique_opens?: number | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignReport_summaryFormProperties {

		/** The number of unique clicks divided by the total number of successful deliveries. */
		click_rate: FormControl<number | null | undefined>,

		/** The total number of clicks for an campaign. */
		clicks: FormControl<number | null | undefined>,

		/** The number of unique opens divided by the total number of successful deliveries. */
		open_rate: FormControl<number | null | undefined>,

		/** The total number of opens for a campaign. */
		opens: FormControl<number | null | undefined>,

		/** The number of unique clicks. */
		subscriber_clicks: FormControl<number | null | undefined>,

		/** The number of unique opens. */
		unique_opens: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignReport_summaryFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignReport_summaryFormProperties>({
			click_rate: new FormControl<number | null | undefined>(undefined),
			clicks: new FormControl<number | null | undefined>(undefined),
			open_rate: new FormControl<number | null | undefined>(undefined),
			opens: new FormControl<number | null | undefined>(undefined),
			subscriber_clicks: new FormControl<number | null | undefined>(undefined),
			unique_opens: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignReport_summaryEcommerce {

		/** The total orders for a campaign. */
		total_orders?: number | null;

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue?: number | null;

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent?: number | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignReport_summaryEcommerceFormProperties {

		/** The total orders for a campaign. */
		total_orders: FormControl<number | null | undefined>,

		/** The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals. */
		total_revenue: FormControl<number | null | undefined>,

		/** The total spent for a campaign. Calculated as the sum of all order totals with no deductions. */
		total_spent: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignReport_summaryEcommerceFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignReport_summaryEcommerceFormProperties>({
			total_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
			total_spent: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignRss_opts {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img?: boolean | null;

		/** The URL for the RSS feed. */
		feed_url?: string | null;

		/** The frequency of the RSS Campaign. */
		frequency?: GetCampaignsReturnCampaignsRss_optsFrequency | null;

		/** The date the campaign was last sent. */
		last_sent?: Date | null;

		/** The schedule for sending the RSS Campaign. */
		schedule?: GetSearchCampaignsReturnResultsCampaignRss_optsSchedule;
	}
	export interface GetSearchCampaignsReturnResultsCampaignRss_optsFormProperties {

		/** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
		constrain_rss_img: FormControl<boolean | null | undefined>,

		/** The URL for the RSS feed. */
		feed_url: FormControl<string | null | undefined>,

		/** The frequency of the RSS Campaign. */
		frequency: FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>,

		/** The date the campaign was last sent. */
		last_sent: FormControl<Date | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignRss_optsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignRss_optsFormProperties>({
			constrain_rss_img: new FormControl<boolean | null | undefined>(undefined),
			feed_url: new FormControl<string | null | undefined>(undefined),
			frequency: new FormControl<GetCampaignsReturnCampaignsRss_optsFrequency | null | undefined>(undefined),
			last_sent: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignRss_optsSchedule {

		/** The days of the week to send a daily RSS Campaign. */
		daily_send?: GetSearchCampaignsReturnResultsCampaignRss_optsScheduleDaily_send;

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour?: number | null;

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date?: number | null;

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day?: GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignRss_optsScheduleFormProperties {

		/**
		 * The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).
		 * Minimum: 0
		 * Maximum: 23
		 */
		hour: FormControl<number | null | undefined>,

		/**
		 * The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.
		 * Minimum: 0
		 * Maximum: 31
		 */
		monthly_send_date: FormControl<number | null | undefined>,

		/** The day of the week to send a weekly RSS Campaign. */
		weekly_send_day: FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignRss_optsScheduleFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignRss_optsScheduleFormProperties>({
			hour: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(23)]),
			monthly_send_date: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(31)]),
			weekly_send_day: new FormControl<GetCampaignsReturnCampaignsRss_optsScheduleWeekly_send_day | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignRss_optsScheduleDaily_send {

		/** Sends the daily RSS Campaign on Fridays. */
		friday?: boolean | null;

		/** Sends the daily RSS Campaign on Mondays. */
		monday?: boolean | null;

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday?: boolean | null;

		/** Sends the daily RSS Campaign on Sundays. */
		sunday?: boolean | null;

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday?: boolean | null;

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday?: boolean | null;

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday?: boolean | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignRss_optsScheduleDaily_sendFormProperties {

		/** Sends the daily RSS Campaign on Fridays. */
		friday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Mondays. */
		monday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Saturdays. */
		saturday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Sundays. */
		sunday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Thursdays. */
		thursday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Tuesdays. */
		tuesday: FormControl<boolean | null | undefined>,

		/** Sends the daily RSS Campaign on Wednesdays. */
		wednesday: FormControl<boolean | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignRss_optsScheduleDaily_sendFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignRss_optsScheduleDaily_sendFormProperties>({
			friday: new FormControl<boolean | null | undefined>(undefined),
			monday: new FormControl<boolean | null | undefined>(undefined),
			saturday: new FormControl<boolean | null | undefined>(undefined),
			sunday: new FormControl<boolean | null | undefined>(undefined),
			thursday: new FormControl<boolean | null | undefined>(undefined),
			tuesday: new FormControl<boolean | null | undefined>(undefined),
			wednesday: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignSettings {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate?: boolean | null;

		/** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
		auto_fb_post?: Array<string>;

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer?: boolean | null;

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet?: boolean | null;

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop?: boolean | null;

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments?: boolean | null;

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id?: string | null;

		/** The 'from' name on the campaign (not an email address). */
		from_name?: string | null;

		/** Automatically inline the CSS included with the campaign content. */
		inline_css?: boolean | null;

		/** The preview text for the campaign. */
		preview_text?: string | null;

		/** The reply-to email address for the campaign. */
		reply_to?: string | null;

		/** The subject line for the campaign. */
		subject_line?: string | null;

		/** The id for the template used in this campaign. */
		template_id?: number | null;

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp?: boolean | null;

		/** The title of the campaign. */
		title?: string | null;

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name?: string | null;

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation?: boolean | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignSettingsFormProperties {

		/** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
		authenticate: FormControl<boolean | null | undefined>,

		/** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
		auto_footer: FormControl<boolean | null | undefined>,

		/** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
		auto_tweet: FormControl<boolean | null | undefined>,

		/** Whether the campaign uses the drag-and-drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
		fb_comments: FormControl<boolean | null | undefined>,

		/** If the campaign is listed in a folder, the id for that folder. */
		folder_id: FormControl<string | null | undefined>,

		/** The 'from' name on the campaign (not an email address). */
		from_name: FormControl<string | null | undefined>,

		/** Automatically inline the CSS included with the campaign content. */
		inline_css: FormControl<boolean | null | undefined>,

		/** The preview text for the campaign. */
		preview_text: FormControl<string | null | undefined>,

		/** The reply-to email address for the campaign. */
		reply_to: FormControl<string | null | undefined>,

		/** The subject line for the campaign. */
		subject_line: FormControl<string | null | undefined>,

		/** The id for the template used in this campaign. */
		template_id: FormControl<number | null | undefined>,

		/** Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/). */
		timewarp: FormControl<boolean | null | undefined>,

		/** The title of the campaign. */
		title: FormControl<string | null | undefined>,

		/** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
		to_name: FormControl<string | null | undefined>,

		/** Use Mailchimp Conversation feature to manage out-of-office replies. */
		use_conversation: FormControl<boolean | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignSettingsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignSettingsFormProperties>({
			authenticate: new FormControl<boolean | null | undefined>(undefined),
			auto_footer: new FormControl<boolean | null | undefined>(undefined),
			auto_tweet: new FormControl<boolean | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			fb_comments: new FormControl<boolean | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			from_name: new FormControl<string | null | undefined>(undefined),
			inline_css: new FormControl<boolean | null | undefined>(undefined),
			preview_text: new FormControl<string | null | undefined>(undefined),
			reply_to: new FormControl<string | null | undefined>(undefined),
			subject_line: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<number | null | undefined>(undefined),
			timewarp: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			to_name: new FormControl<string | null | undefined>(undefined),
			use_conversation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignSocial_card {

		/** A short summary of the campaign to display. */
		description?: string | null;

		/** The url for the header image for the card. */
		image_url?: string | null;

		/** The title for the card. Typically the subject line of the campaign. */
		title?: string | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignSocial_cardFormProperties {

		/** A short summary of the campaign to display. */
		description: FormControl<string | null | undefined>,

		/** The url for the header image for the card. */
		image_url: FormControl<string | null | undefined>,

		/** The title for the card. Typically the subject line of the campaign. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignSocial_cardFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignSocial_cardFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignTracking {

		/** Deprecated */
		capsule?: GetSearchCampaignsReturnResultsCampaignTrackingCapsule;

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale?: string | null;

		/** Whether to enable e-commerce tracking. */
		ecomm360?: boolean | null;

		/** Deprecated */
		goal_tracking?: boolean | null;

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics?: string | null;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks?: boolean | null;

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens?: boolean | null;

		/** Deprecated */
		salesforce?: GetSearchCampaignsReturnResultsCampaignTrackingSalesforce;

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks?: boolean | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignTrackingFormProperties {

		/** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
		clicktale: FormControl<string | null | undefined>,

		/** Whether to enable e-commerce tracking. */
		ecomm360: FormControl<boolean | null | undefined>,

		/** Deprecated */
		goal_tracking: FormControl<boolean | null | undefined>,

		/** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
		google_analytics: FormControl<string | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		html_clicks: FormControl<boolean | null | undefined>,

		/** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
		opens: FormControl<boolean | null | undefined>,

		/** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
		text_clicks: FormControl<boolean | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignTrackingFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignTrackingFormProperties>({
			clicktale: new FormControl<string | null | undefined>(undefined),
			ecomm360: new FormControl<boolean | null | undefined>(undefined),
			goal_tracking: new FormControl<boolean | null | undefined>(undefined),
			google_analytics: new FormControl<string | null | undefined>(undefined),
			html_clicks: new FormControl<boolean | null | undefined>(undefined),
			opens: new FormControl<boolean | null | undefined>(undefined),
			text_clicks: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignTrackingCapsule {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignTrackingCapsuleFormProperties {

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignTrackingCapsuleFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignTrackingCapsuleFormProperties>({
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignTrackingSalesforce {

		/** Create a campaign in a connected Salesforce account. */
		campaign?: boolean | null;

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes?: boolean | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignTrackingSalesforceFormProperties {

		/** Create a campaign in a connected Salesforce account. */
		campaign: FormControl<boolean | null | undefined>,

		/** Update contact notes for a campaign based on subscriber email addresses. */
		notes: FormControl<boolean | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignTrackingSalesforceFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignTrackingSalesforceFormProperties>({
			campaign: new FormControl<boolean | null | undefined>(undefined),
			notes: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignVariate_settings {

		/** Combinations of possible variables used to build emails. */
		GetSearchCampaignsReturnResultsCampaignVariate_settingsCombinations?: Array<GetSearchCampaignsReturnResultsCampaignVariate_settingsCombinations>;

		/** Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'. */
		contents?: Array<string>;

		/** The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used. */
		from_names?: Array<string>;

		/** The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used. */
		reply_to_addresses?: Array<string>;

		/** The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored. */
		send_times?: Array<string>;

		/** The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used. */
		subject_lines?: Array<string>;

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size?: number | null;

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time?: number | null;

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria?: GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null;

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id?: string | null;

		/** ID for the winning combination. */
		winning_combination_id?: string | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignVariate_settingsFormProperties {

		/** The percentage of recipients to send the test combinations to, must be a value between 10 and 100. */
		test_size: FormControl<number | null | undefined>,

		/** The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes. */
		wait_time: FormControl<number | null | undefined>,

		/** The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application. */
		winner_criteria: FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>,

		/** ID of the campaign that was sent to the remaining recipients based on the winning combination. */
		winning_campaign_id: FormControl<string | null | undefined>,

		/** ID for the winning combination. */
		winning_combination_id: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignVariate_settingsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignVariate_settingsFormProperties>({
			test_size: new FormControl<number | null | undefined>(undefined),
			wait_time: new FormControl<number | null | undefined>(undefined),
			winner_criteria: new FormControl<GetCampaignsReturnCampaignsVariate_settingsWinner_criteria | null | undefined>(undefined),
			winning_campaign_id: new FormControl<string | null | undefined>(undefined),
			winning_combination_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchCampaignsReturnResultsCampaignVariate_settingsCombinations {

		/** The index of `variate_settings.contents` used. */
		content_description?: number | null;

		/** The index of `variate_settings.from_names` used. */
		from_name?: number | null;

		/** Unique ID for the combination. */
		id?: string | null;

		/** The number of recipients for this combination. */
		recipients?: number | null;

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to?: number | null;

		/** The index of `variate_settings.send_times` used. */
		send_time?: number | null;

		/** The index of `variate_settings.subject_lines` used. */
		subject_line?: number | null;
	}
	export interface GetSearchCampaignsReturnResultsCampaignVariate_settingsCombinationsFormProperties {

		/** The index of `variate_settings.contents` used. */
		content_description: FormControl<number | null | undefined>,

		/** The index of `variate_settings.from_names` used. */
		from_name: FormControl<number | null | undefined>,

		/** Unique ID for the combination. */
		id: FormControl<string | null | undefined>,

		/** The number of recipients for this combination. */
		recipients: FormControl<number | null | undefined>,

		/** The index of `variate_settings.reply_to_addresses` used. */
		reply_to: FormControl<number | null | undefined>,

		/** The index of `variate_settings.send_times` used. */
		send_time: FormControl<number | null | undefined>,

		/** The index of `variate_settings.subject_lines` used. */
		subject_line: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchCampaignsReturnResultsCampaignVariate_settingsCombinationsFormGroup() {
		return new FormGroup<GetSearchCampaignsReturnResultsCampaignVariate_settingsCombinationsFormProperties>({
			content_description: new FormControl<number | null | undefined>(undefined),
			from_name: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			recipients: new FormControl<number | null | undefined>(undefined),
			reply_to: new FormControl<number | null | undefined>(undefined),
			send_time: new FormControl<number | null | undefined>(undefined),
			subject_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetSearchMembersReturn_links?: Array<GetSearchMembersReturn_links>;

		/** Exact matches of the provided search query. */
		exact_matches?: GetSearchMembersReturnExact_matches;

		/** Partial matches of the provided search query. */
		full_search?: GetSearchMembersReturnFull_search;
	}
	export interface GetSearchMembersReturnFormProperties {
	}
	export function CreateGetSearchMembersReturnFormGroup() {
		return new FormGroup<GetSearchMembersReturnFormProperties>({
		});

	}

	export interface GetSearchMembersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetSearchMembersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturn_linksFormGroup() {
		return new FormGroup<GetSearchMembersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matches {

		/** An array of objects, each representing a specific list member. */
		GetSearchMembersReturnExact_matchesMembers?: Array<GetSearchMembersReturnExact_matchesMembers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetSearchMembersReturnExact_matchesFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembers {

		/** A list of link types and descriptions for the API schema documents. */
		GetSearchMembersReturnExact_matchesMembers_links?: Array<GetSearchMembersReturnExact_matchesMembers_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: GetSearchMembersReturnExact_matchesMembersLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: GetSearchMembersReturnExact_matchesMembersLocation;

		/** The marketing permissions for the subscriber. */
		GetSearchMembersReturnExact_matchesMembersMarketing_permissions?: Array<GetSearchMembersReturnExact_matchesMembersMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: GetSearchMembersReturnExact_matchesMembersStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		GetSearchMembersReturnExact_matchesMembersTags?: Array<GetSearchMembersReturnExact_matchesMembersTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembersFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembers_linksFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembersLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembersLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersLast_noteFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembersLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembersLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersLocationFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembersMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembersMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersMarketing_permissionsFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembersStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: GetSearchMembersReturnExact_matchesMembersStatsEcommerce_data;
	}
	export interface GetSearchMembersReturnExact_matchesMembersStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersStatsFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembersStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembersStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersStatsEcommerce_dataFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnExact_matchesMembersTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface GetSearchMembersReturnExact_matchesMembersTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnExact_matchesMembersTagsFormGroup() {
		return new FormGroup<GetSearchMembersReturnExact_matchesMembersTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_search {

		/** An array of objects, each representing a specific list member. */
		GetSearchMembersReturnFull_searchMembers?: Array<GetSearchMembersReturnFull_searchMembers>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetSearchMembersReturnFull_searchFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembers {

		/** A list of link types and descriptions for the API schema documents. */
		GetSearchMembersReturnFull_searchMembers_links?: Array<GetSearchMembersReturnFull_searchMembers_links>;

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging?: boolean | null;

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id?: string | null;

		/** Email address for a subscriber. */
		email_address?: string | null;

		/** The list member's email client. */
		email_client?: string | null;

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type?: string | null;

		/** The contact's full name. */
		full_name?: string | null;

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id?: string | null;

		/** The key of this object's properties is the ID of the interest in question. */
		interests?: {[id: string]: boolean };

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt?: string | null;

		/** IP address the subscriber signed up from. */
		ip_signup?: string | null;

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language?: string | null;

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed?: Date | null;

		/** The most recent Note added about this member. */
		last_note?: GetSearchMembersReturnFull_searchMembersLast_note;

		/** The list id. */
		list_id?: string | null;

		/** Subscriber location information. */
		location?: GetSearchMembersReturnFull_searchMembersLocation;

		/** The marketing permissions for the subscriber. */
		GetSearchMembersReturnFull_searchMembersMarketing_permissions?: Array<GetSearchMembersReturnFull_searchMembersMarketing_permissions>;

		/** Star rating for this member, between 1 and 5. */
		member_rating?: number | null;

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields?: {[id: string]: any };

		/** The source from which the subscriber was added to this list. */
		source?: string | null;

		/** Open and click rates for this subscriber. */
		stats?: GetSearchMembersReturnFull_searchMembersStats;

		/** Subscriber's current status. */
		status?: GetListsIdMembersStatus | null;

		/** Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/). */
		GetSearchMembersReturnFull_searchMembersTags?: Array<GetSearchMembersReturnFull_searchMembersTags>;

		/** The number of tags applied to this member. */
		tags_count?: number | null;

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt?: Date | null;

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup?: Date | null;

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id?: string | null;

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason?: string | null;

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip?: boolean | null;

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id?: number | null;
	}
	export interface GetSearchMembersReturnFull_searchMembersFormProperties {

		/** Indicates whether a contact consents to 1:1 messaging. */
		consents_to_one_to_one_messaging: FormControl<boolean | null | undefined>,

		/** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address. */
		contact_id: FormControl<string | null | undefined>,

		/** Email address for a subscriber. */
		email_address: FormControl<string | null | undefined>,

		/** The list member's email client. */
		email_client: FormControl<string | null | undefined>,

		/** Type of email this member asked to get ('html' or 'text'). */
		email_type: FormControl<string | null | undefined>,

		/** The contact's full name. */
		full_name: FormControl<string | null | undefined>,

		/** The MD5 hash of the lowercase version of the list member's email address. */
		id: FormControl<string | null | undefined>,

		/** The key of this object's properties is the ID of the interest in question. */
		interests: FormControl<{[id: string]: boolean } | null | undefined>,

		/** The IP address the subscriber used to confirm their opt-in status. */
		ip_opt: FormControl<string | null | undefined>,

		/** IP address the subscriber signed up from. */
		ip_signup: FormControl<string | null | undefined>,

		/** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
		language: FormControl<string | null | undefined>,

		/** The date and time the member's info was last changed in ISO 8601 format. */
		last_changed: FormControl<Date | null | undefined>,

		/** The list id. */
		list_id: FormControl<string | null | undefined>,

		/** Star rating for this member, between 1 and 5. */
		member_rating: FormControl<number | null | undefined>,

		/** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
		merge_fields: FormControl<{[id: string]: any } | null | undefined>,

		/** The source from which the subscriber was added to this list. */
		source: FormControl<string | null | undefined>,

		/** Subscriber's current status. */
		status: FormControl<GetListsIdMembersStatus | null | undefined>,

		/** The number of tags applied to this member. */
		tags_count: FormControl<number | null | undefined>,

		/** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
		timestamp_opt: FormControl<Date | null | undefined>,

		/** The date and time the subscriber signed up for the list in ISO 8601 format. */
		timestamp_signup: FormControl<Date | null | undefined>,

		/** An identifier for the address across all of Mailchimp. */
		unique_email_id: FormControl<string | null | undefined>,

		/** A subscriber's reason for unsubscribing. */
		unsubscribe_reason: FormControl<string | null | undefined>,

		/** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
		vip: FormControl<boolean | null | undefined>,

		/** The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`. */
		web_id: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersFormProperties>({
			consents_to_one_to_one_messaging: new FormControl<boolean | null | undefined>(undefined),
			contact_id: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_client: new FormControl<string | null | undefined>(undefined),
			email_type: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interests: new FormControl<{[id: string]: boolean } | null | undefined>(undefined),
			ip_opt: new FormControl<string | null | undefined>(undefined),
			ip_signup: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			last_changed: new FormControl<Date | null | undefined>(undefined),
			list_id: new FormControl<string | null | undefined>(undefined),
			member_rating: new FormControl<number | null | undefined>(undefined),
			merge_fields: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GetListsIdMembersStatus | null | undefined>(undefined),
			tags_count: new FormControl<number | null | undefined>(undefined),
			timestamp_opt: new FormControl<Date | null | undefined>(undefined),
			timestamp_signup: new FormControl<Date | null | undefined>(undefined),
			unique_email_id: new FormControl<string | null | undefined>(undefined),
			unsubscribe_reason: new FormControl<string | null | undefined>(undefined),
			vip: new FormControl<boolean | null | undefined>(undefined),
			web_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembers_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetSearchMembersReturnFull_searchMembers_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembers_linksFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembers_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembersLast_note {

		/** The date and time the note was created in ISO 8601 format. */
		created_at?: Date | null;

		/** The author of the note. */
		created_by?: string | null;

		/** The content of the note. */
		note?: string | null;

		/** The note id. */
		note_id?: number | null;
	}
	export interface GetSearchMembersReturnFull_searchMembersLast_noteFormProperties {

		/** The date and time the note was created in ISO 8601 format. */
		created_at: FormControl<Date | null | undefined>,

		/** The author of the note. */
		created_by: FormControl<string | null | undefined>,

		/** The content of the note. */
		note: FormControl<string | null | undefined>,

		/** The note id. */
		note_id: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersLast_noteFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersLast_noteFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembersLocation {

		/** The unique code for the location country. */
		country_code?: string | null;

		/** The offset for timezones where daylight saving time is observed. */
		dstoff?: number | null;

		/** The time difference in hours from GMT. */
		gmtoff?: number | null;

		/** The location latitude. */
		latitude?: number | null;

		/** The location longitude. */
		longitude?: number | null;

		/** The region for the location. */
		region?: string | null;

		/** The timezone for the location. */
		timezone?: string | null;
	}
	export interface GetSearchMembersReturnFull_searchMembersLocationFormProperties {

		/** The unique code for the location country. */
		country_code: FormControl<string | null | undefined>,

		/** The offset for timezones where daylight saving time is observed. */
		dstoff: FormControl<number | null | undefined>,

		/** The time difference in hours from GMT. */
		gmtoff: FormControl<number | null | undefined>,

		/** The location latitude. */
		latitude: FormControl<number | null | undefined>,

		/** The location longitude. */
		longitude: FormControl<number | null | undefined>,

		/** The region for the location. */
		region: FormControl<string | null | undefined>,

		/** The timezone for the location. */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersLocationFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersLocationFormProperties>({
			country_code: new FormControl<string | null | undefined>(undefined),
			dstoff: new FormControl<number | null | undefined>(undefined),
			gmtoff: new FormControl<number | null | undefined>(undefined),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembersMarketing_permissions {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled?: boolean | null;

		/** The id for the marketing permission on the list */
		marketing_permission_id?: string | null;

		/** The text of the marketing permission. */
		text?: string | null;
	}
	export interface GetSearchMembersReturnFull_searchMembersMarketing_permissionsFormProperties {

		/** If the subscriber has opted-in to the marketing permission. */
		enabled: FormControl<boolean | null | undefined>,

		/** The id for the marketing permission on the list */
		marketing_permission_id: FormControl<string | null | undefined>,

		/** The text of the marketing permission. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersMarketing_permissionsFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersMarketing_permissionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			marketing_permission_id: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembersStats {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate?: number | null;

		/** A subscriber's average open rate. */
		avg_open_rate?: number | null;

		/** Ecommerce stats for the list member if the list is attached to a store. */
		ecommerce_data?: GetSearchMembersReturnFull_searchMembersStatsEcommerce_data;
	}
	export interface GetSearchMembersReturnFull_searchMembersStatsFormProperties {

		/** A subscriber's average clickthrough rate. */
		avg_click_rate: FormControl<number | null | undefined>,

		/** A subscriber's average open rate. */
		avg_open_rate: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersStatsFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersStatsFormProperties>({
			avg_click_rate: new FormControl<number | null | undefined>(undefined),
			avg_open_rate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembersStatsEcommerce_data {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code?: string | null;

		/** The total number of orders placed by the list member. */
		number_of_orders?: number | null;

		/** The total revenue the list member has brought in. */
		total_revenue?: number | null;
	}
	export interface GetSearchMembersReturnFull_searchMembersStatsEcommerce_dataFormProperties {

		/** The three-letter ISO 4217 code for the currency that the store accepts. */
		currency_code: FormControl<string | null | undefined>,

		/** The total number of orders placed by the list member. */
		number_of_orders: FormControl<number | null | undefined>,

		/** The total revenue the list member has brought in. */
		total_revenue: FormControl<number | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersStatsEcommerce_dataFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersStatsEcommerce_dataFormProperties>({
			currency_code: new FormControl<string | null | undefined>(undefined),
			number_of_orders: new FormControl<number | null | undefined>(undefined),
			total_revenue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchMembersReturnFull_searchMembersTags {

		/** The tag id. */
		id?: number | null;

		/** The name of the tag */
		name?: string | null;
	}
	export interface GetSearchMembersReturnFull_searchMembersTagsFormProperties {

		/** The tag id. */
		id: FormControl<number | null | undefined>,

		/** The name of the tag */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetSearchMembersReturnFull_searchMembersTagsFormGroup() {
		return new FormGroup<GetSearchMembersReturnFull_searchMembersTagsFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplateFoldersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplateFoldersReturn_links?: Array<GetTemplateFoldersReturn_links>;

		/** An array of objects representing template folders. */
		GetTemplateFoldersReturnFolders?: Array<GetTemplateFoldersReturnFolders>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetTemplateFoldersReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetTemplateFoldersReturnFormGroup() {
		return new FormGroup<GetTemplateFoldersReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetTemplateFoldersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplateFoldersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplateFoldersReturn_linksFormGroup() {
		return new FormGroup<GetTemplateFoldersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplateFoldersReturnFolders {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplateFoldersReturnFolders_links?: Array<GetTemplateFoldersReturnFolders_links>;

		/** The number of templates in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this template folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface GetTemplateFoldersReturnFoldersFormProperties {

		/** The number of templates in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this template folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplateFoldersReturnFoldersFormGroup() {
		return new FormGroup<GetTemplateFoldersReturnFoldersFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplateFoldersReturnFolders_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplateFoldersReturnFolders_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplateFoldersReturnFolders_linksFormGroup() {
		return new FormGroup<GetTemplateFoldersReturnFolders_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostTemplateFoldersReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostTemplateFoldersReturn_links?: Array<PostTemplateFoldersReturn_links>;

		/** The number of templates in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this template folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface PostTemplateFoldersReturnFormProperties {

		/** The number of templates in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this template folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePostTemplateFoldersReturnFormGroup() {
		return new FormGroup<PostTemplateFoldersReturnFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostTemplateFoldersReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostTemplateFoldersReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostTemplateFoldersReturn_linksFormGroup() {
		return new FormGroup<PostTemplateFoldersReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplateFoldersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplateFoldersIdReturn_links?: Array<GetTemplateFoldersIdReturn_links>;

		/** The number of templates in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this template folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface GetTemplateFoldersIdReturnFormProperties {

		/** The number of templates in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this template folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplateFoldersIdReturnFormGroup() {
		return new FormGroup<GetTemplateFoldersIdReturnFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplateFoldersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplateFoldersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplateFoldersIdReturn_linksFormGroup() {
		return new FormGroup<GetTemplateFoldersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchTemplateFoldersIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchTemplateFoldersIdReturn_links?: Array<PatchTemplateFoldersIdReturn_links>;

		/** The number of templates in the folder. */
		count?: number | null;

		/** A string that uniquely identifies this template folder. */
		id?: string | null;

		/** The name of the folder. */
		name?: string | null;
	}
	export interface PatchTemplateFoldersIdReturnFormProperties {

		/** The number of templates in the folder. */
		count: FormControl<number | null | undefined>,

		/** A string that uniquely identifies this template folder. */
		id: FormControl<string | null | undefined>,

		/** The name of the folder. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePatchTemplateFoldersIdReturnFormGroup() {
		return new FormGroup<PatchTemplateFoldersIdReturnFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchTemplateFoldersIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchTemplateFoldersIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchTemplateFoldersIdReturn_linksFormGroup() {
		return new FormGroup<PatchTemplateFoldersIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetTemplatesSort_field { date_created = 0, date_edited = 1, name = 2 }

	export enum GetTemplatesContent_type { html = 0, template = 1, multichannel = 2 }

	export interface GetTemplatesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplatesReturn_links?: Array<GetTemplatesReturn_links>;

		/** All of an account's saved or custom templates. */
		GetTemplatesReturnTemplates?: Array<GetTemplatesReturnTemplates>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetTemplatesReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetTemplatesReturnFormGroup() {
		return new FormGroup<GetTemplatesReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplatesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplatesReturn_linksFormGroup() {
		return new FormGroup<GetTemplatesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesReturnTemplates {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplatesReturnTemplates_links?: Array<GetTemplatesReturnTemplates_links>;

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active?: boolean | null;

		/** If available, the category the template is listed in. */
		category?: string | null;

		/** How the template's content is put together. */
		content_type?: GetTemplatesReturnTemplatesContent_type | null;

		/** The login name for template's creator. */
		created_by?: string | null;

		/** The date and time the template was created in ISO 8601 format. */
		date_created?: Date | null;

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited?: Date | null;

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop?: boolean | null;

		/** The login name who last edited the template. */
		edited_by?: string | null;

		/** The id of the folder the template is currently in. */
		folder_id?: string | null;

		/** The individual id for the template. */
		id?: number | null;

		/** The name of the template. */
		name?: string | null;

		/** Whether the template contains media queries to make it responsive. */
		responsive?: boolean | null;

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url?: string | null;

		/** If available, the URL for a thumbnail of the template. */
		thumbnail?: string | null;

		/** The type of template (user, base, or gallery). */
		type?: string | null;
	}
	export interface GetTemplatesReturnTemplatesFormProperties {

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active: FormControl<boolean | null | undefined>,

		/** If available, the category the template is listed in. */
		category: FormControl<string | null | undefined>,

		/** How the template's content is put together. */
		content_type: FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>,

		/** The login name for template's creator. */
		created_by: FormControl<string | null | undefined>,

		/** The date and time the template was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited: FormControl<Date | null | undefined>,

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** The login name who last edited the template. */
		edited_by: FormControl<string | null | undefined>,

		/** The id of the folder the template is currently in. */
		folder_id: FormControl<string | null | undefined>,

		/** The individual id for the template. */
		id: FormControl<number | null | undefined>,

		/** The name of the template. */
		name: FormControl<string | null | undefined>,

		/** Whether the template contains media queries to make it responsive. */
		responsive: FormControl<boolean | null | undefined>,

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url: FormControl<string | null | undefined>,

		/** If available, the URL for a thumbnail of the template. */
		thumbnail: FormControl<string | null | undefined>,

		/** The type of template (user, base, or gallery). */
		type: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplatesReturnTemplatesFormGroup() {
		return new FormGroup<GetTemplatesReturnTemplatesFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			category: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			date_edited: new FormControl<Date | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			edited_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			responsive: new FormControl<boolean | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
			thumbnail: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesReturnTemplates_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplatesReturnTemplates_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplatesReturnTemplates_linksFormGroup() {
		return new FormGroup<GetTemplatesReturnTemplates_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GetTemplatesReturnTemplatesContent_type { template = 0, multichannel = 1, html = 2 }

	export interface PostTemplatesReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PostTemplatesReturn_links?: Array<PostTemplatesReturn_links>;

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active?: boolean | null;

		/** If available, the category the template is listed in. */
		category?: string | null;

		/** How the template's content is put together. */
		content_type?: GetTemplatesReturnTemplatesContent_type | null;

		/** The login name for template's creator. */
		created_by?: string | null;

		/** The date and time the template was created in ISO 8601 format. */
		date_created?: Date | null;

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited?: Date | null;

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop?: boolean | null;

		/** The login name who last edited the template. */
		edited_by?: string | null;

		/** The id of the folder the template is currently in. */
		folder_id?: string | null;

		/** The individual id for the template. */
		id?: number | null;

		/** The name of the template. */
		name?: string | null;

		/** Whether the template contains media queries to make it responsive. */
		responsive?: boolean | null;

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url?: string | null;

		/** If available, the URL for a thumbnail of the template. */
		thumbnail?: string | null;

		/** The type of template (user, base, or gallery). */
		type?: string | null;
	}
	export interface PostTemplatesReturnFormProperties {

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active: FormControl<boolean | null | undefined>,

		/** If available, the category the template is listed in. */
		category: FormControl<string | null | undefined>,

		/** How the template's content is put together. */
		content_type: FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>,

		/** The login name for template's creator. */
		created_by: FormControl<string | null | undefined>,

		/** The date and time the template was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited: FormControl<Date | null | undefined>,

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** The login name who last edited the template. */
		edited_by: FormControl<string | null | undefined>,

		/** The id of the folder the template is currently in. */
		folder_id: FormControl<string | null | undefined>,

		/** The individual id for the template. */
		id: FormControl<number | null | undefined>,

		/** The name of the template. */
		name: FormControl<string | null | undefined>,

		/** Whether the template contains media queries to make it responsive. */
		responsive: FormControl<boolean | null | undefined>,

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url: FormControl<string | null | undefined>,

		/** If available, the URL for a thumbnail of the template. */
		thumbnail: FormControl<string | null | undefined>,

		/** The type of template (user, base, or gallery). */
		type: FormControl<string | null | undefined>,
	}
	export function CreatePostTemplatesReturnFormGroup() {
		return new FormGroup<PostTemplatesReturnFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			category: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			date_edited: new FormControl<Date | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			edited_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			responsive: new FormControl<boolean | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
			thumbnail: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PostTemplatesReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PostTemplatesReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePostTemplatesReturn_linksFormGroup() {
		return new FormGroup<PostTemplatesReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplatesIdReturn_links?: Array<GetTemplatesIdReturn_links>;

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active?: boolean | null;

		/** If available, the category the template is listed in. */
		category?: string | null;

		/** How the template's content is put together. */
		content_type?: GetTemplatesReturnTemplatesContent_type | null;

		/** The login name for template's creator. */
		created_by?: string | null;

		/** The date and time the template was created in ISO 8601 format. */
		date_created?: Date | null;

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited?: Date | null;

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop?: boolean | null;

		/** The login name who last edited the template. */
		edited_by?: string | null;

		/** The id of the folder the template is currently in. */
		folder_id?: string | null;

		/** The individual id for the template. */
		id?: number | null;

		/** The name of the template. */
		name?: string | null;

		/** Whether the template contains media queries to make it responsive. */
		responsive?: boolean | null;

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url?: string | null;

		/** If available, the URL for a thumbnail of the template. */
		thumbnail?: string | null;

		/** The type of template (user, base, or gallery). */
		type?: string | null;
	}
	export interface GetTemplatesIdReturnFormProperties {

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active: FormControl<boolean | null | undefined>,

		/** If available, the category the template is listed in. */
		category: FormControl<string | null | undefined>,

		/** How the template's content is put together. */
		content_type: FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>,

		/** The login name for template's creator. */
		created_by: FormControl<string | null | undefined>,

		/** The date and time the template was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited: FormControl<Date | null | undefined>,

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** The login name who last edited the template. */
		edited_by: FormControl<string | null | undefined>,

		/** The id of the folder the template is currently in. */
		folder_id: FormControl<string | null | undefined>,

		/** The individual id for the template. */
		id: FormControl<number | null | undefined>,

		/** The name of the template. */
		name: FormControl<string | null | undefined>,

		/** Whether the template contains media queries to make it responsive. */
		responsive: FormControl<boolean | null | undefined>,

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url: FormControl<string | null | undefined>,

		/** If available, the URL for a thumbnail of the template. */
		thumbnail: FormControl<string | null | undefined>,

		/** The type of template (user, base, or gallery). */
		type: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplatesIdReturnFormGroup() {
		return new FormGroup<GetTemplatesIdReturnFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			category: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			date_edited: new FormControl<Date | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			edited_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			responsive: new FormControl<boolean | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
			thumbnail: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplatesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplatesIdReturn_linksFormGroup() {
		return new FormGroup<GetTemplatesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchTemplatesIdReturn {

		/** A list of link types and descriptions for the API schema documents. */
		PatchTemplatesIdReturn_links?: Array<PatchTemplatesIdReturn_links>;

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active?: boolean | null;

		/** If available, the category the template is listed in. */
		category?: string | null;

		/** How the template's content is put together. */
		content_type?: GetTemplatesReturnTemplatesContent_type | null;

		/** The login name for template's creator. */
		created_by?: string | null;

		/** The date and time the template was created in ISO 8601 format. */
		date_created?: Date | null;

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited?: Date | null;

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop?: boolean | null;

		/** The login name who last edited the template. */
		edited_by?: string | null;

		/** The id of the folder the template is currently in. */
		folder_id?: string | null;

		/** The individual id for the template. */
		id?: number | null;

		/** The name of the template. */
		name?: string | null;

		/** Whether the template contains media queries to make it responsive. */
		responsive?: boolean | null;

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url?: string | null;

		/** If available, the URL for a thumbnail of the template. */
		thumbnail?: string | null;

		/** The type of template (user, base, or gallery). */
		type?: string | null;
	}
	export interface PatchTemplatesIdReturnFormProperties {

		/** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
		active: FormControl<boolean | null | undefined>,

		/** If available, the category the template is listed in. */
		category: FormControl<string | null | undefined>,

		/** How the template's content is put together. */
		content_type: FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>,

		/** The login name for template's creator. */
		created_by: FormControl<string | null | undefined>,

		/** The date and time the template was created in ISO 8601 format. */
		date_created: FormControl<Date | null | undefined>,

		/** The date and time the template was edited in ISO 8601 format. */
		date_edited: FormControl<Date | null | undefined>,

		/** Whether the template uses the drag and drop editor. */
		drag_and_drop: FormControl<boolean | null | undefined>,

		/** The login name who last edited the template. */
		edited_by: FormControl<string | null | undefined>,

		/** The id of the folder the template is currently in. */
		folder_id: FormControl<string | null | undefined>,

		/** The individual id for the template. */
		id: FormControl<number | null | undefined>,

		/** The name of the template. */
		name: FormControl<string | null | undefined>,

		/** Whether the template contains media queries to make it responsive. */
		responsive: FormControl<boolean | null | undefined>,

		/** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
		share_url: FormControl<string | null | undefined>,

		/** If available, the URL for a thumbnail of the template. */
		thumbnail: FormControl<string | null | undefined>,

		/** The type of template (user, base, or gallery). */
		type: FormControl<string | null | undefined>,
	}
	export function CreatePatchTemplatesIdReturnFormGroup() {
		return new FormGroup<PatchTemplatesIdReturnFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			category: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<GetTemplatesReturnTemplatesContent_type | null | undefined>(undefined),
			created_by: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			date_edited: new FormControl<Date | null | undefined>(undefined),
			drag_and_drop: new FormControl<boolean | null | undefined>(undefined),
			edited_by: new FormControl<string | null | undefined>(undefined),
			folder_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			responsive: new FormControl<boolean | null | undefined>(undefined),
			share_url: new FormControl<string | null | undefined>(undefined),
			thumbnail: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PatchTemplatesIdReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface PatchTemplatesIdReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreatePatchTemplatesIdReturn_linksFormGroup() {
		return new FormGroup<PatchTemplatesIdReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesIdDefaultContentReturn {

		/** A list of link types and descriptions for the API schema documents. */
		GetTemplatesIdDefaultContentReturn_links?: Array<GetTemplatesIdDefaultContentReturn_links>;

		/** The sections that you can edit in the template, including each section's default content. */
		sections?: {[id: string]: any };
	}
	export interface GetTemplatesIdDefaultContentReturnFormProperties {

		/** The sections that you can edit in the template, including each section's default content. */
		sections: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGetTemplatesIdDefaultContentReturnFormGroup() {
		return new FormGroup<GetTemplatesIdDefaultContentReturnFormProperties>({
			sections: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}

	export interface GetTemplatesIdDefaultContentReturn_links {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href?: string | null;

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method?: GetRootReturn_linksMethod | null;

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel?: string | null;

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema?: string | null;

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema?: string | null;
	}
	export interface GetTemplatesIdDefaultContentReturn_linksFormProperties {

		/** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
		href: FormControl<string | null | undefined>,

		/** The HTTP method that should be used when accessing the URL defined in 'href'. */
		method: FormControl<GetRootReturn_linksMethod | null | undefined>,

		/** As with an HTML 'rel' attribute, this describes the type of link. */
		rel: FormControl<string | null | undefined>,

		/** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
		schema: FormControl<string | null | undefined>,

		/** For GETs, this is a URL representing the schema that the response should conform to. */
		targetSchema: FormControl<string | null | undefined>,
	}
	export function CreateGetTemplatesIdDefaultContentReturn_linksFormGroup() {
		return new FormGroup<GetTemplatesIdDefaultContentReturn_linksFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<GetRootReturn_linksMethod | null | undefined>(undefined),
			rel: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined),
			targetSchema: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetVerifiedDomainsReturn {

		/** The domains on the account */
		GetVerifiedDomainsReturnDomains?: Array<GetVerifiedDomainsReturnDomains>;

		/** The total number of items matching the query regardless of pagination. */
		total_items?: number | null;
	}
	export interface GetVerifiedDomainsReturnFormProperties {

		/** The total number of items matching the query regardless of pagination. */
		total_items: FormControl<number | null | undefined>,
	}
	export function CreateGetVerifiedDomainsReturnFormGroup() {
		return new FormGroup<GetVerifiedDomainsReturnFormProperties>({
			total_items: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetVerifiedDomainsReturnDomains {

		/** Whether domain authentication is enabled for this domain. */
		authenticated?: boolean | null;

		/** The name of this domain. */
		domain?: string | null;

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email?: string | null;

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent?: Date | null;

		/** Whether the domain has been verified for sending. */
		verified?: boolean | null;
	}
	export interface GetVerifiedDomainsReturnDomainsFormProperties {

		/** Whether domain authentication is enabled for this domain. */
		authenticated: FormControl<boolean | null | undefined>,

		/** The name of this domain. */
		domain: FormControl<string | null | undefined>,

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email: FormControl<string | null | undefined>,

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent: FormControl<Date | null | undefined>,

		/** Whether the domain has been verified for sending. */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateGetVerifiedDomainsReturnDomainsFormGroup() {
		return new FormGroup<GetVerifiedDomainsReturnDomainsFormProperties>({
			authenticated: new FormControl<boolean | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			verification_email: new FormControl<string | null | undefined>(undefined),
			verification_sent: new FormControl<Date | null | undefined>(undefined),
			verified: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface CreateVerifiedDomainPostBody {

		/**
		 * The e-mail address at the domain you want to verify. This will receive a two-factor challenge to be used in the verify action.
		 * Required
		 */
		verification_email: string;
	}
	export interface CreateVerifiedDomainPostBodyFormProperties {

		/**
		 * The e-mail address at the domain you want to verify. This will receive a two-factor challenge to be used in the verify action.
		 * Required
		 */
		verification_email: FormControl<string | null | undefined>,
	}
	export function CreateCreateVerifiedDomainPostBodyFormGroup() {
		return new FormGroup<CreateVerifiedDomainPostBodyFormProperties>({
			verification_email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateVerifiedDomainReturn {

		/** Whether domain authentication is enabled for this domain. */
		authenticated?: boolean | null;

		/** The name of this domain. */
		domain?: string | null;

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email?: string | null;

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent?: Date | null;

		/** Whether the domain has been verified for sending. */
		verified?: boolean | null;
	}
	export interface CreateVerifiedDomainReturnFormProperties {

		/** Whether domain authentication is enabled for this domain. */
		authenticated: FormControl<boolean | null | undefined>,

		/** The name of this domain. */
		domain: FormControl<string | null | undefined>,

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email: FormControl<string | null | undefined>,

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent: FormControl<Date | null | undefined>,

		/** Whether the domain has been verified for sending. */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateVerifiedDomainReturnFormGroup() {
		return new FormGroup<CreateVerifiedDomainReturnFormProperties>({
			authenticated: new FormControl<boolean | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			verification_email: new FormControl<string | null | undefined>(undefined),
			verification_sent: new FormControl<Date | null | undefined>(undefined),
			verified: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GetVerifiedDomainReturn {

		/** Whether domain authentication is enabled for this domain. */
		authenticated?: boolean | null;

		/** The name of this domain. */
		domain?: string | null;

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email?: string | null;

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent?: Date | null;

		/** Whether the domain has been verified for sending. */
		verified?: boolean | null;
	}
	export interface GetVerifiedDomainReturnFormProperties {

		/** Whether domain authentication is enabled for this domain. */
		authenticated: FormControl<boolean | null | undefined>,

		/** The name of this domain. */
		domain: FormControl<string | null | undefined>,

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email: FormControl<string | null | undefined>,

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent: FormControl<Date | null | undefined>,

		/** Whether the domain has been verified for sending. */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateGetVerifiedDomainReturnFormGroup() {
		return new FormGroup<GetVerifiedDomainReturnFormProperties>({
			authenticated: new FormControl<boolean | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			verification_email: new FormControl<string | null | undefined>(undefined),
			verification_sent: new FormControl<Date | null | undefined>(undefined),
			verified: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface VerifyDomainPostBody {

		/**
		 * The code that was sent to the email address provided when adding a new domain to verify.
		 * Required
		 */
		code: string;
	}
	export interface VerifyDomainPostBodyFormProperties {

		/**
		 * The code that was sent to the email address provided when adding a new domain to verify.
		 * Required
		 */
		code: FormControl<string | null | undefined>,
	}
	export function CreateVerifyDomainPostBodyFormGroup() {
		return new FormGroup<VerifyDomainPostBodyFormProperties>({
			code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface VerifyDomainReturn {

		/** Whether domain authentication is enabled for this domain. */
		authenticated?: boolean | null;

		/** The name of this domain. */
		domain?: string | null;

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email?: string | null;

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent?: Date | null;

		/** Whether the domain has been verified for sending. */
		verified?: boolean | null;
	}
	export interface VerifyDomainReturnFormProperties {

		/** Whether domain authentication is enabled for this domain. */
		authenticated: FormControl<boolean | null | undefined>,

		/** The name of this domain. */
		domain: FormControl<string | null | undefined>,

		/** The e-mail address receiving the two-factor challenge for this domain. */
		verification_email: FormControl<string | null | undefined>,

		/** The date/time that the two-factor challenge was sent to the verification email. */
		verification_sent: FormControl<Date | null | undefined>,

		/** Whether the domain has been verified for sending. */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateVerifyDomainReturnFormGroup() {
		return new FormGroup<VerifyDomainReturnFormProperties>({
			authenticated: new FormControl<boolean | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			verification_email: new FormControl<string | null | undefined>(undefined),
			verification_sent: new FormControl<Date | null | undefined>(undefined),
			verified: new FormControl<boolean | null | undefined>(undefined),
		});

	}

}

