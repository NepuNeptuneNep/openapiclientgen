import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** List of Errors generated by the request. */
	export interface Errors {

		/**
		 * Errors Array
		 * Required
		 * Minimum items: 1
		 */
		ErrorsErrors: Array<ErrorsErrors>;
	}

	/** List of Errors generated by the request. */
	export interface ErrorsFormProperties {
	}
	export function CreateErrorsFormGroup() {
		return new FormGroup<ErrorsFormProperties>({
		});

	}

	export interface ErrorsErrors {

		/**
		 * Detail information about the error.
		 * Required
		 * Min length: 1
		 */
		detail: string;

		/**
		 * Status Code of Error
		 * Required
		 * Min length: 1
		 */
		status: string;

		/**
		 * Error Title
		 * Required
		 * Min length: 1
		 */
		title: string;
	}
	export interface ErrorsErrorsFormProperties {

		/**
		 * Detail information about the error.
		 * Required
		 * Min length: 1
		 */
		detail: FormControl<string | null | undefined>,

		/**
		 * Status Code of Error
		 * Required
		 * Min length: 1
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * Error Title
		 * Required
		 * Min length: 1
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateErrorsErrorsFormGroup() {
		return new FormGroup<ErrorsErrorsFormProperties>({
			detail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** API Response Links */
	export interface Links {

		/** Link to the first group of records from API call. */
		first?: string | null;

		/** Link to last set of records from API call. */
		last?: string | null;

		/** Link to next set of results from API call. */
		next?: string | null;

		/** Link to the previous set of records from API call. */
		prev?: string | null;

		/** Link to this response. */
		self?: string | null;
	}

	/** API Response Links */
	export interface LinksFormProperties {

		/** Link to the first group of records from API call. */
		first: FormControl<string | null | undefined>,

		/** Link to last set of records from API call. */
		last: FormControl<string | null | undefined>,

		/** Link to next set of results from API call. */
		next: FormControl<string | null | undefined>,

		/** Link to the previous set of records from API call. */
		prev: FormControl<string | null | undefined>,

		/** Link to this response. */
		self: FormControl<string | null | undefined>,
	}
	export function CreateLinksFormGroup() {
		return new FormGroup<LinksFormProperties>({
			first: new FormControl<string | null | undefined>(undefined),
			last: new FormControl<string | null | undefined>(undefined),
			next: new FormControl<string | null | undefined>(undefined),
			prev: new FormControl<string | null | undefined>(undefined),
			self: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Succesful response of the  */
	export interface ZipCodeResponse {
		data?: Array<Zipcode>;

		/** API Response Links */
		links?: Links;

		/** Response Metadata. Provides additional context about the data response. */
		meta?: Meta;
	}

	/** Succesful response of the  */
	export interface ZipCodeResponseFormProperties {
	}
	export function CreateZipCodeResponseFormGroup() {
		return new FormGroup<ZipCodeResponseFormProperties>({
		});

	}


	/** Zip Code Data Model */
	export interface Zipcode {

		/**
		 * Array that contains all the city aliases for the given zip code.
		 * Required
		 * Minimum items: 1
		 */
		ZipcodeCityAliases: Array<ZipcodeCityAliases>;

		/**
		 * FIPS code assigned to the county of the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		countyFipsCode: string;

		/**
		 * Division Code. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		divisionCode: string;

		/**
		 * Division Name. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		divisionName: string;

		/**
		 * Zip Code Land Area in square kilometers.
		 * Required
		 */
		landAreaKm2: number;

		/**
		 * Zip Code Land area in Square Miles
		 * Required
		 */
		landAreaMi2: number;

		/** Zip Code Latitude */
		latitude?: number | null;

		/** Zip Code Longitude */
		longitude?: number | null;

		/**
		 * 5 digit MSA (Metropolitan Statistical Area) code.
		 * Required
		 * Min length: 1
		 */
		msaCode: string;

		/**
		 * Name of the defined MSA code.
		 * Required
		 * Min length: 1
		 */
		msaName: string;

		/**
		 * Region Code. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		regionCode: string;

		/**
		 * Region Name. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		regionName: string;

		/**
		 * Abbreviation for state name.
		 * Required
		 * Min length: 1
		 */
		stateAbbr: string;

		/**
		 * Standard 2 character state code.
		 * Required
		 * Min length: 1
		 */
		stateCode: string;

		/**
		 * Federal Information Processing Standards 2 digit assigned code.
		 * Required
		 * Min length: 1
		 */
		stateFipsCode: string;

		/**
		 * State Name
		 * Required
		 * Min length: 1
		 */
		stateName: string;

		/**
		 * USPS City / Town Name for the main city of the zip code. Title Case Format.
		 * Required
		 * Min length: 1
		 */
		titleCaseCityName: string;

		/**
		 * Main County Name in Title Case
		 * Required
		 * Min length: 1
		 */
		titleCaseCountyName: string;

		/**
		 * True = Unique Zip Code Name. False the zip code name is not unique.
		 * Required
		 */
		uniqueZipNameInd: boolean;

		/**
		 * Description for the carrier route code.
		 * Required
		 * Min length: 1
		 */
		uspsCarrierRouteRateSortDesc: string;

		/**
		 * Code for the available carrier route.
		 * Required
		 * Min length: 1
		 */
		uspsCarrierRouteSortCode: string;

		/**
		 * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
		 * Required
		 */
		uspsCityMailingInd: boolean;

		/**
		 * Name of the county of the main city for the zip code.
		 * Required
		 * Min length: 1
		 */
		uspsCountyName: string;

		/**
		 * Determines if the zip code city has Carrier Routes.
		 * Required
		 * Min length: 1
		 */
		uspsDeliveryCode: string;

		/**
		 * Determines if the zip code city has Carrier Routes.
		 * Required
		 * Min length: 1
		 */
		uspsDeliveryDesc: string;

		/**
		 * Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
		 * Required
		 * Min length: 1
		 */
		uspsFacilityCode: string;

		/**
		 * USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
		 * Required
		 * Min length: 1
		 */
		uspsFacilityName: string;

		/**
		 * USPS Provided Finance Number. This code is assigned to postal service facilities.
		 * Required
		 * Min length: 1
		 */
		uspsFinanceNumber: string;

		/**
		 * USPS City / Town key identifier for the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		uspsMainCityKey: string;

		/**
		 * USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.
		 * Required
		 * Min length: 1
		 */
		uspsMainCityName: string;

		/**
		 * Zip Code water area in Square kilometers.
		 * Required
		 */
		waterAreaKm2: number;

		/**
		 * Zip Code Water Area in Square Miles
		 * Required
		 */
		waterAreaMi2: number;

		/**
		 * Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.
		 * Required
		 * Min length: 1
		 */
		zipClassificationCode: string;

		/**
		 * Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.
		 * Required
		 * Min length: 1
		 */
		zipClassificationDesc: string;

		/**
		 * 5 Digit Zip Code. Zone Improvement Plan.
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		zipCode: string;

		/**
		 * Available statistics by year of the Zip Code.
		 * Required
		 * Minimum items: 1
		 */
		ZipcodeZipCodeStatistics: Array<ZipcodeZipCodeStatistics>;
	}

	/** Zip Code Data Model */
	export interface ZipcodeFormProperties {

		/**
		 * FIPS code assigned to the county of the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		countyFipsCode: FormControl<string | null | undefined>,

		/**
		 * Division Code. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		divisionCode: FormControl<string | null | undefined>,

		/**
		 * Division Name. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		divisionName: FormControl<string | null | undefined>,

		/**
		 * Zip Code Land Area in square kilometers.
		 * Required
		 */
		landAreaKm2: FormControl<number | null | undefined>,

		/**
		 * Zip Code Land area in Square Miles
		 * Required
		 */
		landAreaMi2: FormControl<number | null | undefined>,

		/** Zip Code Latitude */
		latitude: FormControl<number | null | undefined>,

		/** Zip Code Longitude */
		longitude: FormControl<number | null | undefined>,

		/**
		 * 5 digit MSA (Metropolitan Statistical Area) code.
		 * Required
		 * Min length: 1
		 */
		msaCode: FormControl<string | null | undefined>,

		/**
		 * Name of the defined MSA code.
		 * Required
		 * Min length: 1
		 */
		msaName: FormControl<string | null | undefined>,

		/**
		 * Region Code. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		regionCode: FormControl<string | null | undefined>,

		/**
		 * Region Name. Part of the geographical hierarchy of the US provided by the united states census.
		 * Required
		 * Min length: 1
		 */
		regionName: FormControl<string | null | undefined>,

		/**
		 * Abbreviation for state name.
		 * Required
		 * Min length: 1
		 */
		stateAbbr: FormControl<string | null | undefined>,

		/**
		 * Standard 2 character state code.
		 * Required
		 * Min length: 1
		 */
		stateCode: FormControl<string | null | undefined>,

		/**
		 * Federal Information Processing Standards 2 digit assigned code.
		 * Required
		 * Min length: 1
		 */
		stateFipsCode: FormControl<string | null | undefined>,

		/**
		 * State Name
		 * Required
		 * Min length: 1
		 */
		stateName: FormControl<string | null | undefined>,

		/**
		 * USPS City / Town Name for the main city of the zip code. Title Case Format.
		 * Required
		 * Min length: 1
		 */
		titleCaseCityName: FormControl<string | null | undefined>,

		/**
		 * Main County Name in Title Case
		 * Required
		 * Min length: 1
		 */
		titleCaseCountyName: FormControl<string | null | undefined>,

		/**
		 * True = Unique Zip Code Name. False the zip code name is not unique.
		 * Required
		 */
		uniqueZipNameInd: FormControl<boolean | null | undefined>,

		/**
		 * Description for the carrier route code.
		 * Required
		 * Min length: 1
		 */
		uspsCarrierRouteRateSortDesc: FormControl<string | null | undefined>,

		/**
		 * Code for the available carrier route.
		 * Required
		 * Min length: 1
		 */
		uspsCarrierRouteSortCode: FormControl<string | null | undefined>,

		/**
		 * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
		 * Required
		 */
		uspsCityMailingInd: FormControl<boolean | null | undefined>,

		/**
		 * Name of the county of the main city for the zip code.
		 * Required
		 * Min length: 1
		 */
		uspsCountyName: FormControl<string | null | undefined>,

		/**
		 * Determines if the zip code city has Carrier Routes.
		 * Required
		 * Min length: 1
		 */
		uspsDeliveryCode: FormControl<string | null | undefined>,

		/**
		 * Determines if the zip code city has Carrier Routes.
		 * Required
		 * Min length: 1
		 */
		uspsDeliveryDesc: FormControl<string | null | undefined>,

		/**
		 * Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
		 * Required
		 * Min length: 1
		 */
		uspsFacilityCode: FormControl<string | null | undefined>,

		/**
		 * USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
		 * Required
		 * Min length: 1
		 */
		uspsFacilityName: FormControl<string | null | undefined>,

		/**
		 * USPS Provided Finance Number. This code is assigned to postal service facilities.
		 * Required
		 * Min length: 1
		 */
		uspsFinanceNumber: FormControl<string | null | undefined>,

		/**
		 * USPS City / Town key identifier for the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		uspsMainCityKey: FormControl<string | null | undefined>,

		/**
		 * USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.
		 * Required
		 * Min length: 1
		 */
		uspsMainCityName: FormControl<string | null | undefined>,

		/**
		 * Zip Code water area in Square kilometers.
		 * Required
		 */
		waterAreaKm2: FormControl<number | null | undefined>,

		/**
		 * Zip Code Water Area in Square Miles
		 * Required
		 */
		waterAreaMi2: FormControl<number | null | undefined>,

		/**
		 * Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.
		 * Required
		 * Min length: 1
		 */
		zipClassificationCode: FormControl<string | null | undefined>,

		/**
		 * Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.
		 * Required
		 * Min length: 1
		 */
		zipClassificationDesc: FormControl<string | null | undefined>,

		/**
		 * 5 Digit Zip Code. Zone Improvement Plan.
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		zipCode: FormControl<string | null | undefined>,
	}
	export function CreateZipcodeFormGroup() {
		return new FormGroup<ZipcodeFormProperties>({
			countyFipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			divisionCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			divisionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			landAreaKm2: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			landAreaMi2: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
			msaCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			msaName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			regionCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			regionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateAbbr: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateFipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			titleCaseCityName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			titleCaseCountyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uniqueZipNameInd: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			uspsCarrierRouteRateSortDesc: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCarrierRouteSortCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCityMailingInd: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			uspsCountyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsDeliveryCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsDeliveryDesc: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsFacilityCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsFacilityName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsFinanceNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsMainCityKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsMainCityName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			waterAreaKm2: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			waterAreaMi2: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			zipClassificationCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			zipClassificationDesc: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			zipCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
		});

	}

	export interface ZipcodeCityAliases {

		/**
		 * USPS City / Town Name for the zip code.
		 * Required
		 * Min length: 1
		 */
		titleCaseCityName: string;

		/**
		 * Main city abbreviation provided by USPS. Null if not provided. Uppercase.
		 * Required
		 * Min length: 1
		 */
		uspsCityAbbr: string;

		/**
		 * USPS City / Town key identifier city of the zip code.
		 * Required
		 * Min length: 1
		 */
		uspsCityKey: string;

		/**
		 * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
		 * Required
		 */
		uspsCityMailingInd: boolean;

		/**
		 * USPS City / Town Name for the zip code. All uppercase.
		 * Required
		 * Min length: 1
		 */
		uspsCityName: string;

		/**
		 * If true, the city name and code is the main zip code city name.  (Preferred USPS city).
		 * Required
		 */
		uspsMainCityInd: boolean;
	}
	export interface ZipcodeCityAliasesFormProperties {

		/**
		 * USPS City / Town Name for the zip code.
		 * Required
		 * Min length: 1
		 */
		titleCaseCityName: FormControl<string | null | undefined>,

		/**
		 * Main city abbreviation provided by USPS. Null if not provided. Uppercase.
		 * Required
		 * Min length: 1
		 */
		uspsCityAbbr: FormControl<string | null | undefined>,

		/**
		 * USPS City / Town key identifier city of the zip code.
		 * Required
		 * Min length: 1
		 */
		uspsCityKey: FormControl<string | null | undefined>,

		/**
		 * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
		 * Required
		 */
		uspsCityMailingInd: FormControl<boolean | null | undefined>,

		/**
		 * USPS City / Town Name for the zip code. All uppercase.
		 * Required
		 * Min length: 1
		 */
		uspsCityName: FormControl<string | null | undefined>,

		/**
		 * If true, the city name and code is the main zip code city name.  (Preferred USPS city).
		 * Required
		 */
		uspsMainCityInd: FormControl<boolean | null | undefined>,
	}
	export function CreateZipcodeCityAliasesFormGroup() {
		return new FormGroup<ZipcodeCityAliasesFormProperties>({
			titleCaseCityName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCityAbbr: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCityKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCityMailingInd: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			uspsCityName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsMainCityInd: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ZipcodeZipCodeStatistics {

		/**
		 * Total female population of the zip code.
		 * Required
		 */
		femalePopulation: number;

		/**
		 * Total Male population of the zip code.
		 * Required
		 */
		malePopulation: number;

		/**
		 * Total population of the zip code
		 * Required
		 */
		totalPopulation: number;

		/**
		 * Year for the captured statistic
		 * Required
		 */
		year: number;
	}
	export interface ZipcodeZipCodeStatisticsFormProperties {

		/**
		 * Total female population of the zip code.
		 * Required
		 */
		femalePopulation: FormControl<number | null | undefined>,

		/**
		 * Total Male population of the zip code.
		 * Required
		 */
		malePopulation: FormControl<number | null | undefined>,

		/**
		 * Total population of the zip code
		 * Required
		 */
		totalPopulation: FormControl<number | null | undefined>,

		/**
		 * Year for the captured statistic
		 * Required
		 */
		year: FormControl<number | null | undefined>,
	}
	export function CreateZipcodeZipCodeStatisticsFormGroup() {
		return new FormGroup<ZipcodeZipCodeStatisticsFormProperties>({
			femalePopulation: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			malePopulation: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			totalPopulation: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Response Metadata. Provides additional context about the data response. */
	export interface Meta {

		/**
		 * Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		 * Required
		 */
		count: number;

		/**
		 * Total number of records returned in the data array.
		 * Required
		 */
		limit: number;

		/**
		 * Offset position of where the first record returned.
		 * Required
		 */
		offset: number;
	}

	/** Response Metadata. Provides additional context about the data response. */
	export interface MetaFormProperties {

		/**
		 * Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Total number of records returned in the data array.
		 * Required
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Offset position of where the first record returned.
		 * Required
		 */
		offset: FormControl<number | null | undefined>,
	}
	export function CreateMetaFormGroup() {
		return new FormGroup<MetaFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Validate License Key
		 * Endpoint used to validate license key only. Returns 204 on Success
		 * Get zipc/v1
		 * @return {void} 
		 */
		Get_zipc_v1(): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'zipc/v1', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Distance Between 2 Zip Codes
		 * Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2).
		 * Get zipc/v1/distance
		 * @param {string} zipCode1 Zip Code 1
		 * @param {string} zipCode2 Zip Code 2
		 * @return {Get_distanceReturn} OK
		 */
		Get_distance(zipCode1: string, zipCode2: string): Observable<Get_distanceReturn> {
			return this.http.get<Get_distanceReturn>(this.baseUri + 'zipc/v1/distance?zipCode1=' + (zipCode1 == null ? '' : encodeURIComponent(zipCode1)) + '&zipCode2=' + (zipCode2 == null ? '' : encodeURIComponent(zipCode2)), {});
		}

		/**
		 * List All MSA Groups
		 * This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group.
		 * Get zipc/v1/msagroups
		 * @param {number} limit Number of records to return in each page. Max value: 50.
		 * @param {number} offset Offset is the position in the dataset to start retrieval of records.
		 * @param {string} stateCode Parameter for state code.
		 * @return {Get_msagroupsReturn} OK
		 */
		Get_msagroups(limit: number, offset: number, stateCode: string | null | undefined): Observable<Get_msagroupsReturn> {
			return this.http.get<Get_msagroupsReturn>(this.baseUri + 'zipc/v1/msagroups?limit=' + limit + '&offset=' + offset + '&stateCode=' + (stateCode == null ? '' : encodeURIComponent(stateCode)), {});
		}

		/**
		 * Metro/Micro Statistical Area Details
		 * Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
		 * Get zipc/v1/msagroups/{msaCode}
		 * @return {Get_msagroups_msacodeReturn} OK
		 */
		Get_msagroups_msacode(): Observable<Get_msagroups_msacodeReturn> {
			return this.http.get<Get_msagroups_msacodeReturn>(this.baseUri + 'zipc/v1/msagroups/{msaCode}', {});
		}

		/**
		 * Zip Code Radius
		 * Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
		 * Get zipc/v1/radius
		 * @param {string} zipCode 5 Digit US Zip Code
		 * @param {number} radius Radius distance.  Max 322 km or 200 mi
		 * @param {Get_radiusUom} uom Unit of Measure
		 * @return {Get_radiusReturn} OK
		 */
		Get_radius(zipCode: string, radius: number, uom: Get_radiusUom): Observable<Get_radiusReturn> {
			return this.http.get<Get_radiusReturn>(this.baseUri + 'zipc/v1/radius?zipCode=' + (zipCode == null ? '' : encodeURIComponent(zipCode)) + '&radius=' + radius + '&uom=' + uom, {});
		}

		/**
		 * List all Zip Codes
		 * Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
		 * Get zipc/v1/zipcodes
		 * @param {number} offset Offset is the position in the dataset to start retrieval of records.
		 * @param {number} limit Number of records to return in each page.
		 * @param {string} zipcode 5 Digit Zip Code query parameter. Can have multiple values (separated by comma).
		 * @param {string} uspsMainCityKey Parameter for USPS City / Town key identifier for the main city of the zip code.
		 * @param {string} zipClassificationCode Parameter for zipClassificationCode
		 * @param {string} uspsFacilityCode Parameter for facility code.
		 * @param {string} uspsDeliveryCode Parameter for delivery code.
		 * @param {string} uspsCarrierRouteSortCode Parameter for carrier route sort code.
		 * @param {boolean} uniqueZipNameInd Parameter for unique zip name indicator.
		 * @param {string} uspsFinanceNumber Parameter for finance number.
		 * @param {string} stateCode Parameter for state code.
		 * @param {string} stateFipsCode Parameter for State FIPS code.
		 * @param {string} countyFipsCode Parameter for county FIPS code.
		 * @param {string} divisionCode Parameter for division code. 
		 * @param {string} regionCode Parameter for region code. 
		 * @param {string} msaCode Parameter for msaCode.
		 * @return {ZipCodeResponse} OK
		 */
		Get_zipcodes(offset: number | null | undefined, limit: number | null | undefined, zipcode: string | null | undefined, uspsMainCityKey: string | null | undefined, zipClassificationCode: string | null | undefined, uspsFacilityCode: string | null | undefined, uspsDeliveryCode: string | null | undefined, uspsCarrierRouteSortCode: string | null | undefined, uniqueZipNameInd: boolean | null | undefined, uspsFinanceNumber: string | null | undefined, stateCode: string | null | undefined, stateFipsCode: string | null | undefined, countyFipsCode: string | null | undefined, divisionCode: string | null | undefined, regionCode: string | null | undefined, msaCode: string | null | undefined): Observable<ZipCodeResponse> {
			return this.http.get<ZipCodeResponse>(this.baseUri + 'zipc/v1/zipcodes?offset=' + offset + '&limit=' + limit + '&zipcode=' + (zipcode == null ? '' : encodeURIComponent(zipcode)) + '&uspsMainCityKey=' + (uspsMainCityKey == null ? '' : encodeURIComponent(uspsMainCityKey)) + '&zipClassificationCode=' + (zipClassificationCode == null ? '' : encodeURIComponent(zipClassificationCode)) + '&uspsFacilityCode=' + (uspsFacilityCode == null ? '' : encodeURIComponent(uspsFacilityCode)) + '&uspsDeliveryCode=' + (uspsDeliveryCode == null ? '' : encodeURIComponent(uspsDeliveryCode)) + '&uspsCarrierRouteSortCode=' + (uspsCarrierRouteSortCode == null ? '' : encodeURIComponent(uspsCarrierRouteSortCode)) + '&uniqueZipNameInd=' + uniqueZipNameInd + '&uspsFinanceNumber=' + (uspsFinanceNumber == null ? '' : encodeURIComponent(uspsFinanceNumber)) + '&stateCode=' + (stateCode == null ? '' : encodeURIComponent(stateCode)) + '&stateFipsCode=' + (stateFipsCode == null ? '' : encodeURIComponent(stateFipsCode)) + '&countyFipsCode=' + (countyFipsCode == null ? '' : encodeURIComponent(countyFipsCode)) + '&divisionCode=' + (divisionCode == null ? '' : encodeURIComponent(divisionCode)) + '&regionCode=' + (regionCode == null ? '' : encodeURIComponent(regionCode)) + '&msaCode=' + (msaCode == null ? '' : encodeURIComponent(msaCode)), {});
		}

		/**
		 * Zip Code Details
		 * Gets the details of a single Zip code.
		 * Get zipc/v1/zipcodes/{zipcode}
		 * @return {Get_zipcodeReturn} OK
		 */
		Get_zipcode(): Observable<Get_zipcodeReturn> {
			return this.http.get<Get_zipcodeReturn>(this.baseUri + 'zipc/v1/zipcodes/{zipcode}', {});
		}
	}

	export interface Get_distanceReturn {

		/** Required */
		data: Get_distanceReturnData;

		/** Required */
		links: Get_distanceReturnLinks;
	}
	export interface Get_distanceReturnFormProperties {
	}
	export function CreateGet_distanceReturnFormGroup() {
		return new FormGroup<Get_distanceReturnFormProperties>({
		});

	}

	export interface Get_distanceReturnData {

		/** Required */
		distanceKm: number;

		/** Required */
		distanceMi: number;

		/**
		 * Required
		 * Min length: 1
		 */
		zipCode1: string;

		/**
		 * Required
		 * Min length: 1
		 */
		zipCode2: string;
	}
	export interface Get_distanceReturnDataFormProperties {

		/** Required */
		distanceKm: FormControl<number | null | undefined>,

		/** Required */
		distanceMi: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		zipCode1: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		zipCode2: FormControl<string | null | undefined>,
	}
	export function CreateGet_distanceReturnDataFormGroup() {
		return new FormGroup<Get_distanceReturnDataFormProperties>({
			distanceKm: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			distanceMi: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			zipCode1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			zipCode2: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_distanceReturnLinks {

		/**
		 * Required
		 * Min length: 1
		 */
		self: string;
	}
	export interface Get_distanceReturnLinksFormProperties {

		/**
		 * Required
		 * Min length: 1
		 */
		self: FormControl<string | null | undefined>,
	}
	export function CreateGet_distanceReturnLinksFormGroup() {
		return new FormGroup<Get_distanceReturnLinksFormProperties>({
			self: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroupsReturn {

		/**
		 * Required
		 * Minimum items: 1
		 */
		Get_msagroupsReturnData: Array<Get_msagroupsReturnData>;

		/**
		 * Response Link Navigation object
		 * Required
		 */
		links: Get_msagroupsReturnLinks;

		/**
		 * Response Metadata Information
		 * Required
		 */
		meta: Get_msagroupsReturnMeta;
	}
	export interface Get_msagroupsReturnFormProperties {
	}
	export function CreateGet_msagroupsReturnFormGroup() {
		return new FormGroup<Get_msagroupsReturnFormProperties>({
		});

	}

	export interface Get_msagroupsReturnData {

		/**
		 * 5 digit MSA (Metropolitan Statistical Area) code.
		 * Required
		 * Min length: 1
		 */
		msaCode: string;

		/**
		 * Name of the defined MSA code.
		 * Required
		 * Min length: 1
		 */
		msaName: string;

		/**
		 * Array with states and counties that make up MSA Group
		 * Required
		 * Minimum items: 1
		 */
		Get_msagroupsReturnDataStates: Array<Get_msagroupsReturnDataStates>;
	}
	export interface Get_msagroupsReturnDataFormProperties {

		/**
		 * 5 digit MSA (Metropolitan Statistical Area) code.
		 * Required
		 * Min length: 1
		 */
		msaCode: FormControl<string | null | undefined>,

		/**
		 * Name of the defined MSA code.
		 * Required
		 * Min length: 1
		 */
		msaName: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroupsReturnDataFormGroup() {
		return new FormGroup<Get_msagroupsReturnDataFormProperties>({
			msaCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			msaName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroupsReturnDataStates {

		/**
		 * Array with counties related to MSA group in the state.
		 * Required
		 * Minimum items: 1
		 */
		Get_msagroupsReturnDataStatesCounties: Array<Get_msagroupsReturnDataStatesCounties>;

		/**
		 * Standard 2 character state code.
		 * Required
		 * Max length: 2
		 * Min length: 2
		 */
		stateCode: string;

		/**
		 * Federal Information Processing Standards 2 digit assigned code.
		 * Required
		 * Min length: 1
		 */
		stateFipsCode: string;

		/**
		 * State Name
		 * Required
		 * Min length: 1
		 */
		stateName: string;
	}
	export interface Get_msagroupsReturnDataStatesFormProperties {

		/**
		 * Standard 2 character state code.
		 * Required
		 * Max length: 2
		 * Min length: 2
		 */
		stateCode: FormControl<string | null | undefined>,

		/**
		 * Federal Information Processing Standards 2 digit assigned code.
		 * Required
		 * Min length: 1
		 */
		stateFipsCode: FormControl<string | null | undefined>,

		/**
		 * State Name
		 * Required
		 * Min length: 1
		 */
		stateName: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroupsReturnDataStatesFormGroup() {
		return new FormGroup<Get_msagroupsReturnDataStatesFormProperties>({
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),
			stateFipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroupsReturnDataStatesCounties {

		/**
		 * FIPS code assigned to the county of the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		countyFipsCode: string;

		/**
		 * County Name in Title Case
		 * Required
		 * Min length: 1
		 */
		titleCaseCountyName: string;

		/**
		 * Name of the county of the main city for the zip code. USPS Standard.
		 * Required
		 * Min length: 1
		 */
		uspsCountyName: string;
	}
	export interface Get_msagroupsReturnDataStatesCountiesFormProperties {

		/**
		 * FIPS code assigned to the county of the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		countyFipsCode: FormControl<string | null | undefined>,

		/**
		 * County Name in Title Case
		 * Required
		 * Min length: 1
		 */
		titleCaseCountyName: FormControl<string | null | undefined>,

		/**
		 * Name of the county of the main city for the zip code. USPS Standard.
		 * Required
		 * Min length: 1
		 */
		uspsCountyName: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroupsReturnDataStatesCountiesFormGroup() {
		return new FormGroup<Get_msagroupsReturnDataStatesCountiesFormProperties>({
			countyFipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			titleCaseCountyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCountyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroupsReturnLinks {

		/**
		 * Link to the first group of records from API call.
		 * Min length: 1
		 */
		first?: string | null;

		/**
		 * Link to next set of results from API call.
		 * Min length: 1
		 */
		next?: string | null;

		/**
		 * Link to the previous set of records from API call.
		 * Min length: 1
		 */
		prev?: string | null;

		/**
		 * Link to this response.
		 * Required
		 * Min length: 1
		 */
		self: string;
	}
	export interface Get_msagroupsReturnLinksFormProperties {

		/**
		 * Link to the first group of records from API call.
		 * Min length: 1
		 */
		first: FormControl<string | null | undefined>,

		/**
		 * Link to next set of results from API call.
		 * Min length: 1
		 */
		next: FormControl<string | null | undefined>,

		/**
		 * Link to the previous set of records from API call.
		 * Min length: 1
		 */
		prev: FormControl<string | null | undefined>,

		/**
		 * Link to this response.
		 * Required
		 * Min length: 1
		 */
		self: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroupsReturnLinksFormGroup() {
		return new FormGroup<Get_msagroupsReturnLinksFormProperties>({
			first: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			next: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			prev: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroupsReturnMeta {

		/**
		 * Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		 * Required
		 */
		count: number;

		/**
		 * Total number of records returned in the data array. Specified by limit query parameter.
		 * Required
		 */
		limit: number;

		/**
		 * Offset position of where the first record returned.
		 * Required
		 */
		offset: number;
	}
	export interface Get_msagroupsReturnMetaFormProperties {

		/**
		 * Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		 * Required
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Total number of records returned in the data array. Specified by limit query parameter.
		 * Required
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Offset position of where the first record returned.
		 * Required
		 */
		offset: FormControl<number | null | undefined>,
	}
	export function CreateGet_msagroupsReturnMetaFormGroup() {
		return new FormGroup<Get_msagroupsReturnMetaFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Get_msagroups_msacodeReturn {

		/**
		 * Response Data array.
		 * Required
		 */
		data: Get_msagroups_msacodeReturnData;

		/**
		 * Response Link Navigation object
		 * Required
		 */
		links: Get_msagroups_msacodeReturnLinks;

		/**
		 * Response Metadata Information
		 * Required
		 */
		meta: Get_msagroups_msacodeReturnMeta;
	}
	export interface Get_msagroups_msacodeReturnFormProperties {
	}
	export function CreateGet_msagroups_msacodeReturnFormGroup() {
		return new FormGroup<Get_msagroups_msacodeReturnFormProperties>({
		});

	}

	export interface Get_msagroups_msacodeReturnData {

		/**
		 * 5 digit MSA (Metropolitan Statistical Area) code.
		 * Required
		 * Min length: 1
		 */
		msaCode: string;

		/**
		 * Name of the defined MSA code.
		 * Required
		 * Min length: 1
		 */
		msaName: string;

		/**
		 * Array with states and counties that make up MSA Group
		 * Required
		 * Minimum items: 1
		 */
		Get_msagroups_msacodeReturnDataStates: Array<Get_msagroups_msacodeReturnDataStates>;
	}
	export interface Get_msagroups_msacodeReturnDataFormProperties {

		/**
		 * 5 digit MSA (Metropolitan Statistical Area) code.
		 * Required
		 * Min length: 1
		 */
		msaCode: FormControl<string | null | undefined>,

		/**
		 * Name of the defined MSA code.
		 * Required
		 * Min length: 1
		 */
		msaName: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroups_msacodeReturnDataFormGroup() {
		return new FormGroup<Get_msagroups_msacodeReturnDataFormProperties>({
			msaCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			msaName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroups_msacodeReturnDataStates {

		/**
		 * Array with counties related to MSA group in the state.
		 * Minimum items: 1
		 */
		Get_msagroups_msacodeReturnDataStatesCounties?: Array<Get_msagroups_msacodeReturnDataStatesCounties>;

		/**
		 * Standard 2 character state code.
		 * Required
		 * Min length: 1
		 */
		stateCode: string;

		/**
		 * Federal Information Processing Standards 2 digit assigned code.
		 * Required
		 * Min length: 1
		 */
		stateFipsCode: string;

		/**
		 * State Name
		 * Required
		 * Min length: 1
		 */
		stateName: string;
	}
	export interface Get_msagroups_msacodeReturnDataStatesFormProperties {

		/**
		 * Standard 2 character state code.
		 * Required
		 * Min length: 1
		 */
		stateCode: FormControl<string | null | undefined>,

		/**
		 * Federal Information Processing Standards 2 digit assigned code.
		 * Required
		 * Min length: 1
		 */
		stateFipsCode: FormControl<string | null | undefined>,

		/**
		 * State Name
		 * Required
		 * Min length: 1
		 */
		stateName: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroups_msacodeReturnDataStatesFormGroup() {
		return new FormGroup<Get_msagroups_msacodeReturnDataStatesFormProperties>({
			stateCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateFipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stateName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroups_msacodeReturnDataStatesCounties {

		/**
		 * FIPS code assigned to the county of the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		countyFipsCode: string;

		/**
		 * County Name in Title Case
		 * Required
		 * Min length: 1
		 */
		titleCaseCountyName: string;

		/**
		 * Name of the county of the main city for the zip code USPS Standard.
		 * Required
		 * Min length: 1
		 */
		uspsCountyName: string;
	}
	export interface Get_msagroups_msacodeReturnDataStatesCountiesFormProperties {

		/**
		 * FIPS code assigned to the county of the main city of the zip code.
		 * Required
		 * Min length: 1
		 */
		countyFipsCode: FormControl<string | null | undefined>,

		/**
		 * County Name in Title Case
		 * Required
		 * Min length: 1
		 */
		titleCaseCountyName: FormControl<string | null | undefined>,

		/**
		 * Name of the county of the main city for the zip code USPS Standard.
		 * Required
		 * Min length: 1
		 */
		uspsCountyName: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroups_msacodeReturnDataStatesCountiesFormGroup() {
		return new FormGroup<Get_msagroups_msacodeReturnDataStatesCountiesFormProperties>({
			countyFipsCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			titleCaseCountyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			uspsCountyName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroups_msacodeReturnLinks {

		/**
		 * Link to this response.
		 * Required
		 * Min length: 1
		 */
		self: string;
	}
	export interface Get_msagroups_msacodeReturnLinksFormProperties {

		/**
		 * Link to this response.
		 * Required
		 * Min length: 1
		 */
		self: FormControl<string | null | undefined>,
	}
	export function CreateGet_msagroups_msacodeReturnLinksFormGroup() {
		return new FormGroup<Get_msagroups_msacodeReturnLinksFormProperties>({
			self: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_msagroups_msacodeReturnMeta {

		/**
		 * Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		 * Required
		 */
		count: number;
	}
	export interface Get_msagroups_msacodeReturnMetaFormProperties {

		/**
		 * Total number of records of the response. Note: the data object always has a limit number of records retrieved.
		 * Required
		 */
		count: FormControl<number | null | undefined>,
	}
	export function CreateGet_msagroups_msacodeReturnMetaFormGroup() {
		return new FormGroup<Get_msagroups_msacodeReturnMetaFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Get_radiusUom { mi = 0, km = 1 }

	export interface Get_radiusReturn {

		/**
		 * Required
		 * Minimum items: 1
		 */
		Get_radiusReturnData: Array<Get_radiusReturnData>;

		/** Required */
		links: Get_radiusReturnLinks;

		/** Required */
		meta: Get_radiusReturnMeta;
	}
	export interface Get_radiusReturnFormProperties {
	}
	export function CreateGet_radiusReturnFormGroup() {
		return new FormGroup<Get_radiusReturnFormProperties>({
		});

	}

	export interface Get_radiusReturnData {

		/**
		 * Distance to query parameter zip code in kilometers
		 * Required
		 */
		distanceKm: number;

		/**
		 * Distance to query parameter zip code in miles
		 * Required
		 */
		distanceMi: number;

		/**
		 * Zip Code Latitude
		 * Required
		 */
		latitude: number;

		/**
		 * Zip Code Longitude
		 * Required
		 */
		longitude: number;

		/**
		 * 5 Digit Zip Code. Zone Improvement Plan.
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		zipCode: string;

		/**
		 * URL to Zip Code
		 * Required
		 * Min length: 1
		 */
		zipCodeUrl: string;
	}
	export interface Get_radiusReturnDataFormProperties {

		/**
		 * Distance to query parameter zip code in kilometers
		 * Required
		 */
		distanceKm: FormControl<number | null | undefined>,

		/**
		 * Distance to query parameter zip code in miles
		 * Required
		 */
		distanceMi: FormControl<number | null | undefined>,

		/**
		 * Zip Code Latitude
		 * Required
		 */
		latitude: FormControl<number | null | undefined>,

		/**
		 * Zip Code Longitude
		 * Required
		 */
		longitude: FormControl<number | null | undefined>,

		/**
		 * 5 Digit Zip Code. Zone Improvement Plan.
		 * Required
		 * Max length: 5
		 * Min length: 5
		 */
		zipCode: FormControl<string | null | undefined>,

		/**
		 * URL to Zip Code
		 * Required
		 * Min length: 1
		 */
		zipCodeUrl: FormControl<string | null | undefined>,
	}
	export function CreateGet_radiusReturnDataFormGroup() {
		return new FormGroup<Get_radiusReturnDataFormProperties>({
			distanceKm: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			distanceMi: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			latitude: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			longitude: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			zipCode: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),
			zipCodeUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_radiusReturnLinks {

		/**
		 * Link to this response.
		 * Required
		 * Min length: 1
		 */
		self: string;
	}
	export interface Get_radiusReturnLinksFormProperties {

		/**
		 * Link to this response.
		 * Required
		 * Min length: 1
		 */
		self: FormControl<string | null | undefined>,
	}
	export function CreateGet_radiusReturnLinksFormGroup() {
		return new FormGroup<Get_radiusReturnLinksFormProperties>({
			self: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Get_radiusReturnMeta {

		/**
		 * Number of zip codes found in the radius
		 * Required
		 */
		count: number;
	}
	export interface Get_radiusReturnMetaFormProperties {

		/**
		 * Number of zip codes found in the radius
		 * Required
		 */
		count: FormControl<number | null | undefined>,
	}
	export function CreateGet_radiusReturnMetaFormGroup() {
		return new FormGroup<Get_radiusReturnMetaFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Get_zipcodeReturn {

		/** Zip Code Data Model */
		data?: Zipcode;

		/** API Response Links */
		links?: Links;
	}
	export interface Get_zipcodeReturnFormProperties {
	}
	export function CreateGet_zipcodeReturnFormGroup() {
		return new FormGroup<Get_zipcodeReturnFormProperties>({
		});

	}

}

