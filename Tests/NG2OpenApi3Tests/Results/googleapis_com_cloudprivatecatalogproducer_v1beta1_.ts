import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/**
	 * An association tuple that pairs a `Catalog` to a resource
	 * that can use the `Catalog`. After association, a
	 * google.cloud.privatecatalog.v1beta1.Catalog becomes available to
	 * consumers under specified Association.resource and all of its child
	 * nodes.
	 * Users who have the `cloudprivatecatalog.targets.get` permission on any of
	 * the resource nodes can access the catalog and child products under the node.
	 * For example, suppose the cloud resource hierarchy is as follows:
	 * * organizations/example.com
	 *   * folders/team
	 *     * projects/test
	 * After creating an association with `organizations/example.com`, the catalog
	 * `catalogs/1`  is accessible from the following paths:
	 * * organizations/example.com
	 * * folders/team
	 * * projects/test
	 * Users can access them by
	 * google.cloud.v1beta1.PrivateCatalog.SearchCatalogs action.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1Association {

		/** The creation time of the association. */
		createTime?: string | null;

		/**
		 * Output only. The resource name of the catalog association, in the format
		 * `catalogs/{catalog_id}/associations/{association_id}'.
		 * A unique identifier for the catalog association, which is
		 * generated by catalog service.
		 */
		name?: string | null;

		/**
		 * Required. The user-supplied fully qualified name of the `Resource`
		 * associated to the `Catalog`. It supports `Organization`, `Folder`,
		 * and `Project`. Values are of the form
		 * * `//cloudresourcemanager.googleapis.com/projects/{product_number}`
		 * * `//cloudresourcemanager.googleapis.com/folders/{folder_id}`
		 * * `//cloudresourcemanager.googleapis.com/organizations/{organization_id}`
		 */
		resource?: string | null;
	}

	/**
	 * An association tuple that pairs a `Catalog` to a resource
	 * that can use the `Catalog`. After association, a
	 * google.cloud.privatecatalog.v1beta1.Catalog becomes available to
	 * consumers under specified Association.resource and all of its child
	 * nodes.
	 * Users who have the `cloudprivatecatalog.targets.get` permission on any of
	 * the resource nodes can access the catalog and child products under the node.
	 * For example, suppose the cloud resource hierarchy is as follows:
	 * * organizations/example.com
	 *   * folders/team
	 *     * projects/test
	 * After creating an association with `organizations/example.com`, the catalog
	 * `catalogs/1`  is accessible from the following paths:
	 * * organizations/example.com
	 * * folders/team
	 * * projects/test
	 * Users can access them by
	 * google.cloud.v1beta1.PrivateCatalog.SearchCatalogs action.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1AssociationFormProperties {

		/** The creation time of the association. */
		createTime: FormControl<string | null | undefined>,

		/**
		 * Output only. The resource name of the catalog association, in the format
		 * `catalogs/{catalog_id}/associations/{association_id}'.
		 * A unique identifier for the catalog association, which is
		 * generated by catalog service.
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required. The user-supplied fully qualified name of the `Resource`
		 * associated to the `Catalog`. It supports `Organization`, `Folder`,
		 * and `Project`. Values are of the form
		 * * `//cloudresourcemanager.googleapis.com/projects/{product_number}`
		 * * `//cloudresourcemanager.googleapis.com/folders/{folder_id}`
		 * * `//cloudresourcemanager.googleapis.com/organizations/{organization_id}`
		 */
		resource: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1AssociationFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1AssociationFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			resource: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The producer representation of a catalog which is a curated collection of
	 * solutions that can be managed, controlled, and shared by cloud admins.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1Catalog {

		/** Output only. The time when the catalog was created. */
		createTime?: string | null;

		/**
		 * Required. The user-supplied description of the catalog. Maximum of 512
		 * characters.
		 */
		description?: string | null;

		/**
		 * Required. The user-supplied descriptive name of the catalog as it appears
		 * in UIs. Maximum 256 characters in length.
		 */
		displayName?: string | null;

		/**
		 * Output only. The resource name of the catalog, in the format
		 * `catalogs/{catalog_id}'.
		 * A unique identifier for the catalog, which is generated
		 * by catalog service.
		 */
		name?: string | null;

		/**
		 * Required. The parent resource name of the catalog, which can't be changed
		 * after a catalog is created. It can only be an organization. Values are of
		 * the form `//cloudresourcemanager.googleapis.com/organizations/<id>`.
		 * Maximum 256 characters in length.
		 */
		parent?: string | null;

		/** Output only. The time when the catalog was last updated. */
		updateTime?: string | null;
	}

	/**
	 * The producer representation of a catalog which is a curated collection of
	 * solutions that can be managed, controlled, and shared by cloud admins.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1CatalogFormProperties {

		/** Output only. The time when the catalog was created. */
		createTime: FormControl<string | null | undefined>,

		/**
		 * Required. The user-supplied description of the catalog. Maximum of 512
		 * characters.
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Required. The user-supplied descriptive name of the catalog as it appears
		 * in UIs. Maximum 256 characters in length.
		 */
		displayName: FormControl<string | null | undefined>,

		/**
		 * Output only. The resource name of the catalog, in the format
		 * `catalogs/{catalog_id}'.
		 * A unique identifier for the catalog, which is generated
		 * by catalog service.
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Required. The parent resource name of the catalog, which can't be changed
		 * after a catalog is created. It can only be an organization. Values are of
		 * the form `//cloudresourcemanager.googleapis.com/organizations/<id>`.
		 * Maximum 256 characters in length.
		 */
		parent: FormControl<string | null | undefined>,

		/** Output only. The time when the catalog was last updated. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1CatalogFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1CatalogFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parent: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest {

		/** The resource name of the destination product that is copied to. */
		destinationProductName?: string | null;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequestFormProperties {

		/** The resource name of the destination product that is copied to. */
		destinationProductName: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1CopyProductRequestFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequestFormProperties>({
			destinationProductName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest {

		/**
		 * An association tuple that pairs a `Catalog` to a resource
		 * that can use the `Catalog`. After association, a
		 * google.cloud.privatecatalog.v1beta1.Catalog becomes available to
		 * consumers under specified Association.resource and all of its child
		 * nodes.
		 * Users who have the `cloudprivatecatalog.targets.get` permission on any of
		 * the resource nodes can access the catalog and child products under the node.
		 * For example, suppose the cloud resource hierarchy is as follows:
		 * * organizations/example.com
		 * * folders/team
		 * * projects/test
		 * After creating an association with `organizations/example.com`, the catalog
		 * `catalogs/1`  is accessible from the following paths:
		 * * organizations/example.com
		 * * folders/team
		 * * projects/test
		 * Users can access them by
		 * google.cloud.v1beta1.PrivateCatalog.SearchCatalogs action.
		 */
		association?: GoogleCloudPrivatecatalogproducerV1beta1Association;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequestFormProperties {
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequestFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequestFormProperties>({
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse {

		/** The returned `Association` resources from the list call. */
		associations?: Array<GoogleCloudPrivatecatalogproducerV1beta1Association>;

		/**
		 * A pagination token returned from a previous call to
		 * `ListAssociations` that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken?: string | null;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponseFormProperties {

		/**
		 * A pagination token returned from a previous call to
		 * `ListAssociations` that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponseFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse {

		/** The `Catalogs` returned from the list call. */
		catalogs?: Array<GoogleCloudPrivatecatalogproducerV1beta1Catalog>;

		/**
		 * A pagination token returned from a previous call to ListCatalogs
		 * that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken?: string | null;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponseFormProperties {

		/**
		 * A pagination token returned from a previous call to ListCatalogs
		 * that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponseFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse {

		/**
		 * A pagination token returned from a previous call to ListProducts
		 * that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken?: string | null;

		/** The `Product` returned from the list call. */
		products?: Array<GoogleCloudPrivatecatalogproducerV1beta1Product>;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1ListProductsResponseFormProperties {

		/**
		 * A pagination token returned from a previous call to ListProducts
		 * that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1ListProductsResponseFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1ListProductsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The producer representation of a product which is a child resource of
	 * `Catalog` with display metadata and a list of `Version` resources.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1Product {

		/**
		 * Required. The type of the product asset, which cannot be changed after the
		 * product is created. It supports the values
		 * `google.deploymentmanager.Template` and
		 * `google.cloudprivatecatalog.ListingOnly`. Other values will be
		 * rejected by the server. Read only after creation.
		 * The following fields or resource types have different validation rules
		 * under each `asset_type` values:
		 * * Product.display_metadata has different validation schema for each
		 * asset type value. See its comment for details.
		 * * Version resource isn't allowed to be added under the
		 * `google.cloudprivatecatalog.ListingOnly` type.
		 */
		assetType?: string | null;

		/** Output only. The time when the product was created. */
		createTime?: string | null;

		/**
		 * The user-supplied display metadata to describe the product.
		 * The JSON schema of the metadata differs by Product.asset_type.
		 * When the type is `google.deploymentmanager.Template`, the schema is as
		 * follows:
		 * ```
		 * "$schema": http://json-schema.org/draft-04/schema#
		 * type: object
		 * properties:
		 * name:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * tagline:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * support_info:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * creator:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * documentation:
		 * type: array
		 * items:
		 * type: object
		 * properties:
		 * url:
		 * type: string
		 * pattern:
		 * "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
		 * title:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * required:
		 * - name
		 * - description
		 * additionalProperties: false
		 * ```
		 * When the asset type is `google.cloudprivatecatalog.ListingOnly`, the schema
		 * is as follows:
		 * ```
		 * "$schema": http://json-schema.org/draft-04/schema#
		 * type: object
		 * properties:
		 * name:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * tagline:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * support_info:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * creator:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * documentation:
		 * type: array
		 * items:
		 * type: object
		 * properties:
		 * url:
		 * type: string
		 * pattern:
		 * "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
		 * title:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * signup_url:
		 * type: string
		 * pattern:
		 * "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
		 * required:
		 * - name
		 * - description
		 * - signup_url
		 * additionalProperties: false
		 * ```
		 */
		displayMetadata?: {[id: string]: any };

		/**
		 * Output only. The public accessible URI of the icon uploaded by
		 * PrivateCatalogProducer.UploadIcon.
		 * If no icon is uploaded, it will be the default icon's URI.
		 */
		iconUri?: string | null;

		/**
		 * Required. The resource name of the product in the format
		 * `catalogs/{catalog_id}/products/a-z*[a-z0-9]'.
		 * A unique identifier for the product under a catalog, which cannot
		 * be changed after the product is created. The final
		 * segment of the name must between 1 and 256 characters in length.
		 */
		name?: string | null;

		/** Output only. The time when the product was last updated. */
		updateTime?: string | null;
	}

	/**
	 * The producer representation of a product which is a child resource of
	 * `Catalog` with display metadata and a list of `Version` resources.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1ProductFormProperties {

		/**
		 * Required. The type of the product asset, which cannot be changed after the
		 * product is created. It supports the values
		 * `google.deploymentmanager.Template` and
		 * `google.cloudprivatecatalog.ListingOnly`. Other values will be
		 * rejected by the server. Read only after creation.
		 * The following fields or resource types have different validation rules
		 * under each `asset_type` values:
		 * * Product.display_metadata has different validation schema for each
		 * asset type value. See its comment for details.
		 * * Version resource isn't allowed to be added under the
		 * `google.cloudprivatecatalog.ListingOnly` type.
		 */
		assetType: FormControl<string | null | undefined>,

		/** Output only. The time when the product was created. */
		createTime: FormControl<string | null | undefined>,

		/**
		 * The user-supplied display metadata to describe the product.
		 * The JSON schema of the metadata differs by Product.asset_type.
		 * When the type is `google.deploymentmanager.Template`, the schema is as
		 * follows:
		 * ```
		 * "$schema": http://json-schema.org/draft-04/schema#
		 * type: object
		 * properties:
		 * name:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * tagline:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * support_info:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * creator:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * documentation:
		 * type: array
		 * items:
		 * type: object
		 * properties:
		 * url:
		 * type: string
		 * pattern:
		 * "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
		 * title:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * required:
		 * - name
		 * - description
		 * additionalProperties: false
		 * ```
		 * When the asset type is `google.cloudprivatecatalog.ListingOnly`, the schema
		 * is as follows:
		 * ```
		 * "$schema": http://json-schema.org/draft-04/schema#
		 * type: object
		 * properties:
		 * name:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * tagline:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * support_info:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * creator:
		 * type: string
		 * minLength: 1
		 * maxLength: 100
		 * documentation:
		 * type: array
		 * items:
		 * type: object
		 * properties:
		 * url:
		 * type: string
		 * pattern:
		 * "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
		 * title:
		 * type: string
		 * minLength: 1
		 * maxLength: 64
		 * description:
		 * type: string
		 * minLength: 1
		 * maxLength: 2048
		 * signup_url:
		 * type: string
		 * pattern:
		 * "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
		 * required:
		 * - name
		 * - description
		 * - signup_url
		 * additionalProperties: false
		 * ```
		 */
		displayMetadata: FormControl<{[id: string]: any } | null | undefined>,

		/**
		 * Output only. The public accessible URI of the icon uploaded by
		 * PrivateCatalogProducer.UploadIcon.
		 * If no icon is uploaded, it will be the default icon's URI.
		 */
		iconUri: FormControl<string | null | undefined>,

		/**
		 * Required. The resource name of the product in the format
		 * `catalogs/{catalog_id}/products/a-z*[a-z0-9]'.
		 * A unique identifier for the product under a catalog, which cannot
		 * be changed after the product is created. The final
		 * segment of the name must between 1 and 256 characters in length.
		 */
		name: FormControl<string | null | undefined>,

		/** Output only. The time when the product was last updated. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1ProductFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1ProductFormProperties>({
			assetType: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			displayMetadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			iconUri: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse {

		/**
		 * A pagination token returned from a previous call to ListProducts
		 * that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken?: string | null;

		/** The `VersiVersionon` returned from the list call. */
		versions?: Array<GoogleCloudPrivatecatalogproducerV1beta1Version>;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponseFormProperties {

		/**
		 * A pagination token returned from a previous call to ListProducts
		 * that indicates where the listing should continue from.
		 * This field is optional.
		 */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponseFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The producer representation of a version, which is a child resource under a
	 * `Product` with asset data.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1Version {

		/**
		 * Output only. The asset which has been validated and is ready to be
		 * provisioned. See Version.original_asset for the schema.
		 */
		asset?: {[id: string]: any };

		/** Output only. The time when the version was created. */
		createTime?: string | null;

		/** The user-supplied description of the version. Maximum of 256 characters. */
		description?: string | null;

		/**
		 * Required. The resource name of the version, in the format
		 * `catalogs/{catalog_id}/products/{product_id}/versions/a-z*[a-z0-9]'.
		 * A unique identifier for the version under a product, which can't
		 * be changed after the version is created. The final segment of the name must
		 * between 1 and 63 characters in length.
		 */
		name?: string | null;

		/**
		 * The user-supplied asset payload. The maximum size of the payload is 2MB.
		 * The JSON schema of the payload is defined as:
		 * ```
		 * type: object
		 * properties:
		 * mainTemplate:
		 * type: string
		 * description: The file name of the main template and name prefix of
		 * schema file. The content of the main template should be set in the
		 * imports list. The schema file name is expected to be
		 * <mainTemplate>.schema in the imports list. required: true
		 * imports:
		 * type: array
		 * description: Import template and schema file contents. Required to have
		 * both <mainTemplate> and <mainTemplate>.schema files. required: true
		 * minItems: 2
		 * items:
		 * type: object
		 * properties:
		 * name:
		 * type: string
		 * content:
		 * type: string
		 * ```
		 */
		originalAsset?: {[id: string]: any };

		/** Output only. The time when the version was last updated. */
		updateTime?: string | null;
	}

	/**
	 * The producer representation of a version, which is a child resource under a
	 * `Product` with asset data.
	 */
	export interface GoogleCloudPrivatecatalogproducerV1beta1VersionFormProperties {

		/**
		 * Output only. The asset which has been validated and is ready to be
		 * provisioned. See Version.original_asset for the schema.
		 */
		asset: FormControl<{[id: string]: any } | null | undefined>,

		/** Output only. The time when the version was created. */
		createTime: FormControl<string | null | undefined>,

		/** The user-supplied description of the version. Maximum of 256 characters. */
		description: FormControl<string | null | undefined>,

		/**
		 * Required. The resource name of the version, in the format
		 * `catalogs/{catalog_id}/products/{product_id}/versions/a-z*[a-z0-9]'.
		 * A unique identifier for the version under a product, which can't
		 * be changed after the version is created. The final segment of the name must
		 * between 1 and 63 characters in length.
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The user-supplied asset payload. The maximum size of the payload is 2MB.
		 * The JSON schema of the payload is defined as:
		 * ```
		 * type: object
		 * properties:
		 * mainTemplate:
		 * type: string
		 * description: The file name of the main template and name prefix of
		 * schema file. The content of the main template should be set in the
		 * imports list. The schema file name is expected to be
		 * <mainTemplate>.schema in the imports list. required: true
		 * imports:
		 * type: array
		 * description: Import template and schema file contents. Required to have
		 * both <mainTemplate> and <mainTemplate>.schema files. required: true
		 * minItems: 2
		 * items:
		 * type: object
		 * properties:
		 * name:
		 * type: string
		 * content:
		 * type: string
		 * ```
		 */
		originalAsset: FormControl<{[id: string]: any } | null | undefined>,

		/** Output only. The time when the version was last updated. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1VersionFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1VersionFormProperties>({
			asset: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			originalAsset: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequest {
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequestFormProperties {
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequestFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequestFormProperties>({
		});

	}

	export interface GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest {

		/**
		 * The raw icon bytes user-supplied to be uploaded to the product. The format
		 * of the icon can only be PNG or JPEG. The minimum allowed dimensions are
		 * 130x130 pixels and the maximum dimensions are 10000x10000 pixels.
		 * Required.
		 */
		icon?: string | null;
	}
	export interface GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequestFormProperties {

		/**
		 * The raw icon bytes user-supplied to be uploaded to the product. The format
		 * of the icon can only be PNG or JPEG. The minimum allowed dimensions are
		 * 130x130 pixels and the maximum dimensions are 10000x10000 pixels.
		 * Required.
		 */
		icon: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudPrivatecatalogproducerV1beta1UploadIconRequestFormGroup() {
		return new FormGroup<GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequestFormProperties>({
			icon: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Specifies the audit configuration for a service.
	 * The configuration determines which permission types are logged, and what
	 * identities, if any, are exempted from logging.
	 * An AuditConfig must have one or more AuditLogConfigs.
	 * If there are AuditConfigs for both `allServices` and a specific service,
	 * the union of the two AuditConfigs is used for that service: the log_types
	 * specified in each AuditConfig are enabled, and the exempted_members in each
	 * AuditLogConfig are exempted.
	 * Example Policy with multiple AuditConfigs:
	 *     {
	 *       "audit_configs": [
	 *         {
	 *           "service": "allServices"
	 *           "audit_log_configs": [
	 *             {
	 *               "log_type": "DATA_READ",
	 *               "exempted_members": [
	 *                 "user:jose@example.com"
	 *               ]
	 *             },
	 *             {
	 *               "log_type": "DATA_WRITE",
	 *             },
	 *             {
	 *               "log_type": "ADMIN_READ",
	 *             }
	 *           ]
	 *         },
	 *         {
	 *           "service": "sampleservice.googleapis.com"
	 *           "audit_log_configs": [
	 *             {
	 *               "log_type": "DATA_READ",
	 *             },
	 *             {
	 *               "log_type": "DATA_WRITE",
	 *               "exempted_members": [
	 *                 "user:aliya@example.com"
	 *               ]
	 *             }
	 *           ]
	 *         }
	 *       ]
	 *     }
	 * For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
	 * logging. It also exempts jose@example.com from DATA_READ logging, and
	 * aliya@example.com from DATA_WRITE logging.
	 */
	export interface GoogleIamV1AuditConfig {

		/** The configuration for logging of each type of permission. */
		auditLogConfigs?: Array<GoogleIamV1AuditLogConfig>;

		/**
		 * Specifies a service that will be enabled for audit logging.
		 * For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
		 * `allServices` is a special value that covers all services.
		 */
		service?: string | null;
	}

	/**
	 * Specifies the audit configuration for a service.
	 * The configuration determines which permission types are logged, and what
	 * identities, if any, are exempted from logging.
	 * An AuditConfig must have one or more AuditLogConfigs.
	 * If there are AuditConfigs for both `allServices` and a specific service,
	 * the union of the two AuditConfigs is used for that service: the log_types
	 * specified in each AuditConfig are enabled, and the exempted_members in each
	 * AuditLogConfig are exempted.
	 * Example Policy with multiple AuditConfigs:
	 *     {
	 *       "audit_configs": [
	 *         {
	 *           "service": "allServices"
	 *           "audit_log_configs": [
	 *             {
	 *               "log_type": "DATA_READ",
	 *               "exempted_members": [
	 *                 "user:jose@example.com"
	 *               ]
	 *             },
	 *             {
	 *               "log_type": "DATA_WRITE",
	 *             },
	 *             {
	 *               "log_type": "ADMIN_READ",
	 *             }
	 *           ]
	 *         },
	 *         {
	 *           "service": "sampleservice.googleapis.com"
	 *           "audit_log_configs": [
	 *             {
	 *               "log_type": "DATA_READ",
	 *             },
	 *             {
	 *               "log_type": "DATA_WRITE",
	 *               "exempted_members": [
	 *                 "user:aliya@example.com"
	 *               ]
	 *             }
	 *           ]
	 *         }
	 *       ]
	 *     }
	 * For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
	 * logging. It also exempts jose@example.com from DATA_READ logging, and
	 * aliya@example.com from DATA_WRITE logging.
	 */
	export interface GoogleIamV1AuditConfigFormProperties {

		/**
		 * Specifies a service that will be enabled for audit logging.
		 * For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
		 * `allServices` is a special value that covers all services.
		 */
		service: FormControl<string | null | undefined>,
	}
	export function CreateGoogleIamV1AuditConfigFormGroup() {
		return new FormGroup<GoogleIamV1AuditConfigFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Provides the configuration for logging a type of permissions.
	 * Example:
	 *     {
	 *       "audit_log_configs": [
	 *         {
	 *           "log_type": "DATA_READ",
	 *           "exempted_members": [
	 *             "user:jose@example.com"
	 *           ]
	 *         },
	 *         {
	 *           "log_type": "DATA_WRITE",
	 *         }
	 *       ]
	 *     }
	 * This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
	 * jose@example.com from DATA_READ logging.
	 */
	export interface GoogleIamV1AuditLogConfig {

		/**
		 * Specifies the identities that do not cause logging for this type of
		 * permission.
		 * Follows the same format of Binding.members.
		 */
		exemptedMembers?: Array<string>;

		/** The log type that this config enables. */
		logType?: GoogleIamV1AuditLogConfigLogType | null;
	}

	/**
	 * Provides the configuration for logging a type of permissions.
	 * Example:
	 *     {
	 *       "audit_log_configs": [
	 *         {
	 *           "log_type": "DATA_READ",
	 *           "exempted_members": [
	 *             "user:jose@example.com"
	 *           ]
	 *         },
	 *         {
	 *           "log_type": "DATA_WRITE",
	 *         }
	 *       ]
	 *     }
	 * This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
	 * jose@example.com from DATA_READ logging.
	 */
	export interface GoogleIamV1AuditLogConfigFormProperties {

		/** The log type that this config enables. */
		logType: FormControl<GoogleIamV1AuditLogConfigLogType | null | undefined>,
	}
	export function CreateGoogleIamV1AuditLogConfigFormGroup() {
		return new FormGroup<GoogleIamV1AuditLogConfigFormProperties>({
			logType: new FormControl<GoogleIamV1AuditLogConfigLogType | null | undefined>(undefined),
		});

	}

	export enum GoogleIamV1AuditLogConfigLogType { LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED', ADMIN_READ = 'ADMIN_READ', DATA_WRITE = 'DATA_WRITE', DATA_READ = 'DATA_READ' }


	/** Associates `members` with a `role`. */
	export interface GoogleIamV1Binding {

		/**
		 * Represents an expression text. Example:
		 * title: "User account presence"
		 * description: "Determines whether the request has a user account"
		 * expression: "size(request.user) > 0"
		 */
		condition?: GoogleTypeExpr;

		/**
		 * Specifies the identities requesting access for a Cloud Platform resource.
		 * `members` can have the following values:
		 * * `allUsers`: A special identifier that represents anyone who is
		 * on the internet; with or without a Google account.
		 * * `allAuthenticatedUsers`: A special identifier that represents anyone
		 * who is authenticated with a Google account or a service account.
		 * * `user:{emailid}`: An email address that represents a specific Google
		 * account. For example, `alice@example.com` .
		 * * `serviceAccount:{emailid}`: An email address that represents a service
		 * account. For example, `my-other-app@appspot.gserviceaccount.com`.
		 * * `group:{emailid}`: An email address that represents a Google group.
		 * For example, `admins@example.com`.
		 * * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
		 * identifier) representing a user that has been recently deleted. For
		 * example, `alice@example.com?uid=123456789012345678901`. If the user is
		 * recovered, this value reverts to `user:{emailid}` and the recovered user
		 * retains the role in the binding.
		 * * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
		 * unique identifier) representing a service account that has been recently
		 * deleted. For example,
		 * `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
		 * If the service account is undeleted, this value reverts to
		 * `serviceAccount:{emailid}` and the undeleted service account retains the
		 * role in the binding.
		 * * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
		 * identifier) representing a Google group that has been recently
		 * deleted. For example, `admins@example.com?uid=123456789012345678901`. If
		 * the group is recovered, this value reverts to `group:{emailid}` and the
		 * recovered group retains the role in the binding.
		 * * `domain:{domain}`: The G Suite domain (primary) that represents all the    users of that domain. For example, `google.com` or `example.com`.
		 */
		members?: Array<string>;

		/**
		 * Role that is assigned to `members`.
		 * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		 */
		role?: string | null;
	}

	/** Associates `members` with a `role`. */
	export interface GoogleIamV1BindingFormProperties {

		/**
		 * Role that is assigned to `members`.
		 * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		 */
		role: FormControl<string | null | undefined>,
	}
	export function CreateGoogleIamV1BindingFormGroup() {
		return new FormGroup<GoogleIamV1BindingFormProperties>({
			role: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents an expression text. Example:
	 *     title: "User account presence"
	 *     description: "Determines whether the request has a user account"
	 *     expression: "size(request.user) > 0"
	 */
	export interface GoogleTypeExpr {

		/**
		 * An optional description of the expression. This is a longer text which
		 * describes the expression, e.g. when hovered over it in a UI.
		 */
		description?: string | null;

		/**
		 * Textual representation of an expression in
		 * Common Expression Language syntax.
		 * The application context of the containing message determines which
		 * well-known feature set of CEL is supported.
		 */
		expression?: string | null;

		/**
		 * An optional string indicating the location of the expression for error
		 * reporting, e.g. a file name and a position in the file.
		 */
		location?: string | null;

		/**
		 * An optional title for the expression, i.e. a short string describing
		 * its purpose. This can be used e.g. in UIs which allow to enter the
		 * expression.
		 */
		title?: string | null;
	}

	/**
	 * Represents an expression text. Example:
	 *     title: "User account presence"
	 *     description: "Determines whether the request has a user account"
	 *     expression: "size(request.user) > 0"
	 */
	export interface GoogleTypeExprFormProperties {

		/**
		 * An optional description of the expression. This is a longer text which
		 * describes the expression, e.g. when hovered over it in a UI.
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Textual representation of an expression in
		 * Common Expression Language syntax.
		 * The application context of the containing message determines which
		 * well-known feature set of CEL is supported.
		 */
		expression: FormControl<string | null | undefined>,

		/**
		 * An optional string indicating the location of the expression for error
		 * reporting, e.g. a file name and a position in the file.
		 */
		location: FormControl<string | null | undefined>,

		/**
		 * An optional title for the expression, i.e. a short string describing
		 * its purpose. This can be used e.g. in UIs which allow to enter the
		 * expression.
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleTypeExprFormGroup() {
		return new FormGroup<GoogleTypeExprFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			expression: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * An Identity and Access Management (IAM) policy, which specifies access
	 * controls for Google Cloud resources.
	 * A `Policy` is a collection of `bindings`. A `binding` binds one or more
	 * `members` to a single `role`. Members can be user accounts, service accounts,
	 * Google groups, and domains (such as G Suite). A `role` is a named list of
	 * permissions; each `role` can be an IAM predefined role or a user-created
	 * custom role.
	 * Optionally, a `binding` can specify a `condition`, which is a logical
	 * expression that allows access to a resource only if the expression evaluates
	 * to `true`. A condition can add constraints based on attributes of the
	 * request, the resource, or both.
	 * **JSON example:**
	 *     {
	 *       "bindings": [
	 *         {
	 *           "role": "roles/resourcemanager.organizationAdmin",
	 *           "members": [
	 *             "user:mike@example.com",
	 *             "group:admins@example.com",
	 *             "domain:google.com",
	 *             "serviceAccount:my-project-id@appspot.gserviceaccount.com"
	 *           ]
	 *         },
	 *         {
	 *           "role": "roles/resourcemanager.organizationViewer",
	 *           "members": ["user:eve@example.com"],
	 *           "condition": {
	 *             "title": "expirable access",
	 *             "description": "Does not grant access after Sep 2020",
	 *             "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
	 *           }
	 *         }
	 *       ],
	 *       "etag": "BwWWja0YfJA=",
	 *       "version": 3
	 *     }
	 * **YAML example:**
	 *     bindings:
	 *     - members:
	 *       - user:mike@example.com
	 *       - group:admins@example.com
	 *       - domain:google.com
	 *       - serviceAccount:my-project-id@appspot.gserviceaccount.com
	 *       role: roles/resourcemanager.organizationAdmin
	 *     - members:
	 *       - user:eve@example.com
	 *       role: roles/resourcemanager.organizationViewer
	 *       condition:
	 *         title: expirable access
	 *         description: Does not grant access after Sep 2020
	 *         expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
	 *     - etag: BwWWja0YfJA=
	 *     - version: 3
	 * For a description of IAM and its features, see the
	 * [IAM documentation](https://cloud.google.com/iam/docs/).
	 */
	export interface GoogleIamV1Policy {

		/** Specifies cloud audit logging configuration for this policy. */
		auditConfigs?: Array<GoogleIamV1AuditConfig>;

		/**
		 * Associates a list of `members` to a `role`. Optionally, may specify a
		 * `condition` that determines how and when the `bindings` are applied. Each
		 * of the `bindings` must contain at least one member.
		 */
		bindings?: Array<GoogleIamV1Binding>;

		/**
		 * `etag` is used for optimistic concurrency control as a way to help
		 * prevent simultaneous updates of a policy from overwriting each other.
		 * It is strongly suggested that systems make use of the `etag` in the
		 * read-modify-write cycle to perform policy updates in order to avoid race
		 * conditions: An `etag` is returned in the response to `getIamPolicy`, and
		 * systems are expected to put that etag in the request to `setIamPolicy` to
		 * ensure that their change will be applied to the same version of the policy.
		 * **Important:** If you use IAM Conditions, you must include the `etag` field
		 * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
		 * you to overwrite a version `3` policy with a version `1` policy, and all of
		 * the conditions in the version `3` policy are lost.
		 */
		etag?: string | null;

		/**
		 * Specifies the format of the policy.
		 * Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
		 * are rejected.
		 * Any operation that affects conditional role bindings must specify version
		 * `3`. This requirement applies to the following operations:
		 * * Getting a policy that includes a conditional role binding
		 * * Adding a conditional role binding to a policy
		 * * Changing a conditional role binding in a policy
		 * * Removing any role binding, with or without a condition, from a policy
		 * that includes conditions
		 * **Important:** If you use IAM Conditions, you must include the `etag` field
		 * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
		 * you to overwrite a version `3` policy with a version `1` policy, and all of
		 * the conditions in the version `3` policy are lost.
		 * If a policy does not include any conditions, operations on that policy may
		 * specify any valid version or leave the field unset.
		 */
		version?: number | null;
	}

	/**
	 * An Identity and Access Management (IAM) policy, which specifies access
	 * controls for Google Cloud resources.
	 * A `Policy` is a collection of `bindings`. A `binding` binds one or more
	 * `members` to a single `role`. Members can be user accounts, service accounts,
	 * Google groups, and domains (such as G Suite). A `role` is a named list of
	 * permissions; each `role` can be an IAM predefined role or a user-created
	 * custom role.
	 * Optionally, a `binding` can specify a `condition`, which is a logical
	 * expression that allows access to a resource only if the expression evaluates
	 * to `true`. A condition can add constraints based on attributes of the
	 * request, the resource, or both.
	 * **JSON example:**
	 *     {
	 *       "bindings": [
	 *         {
	 *           "role": "roles/resourcemanager.organizationAdmin",
	 *           "members": [
	 *             "user:mike@example.com",
	 *             "group:admins@example.com",
	 *             "domain:google.com",
	 *             "serviceAccount:my-project-id@appspot.gserviceaccount.com"
	 *           ]
	 *         },
	 *         {
	 *           "role": "roles/resourcemanager.organizationViewer",
	 *           "members": ["user:eve@example.com"],
	 *           "condition": {
	 *             "title": "expirable access",
	 *             "description": "Does not grant access after Sep 2020",
	 *             "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
	 *           }
	 *         }
	 *       ],
	 *       "etag": "BwWWja0YfJA=",
	 *       "version": 3
	 *     }
	 * **YAML example:**
	 *     bindings:
	 *     - members:
	 *       - user:mike@example.com
	 *       - group:admins@example.com
	 *       - domain:google.com
	 *       - serviceAccount:my-project-id@appspot.gserviceaccount.com
	 *       role: roles/resourcemanager.organizationAdmin
	 *     - members:
	 *       - user:eve@example.com
	 *       role: roles/resourcemanager.organizationViewer
	 *       condition:
	 *         title: expirable access
	 *         description: Does not grant access after Sep 2020
	 *         expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
	 *     - etag: BwWWja0YfJA=
	 *     - version: 3
	 * For a description of IAM and its features, see the
	 * [IAM documentation](https://cloud.google.com/iam/docs/).
	 */
	export interface GoogleIamV1PolicyFormProperties {

		/**
		 * `etag` is used for optimistic concurrency control as a way to help
		 * prevent simultaneous updates of a policy from overwriting each other.
		 * It is strongly suggested that systems make use of the `etag` in the
		 * read-modify-write cycle to perform policy updates in order to avoid race
		 * conditions: An `etag` is returned in the response to `getIamPolicy`, and
		 * systems are expected to put that etag in the request to `setIamPolicy` to
		 * ensure that their change will be applied to the same version of the policy.
		 * **Important:** If you use IAM Conditions, you must include the `etag` field
		 * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
		 * you to overwrite a version `3` policy with a version `1` policy, and all of
		 * the conditions in the version `3` policy are lost.
		 */
		etag: FormControl<string | null | undefined>,

		/**
		 * Specifies the format of the policy.
		 * Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
		 * are rejected.
		 * Any operation that affects conditional role bindings must specify version
		 * `3`. This requirement applies to the following operations:
		 * * Getting a policy that includes a conditional role binding
		 * * Adding a conditional role binding to a policy
		 * * Changing a conditional role binding in a policy
		 * * Removing any role binding, with or without a condition, from a policy
		 * that includes conditions
		 * **Important:** If you use IAM Conditions, you must include the `etag` field
		 * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
		 * you to overwrite a version `3` policy with a version `1` policy, and all of
		 * the conditions in the version `3` policy are lost.
		 * If a policy does not include any conditions, operations on that policy may
		 * specify any valid version or leave the field unset.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateGoogleIamV1PolicyFormGroup() {
		return new FormGroup<GoogleIamV1PolicyFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Request message for `SetIamPolicy` method. */
	export interface GoogleIamV1SetIamPolicyRequest {

		/**
		 * An Identity and Access Management (IAM) policy, which specifies access
		 * controls for Google Cloud resources.
		 * A `Policy` is a collection of `bindings`. A `binding` binds one or more
		 * `members` to a single `role`. Members can be user accounts, service accounts,
		 * Google groups, and domains (such as G Suite). A `role` is a named list of
		 * permissions; each `role` can be an IAM predefined role or a user-created
		 * custom role.
		 * Optionally, a `binding` can specify a `condition`, which is a logical
		 * expression that allows access to a resource only if the expression evaluates
		 * to `true`. A condition can add constraints based on attributes of the
		 * request, the resource, or both.
		 * **JSON example:**
		 * {
		 * "bindings": [
		 * {
		 * "role": "roles/resourcemanager.organizationAdmin",
		 * "members": [
		 * "user:mike@example.com",
		 * "group:admins@example.com",
		 * "domain:google.com",
		 * "serviceAccount:my-project-id@appspot.gserviceaccount.com"
		 * ]
		 * },
		 * {
		 * "role": "roles/resourcemanager.organizationViewer",
		 * "members": ["user:eve@example.com"],
		 * "condition": {
		 * "title": "expirable access",
		 * "description": "Does not grant access after Sep 2020",
		 * "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
		 * }
		 * }
		 * ],
		 * "etag": "BwWWja0YfJA=",
		 * "version": 3
		 * }
		 * **YAML example:**
		 * bindings:
		 * - members:
		 * - user:mike@example.com
		 * - group:admins@example.com
		 * - domain:google.com
		 * - serviceAccount:my-project-id@appspot.gserviceaccount.com
		 * role: roles/resourcemanager.organizationAdmin
		 * - members:
		 * - user:eve@example.com
		 * role: roles/resourcemanager.organizationViewer
		 * condition:
		 * title: expirable access
		 * description: Does not grant access after Sep 2020
		 * expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
		 * - etag: BwWWja0YfJA=
		 * - version: 3
		 * For a description of IAM and its features, see the
		 * [IAM documentation](https://cloud.google.com/iam/docs/).
		 */
		policy?: GoogleIamV1Policy;

		/**
		 * OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
		 * the fields in the mask will be modified. If no mask is provided, the
		 * following default mask is used:
		 * paths: "bindings, etag"
		 * This field is only used by Cloud IAM.
		 */
		updateMask?: string | null;
	}

	/** Request message for `SetIamPolicy` method. */
	export interface GoogleIamV1SetIamPolicyRequestFormProperties {

		/**
		 * OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
		 * the fields in the mask will be modified. If no mask is provided, the
		 * following default mask is used:
		 * paths: "bindings, etag"
		 * This field is only used by Cloud IAM.
		 */
		updateMask: FormControl<string | null | undefined>,
	}
	export function CreateGoogleIamV1SetIamPolicyRequestFormGroup() {
		return new FormGroup<GoogleIamV1SetIamPolicyRequestFormProperties>({
			updateMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsRequest {

		/**
		 * The set of permissions to check for the `resource`. Permissions with
		 * wildcards (such as '*' or 'storage.*') are not allowed. For more
		 * information see
		 * [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		 */
		permissions?: Array<string>;
	}

	/** Request message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsRequestFormProperties {
	}
	export function CreateGoogleIamV1TestIamPermissionsRequestFormGroup() {
		return new FormGroup<GoogleIamV1TestIamPermissionsRequestFormProperties>({
		});

	}


	/** Response message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsResponse {

		/**
		 * A subset of `TestPermissionsRequest.permissions` that the caller is
		 * allowed.
		 */
		permissions?: Array<string>;
	}

	/** Response message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsResponseFormProperties {
	}
	export function CreateGoogleIamV1TestIamPermissionsResponseFormGroup() {
		return new FormGroup<GoogleIamV1TestIamPermissionsResponseFormProperties>({
		});

	}


	/** The request message for Operations.CancelOperation. */
	export interface GoogleLongrunningCancelOperationRequest {
	}

	/** The request message for Operations.CancelOperation. */
	export interface GoogleLongrunningCancelOperationRequestFormProperties {
	}
	export function CreateGoogleLongrunningCancelOperationRequestFormGroup() {
		return new FormGroup<GoogleLongrunningCancelOperationRequestFormProperties>({
		});

	}


	/** The response message for Operations.ListOperations. */
	export interface GoogleLongrunningListOperationsResponse {

		/** The standard List next-page token. */
		nextPageToken?: string | null;

		/** A list of operations that matches the specified filter in the request. */
		operations?: Array<GoogleLongrunningOperation>;
	}

	/** The response message for Operations.ListOperations. */
	export interface GoogleLongrunningListOperationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleLongrunningListOperationsResponseFormGroup() {
		return new FormGroup<GoogleLongrunningListOperationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * This resource represents a long-running operation that is the result of a
	 * network API call.
	 */
	export interface GoogleLongrunningOperation {

		/**
		 * If the value is `false`, it means the operation is still in progress.
		 * If `true`, the operation is completed, and either `error` or `response` is
		 * available.
		 */
		done?: boolean | null;

		/**
		 * The `Status` type defines a logical error model that is suitable for
		 * different programming environments, including REST APIs and RPC APIs. It is
		 * used by [gRPC](https://github.com/grpc). Each `Status` message contains
		 * three pieces of data: error code, error message, and error details.
		 * You can find out more about this error model and how to work with it in the
		 * [API Design Guide](https://cloud.google.com/apis/design/errors).
		 */
		error?: GoogleRpcStatus;

		/**
		 * Service-specific metadata associated with the operation.  It typically
		 * contains progress information and common metadata such as create time.
		 * Some services might not provide such metadata.  Any method that returns a
		 * long-running operation should document the metadata type, if any.
		 */
		metadata?: {[id: string]: any };

		/**
		 * The server-assigned name, which is only unique within the same service that
		 * originally returns it. If you use the default HTTP mapping, the
		 * `name` should be a resource name ending with `operations/{unique_id}`.
		 */
		name?: string | null;

		/**
		 * The normal response of the operation in case of success.  If the original
		 * method returns no data on success, such as `Delete`, the response is
		 * `google.protobuf.Empty`.  If the original method is standard
		 * `Get`/`Create`/`Update`, the response should be the resource.  For other
		 * methods, the response should have the type `XxxResponse`, where `Xxx`
		 * is the original method name.  For example, if the original method name
		 * is `TakeSnapshot()`, the inferred response type is
		 * `TakeSnapshotResponse`.
		 */
		response?: {[id: string]: any };
	}

	/**
	 * This resource represents a long-running operation that is the result of a
	 * network API call.
	 */
	export interface GoogleLongrunningOperationFormProperties {

		/**
		 * If the value is `false`, it means the operation is still in progress.
		 * If `true`, the operation is completed, and either `error` or `response` is
		 * available.
		 */
		done: FormControl<boolean | null | undefined>,

		/**
		 * Service-specific metadata associated with the operation.  It typically
		 * contains progress information and common metadata such as create time.
		 * Some services might not provide such metadata.  Any method that returns a
		 * long-running operation should document the metadata type, if any.
		 */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/**
		 * The server-assigned name, which is only unique within the same service that
		 * originally returns it. If you use the default HTTP mapping, the
		 * `name` should be a resource name ending with `operations/{unique_id}`.
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The normal response of the operation in case of success.  If the original
		 * method returns no data on success, such as `Delete`, the response is
		 * `google.protobuf.Empty`.  If the original method is standard
		 * `Get`/`Create`/`Update`, the response should be the resource.  For other
		 * methods, the response should have the type `XxxResponse`, where `Xxx`
		 * is the original method name.  For example, if the original method name
		 * is `TakeSnapshot()`, the inferred response type is
		 * `TakeSnapshotResponse`.
		 */
		response: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleLongrunningOperationFormGroup() {
		return new FormGroup<GoogleLongrunningOperationFormProperties>({
			done: new FormControl<boolean | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/**
	 * The `Status` type defines a logical error model that is suitable for
	 * different programming environments, including REST APIs and RPC APIs. It is
	 * used by [gRPC](https://github.com/grpc). Each `Status` message contains
	 * three pieces of data: error code, error message, and error details.
	 * You can find out more about this error model and how to work with it in the
	 * [API Design Guide](https://cloud.google.com/apis/design/errors).
	 */
	export interface GoogleRpcStatus {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code?: number | null;

		/**
		 * A list of messages that carry the error details.  There is a common set of
		 * message types for APIs to use.
		 */
		details?: Array<string>;

		/**
		 * A developer-facing error message, which should be in English. Any
		 * user-facing error message should be localized and sent in the
		 * google.rpc.Status.details field, or localized by the client.
		 */
		message?: string | null;
	}

	/**
	 * The `Status` type defines a logical error model that is suitable for
	 * different programming environments, including REST APIs and RPC APIs. It is
	 * used by [gRPC](https://github.com/grpc). Each `Status` message contains
	 * three pieces of data: error code, error message, and error details.
	 * You can find out more about this error model and how to work with it in the
	 * [API Design Guide](https://cloud.google.com/apis/design/errors).
	 */
	export interface GoogleRpcStatusFormProperties {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code: FormControl<number | null | undefined>,

		/**
		 * A developer-facing error message, which should be in English. Any
		 * user-facing error message should be localized and sent in the
		 * google.rpc.Status.details field, or localized by the client.
		 */
		message: FormControl<string | null | undefined>,
	}
	export function CreateGoogleRpcStatusFormGroup() {
		return new FormGroup<GoogleRpcStatusFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A generic empty message that you can re-use to avoid defining duplicated
	 * empty messages in your APIs. A typical example is to use it as the request
	 * or the response type of an API method. For instance:
	 *     service Foo {
	 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
	 *     }
	 * The JSON representation for `Empty` is empty JSON object `{}`.
	 */
	export interface GoogleProtobufEmpty {
	}

	/**
	 * A generic empty message that you can re-use to avoid defining duplicated
	 * empty messages in your APIs. A typical example is to use it as the request
	 * or the response type of an API method. For instance:
	 *     service Foo {
	 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
	 *     }
	 * The JSON representation for `Empty` is empty JSON object `{}`.
	 */
	export interface GoogleProtobufEmptyFormProperties {
	}
	export function CreateGoogleProtobufEmptyFormGroup() {
		return new FormGroup<GoogleProtobufEmptyFormProperties>({
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Lists Catalog resources that the producer has access to, within the
		 * scope of the parent resource.
		 * Get v1beta1/catalogs
		 * @param {number} pageSize The maximum number of catalogs to return.
		 * @param {string} pageToken A pagination token returned from a previous call to ListCatalogs
		 * that indicates where this listing should continue from.
		 * This field is optional.
		 * @param {string} parent The resource name of the parent resource.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_list(pageSize: number | null | undefined, pageToken: string | null | undefined, parent: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/catalogs?pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&parent=' + (parent == null ? '' : encodeURIComponent(parent)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a new Catalog resource.
		 * Post v1beta1/catalogs
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_create(requestBody: GoogleCloudPrivatecatalogproducerV1beta1Catalog): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/catalogs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists operations that match the specified filter in the request. If the
		 * server doesn't support this method, it returns `UNIMPLEMENTED`.
		 * NOTE: the `name` binding allows API services to override the binding
		 * to use different resource name schemes, such as `users/operations`. To
		 * override the binding, API services can add a binding such as
		 * `"/v1/{name=users/*}/operations"` to their service configuration.
		 * For backwards compatibility, the default name includes the operations
		 * collection id, however overriding users must ensure the name binding
		 * is the parent resource, without the operations collection id.
		 * Get v1beta1/operations
		 * @param {string} filter The standard list filter.
		 * @param {string} name The name of the operation's parent resource.
		 * @param {number} pageSize The standard list page size.
		 * @param {string} pageToken The standard list page token.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_operations_list(filter: string | null | undefined, name: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/operations?filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&name=' + (name == null ? '' : encodeURIComponent(name)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Hard deletes a Version.
		 * Delete v1beta1/{name}
		 * @param {string} name The resource name of the version.
		 * @param {boolean} force Forces deletion of the `Catalog` and its `Association` resources.
		 * If the `Catalog` is still associated with other resources and
		 * force is not set to true, then the operation fails.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_versions_delete(name: string, force: boolean | null | undefined): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1beta1/' + (name == null ? '' : encodeURIComponent(name)) + '&force=' + force, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the requested Version resource.
		 * Get v1beta1/{name}
		 * @param {string} name The resource name of the version.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_versions_get(name: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/' + (name == null ? '' : encodeURIComponent(name)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates a specific Version resource.
		 * Patch v1beta1/{name}
		 * @param {string} name Required. The resource name of the version, in the format
		 * `catalogs/{catalog_id}/products/{product_id}/versions/a-z*[a-z0-9]'.
		 * A unique identifier for the version under a product, which can't
		 * be changed after the version is created. The final segment of the name must
		 * between 1 and 63 characters in length.
		 * @param {string} updateMask Field mask that controls which fields of the version should be updated.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_versions_patch(name: string, updateMask: string | null | undefined, requestBody: GoogleCloudPrivatecatalogproducerV1beta1Version): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + 'v1beta1/' + (name == null ? '' : encodeURIComponent(name)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Starts asynchronous cancellation on a long-running operation.  The server
		 * makes a best effort to cancel the operation, but success is not
		 * guaranteed.  If the server doesn't support this method, it returns
		 * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
		 * Operations.GetOperation or
		 * other methods to check whether the cancellation succeeded or whether the
		 * operation completed despite cancellation. On successful cancellation,
		 * the operation is not deleted; instead, it becomes an operation with
		 * an Operation.error value with a google.rpc.Status.code of 1,
		 * corresponding to `Code.CANCELLED`.
		 * Post v1beta1/{name}:cancel
		 * @param {string} name The name of the operation resource to be cancelled.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_operations_cancel(name: string, requestBody: GoogleLongrunningCancelOperationRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (name == null ? '' : encodeURIComponent(name)) + ':cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Copies a Product under another Catalog.
		 * Post v1beta1/{name}:copy
		 * @param {string} name The resource name of the current product that is copied from.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_copy(name: string, requestBody: GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (name == null ? '' : encodeURIComponent(name)) + ':copy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Undeletes a deleted Catalog and all resources under it.
		 * Post v1beta1/{name}:undelete
		 * @param {string} name The resource name of the catalog.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_undelete(name: string, requestBody: GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (name == null ? '' : encodeURIComponent(name)) + ':undelete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists all Association resources under a catalog.
		 * Get v1beta1/{parent}/associations
		 * @param {string} parent The resource name of the `Catalog` whose `Associations` are
		 * being retrieved. In the format `catalogs/<catalog>`.
		 * @param {number} pageSize The maximum number of catalog associations to return.
		 * @param {string} pageToken A pagination token returned from the previous call to
		 * `ListAssociations`.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_associations_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/associations&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an Association instance under a given Catalog.
		 * Post v1beta1/{parent}/associations
		 * @param {string} parent The `Catalog` resource's name.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_associations_create(parent: string, requestBody: GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/associations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists Product resources that the producer has access to, within the
		 * scope of the parent catalog.
		 * Get v1beta1/{parent}/products
		 * @param {string} parent The resource name of the parent resource.
		 * @param {string} filter A filter expression used to restrict the returned results based
		 * upon properties of the product.
		 * @param {number} pageSize The maximum number of products to return.
		 * @param {string} pageToken A pagination token returned from a previous call to ListProducts
		 * that indicates where this listing should continue from.
		 * This field is optional.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_list(parent: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/products&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a Product instance under a given Catalog.
		 * Post v1beta1/{parent}/products
		 * @param {string} parent The catalog name of the new product's parent.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_create(parent: string, requestBody: GoogleCloudPrivatecatalogproducerV1beta1Product): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/products', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Lists Version resources that the producer has access to, within the
		 * scope of the parent Product.
		 * Get v1beta1/{parent}/versions
		 * @param {string} parent The resource name of the parent resource.
		 * @param {number} pageSize The maximum number of versions to return.
		 * @param {string} pageToken A pagination token returned from a previous call to ListVersions
		 * that indicates where this listing should continue from.
		 * This field is optional.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_versions_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/versions&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates a Version instance under a given Product.
		 * Post v1beta1/{parent}/versions
		 * @param {string} parent The product name of the new version's parent.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_versions_create(parent: string, requestBody: GoogleCloudPrivatecatalogproducerV1beta1Version): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/versions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Creates an Icon instance under a given Product.
		 * If Product only has a default icon, a new Icon
		 * instance is created and associated with the given Product.
		 * If Product already has a non-default icon, the action creates
		 * a new Icon instance, associates the newly created
		 * Icon with the given Product and deletes the old icon.
		 * Post v1beta1/{product}/icons:upload
		 * @param {string} product The resource name of the product.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_products_icons_upload(product: string, requestBody: GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (product == null ? '' : encodeURIComponent(product)) + '/icons:upload', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Gets IAM policy for the specified Catalog.
		 * Get v1beta1/{resource}:getIamPolicy
		 * @param {string} resource REQUIRED: The resource for which the policy is being requested.
		 * See the operation documentation for the appropriate value for this field.
		 * @param {number} options_requestedPolicyVersion Optional. The policy format version to be returned.
		 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
		 * rejected.
		 * Requests for policies with any conditional bindings must specify version 3.
		 * Policies without any conditional bindings may specify any valid value or
		 * leave the field unset.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_getIamPolicy(resource: string, options_requestedPolicyVersion: number | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1beta1/' + (resource == null ? '' : encodeURIComponent(resource)) + ':getIamPolicy&options_requestedPolicyVersion=' + options_requestedPolicyVersion, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Sets the IAM policy for the specified Catalog.
		 * Post v1beta1/{resource}:setIamPolicy
		 * @param {string} resource REQUIRED: The resource for which the policy is being specified.
		 * See the operation documentation for the appropriate value for this field.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_setIamPolicy(resource: string, requestBody: GoogleIamV1SetIamPolicyRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (resource == null ? '' : encodeURIComponent(resource)) + ':setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Tests the IAM permissions for the specified Catalog.
		 * Post v1beta1/{resource}:testIamPermissions
		 * @param {string} resource REQUIRED: The resource for which the policy detail is being requested.
		 * See the operation documentation for the appropriate value for this field.
		 * @return {void} Successful response
		 */
		Cloudprivatecatalogproducer_catalogs_testIamPermissions(resource: string, requestBody: GoogleIamV1TestIamPermissionsRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1beta1/' + (resource == null ? '' : encodeURIComponent(resource)) + ':testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}
	}

}

