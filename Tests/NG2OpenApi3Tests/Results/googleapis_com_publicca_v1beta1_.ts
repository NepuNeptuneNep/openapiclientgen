import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** A representation of an ExternalAccountKey used for [external account binding](https://tools.ietf.org/html/rfc8555#section-7.3.4) within ACME. */
	export interface ExternalAccountKey {

		/** Output only. Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created */
		b64MacKey?: string | null;

		/** Output only. Key ID. It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created */
		keyId?: string | null;

		/** Output only. Resource name. projects/{project}/locations/{location}/externalAccountKeys/{key_id} */
		name?: string | null;
	}

	/** A representation of an ExternalAccountKey used for [external account binding](https://tools.ietf.org/html/rfc8555#section-7.3.4) within ACME. */
	export interface ExternalAccountKeyFormProperties {

		/** Output only. Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created */
		b64MacKey: FormControl<string | null | undefined>,

		/** Output only. Key ID. It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created */
		keyId: FormControl<string | null | undefined>,

		/** Output only. Resource name. projects/{project}/locations/{location}/externalAccountKeys/{key_id} */
		name: FormControl<string | null | undefined>,
	}
	export function CreateExternalAccountKeyFormGroup() {
		return new FormGroup<ExternalAccountKeyFormProperties>({
			b64MacKey: new FormControl<string | null | undefined>(undefined),
			keyId: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Creates a new ExternalAccountKey bound to the project.
		 * Post v1beta1/{parent}/externalAccountKeys
		 * @param {string} parent Required. The parent resource where this external_account_key will be created. Format: projects/[project_id]/locations/[location]. At present only the "global" location is supported.
		 * @return {ExternalAccountKey} Successful response
		 */
		Publicca_projects_locations_externalAccountKeys_create(parent: string, requestBody: ExternalAccountKey): Observable<ExternalAccountKey> {
			return this.http.post<ExternalAccountKey>(this.baseUri + 'v1beta1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/externalAccountKeys', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

}

