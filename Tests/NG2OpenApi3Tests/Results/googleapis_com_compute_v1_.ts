import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Contains the configurations necessary to generate a signature for access to private storage buckets that support Signature Version 4 for authentication. The service name for generating the authentication header will always default to 's3'. */
	export interface AWSV4Signature {

		/** The access key used for s3 bucket authentication. Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request. @InputOnly */
		accessKey?: string | null;

		/** The identifier of an access key used for s3 bucket authentication. */
		accessKeyId?: string | null;

		/** The optional version identifier for the access key. You can use this to keep track of different iterations of your access key. */
		accessKeyVersion?: string | null;

		/** The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin. For example, "us-east-1" for AWS or "us-ashburn-1" for OCI. */
		originRegion?: string | null;
	}

	/** Contains the configurations necessary to generate a signature for access to private storage buckets that support Signature Version 4 for authentication. The service name for generating the authentication header will always default to 's3'. */
	export interface AWSV4SignatureFormProperties {

		/** The access key used for s3 bucket authentication. Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request. @InputOnly */
		accessKey: FormControl<string | null | undefined>,

		/** The identifier of an access key used for s3 bucket authentication. */
		accessKeyId: FormControl<string | null | undefined>,

		/** The optional version identifier for the access key. You can use this to keep track of different iterations of your access key. */
		accessKeyVersion: FormControl<string | null | undefined>,

		/** The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin. For example, "us-east-1" for AWS or "us-ashburn-1" for OCI. */
		originRegion: FormControl<string | null | undefined>,
	}
	export function CreateAWSV4SignatureFormGroup() {
		return new FormGroup<AWSV4SignatureFormProperties>({
			accessKey: new FormControl<string | null | undefined>(undefined),
			accessKeyId: new FormControl<string | null | undefined>(undefined),
			accessKeyVersion: new FormControl<string | null | undefined>(undefined),
			originRegion: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A specification of the type and number of accelerator cards attached to the instance. */
	export interface AcceleratorConfig {

		/**
		 * The number of the guest accelerator cards exposed to this instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		acceleratorCount?: number | null;

		/** Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types. */
		acceleratorType?: string | null;
	}

	/** A specification of the type and number of accelerator cards attached to the instance. */
	export interface AcceleratorConfigFormProperties {

		/**
		 * The number of the guest accelerator cards exposed to this instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		acceleratorCount: FormControl<number | null | undefined>,

		/** Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types. */
		acceleratorType: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorConfigFormGroup() {
		return new FormGroup<AcceleratorConfigFormProperties>({
			acceleratorCount: new FormControl<number | null | undefined>(undefined),
			acceleratorType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an Accelerator Type resource. Google Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine. */
	export interface AcceleratorType {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** [Output Only] An optional textual description of the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types. */
		kind?: string | null;

		/**
		 * [Output Only] Maximum number of accelerator cards allowed per instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maximumCardsPerInstance?: number | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] Server-defined, fully qualified URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	/** Represents an Accelerator Type resource. Google Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine. */
	export interface AcceleratorTypeFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] An optional textual description of the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types. */
		kind: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Maximum number of accelerator cards allowed per instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maximumCardsPerInstance: FormControl<number | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined, fully qualified URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeFormGroup() {
		return new FormGroup<AcceleratorTypeFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			maximumCardsPerInstance: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Deprecation status for a public resource. */
	export interface DeprecationStatus {

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it. */
		deleted?: string | null;

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it. */
		deprecated?: string | null;

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it. */
		obsolete?: string | null;

		/** The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource. */
		replacement?: string | null;

		/** The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error. */
		state?: DeprecationStatusState | null;
	}

	/** Deprecation status for a public resource. */
	export interface DeprecationStatusFormProperties {

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it. */
		deleted: FormControl<string | null | undefined>,

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it. */
		deprecated: FormControl<string | null | undefined>,

		/** An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it. */
		obsolete: FormControl<string | null | undefined>,

		/** The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource. */
		replacement: FormControl<string | null | undefined>,

		/** The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error. */
		state: FormControl<DeprecationStatusState | null | undefined>,
	}
	export function CreateDeprecationStatusFormGroup() {
		return new FormGroup<DeprecationStatusFormProperties>({
			deleted: new FormControl<string | null | undefined>(undefined),
			deprecated: new FormControl<string | null | undefined>(undefined),
			obsolete: new FormControl<string | null | undefined>(undefined),
			replacement: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<DeprecationStatusState | null | undefined>(undefined),
		});

	}

	export enum DeprecationStatusState { ACTIVE = 'ACTIVE', DELETED = 'DELETED', DEPRECATED = 'DEPRECATED', OBSOLETE = 'OBSOLETE' }

	export interface AcceleratorTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AcceleratorTypesScopedList resources. */
		items?: {[id: string]: AcceleratorTypesScopedList };

		/** [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: AcceleratorTypeAggregatedListWarning;
	}
	export interface AcceleratorTypeAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of AcceleratorTypesScopedList resources. */
		items: FormControl<{[id: string]: AcceleratorTypesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeAggregatedListFormGroup() {
		return new FormGroup<AcceleratorTypeAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: AcceleratorTypesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AcceleratorTypesScopedList {

		/** [Output Only] A list of accelerator types contained in this scope. */
		acceleratorTypes?: Array<AcceleratorType>;

		/** [Output Only] An informational warning that appears when the accelerator types list is empty. */
		warning?: AcceleratorTypesScopedListWarning;
	}
	export interface AcceleratorTypesScopedListFormProperties {
	}
	export function CreateAcceleratorTypesScopedListFormGroup() {
		return new FormGroup<AcceleratorTypesScopedListFormProperties>({
		});

	}

	export interface AcceleratorTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AcceleratorTypesScopedListWarningData?: Array<AcceleratorTypesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AcceleratorTypesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypesScopedListWarningFormGroup() {
		return new FormGroup<AcceleratorTypesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AcceleratorTypesScopedListWarningCode { CLEANUP_FAILED = 'CLEANUP_FAILED', DEPRECATED_RESOURCE_USED = 'DEPRECATED_RESOURCE_USED', DEPRECATED_TYPE_USED = 'DEPRECATED_TYPE_USED', DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 'DISK_SIZE_LARGER_THAN_IMAGE_SIZE', EXPERIMENTAL_TYPE_USED = 'EXPERIMENTAL_TYPE_USED', EXTERNAL_API_WARNING = 'EXTERNAL_API_WARNING', FIELD_VALUE_OVERRIDEN = 'FIELD_VALUE_OVERRIDEN', INJECTED_KERNELS_DEPRECATED = 'INJECTED_KERNELS_DEPRECATED', INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB = 'INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB', LARGE_DEPLOYMENT_WARNING = 'LARGE_DEPLOYMENT_WARNING', LIST_OVERHEAD_QUOTA_EXCEED = 'LIST_OVERHEAD_QUOTA_EXCEED', MISSING_TYPE_DEPENDENCY = 'MISSING_TYPE_DEPENDENCY', NEXT_HOP_ADDRESS_NOT_ASSIGNED = 'NEXT_HOP_ADDRESS_NOT_ASSIGNED', NEXT_HOP_CANNOT_IP_FORWARD = 'NEXT_HOP_CANNOT_IP_FORWARD', NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE = 'NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE', NEXT_HOP_INSTANCE_NOT_FOUND = 'NEXT_HOP_INSTANCE_NOT_FOUND', NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 'NEXT_HOP_INSTANCE_NOT_ON_NETWORK', NEXT_HOP_NOT_RUNNING = 'NEXT_HOP_NOT_RUNNING', NOT_CRITICAL_ERROR = 'NOT_CRITICAL_ERROR', NO_RESULTS_ON_PAGE = 'NO_RESULTS_ON_PAGE', PARTIAL_SUCCESS = 'PARTIAL_SUCCESS', REQUIRED_TOS_AGREEMENT = 'REQUIRED_TOS_AGREEMENT', RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 'RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING', RESOURCE_NOT_DELETED = 'RESOURCE_NOT_DELETED', SCHEMA_VALIDATION_IGNORED = 'SCHEMA_VALIDATION_IGNORED', SINGLE_INSTANCE_PROPERTY_TEMPLATE = 'SINGLE_INSTANCE_PROPERTY_TEMPLATE', UNDECLARED_PROPERTIES = 'UNDECLARED_PROPERTIES', UNREACHABLE = 'UNREACHABLE' }

	export interface AcceleratorTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AcceleratorTypesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypesScopedListWarningDataFormGroup() {
		return new FormGroup<AcceleratorTypesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AcceleratorTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AcceleratorTypeAggregatedListWarningData?: Array<AcceleratorTypeAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AcceleratorTypeAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeAggregatedListWarningFormGroup() {
		return new FormGroup<AcceleratorTypeAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AcceleratorTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AcceleratorTypeAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeAggregatedListWarningDataFormGroup() {
		return new FormGroup<AcceleratorTypeAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of accelerator types. */
	export interface AcceleratorTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AcceleratorType resources. */
		items?: Array<AcceleratorType>;

		/** [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AcceleratorTypeListWarning;
	}

	/** Contains a list of accelerator types. */
	export interface AcceleratorTypeListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeListFormGroup() {
		return new FormGroup<AcceleratorTypeListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AcceleratorTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AcceleratorTypeListWarningData?: Array<AcceleratorTypeListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AcceleratorTypeListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeListWarningFormGroup() {
		return new FormGroup<AcceleratorTypeListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AcceleratorTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AcceleratorTypeListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAcceleratorTypeListWarningDataFormGroup() {
		return new FormGroup<AcceleratorTypeListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An access configuration attached to an instance's network interface. Only one access config per instance is supported. */
	export interface AccessConfig {

		/** Applies to ipv6AccessConfigs only. The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. To use a static external IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an external IPv6 address from the instance's subnetwork. */
		externalIpv6?: string | null;

		/**
		 * Applies to ipv6AccessConfigs only. The prefix length of the external IPv6 range.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		externalIpv6PrefixLength?: number | null;

		/** [Output Only] Type of the resource. Always compute#accessConfig for access configs. */
		kind?: string | null;

		/** The name of this access configuration. In accessConfigs (IPv4), the default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access. In ipv6AccessConfigs, the recommend name is External IPv6. */
		name?: string | null;

		/** Applies to accessConfigs (IPv4) only. An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance. */
		natIP?: string | null;

		/** This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP. */
		networkTier?: AccessConfigNetworkTier | null;

		/** The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig, a default PTR record will be createc for first IP in associated external IPv6 range. */
		publicPtrDomainName?: string | null;

		/** [Output Only] The resource URL for the security policy associated with this access config. */
		securityPolicy?: string | null;

		/** Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A default PTR record will be created if the VM has external IPv6 range associated. */
		setPublicPtr?: boolean | null;

		/** The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6. */
		type?: AccessConfigType | null;
	}

	/** An access configuration attached to an instance's network interface. Only one access config per instance is supported. */
	export interface AccessConfigFormProperties {

		/** Applies to ipv6AccessConfigs only. The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. To use a static external IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an external IPv6 address from the instance's subnetwork. */
		externalIpv6: FormControl<string | null | undefined>,

		/**
		 * Applies to ipv6AccessConfigs only. The prefix length of the external IPv6 range.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		externalIpv6PrefixLength: FormControl<number | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#accessConfig for access configs. */
		kind: FormControl<string | null | undefined>,

		/** The name of this access configuration. In accessConfigs (IPv4), the default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access. In ipv6AccessConfigs, the recommend name is External IPv6. */
		name: FormControl<string | null | undefined>,

		/** Applies to accessConfigs (IPv4) only. An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance. */
		natIP: FormControl<string | null | undefined>,

		/** This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP. */
		networkTier: FormControl<AccessConfigNetworkTier | null | undefined>,

		/** The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig, a default PTR record will be createc for first IP in associated external IPv6 range. */
		publicPtrDomainName: FormControl<string | null | undefined>,

		/** [Output Only] The resource URL for the security policy associated with this access config. */
		securityPolicy: FormControl<string | null | undefined>,

		/** Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A default PTR record will be created if the VM has external IPv6 range associated. */
		setPublicPtr: FormControl<boolean | null | undefined>,

		/** The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6. */
		type: FormControl<AccessConfigType | null | undefined>,
	}
	export function CreateAccessConfigFormGroup() {
		return new FormGroup<AccessConfigFormProperties>({
			externalIpv6: new FormControl<string | null | undefined>(undefined),
			externalIpv6PrefixLength: new FormControl<number | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			natIP: new FormControl<string | null | undefined>(undefined),
			networkTier: new FormControl<AccessConfigNetworkTier | null | undefined>(undefined),
			publicPtrDomainName: new FormControl<string | null | undefined>(undefined),
			securityPolicy: new FormControl<string | null | undefined>(undefined),
			setPublicPtr: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<AccessConfigType | null | undefined>(undefined),
		});

	}

	export enum AccessConfigNetworkTier { FIXED_STANDARD = 'FIXED_STANDARD', PREMIUM = 'PREMIUM', STANDARD = 'STANDARD', STANDARD_OVERRIDES_FIXED_STANDARD = 'STANDARD_OVERRIDES_FIXED_STANDARD' }

	export enum AccessConfigType { DIRECT_IPV6 = 'DIRECT_IPV6', ONE_TO_ONE_NAT = 'ONE_TO_ONE_NAT' }


	/** Represents an IP Address resource. Google Compute Engine has two IP Address resources: * [Global (external and internal)](https://cloud.google.com/compute/docs/reference/rest/v1/globalAddresses) * [Regional (external and internal)](https://cloud.google.com/compute/docs/reference/rest/v1/addresses) For more information, see Reserving a static external IP address. */
	export interface Address {

		/** The static IP address represented by this resource. */
		address?: string | null;

		/** The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL. */
		addressType?: AddressAddressType | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** The IP version that will be used by this address. Valid options are IPV4 or IPV6. */
		ipVersion?: AddressIpVersion | null;

		/** The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation. */
		ipv6EndpointType?: AddressIpv6EndpointType | null;

		/** [Output Only] Type of the resource. Always compute#address for addresses. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this Address, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Address. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name?: string | null;

		/** The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose. */
		network?: string | null;

		/** This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM. */
		networkTier?: AccessConfigNetworkTier | null;

		/**
		 * The prefix length if the resource represents an IP range.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		prefixLength?: number | null;

		/** The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose. */
		purpose?: AddressPurpose | null;

		/** [Output Only] The URL of the region where a regional address resides. For regional addresses, you must specify the region as a path parameter in the HTTP request URL. *This field is not applicable to global addresses.* */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available. */
		status?: AddressStatus | null;

		/** The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose. */
		subnetwork?: string | null;

		/** [Output Only] The URLs of the resources that are using this address. */
		users?: Array<string>;
	}

	/** Represents an IP Address resource. Google Compute Engine has two IP Address resources: * [Global (external and internal)](https://cloud.google.com/compute/docs/reference/rest/v1/globalAddresses) * [Regional (external and internal)](https://cloud.google.com/compute/docs/reference/rest/v1/addresses) For more information, see Reserving a static external IP address. */
	export interface AddressFormProperties {

		/** The static IP address represented by this resource. */
		address: FormControl<string | null | undefined>,

		/** The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL. */
		addressType: FormControl<AddressAddressType | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this field when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** The IP version that will be used by this address. Valid options are IPV4 or IPV6. */
		ipVersion: FormControl<AddressIpVersion | null | undefined>,

		/** The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation. */
		ipv6EndpointType: FormControl<AddressIpv6EndpointType | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#address for addresses. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this Address, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Address. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name: FormControl<string | null | undefined>,

		/** The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose. */
		network: FormControl<string | null | undefined>,

		/** This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM. */
		networkTier: FormControl<AccessConfigNetworkTier | null | undefined>,

		/**
		 * The prefix length if the resource represents an IP range.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		prefixLength: FormControl<number | null | undefined>,

		/** The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose. */
		purpose: FormControl<AddressPurpose | null | undefined>,

		/** [Output Only] The URL of the region where a regional address resides. For regional addresses, you must specify the region as a path parameter in the HTTP request URL. *This field is not applicable to global addresses.* */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available. */
		status: FormControl<AddressStatus | null | undefined>,

		/** The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose. */
		subnetwork: FormControl<string | null | undefined>,
	}
	export function CreateAddressFormGroup() {
		return new FormGroup<AddressFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			addressType: new FormControl<AddressAddressType | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ipVersion: new FormControl<AddressIpVersion | null | undefined>(undefined),
			ipv6EndpointType: new FormControl<AddressIpv6EndpointType | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			networkTier: new FormControl<AccessConfigNetworkTier | null | undefined>(undefined),
			prefixLength: new FormControl<number | null | undefined>(undefined),
			purpose: new FormControl<AddressPurpose | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<AddressStatus | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AddressAddressType { EXTERNAL = 'EXTERNAL', INTERNAL = 'INTERNAL', UNSPECIFIED_TYPE = 'UNSPECIFIED_TYPE' }

	export enum AddressIpVersion { IPV4 = 'IPV4', IPV6 = 'IPV6', UNSPECIFIED_VERSION = 'UNSPECIFIED_VERSION' }

	export enum AddressIpv6EndpointType { NETLB = 'NETLB', VM = 'VM' }

	export enum AddressPurpose { DNS_RESOLVER = 'DNS_RESOLVER', GCE_ENDPOINT = 'GCE_ENDPOINT', IPSEC_INTERCONNECT = 'IPSEC_INTERCONNECT', NAT_AUTO = 'NAT_AUTO', PRIVATE_SERVICE_CONNECT = 'PRIVATE_SERVICE_CONNECT', SERVERLESS = 'SERVERLESS', SHARED_LOADBALANCER_VIP = 'SHARED_LOADBALANCER_VIP', VPC_PEERING = 'VPC_PEERING' }

	export enum AddressStatus { IN_USE = 'IN_USE', RESERVED = 'RESERVED', RESERVING = 'RESERVING' }

	export interface AddressAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AddressesScopedList resources. */
		items?: {[id: string]: AddressesScopedList };

		/** [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: AddressAggregatedListWarning;
	}
	export interface AddressAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of AddressesScopedList resources. */
		items: FormControl<{[id: string]: AddressesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateAddressAggregatedListFormGroup() {
		return new FormGroup<AddressAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: AddressesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddressesScopedList {

		/** [Output Only] A list of addresses contained in this scope. */
		addresses?: Array<Address>;

		/** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
		warning?: AddressesScopedListWarning;
	}
	export interface AddressesScopedListFormProperties {
	}
	export function CreateAddressesScopedListFormGroup() {
		return new FormGroup<AddressesScopedListFormProperties>({
		});

	}

	export interface AddressesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AddressesScopedListWarningData?: Array<AddressesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AddressesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAddressesScopedListWarningFormGroup() {
		return new FormGroup<AddressesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddressesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AddressesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAddressesScopedListWarningDataFormGroup() {
		return new FormGroup<AddressesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddressAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AddressAggregatedListWarningData?: Array<AddressAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AddressAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAddressAggregatedListWarningFormGroup() {
		return new FormGroup<AddressAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddressAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AddressAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAddressAggregatedListWarningDataFormGroup() {
		return new FormGroup<AddressAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of addresses. */
	export interface AddressList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Address resources. */
		items?: Array<Address>;

		/** [Output Only] Type of resource. Always compute#addressList for lists of addresses. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AddressListWarning;
	}

	/** Contains a list of addresses. */
	export interface AddressListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#addressList for lists of addresses. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateAddressListFormGroup() {
		return new FormGroup<AddressListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddressListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AddressListWarningData?: Array<AddressListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AddressListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAddressListWarningFormGroup() {
		return new FormGroup<AddressListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddressListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AddressListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAddressListWarningDataFormGroup() {
		return new FormGroup<AddressListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled). */
	export interface AdvancedMachineFeatures {

		/** Whether to enable nested virtualization or not (default is false). */
		enableNestedVirtualization?: boolean | null;

		/** Whether to enable UEFI networking for instance creation. */
		enableUefiNetworking?: boolean | null;

		/**
		 * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		threadsPerCore?: number | null;

		/**
		 * The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		visibleCoreCount?: number | null;
	}

	/** Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled). */
	export interface AdvancedMachineFeaturesFormProperties {

		/** Whether to enable nested virtualization or not (default is false). */
		enableNestedVirtualization: FormControl<boolean | null | undefined>,

		/** Whether to enable UEFI networking for instance creation. */
		enableUefiNetworking: FormControl<boolean | null | undefined>,

		/**
		 * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		threadsPerCore: FormControl<number | null | undefined>,

		/**
		 * The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		visibleCoreCount: FormControl<number | null | undefined>,
	}
	export function CreateAdvancedMachineFeaturesFormGroup() {
		return new FormGroup<AdvancedMachineFeaturesFormProperties>({
			enableNestedVirtualization: new FormControl<boolean | null | undefined>(undefined),
			enableUefiNetworking: new FormControl<boolean | null | undefined>(undefined),
			threadsPerCore: new FormControl<number | null | undefined>(undefined),
			visibleCoreCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An alias IP range attached to an instance's network interface. */
	export interface AliasIpRange {

		/** The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24). */
		ipCidrRange?: string | null;

		/** The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used. */
		subnetworkRangeName?: string | null;
	}

	/** An alias IP range attached to an instance's network interface. */
	export interface AliasIpRangeFormProperties {

		/** The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24). */
		ipCidrRange: FormControl<string | null | undefined>,

		/** The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used. */
		subnetworkRangeName: FormControl<string | null | undefined>,
	}
	export function CreateAliasIpRangeFormGroup() {
		return new FormGroup<AliasIpRangeFormProperties>({
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			subnetworkRangeName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This reservation type is specified by total resource amounts (e.g. total count of CPUs) and can account for multiple instance SKUs. In other words, one can create instances of varying shapes against this reservation. */
	export interface AllocationAggregateReservation {

		/** [Output only] List of resources currently in use. */
		inUseResources?: Array<AllocationAggregateReservationReservedResourceInfo>;

		/** List of reserved resources (CPUs, memory, accelerators). */
		reservedResources?: Array<AllocationAggregateReservationReservedResourceInfo>;

		/** The VM family that all instances scheduled against this reservation must belong to. */
		vmFamily?: AllocationAggregateReservationVmFamily | null;

		/** The workload type of the instances that will target this reservation. */
		workloadType?: AllocationAggregateReservationWorkloadType | null;
	}

	/** This reservation type is specified by total resource amounts (e.g. total count of CPUs) and can account for multiple instance SKUs. In other words, one can create instances of varying shapes against this reservation. */
	export interface AllocationAggregateReservationFormProperties {

		/** The VM family that all instances scheduled against this reservation must belong to. */
		vmFamily: FormControl<AllocationAggregateReservationVmFamily | null | undefined>,

		/** The workload type of the instances that will target this reservation. */
		workloadType: FormControl<AllocationAggregateReservationWorkloadType | null | undefined>,
	}
	export function CreateAllocationAggregateReservationFormGroup() {
		return new FormGroup<AllocationAggregateReservationFormProperties>({
			vmFamily: new FormControl<AllocationAggregateReservationVmFamily | null | undefined>(undefined),
			workloadType: new FormControl<AllocationAggregateReservationWorkloadType | null | undefined>(undefined),
		});

	}

	export interface AllocationAggregateReservationReservedResourceInfo {
		accelerator?: AllocationAggregateReservationReservedResourceInfoAccelerator;
	}
	export interface AllocationAggregateReservationReservedResourceInfoFormProperties {
	}
	export function CreateAllocationAggregateReservationReservedResourceInfoFormGroup() {
		return new FormGroup<AllocationAggregateReservationReservedResourceInfoFormProperties>({
		});

	}

	export interface AllocationAggregateReservationReservedResourceInfoAccelerator {

		/**
		 * Number of accelerators of specified type.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		acceleratorCount?: number | null;

		/** Full or partial URL to accelerator type. e.g. "projects/{PROJECT}/zones/{ZONE}/acceleratorTypes/ct4l" */
		acceleratorType?: string | null;
	}
	export interface AllocationAggregateReservationReservedResourceInfoAcceleratorFormProperties {

		/**
		 * Number of accelerators of specified type.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		acceleratorCount: FormControl<number | null | undefined>,

		/** Full or partial URL to accelerator type. e.g. "projects/{PROJECT}/zones/{ZONE}/acceleratorTypes/ct4l" */
		acceleratorType: FormControl<string | null | undefined>,
	}
	export function CreateAllocationAggregateReservationReservedResourceInfoAcceleratorFormGroup() {
		return new FormGroup<AllocationAggregateReservationReservedResourceInfoAcceleratorFormProperties>({
			acceleratorCount: new FormControl<number | null | undefined>(undefined),
			acceleratorType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AllocationAggregateReservationVmFamily { VM_FAMILY_CLOUD_TPU_LITE_DEVICE_CT5L = 'VM_FAMILY_CLOUD_TPU_LITE_DEVICE_CT5L', VM_FAMILY_CLOUD_TPU_LITE_POD_SLICE_CT5LP = 'VM_FAMILY_CLOUD_TPU_LITE_POD_SLICE_CT5LP', VM_FAMILY_CLOUD_TPU_POD_SLICE_CT4P = 'VM_FAMILY_CLOUD_TPU_POD_SLICE_CT4P' }

	export enum AllocationAggregateReservationWorkloadType { BATCH = 'BATCH', SERVING = 'SERVING', UNSPECIFIED = 'UNSPECIFIED' }


	/** [Output Only] Contains output only fields. */
	export interface AllocationResourceStatus {

		/** Contains Properties set for the reservation. */
		specificSkuAllocation?: AllocationResourceStatusSpecificSKUAllocation;
	}

	/** [Output Only] Contains output only fields. */
	export interface AllocationResourceStatusFormProperties {
	}
	export function CreateAllocationResourceStatusFormGroup() {
		return new FormGroup<AllocationResourceStatusFormProperties>({
		});

	}


	/** Contains Properties set for the reservation. */
	export interface AllocationResourceStatusSpecificSKUAllocation {

		/** ID of the instance template used to populate reservation properties. */
		sourceInstanceTemplateId?: string | null;
	}

	/** Contains Properties set for the reservation. */
	export interface AllocationResourceStatusSpecificSKUAllocationFormProperties {

		/** ID of the instance template used to populate reservation properties. */
		sourceInstanceTemplateId: FormControl<string | null | undefined>,
	}
	export function CreateAllocationResourceStatusSpecificSKUAllocationFormGroup() {
		return new FormGroup<AllocationResourceStatusSpecificSKUAllocationFormProperties>({
			sourceInstanceTemplateId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {

		/** Specifies the size of the disk in base-2 GB. */
		diskSizeGb?: string | null;

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. */
		interface?: AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null;
	}
	export interface AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskFormProperties {

		/** Specifies the size of the disk in base-2 GB. */
		diskSizeGb: FormControl<string | null | undefined>,

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. */
		interface: FormControl<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null | undefined>,
	}
	export function CreateAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskFormGroup() {
		return new FormGroup<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskFormProperties>({
			diskSizeGb: new FormControl<string | null | undefined>(undefined),
			interface: new FormControl<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null | undefined>(undefined),
		});

	}

	export enum AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface { NVME = 'NVME', SCSI = 'SCSI' }


	/** Properties of the SKU instances being reserved. Next ID: 9 */
	export interface AllocationSpecificSKUAllocationReservedInstanceProperties {

		/** Specifies accelerator type and count. */
		guestAccelerators?: Array<AcceleratorConfig>;

		/** Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd. */
		localSsds?: Array<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk>;

		/** An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API. */
		locationHint?: string | null;

		/** Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern. */
		machineType?: string | null;

		/** Minimum cpu platform the reservation. */
		minCpuPlatform?: string | null;
	}

	/** Properties of the SKU instances being reserved. Next ID: 9 */
	export interface AllocationSpecificSKUAllocationReservedInstancePropertiesFormProperties {

		/** An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API. */
		locationHint: FormControl<string | null | undefined>,

		/** Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern. */
		machineType: FormControl<string | null | undefined>,

		/** Minimum cpu platform the reservation. */
		minCpuPlatform: FormControl<string | null | undefined>,
	}
	export function CreateAllocationSpecificSKUAllocationReservedInstancePropertiesFormGroup() {
		return new FormGroup<AllocationSpecificSKUAllocationReservedInstancePropertiesFormProperties>({
			locationHint: new FormControl<string | null | undefined>(undefined),
			machineType: new FormControl<string | null | undefined>(undefined),
			minCpuPlatform: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This reservation type allows to pre allocate specific instance configuration. Next ID: 6 */
	export interface AllocationSpecificSKUReservation {

		/** [Output Only] Indicates how many instances are actually usable currently. */
		assuredCount?: string | null;

		/** Specifies the number of resources that are allocated. */
		count?: string | null;

		/** [Output Only] Indicates how many instances are in use. */
		inUseCount?: string | null;

		/** Properties of the SKU instances being reserved. Next ID: 9 */
		instanceProperties?: AllocationSpecificSKUAllocationReservedInstanceProperties;

		/** Specifies the instance template to create the reservation. If you use this field, you must exclude the instanceProperties field. This field is optional, and it can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate */
		sourceInstanceTemplate?: string | null;
	}

	/** This reservation type allows to pre allocate specific instance configuration. Next ID: 6 */
	export interface AllocationSpecificSKUReservationFormProperties {

		/** [Output Only] Indicates how many instances are actually usable currently. */
		assuredCount: FormControl<string | null | undefined>,

		/** Specifies the number of resources that are allocated. */
		count: FormControl<string | null | undefined>,

		/** [Output Only] Indicates how many instances are in use. */
		inUseCount: FormControl<string | null | undefined>,

		/** Specifies the instance template to create the reservation. If you use this field, you must exclude the instanceProperties field. This field is optional, and it can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate */
		sourceInstanceTemplate: FormControl<string | null | undefined>,
	}
	export function CreateAllocationSpecificSKUReservationFormGroup() {
		return new FormGroup<AllocationSpecificSKUReservationFormProperties>({
			assuredCount: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<string | null | undefined>(undefined),
			inUseCount: new FormControl<string | null | undefined>(undefined),
			sourceInstanceTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An instance-attached disk resource. */
	export interface AttachedDisk {

		/** [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64. */
		architecture?: AttachedDiskArchitecture | null;

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete?: boolean | null;

		/** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
		boot?: boolean | null;

		/** Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks. */
		deviceName?: string | null;
		diskEncryptionKey?: CustomerEncryptionKey;

		/** The size of the disk in GB. */
		diskSizeGb?: string | null;

		/** [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. */
		forceAttach?: boolean | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature>;

		/**
		 * [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		index?: number | null;

		/** [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both. */
		initializeParams?: AttachedDiskInitializeParams;

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks. */
		interface?: AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null;

		/** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
		kind?: string | null;

		/** [Output Only] Any valid publicly visible licenses. */
		licenses?: Array<string>;

		/** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
		mode?: AttachedDiskMode | null;

		/** For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api. */
		savedState?: AttachedDiskSavedState | null;

		/** Initial State for shielded instance, these are public keys which are safe to store in public */
		shieldedInstanceInitialState?: InitialStateConfig;

		/** Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk. */
		source?: string | null;

		/** Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT. */
		type?: AttachedDiskType | null;
	}

	/** An instance-attached disk resource. */
	export interface AttachedDiskFormProperties {

		/** [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64. */
		architecture: FormControl<AttachedDiskArchitecture | null | undefined>,

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete: FormControl<boolean | null | undefined>,

		/** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
		boot: FormControl<boolean | null | undefined>,

		/** Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks. */
		deviceName: FormControl<string | null | undefined>,

		/** The size of the disk in GB. */
		diskSizeGb: FormControl<string | null | undefined>,

		/** [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. */
		forceAttach: FormControl<boolean | null | undefined>,

		/**
		 * [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		index: FormControl<number | null | undefined>,

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks. */
		interface: FormControl<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
		kind: FormControl<string | null | undefined>,

		/** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
		mode: FormControl<AttachedDiskMode | null | undefined>,

		/** For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api. */
		savedState: FormControl<AttachedDiskSavedState | null | undefined>,

		/** Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk. */
		source: FormControl<string | null | undefined>,

		/** Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT. */
		type: FormControl<AttachedDiskType | null | undefined>,
	}
	export function CreateAttachedDiskFormGroup() {
		return new FormGroup<AttachedDiskFormProperties>({
			architecture: new FormControl<AttachedDiskArchitecture | null | undefined>(undefined),
			autoDelete: new FormControl<boolean | null | undefined>(undefined),
			boot: new FormControl<boolean | null | undefined>(undefined),
			deviceName: new FormControl<string | null | undefined>(undefined),
			diskSizeGb: new FormControl<string | null | undefined>(undefined),
			forceAttach: new FormControl<boolean | null | undefined>(undefined),
			index: new FormControl<number | null | undefined>(undefined),
			interface: new FormControl<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			mode: new FormControl<AttachedDiskMode | null | undefined>(undefined),
			savedState: new FormControl<AttachedDiskSavedState | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<AttachedDiskType | null | undefined>(undefined),
		});

	}

	export enum AttachedDiskArchitecture { ARCHITECTURE_UNSPECIFIED = 'ARCHITECTURE_UNSPECIFIED', ARM64 = 'ARM64', X86_64 = 'X86_64' }

	export interface CustomerEncryptionKey {

		/** The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1 */
		kmsKeyName?: string | null;

		/** The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount": "name@project_id.iam.gserviceaccount.com/ */
		kmsKeyServiceAccount?: string | null;

		/** Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=" */
		rawKey?: string | null;

		/** Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem */
		rsaEncryptedKey?: string | null;

		/** [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource. */
		sha256?: string | null;
	}
	export interface CustomerEncryptionKeyFormProperties {

		/** The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1 */
		kmsKeyName: FormControl<string | null | undefined>,

		/** The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount": "name@project_id.iam.gserviceaccount.com/ */
		kmsKeyServiceAccount: FormControl<string | null | undefined>,

		/** Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=" */
		rawKey: FormControl<string | null | undefined>,

		/** Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem */
		rsaEncryptedKey: FormControl<string | null | undefined>,

		/** [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource. */
		sha256: FormControl<string | null | undefined>,
	}
	export function CreateCustomerEncryptionKeyFormGroup() {
		return new FormGroup<CustomerEncryptionKeyFormProperties>({
			kmsKeyName: new FormControl<string | null | undefined>(undefined),
			kmsKeyServiceAccount: new FormControl<string | null | undefined>(undefined),
			rawKey: new FormControl<string | null | undefined>(undefined),
			rsaEncryptedKey: new FormControl<string | null | undefined>(undefined),
			sha256: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Guest OS features. */
	export interface GuestOsFeature {

		/** The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS - MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_LIVE_MIGRATABLE - SEV_SNP_CAPABLE - IDPF For more information, see Enabling guest operating system features. */
		type?: GuestOsFeatureType | null;
	}

	/** Guest OS features. */
	export interface GuestOsFeatureFormProperties {

		/** The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS - MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_LIVE_MIGRATABLE - SEV_SNP_CAPABLE - IDPF For more information, see Enabling guest operating system features. */
		type: FormControl<GuestOsFeatureType | null | undefined>,
	}
	export function CreateGuestOsFeatureFormGroup() {
		return new FormGroup<GuestOsFeatureFormProperties>({
			type: new FormControl<GuestOsFeatureType | null | undefined>(undefined),
		});

	}

	export enum GuestOsFeatureType { FEATURE_TYPE_UNSPECIFIED = 'FEATURE_TYPE_UNSPECIFIED', GVNIC = 'GVNIC', IDPF = 'IDPF', MULTI_IP_SUBNET = 'MULTI_IP_SUBNET', SECURE_BOOT = 'SECURE_BOOT', SEV_CAPABLE = 'SEV_CAPABLE', SEV_LIVE_MIGRATABLE = 'SEV_LIVE_MIGRATABLE', SEV_LIVE_MIGRATABLE_V2 = 'SEV_LIVE_MIGRATABLE_V2', SEV_SNP_CAPABLE = 'SEV_SNP_CAPABLE', UEFI_COMPATIBLE = 'UEFI_COMPATIBLE', VIRTIO_SCSI_MULTIQUEUE = 'VIRTIO_SCSI_MULTIQUEUE', WINDOWS = 'WINDOWS' }


	/** [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both. */
	export interface AttachedDiskInitializeParams {

		/** The architecture of the attached disk. Valid values are arm64 or x86_64. */
		architecture?: AttachedDiskArchitecture | null;

		/** An optional description. Provide this property when creating the disk. */
		description?: string | null;

		/** Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created. */
		diskName?: string | null;

		/** Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB. */
		diskSizeGb?: string | null;

		/** Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you specify this field when creating a VM, you can provide either the full or partial URL. For example, the following values are valid: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType If you specify this field when creating or updating an instance template or all-instances configuration, specify the type of the disk, not the URL. For example: pd-standard. */
		diskType?: string | null;

		/** Whether this disk is using confidential compute mode. */
		enableConfidentialCompute?: boolean | null;

		/** Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks. */
		labels?: {[id: string]: string };

		/** A list of publicly visible licenses. Reserved for Google's use. */
		licenses?: Array<string>;

		/** Specifies which action to take on instance update with this disk. Default is to use the existing disk. */
		onUpdateAction?: AttachedDiskInitializeParamsOnUpdateAction | null;

		/** Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation. */
		provisionedIops?: string | null;

		/** Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle. Values must be between 1 and 7,124. */
		provisionedThroughput?: string | null;

		/** Required for each regional disk associated with the instance. Specify the URLs of the zones where the disk should be replicated to. You must provide exactly two replica zones, and one zone must be the same as the instance zone. */
		replicaZones?: Array<string>;

		/** Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags?: {[id: string]: string };

		/** Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name. */
		resourcePolicies?: Array<string>;

		/** The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set. */
		sourceImage?: string | null;
		sourceImageEncryptionKey?: CustomerEncryptionKey;

		/** The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set. */
		sourceSnapshot?: string | null;
		sourceSnapshotEncryptionKey?: CustomerEncryptionKey;
	}

	/** [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both. */
	export interface AttachedDiskInitializeParamsFormProperties {

		/** The architecture of the attached disk. Valid values are arm64 or x86_64. */
		architecture: FormControl<AttachedDiskArchitecture | null | undefined>,

		/** An optional description. Provide this property when creating the disk. */
		description: FormControl<string | null | undefined>,

		/** Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created. */
		diskName: FormControl<string | null | undefined>,

		/** Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB. */
		diskSizeGb: FormControl<string | null | undefined>,

		/** Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you specify this field when creating a VM, you can provide either the full or partial URL. For example, the following values are valid: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType If you specify this field when creating or updating an instance template or all-instances configuration, specify the type of the disk, not the URL. For example: pd-standard. */
		diskType: FormControl<string | null | undefined>,

		/** Whether this disk is using confidential compute mode. */
		enableConfidentialCompute: FormControl<boolean | null | undefined>,

		/** Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Specifies which action to take on instance update with this disk. Default is to use the existing disk. */
		onUpdateAction: FormControl<AttachedDiskInitializeParamsOnUpdateAction | null | undefined>,

		/** Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation. */
		provisionedIops: FormControl<string | null | undefined>,

		/** Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle. Values must be between 1 and 7,124. */
		provisionedThroughput: FormControl<string | null | undefined>,

		/** Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags: FormControl<{[id: string]: string } | null | undefined>,

		/** The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set. */
		sourceImage: FormControl<string | null | undefined>,

		/** The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set. */
		sourceSnapshot: FormControl<string | null | undefined>,
	}
	export function CreateAttachedDiskInitializeParamsFormGroup() {
		return new FormGroup<AttachedDiskInitializeParamsFormProperties>({
			architecture: new FormControl<AttachedDiskArchitecture | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			diskName: new FormControl<string | null | undefined>(undefined),
			diskSizeGb: new FormControl<string | null | undefined>(undefined),
			diskType: new FormControl<string | null | undefined>(undefined),
			enableConfidentialCompute: new FormControl<boolean | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			onUpdateAction: new FormControl<AttachedDiskInitializeParamsOnUpdateAction | null | undefined>(undefined),
			provisionedIops: new FormControl<string | null | undefined>(undefined),
			provisionedThroughput: new FormControl<string | null | undefined>(undefined),
			resourceManagerTags: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			sourceImage: new FormControl<string | null | undefined>(undefined),
			sourceSnapshot: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AttachedDiskInitializeParamsOnUpdateAction { RECREATE_DISK = 'RECREATE_DISK', RECREATE_DISK_IF_SOURCE_CHANGED = 'RECREATE_DISK_IF_SOURCE_CHANGED', USE_EXISTING_DISK = 'USE_EXISTING_DISK' }

	export enum AttachedDiskMode { READ_ONLY = 'READ_ONLY', READ_WRITE = 'READ_WRITE' }

	export enum AttachedDiskSavedState { DISK_SAVED_STATE_UNSPECIFIED = 'DISK_SAVED_STATE_UNSPECIFIED', PRESERVED = 'PRESERVED' }


	/** Initial State for shielded instance, these are public keys which are safe to store in public */
	export interface InitialStateConfig {

		/** The Key Database (db). */
		dbs?: Array<FileContentBuffer>;

		/** The forbidden key database (dbx). */
		dbxs?: Array<FileContentBuffer>;

		/** The Key Exchange Key (KEK). */
		keks?: Array<FileContentBuffer>;
		pk?: FileContentBuffer;
	}

	/** Initial State for shielded instance, these are public keys which are safe to store in public */
	export interface InitialStateConfigFormProperties {
	}
	export function CreateInitialStateConfigFormGroup() {
		return new FormGroup<InitialStateConfigFormProperties>({
		});

	}

	export interface FileContentBuffer {

		/** The raw content in the secure keys file. */
		content?: string | null;

		/** The file type of source file. */
		fileType?: FileContentBufferFileType | null;
	}
	export interface FileContentBufferFormProperties {

		/** The raw content in the secure keys file. */
		content: FormControl<string | null | undefined>,

		/** The file type of source file. */
		fileType: FormControl<FileContentBufferFileType | null | undefined>,
	}
	export function CreateFileContentBufferFormGroup() {
		return new FormGroup<FileContentBufferFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			fileType: new FormControl<FileContentBufferFileType | null | undefined>(undefined),
		});

	}

	export enum FileContentBufferFileType { BIN = 'BIN', UNDEFINED = 'UNDEFINED', X509 = 'X509' }

	export enum AttachedDiskType { PERSISTENT = 'PERSISTENT', SCRATCH = 'SCRATCH' }


	/** Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging. */
	export interface AuditConfig {

		/** The configuration for logging of each type of permission. */
		auditLogConfigs?: Array<AuditLogConfig>;

		/** This is deprecated and has no effect. Do not use. */
		exemptedMembers?: Array<string>;

		/** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
		service?: string | null;
	}

	/** Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging. */
	export interface AuditConfigFormProperties {

		/** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateAuditConfigFormGroup() {
		return new FormGroup<AuditConfigFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging. */
	export interface AuditLogConfig {

		/** Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
		exemptedMembers?: Array<string>;

		/** This is deprecated and has no effect. Do not use. */
		ignoreChildExemptions?: boolean | null;

		/** The log type that this config enables. */
		logType?: AuditLogConfigLogType | null;
	}

	/** Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging. */
	export interface AuditLogConfigFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		ignoreChildExemptions: FormControl<boolean | null | undefined>,

		/** The log type that this config enables. */
		logType: FormControl<AuditLogConfigLogType | null | undefined>,
	}
	export function CreateAuditLogConfigFormGroup() {
		return new FormGroup<AuditLogConfigFormProperties>({
			ignoreChildExemptions: new FormControl<boolean | null | undefined>(undefined),
			logType: new FormControl<AuditLogConfigLogType | null | undefined>(undefined),
		});

	}

	export enum AuditLogConfigLogType { ADMIN_READ = 'ADMIN_READ', DATA_READ = 'DATA_READ', DATA_WRITE = 'DATA_WRITE', LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED' }


	/** This is deprecated and has no effect. Do not use. */
	export interface AuthorizationLoggingOptions {

		/** This is deprecated and has no effect. Do not use. */
		permissionType?: AuthorizationLoggingOptionsPermissionType | null;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface AuthorizationLoggingOptionsFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		permissionType: FormControl<AuthorizationLoggingOptionsPermissionType | null | undefined>,
	}
	export function CreateAuthorizationLoggingOptionsFormGroup() {
		return new FormGroup<AuthorizationLoggingOptionsFormProperties>({
			permissionType: new FormControl<AuthorizationLoggingOptionsPermissionType | null | undefined>(undefined),
		});

	}

	export enum AuthorizationLoggingOptionsPermissionType { ADMIN_READ = 'ADMIN_READ', ADMIN_WRITE = 'ADMIN_WRITE', DATA_READ = 'DATA_READ', DATA_WRITE = 'DATA_WRITE', PERMISSION_TYPE_UNSPECIFIED = 'PERMISSION_TYPE_UNSPECIFIED' }


	/** Represents an Autoscaler resource. Google Compute Engine has two Autoscaler resources: * [Zonal](/compute/docs/reference/rest/v1/autoscalers) * [Regional](/compute/docs/reference/rest/v1/regionAutoscalers) Use autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances. For zonal managed instance groups resource, use the autoscaler resource. For regional managed instance groups, use the regionAutoscalers resource. */
	export interface Autoscaler {

		/** Cloud Autoscaler policy. */
		autoscalingPolicy?: AutoscalingPolicy;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#autoscaler for autoscalers. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/**
		 * [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates the recommended MIG size even when the autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to an existing managed instance group or autoscaler did not generate its prediction.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		recommendedSize?: number | null;

		/** [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope). */
		region?: string | null;

		/** [Output Only] Status information of existing scaling schedules. */
		scalingScheduleStatus?: {[id: string]: ScalingScheduleStatus };

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of the autoscaler configuration. Current set of possible values: - PENDING: Autoscaler backend hasn't read new/updated configuration. - DELETING: Configuration is being deleted. - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field. New values might be added in the future. */
		status?: AutoscalerStatus | null;

		/** [Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you might encounter. */
		statusDetails?: Array<AutoscalerStatusDetails>;

		/** URL of the managed instance group that this autoscaler will scale. This field is required when creating an autoscaler. */
		target?: string | null;

		/** [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope). */
		zone?: string | null;
	}

	/** Represents an Autoscaler resource. Google Compute Engine has two Autoscaler resources: * [Zonal](/compute/docs/reference/rest/v1/autoscalers) * [Regional](/compute/docs/reference/rest/v1/regionAutoscalers) Use autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances. For zonal managed instance groups resource, use the autoscaler resource. For regional managed instance groups, use the regionAutoscalers resource. */
	export interface AutoscalerFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#autoscaler for autoscalers. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates the recommended MIG size even when the autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to an existing managed instance group or autoscaler did not generate its prediction.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		recommendedSize: FormControl<number | null | undefined>,

		/** [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope). */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Status information of existing scaling schedules. */
		scalingScheduleStatus: FormControl<{[id: string]: ScalingScheduleStatus } | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of the autoscaler configuration. Current set of possible values: - PENDING: Autoscaler backend hasn't read new/updated configuration. - DELETING: Configuration is being deleted. - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field. New values might be added in the future. */
		status: FormControl<AutoscalerStatus | null | undefined>,

		/** URL of the managed instance group that this autoscaler will scale. This field is required when creating an autoscaler. */
		target: FormControl<string | null | undefined>,

		/** [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope). */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerFormGroup() {
		return new FormGroup<AutoscalerFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			recommendedSize: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			scalingScheduleStatus: new FormControl<{[id: string]: ScalingScheduleStatus } | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<AutoscalerStatus | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Cloud Autoscaler policy. */
	export interface AutoscalingPolicy {

		/**
		 * The number of seconds that your application takes to initialize on a VM instance. This is referred to as the [initialization period](/compute/docs/autoscaler#cool_down_period). Specifying an accurate initialization period improves autoscaler decisions. For example, when scaling out, the autoscaler ignores data from VMs that are still initializing because those VMs might not yet represent normal usage of your application. The default initialization period is 60 seconds. Initialization periods might vary because of numerous factors. We recommend that you test how long your application takes to initialize. To do this, create a VM and time your application's startup process.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		coolDownPeriodSec?: number | null;

		/** CPU utilization policy. */
		cpuUtilization?: AutoscalingPolicyCpuUtilization;

		/** Configuration parameters of autoscaling based on a custom metric. */
		customMetricUtilizations?: Array<AutoscalingPolicyCustomMetricUtilization>;

		/** Configuration parameters of autoscaling based on load balancing. */
		loadBalancingUtilization?: AutoscalingPolicyLoadBalancingUtilization;

		/**
		 * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxNumReplicas?: number | null;

		/**
		 * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNumReplicas?: number | null;

		/** Defines the operating mode for this policy. The following modes are available: - OFF: Disables the autoscaler but maintains its configuration. - ONLY_SCALE_OUT: Restricts the autoscaler to add VM instances only. - ON: Enables all autoscaler activities according to its policy. For more information, see "Turning off or restricting an autoscaler" */
		mode?: AutoscalingPolicyMode | null;

		/** Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below. */
		scaleInControl?: AutoscalingPolicyScaleInControl;

		/** Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed. */
		scalingSchedules?: {[id: string]: AutoscalingPolicyScalingSchedule };
	}

	/** Cloud Autoscaler policy. */
	export interface AutoscalingPolicyFormProperties {

		/**
		 * The number of seconds that your application takes to initialize on a VM instance. This is referred to as the [initialization period](/compute/docs/autoscaler#cool_down_period). Specifying an accurate initialization period improves autoscaler decisions. For example, when scaling out, the autoscaler ignores data from VMs that are still initializing because those VMs might not yet represent normal usage of your application. The default initialization period is 60 seconds. Initialization periods might vary because of numerous factors. We recommend that you test how long your application takes to initialize. To do this, create a VM and time your application's startup process.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		coolDownPeriodSec: FormControl<number | null | undefined>,

		/**
		 * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxNumReplicas: FormControl<number | null | undefined>,

		/**
		 * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNumReplicas: FormControl<number | null | undefined>,

		/** Defines the operating mode for this policy. The following modes are available: - OFF: Disables the autoscaler but maintains its configuration. - ONLY_SCALE_OUT: Restricts the autoscaler to add VM instances only. - ON: Enables all autoscaler activities according to its policy. For more information, see "Turning off or restricting an autoscaler" */
		mode: FormControl<AutoscalingPolicyMode | null | undefined>,

		/** Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed. */
		scalingSchedules: FormControl<{[id: string]: AutoscalingPolicyScalingSchedule } | null | undefined>,
	}
	export function CreateAutoscalingPolicyFormGroup() {
		return new FormGroup<AutoscalingPolicyFormProperties>({
			coolDownPeriodSec: new FormControl<number | null | undefined>(undefined),
			maxNumReplicas: new FormControl<number | null | undefined>(undefined),
			minNumReplicas: new FormControl<number | null | undefined>(undefined),
			mode: new FormControl<AutoscalingPolicyMode | null | undefined>(undefined),
			scalingSchedules: new FormControl<{[id: string]: AutoscalingPolicyScalingSchedule } | null | undefined>(undefined),
		});

	}


	/** CPU utilization policy. */
	export interface AutoscalingPolicyCpuUtilization {

		/** Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand. */
		predictiveMethod?: AutoscalingPolicyCpuUtilizationPredictiveMethod | null;

		/**
		 * The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
		 * Type: double
		 */
		utilizationTarget?: number | null;
	}

	/** CPU utilization policy. */
	export interface AutoscalingPolicyCpuUtilizationFormProperties {

		/** Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand. */
		predictiveMethod: FormControl<AutoscalingPolicyCpuUtilizationPredictiveMethod | null | undefined>,

		/**
		 * The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
		 * Type: double
		 */
		utilizationTarget: FormControl<number | null | undefined>,
	}
	export function CreateAutoscalingPolicyCpuUtilizationFormGroup() {
		return new FormGroup<AutoscalingPolicyCpuUtilizationFormProperties>({
			predictiveMethod: new FormControl<AutoscalingPolicyCpuUtilizationPredictiveMethod | null | undefined>(undefined),
			utilizationTarget: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum AutoscalingPolicyCpuUtilizationPredictiveMethod { NONE = 'NONE', OPTIMIZE_AVAILABILITY = 'OPTIMIZE_AVAILABILITY' }


	/** Custom utilization metric policy. */
	export interface AutoscalingPolicyCustomMetricUtilization {

		/** A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value. */
		filter?: string | null;

		/** The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE. */
		metric?: string | null;

		/**
		 * If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
		 * Type: double
		 */
		singleInstanceAssignment?: number | null;

		/**
		 * The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
		 * Type: double
		 */
		utilizationTarget?: number | null;

		/** Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE. */
		utilizationTargetType?: AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType | null;
	}

	/** Custom utilization metric policy. */
	export interface AutoscalingPolicyCustomMetricUtilizationFormProperties {

		/** A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value. */
		filter: FormControl<string | null | undefined>,

		/** The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE. */
		metric: FormControl<string | null | undefined>,

		/**
		 * If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
		 * Type: double
		 */
		singleInstanceAssignment: FormControl<number | null | undefined>,

		/**
		 * The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
		 * Type: double
		 */
		utilizationTarget: FormControl<number | null | undefined>,

		/** Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE. */
		utilizationTargetType: FormControl<AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType | null | undefined>,
	}
	export function CreateAutoscalingPolicyCustomMetricUtilizationFormGroup() {
		return new FormGroup<AutoscalingPolicyCustomMetricUtilizationFormProperties>({
			filter: new FormControl<string | null | undefined>(undefined),
			metric: new FormControl<string | null | undefined>(undefined),
			singleInstanceAssignment: new FormControl<number | null | undefined>(undefined),
			utilizationTarget: new FormControl<number | null | undefined>(undefined),
			utilizationTargetType: new FormControl<AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType | null | undefined>(undefined),
		});

	}

	export enum AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType { DELTA_PER_MINUTE = 'DELTA_PER_MINUTE', DELTA_PER_SECOND = 'DELTA_PER_SECOND', GAUGE = 'GAUGE' }


	/** Configuration parameters of autoscaling based on load balancing. */
	export interface AutoscalingPolicyLoadBalancingUtilization {

		/**
		 * Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
		 * Type: double
		 */
		utilizationTarget?: number | null;
	}

	/** Configuration parameters of autoscaling based on load balancing. */
	export interface AutoscalingPolicyLoadBalancingUtilizationFormProperties {

		/**
		 * Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
		 * Type: double
		 */
		utilizationTarget: FormControl<number | null | undefined>,
	}
	export function CreateAutoscalingPolicyLoadBalancingUtilizationFormGroup() {
		return new FormGroup<AutoscalingPolicyLoadBalancingUtilizationFormProperties>({
			utilizationTarget: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum AutoscalingPolicyMode { OFF = 'OFF', ON = 'ON', ONLY_SCALE_OUT = 'ONLY_SCALE_OUT', ONLY_UP = 'ONLY_UP' }


	/** Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below. */
	export interface AutoscalingPolicyScaleInControl {

		/** Encapsulates numeric value that can be either absolute or relative. */
		maxScaledInReplicas?: FixedOrPercent;

		/**
		 * How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeWindowSec?: number | null;
	}

	/** Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below. */
	export interface AutoscalingPolicyScaleInControlFormProperties {

		/**
		 * How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeWindowSec: FormControl<number | null | undefined>,
	}
	export function CreateAutoscalingPolicyScaleInControlFormGroup() {
		return new FormGroup<AutoscalingPolicyScaleInControlFormProperties>({
			timeWindowSec: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Encapsulates numeric value that can be either absolute or relative. */
	export interface FixedOrPercent {

		/**
		 * [Output Only] Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		calculated?: number | null;

		/**
		 * Specifies a fixed number of VM instances. This must be a positive integer.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		fixed?: number | null;

		/**
		 * Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		percent?: number | null;
	}

	/** Encapsulates numeric value that can be either absolute or relative. */
	export interface FixedOrPercentFormProperties {

		/**
		 * [Output Only] Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		calculated: FormControl<number | null | undefined>,

		/**
		 * Specifies a fixed number of VM instances. This must be a positive integer.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		fixed: FormControl<number | null | undefined>,

		/**
		 * Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		percent: FormControl<number | null | undefined>,
	}
	export function CreateFixedOrPercentFormGroup() {
		return new FormGroup<FixedOrPercentFormProperties>({
			calculated: new FormControl<number | null | undefined>(undefined),
			fixed: new FormControl<number | null | undefined>(undefined),
			percent: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Scaling based on user-defined schedule. The message describes a single scaling schedule. A scaling schedule changes the minimum number of VM instances an autoscaler can recommend, which can trigger scaling out. */
	export interface AutoscalingPolicyScalingSchedule {

		/** A description of a scaling schedule. */
		description?: string | null;

		/** A boolean value that specifies whether a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect. This field is optional, and its value is false by default. */
		disabled?: boolean | null;

		/**
		 * The duration of time intervals, in seconds, for which this scaling schedule is to run. The minimum allowed value is 300. This field is required.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		durationSec?: number | null;

		/**
		 * The minimum number of VM instances that the autoscaler will recommend in time intervals starting according to schedule. This field is required.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minRequiredReplicas?: number | null;

		/** The start timestamps of time intervals when this scaling schedule is to provide a scaling signal. This field uses the extended cron format (with an optional year field). The expression can describe a single timestamp if the optional year is set, in which case the scaling schedule runs once. The schedule is interpreted with respect to time_zone. This field is required. Note: These timestamps only describe when autoscaler starts providing the scaling signal. The VMs need additional time to become serving. */
		schedule?: string | null;

		/** The time zone to use when interpreting the schedule. The value of this field must be a time zone name from the tz database: https://en.wikipedia.org/wiki/Tz_database. This field is assigned a default value of "UTC" if left empty. */
		timeZone?: string | null;
	}

	/** Scaling based on user-defined schedule. The message describes a single scaling schedule. A scaling schedule changes the minimum number of VM instances an autoscaler can recommend, which can trigger scaling out. */
	export interface AutoscalingPolicyScalingScheduleFormProperties {

		/** A description of a scaling schedule. */
		description: FormControl<string | null | undefined>,

		/** A boolean value that specifies whether a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect. This field is optional, and its value is false by default. */
		disabled: FormControl<boolean | null | undefined>,

		/**
		 * The duration of time intervals, in seconds, for which this scaling schedule is to run. The minimum allowed value is 300. This field is required.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		durationSec: FormControl<number | null | undefined>,

		/**
		 * The minimum number of VM instances that the autoscaler will recommend in time intervals starting according to schedule. This field is required.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minRequiredReplicas: FormControl<number | null | undefined>,

		/** The start timestamps of time intervals when this scaling schedule is to provide a scaling signal. This field uses the extended cron format (with an optional year field). The expression can describe a single timestamp if the optional year is set, in which case the scaling schedule runs once. The schedule is interpreted with respect to time_zone. This field is required. Note: These timestamps only describe when autoscaler starts providing the scaling signal. The VMs need additional time to become serving. */
		schedule: FormControl<string | null | undefined>,

		/** The time zone to use when interpreting the schedule. The value of this field must be a time zone name from the tz database: https://en.wikipedia.org/wiki/Tz_database. This field is assigned a default value of "UTC" if left empty. */
		timeZone: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalingPolicyScalingScheduleFormGroup() {
		return new FormGroup<AutoscalingPolicyScalingScheduleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			durationSec: new FormControl<number | null | undefined>(undefined),
			minRequiredReplicas: new FormControl<number | null | undefined>(undefined),
			schedule: new FormControl<string | null | undefined>(undefined),
			timeZone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScalingScheduleStatus {

		/** [Output Only] The last time the scaling schedule became active. Note: this is a timestamp when a schedule actually became active, not when it was planned to do so. The timestamp is in RFC3339 text format. */
		lastStartTime?: string | null;

		/** [Output Only] The next time the scaling schedule is to become active. Note: this is a timestamp when a schedule is planned to run, but the actual time might be slightly different. The timestamp is in RFC3339 text format. */
		nextStartTime?: string | null;

		/** [Output Only] The current state of a scaling schedule. */
		state?: ScalingScheduleStatusState | null;
	}
	export interface ScalingScheduleStatusFormProperties {

		/** [Output Only] The last time the scaling schedule became active. Note: this is a timestamp when a schedule actually became active, not when it was planned to do so. The timestamp is in RFC3339 text format. */
		lastStartTime: FormControl<string | null | undefined>,

		/** [Output Only] The next time the scaling schedule is to become active. Note: this is a timestamp when a schedule is planned to run, but the actual time might be slightly different. The timestamp is in RFC3339 text format. */
		nextStartTime: FormControl<string | null | undefined>,

		/** [Output Only] The current state of a scaling schedule. */
		state: FormControl<ScalingScheduleStatusState | null | undefined>,
	}
	export function CreateScalingScheduleStatusFormGroup() {
		return new FormGroup<ScalingScheduleStatusFormProperties>({
			lastStartTime: new FormControl<string | null | undefined>(undefined),
			nextStartTime: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<ScalingScheduleStatusState | null | undefined>(undefined),
		});

	}

	export enum ScalingScheduleStatusState { ACTIVE = 'ACTIVE', DISABLED = 'DISABLED', OBSOLETE = 'OBSOLETE', READY = 'READY' }

	export enum AutoscalerStatus { ACTIVE = 'ACTIVE', DELETING = 'DELETING', ERROR = 'ERROR', PENDING = 'PENDING' }

	export interface AutoscalerStatusDetails {

		/** The status message. */
		message?: string | null;

		/** The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions. */
		type?: AutoscalerStatusDetailsType | null;
	}
	export interface AutoscalerStatusDetailsFormProperties {

		/** The status message. */
		message: FormControl<string | null | undefined>,

		/** The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions. */
		type: FormControl<AutoscalerStatusDetailsType | null | undefined>,
	}
	export function CreateAutoscalerStatusDetailsFormGroup() {
		return new FormGroup<AutoscalerStatusDetailsFormProperties>({
			message: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<AutoscalerStatusDetailsType | null | undefined>(undefined),
		});

	}

	export enum AutoscalerStatusDetailsType { ALL_INSTANCES_UNHEALTHY = 'ALL_INSTANCES_UNHEALTHY', BACKEND_SERVICE_DOES_NOT_EXIST = 'BACKEND_SERVICE_DOES_NOT_EXIST', CAPPED_AT_MAX_NUM_REPLICAS = 'CAPPED_AT_MAX_NUM_REPLICAS', CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE = 'CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE', CUSTOM_METRIC_INVALID = 'CUSTOM_METRIC_INVALID', MIN_EQUALS_MAX = 'MIN_EQUALS_MAX', MISSING_CUSTOM_METRIC_DATA_POINTS = 'MISSING_CUSTOM_METRIC_DATA_POINTS', MISSING_LOAD_BALANCING_DATA_POINTS = 'MISSING_LOAD_BALANCING_DATA_POINTS', MODE_OFF = 'MODE_OFF', MODE_ONLY_SCALE_OUT = 'MODE_ONLY_SCALE_OUT', MODE_ONLY_UP = 'MODE_ONLY_UP', MORE_THAN_ONE_BACKEND_SERVICE = 'MORE_THAN_ONE_BACKEND_SERVICE', NOT_ENOUGH_QUOTA_AVAILABLE = 'NOT_ENOUGH_QUOTA_AVAILABLE', REGION_RESOURCE_STOCKOUT = 'REGION_RESOURCE_STOCKOUT', SCALING_TARGET_DOES_NOT_EXIST = 'SCALING_TARGET_DOES_NOT_EXIST', SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX = 'SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX', SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN = 'SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN', UNKNOWN = 'UNKNOWN', UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION = 'UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION', ZONE_RESOURCE_STOCKOUT = 'ZONE_RESOURCE_STOCKOUT' }

	export interface AutoscalerAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of AutoscalersScopedList resources. */
		items?: {[id: string]: AutoscalersScopedList };

		/** [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. end_interface: MixerListResponseWithEtagBuilder */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: AutoscalerAggregatedListWarning;
	}
	export interface AutoscalerAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of AutoscalersScopedList resources. */
		items: FormControl<{[id: string]: AutoscalersScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerAggregatedListFormGroup() {
		return new FormGroup<AutoscalerAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: AutoscalersScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AutoscalersScopedList {

		/** [Output Only] A list of autoscalers contained in this scope. */
		autoscalers?: Array<Autoscaler>;

		/** [Output Only] Informational warning which replaces the list of autoscalers when the list is empty. */
		warning?: AutoscalersScopedListWarning;
	}
	export interface AutoscalersScopedListFormProperties {
	}
	export function CreateAutoscalersScopedListFormGroup() {
		return new FormGroup<AutoscalersScopedListFormProperties>({
		});

	}

	export interface AutoscalersScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AutoscalersScopedListWarningData?: Array<AutoscalersScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AutoscalersScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalersScopedListWarningFormGroup() {
		return new FormGroup<AutoscalersScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AutoscalersScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AutoscalersScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalersScopedListWarningDataFormGroup() {
		return new FormGroup<AutoscalersScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AutoscalerAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AutoscalerAggregatedListWarningData?: Array<AutoscalerAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AutoscalerAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerAggregatedListWarningFormGroup() {
		return new FormGroup<AutoscalerAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AutoscalerAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AutoscalerAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerAggregatedListWarningDataFormGroup() {
		return new FormGroup<AutoscalerAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of Autoscaler resources. */
	export interface AutoscalerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Autoscaler resources. */
		items?: Array<Autoscaler>;

		/** [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: AutoscalerListWarning;
	}

	/** Contains a list of Autoscaler resources. */
	export interface AutoscalerListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerListFormGroup() {
		return new FormGroup<AutoscalerListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AutoscalerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		AutoscalerListWarningData?: Array<AutoscalerListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface AutoscalerListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerListWarningFormGroup() {
		return new FormGroup<AutoscalerListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AutoscalerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface AutoscalerListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAutoscalerListWarningDataFormGroup() {
		return new FormGroup<AutoscalerListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Message containing information of one individual backend. */
	export interface Backend {

		/** Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected. */
		balancingMode?: BackendBalancingMode | null;

		/**
		 * A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service. Not available with backends that don't support using a balancingMode. This includes backends such as global internet NEGs, regional serverless NEGs, and PSC NEGs.
		 * Type: float
		 */
		capacityScaler?: number | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService. */
		failover?: boolean | null;

		/** The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported. */
		group?: string | null;

		/**
		 * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnections?: number | null;

		/**
		 * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnectionsPerEndpoint?: number | null;

		/**
		 * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnectionsPerInstance?: number | null;

		/**
		 * Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRate?: number | null;

		/**
		 * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
		 * Type: float
		 */
		maxRatePerEndpoint?: number | null;

		/**
		 * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
		 * Type: float
		 */
		maxRatePerInstance?: number | null;

		/**
		 * Optional parameter to define a target capacity for the UTILIZATION balancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
		 * Type: float
		 */
		maxUtilization?: number | null;
	}

	/** Message containing information of one individual backend. */
	export interface BackendFormProperties {

		/** Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected. */
		balancingMode: FormControl<BackendBalancingMode | null | undefined>,

		/**
		 * A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service. Not available with backends that don't support using a balancingMode. This includes backends such as global internet NEGs, regional serverless NEGs, and PSC NEGs.
		 * Type: float
		 */
		capacityScaler: FormControl<number | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService. */
		failover: FormControl<boolean | null | undefined>,

		/** The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported. */
		group: FormControl<string | null | undefined>,

		/**
		 * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnections: FormControl<number | null | undefined>,

		/**
		 * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnectionsPerEndpoint: FormControl<number | null | undefined>,

		/**
		 * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnectionsPerInstance: FormControl<number | null | undefined>,

		/**
		 * Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRate: FormControl<number | null | undefined>,

		/**
		 * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
		 * Type: float
		 */
		maxRatePerEndpoint: FormControl<number | null | undefined>,

		/**
		 * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
		 * Type: float
		 */
		maxRatePerInstance: FormControl<number | null | undefined>,

		/**
		 * Optional parameter to define a target capacity for the UTILIZATION balancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
		 * Type: float
		 */
		maxUtilization: FormControl<number | null | undefined>,
	}
	export function CreateBackendFormGroup() {
		return new FormGroup<BackendFormProperties>({
			balancingMode: new FormControl<BackendBalancingMode | null | undefined>(undefined),
			capacityScaler: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			failover: new FormControl<boolean | null | undefined>(undefined),
			group: new FormControl<string | null | undefined>(undefined),
			maxConnections: new FormControl<number | null | undefined>(undefined),
			maxConnectionsPerEndpoint: new FormControl<number | null | undefined>(undefined),
			maxConnectionsPerInstance: new FormControl<number | null | undefined>(undefined),
			maxRate: new FormControl<number | null | undefined>(undefined),
			maxRatePerEndpoint: new FormControl<number | null | undefined>(undefined),
			maxRatePerInstance: new FormControl<number | null | undefined>(undefined),
			maxUtilization: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum BackendBalancingMode { CONNECTION = 'CONNECTION', RATE = 'RATE', UTILIZATION = 'UTILIZATION' }


	/** Represents a Cloud Storage Bucket resource. This Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets. */
	export interface BackendBucket {

		/** Cloud Storage bucket name. */
		bucketName?: string | null;

		/** Message containing Cloud CDN configuration for a backend bucket. */
		cdnPolicy?: BackendBucketCdnPolicy;

		/** Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. */
		compressionMode?: BackendBucketCompressionMode | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Headers that the Application Load Balancer should add to proxied responses. */
		customResponseHeaders?: Array<string>;

		/** An optional textual description of the resource; provided by the client when the resource is created. */
		description?: string | null;

		/** [Output Only] The resource URL for the edge security policy associated with this backend bucket. */
		edgeSecurityPolicy?: string | null;

		/** If true, enable Cloud CDN for this BackendBucket. */
		enableCdn?: boolean | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** Type of the resource. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	/** Represents a Cloud Storage Bucket resource. This Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets. */
	export interface BackendBucketFormProperties {

		/** Cloud Storage bucket name. */
		bucketName: FormControl<string | null | undefined>,

		/** Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. */
		compressionMode: FormControl<BackendBucketCompressionMode | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional textual description of the resource; provided by the client when the resource is created. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The resource URL for the edge security policy associated with this backend bucket. */
		edgeSecurityPolicy: FormControl<string | null | undefined>,

		/** If true, enable Cloud CDN for this BackendBucket. */
		enableCdn: FormControl<boolean | null | undefined>,

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of the resource. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateBackendBucketFormGroup() {
		return new FormGroup<BackendBucketFormProperties>({
			bucketName: new FormControl<string | null | undefined>(undefined),
			compressionMode: new FormControl<BackendBucketCompressionMode | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			edgeSecurityPolicy: new FormControl<string | null | undefined>(undefined),
			enableCdn: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Message containing Cloud CDN configuration for a backend bucket. */
	export interface BackendBucketCdnPolicy {

		/** Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings. */
		bypassCacheOnRequestHeaders?: Array<BackendBucketCdnPolicyBypassCacheOnRequestHeader>;

		/** Message containing what to include in the cache key for a request for Cloud CDN. */
		cacheKeyPolicy?: BackendBucketCdnPolicyCacheKeyPolicy;

		/** Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached. */
		cacheMode?: BackendBucketCdnPolicyCacheMode | null;

		/**
		 * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		clientTtl?: number | null;

		/**
		 * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		defaultTtl?: number | null;

		/**
		 * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxTtl?: number | null;

		/** Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy. */
		negativeCaching?: boolean | null;

		/** Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists. */
		negativeCachingPolicy?: Array<BackendBucketCdnPolicyNegativeCachingPolicy>;

		/** If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin. */
		requestCoalescing?: boolean | null;

		/**
		 * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		serveWhileStale?: number | null;

		/** Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered. */
		signedUrlCacheMaxAgeSec?: string | null;

		/** [Output Only] Names of the keys for signing request URLs. */
		signedUrlKeyNames?: Array<string>;
	}

	/** Message containing Cloud CDN configuration for a backend bucket. */
	export interface BackendBucketCdnPolicyFormProperties {

		/** Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached. */
		cacheMode: FormControl<BackendBucketCdnPolicyCacheMode | null | undefined>,

		/**
		 * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		clientTtl: FormControl<number | null | undefined>,

		/**
		 * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		defaultTtl: FormControl<number | null | undefined>,

		/**
		 * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxTtl: FormControl<number | null | undefined>,

		/** Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy. */
		negativeCaching: FormControl<boolean | null | undefined>,

		/** If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin. */
		requestCoalescing: FormControl<boolean | null | undefined>,

		/**
		 * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		serveWhileStale: FormControl<number | null | undefined>,

		/** Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered. */
		signedUrlCacheMaxAgeSec: FormControl<string | null | undefined>,
	}
	export function CreateBackendBucketCdnPolicyFormGroup() {
		return new FormGroup<BackendBucketCdnPolicyFormProperties>({
			cacheMode: new FormControl<BackendBucketCdnPolicyCacheMode | null | undefined>(undefined),
			clientTtl: new FormControl<number | null | undefined>(undefined),
			defaultTtl: new FormControl<number | null | undefined>(undefined),
			maxTtl: new FormControl<number | null | undefined>(undefined),
			negativeCaching: new FormControl<boolean | null | undefined>(undefined),
			requestCoalescing: new FormControl<boolean | null | undefined>(undefined),
			serveWhileStale: new FormControl<number | null | undefined>(undefined),
			signedUrlCacheMaxAgeSec: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting. */
	export interface BackendBucketCdnPolicyBypassCacheOnRequestHeader {

		/** The header field name to match on when bypassing cache. Values are case-insensitive. */
		headerName?: string | null;
	}

	/** Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting. */
	export interface BackendBucketCdnPolicyBypassCacheOnRequestHeaderFormProperties {

		/** The header field name to match on when bypassing cache. Values are case-insensitive. */
		headerName: FormControl<string | null | undefined>,
	}
	export function CreateBackendBucketCdnPolicyBypassCacheOnRequestHeaderFormGroup() {
		return new FormGroup<BackendBucketCdnPolicyBypassCacheOnRequestHeaderFormProperties>({
			headerName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Message containing what to include in the cache key for a request for Cloud CDN. */
	export interface BackendBucketCdnPolicyCacheKeyPolicy {

		/** Allows HTTP request headers (by name) to be used in the cache key. */
		includeHttpHeaders?: Array<string>;

		/** Names of query string parameters to include in cache keys. Default parameters are always included. '&' and '=' will be percent encoded and not treated as delimiters. */
		queryStringWhitelist?: Array<string>;
	}

	/** Message containing what to include in the cache key for a request for Cloud CDN. */
	export interface BackendBucketCdnPolicyCacheKeyPolicyFormProperties {
	}
	export function CreateBackendBucketCdnPolicyCacheKeyPolicyFormGroup() {
		return new FormGroup<BackendBucketCdnPolicyCacheKeyPolicyFormProperties>({
		});

	}

	export enum BackendBucketCdnPolicyCacheMode { CACHE_ALL_STATIC = 'CACHE_ALL_STATIC', FORCE_CACHE_ALL = 'FORCE_CACHE_ALL', INVALID_CACHE_MODE = 'INVALID_CACHE_MODE', USE_ORIGIN_HEADERS = 'USE_ORIGIN_HEADERS' }


	/** Specify CDN TTLs for response error codes. */
	export interface BackendBucketCdnPolicyNegativeCachingPolicy {

		/**
		 * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		code?: number | null;

		/**
		 * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ttl?: number | null;
	}

	/** Specify CDN TTLs for response error codes. */
	export interface BackendBucketCdnPolicyNegativeCachingPolicyFormProperties {

		/**
		 * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		code: FormControl<number | null | undefined>,

		/**
		 * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ttl: FormControl<number | null | undefined>,
	}
	export function CreateBackendBucketCdnPolicyNegativeCachingPolicyFormGroup() {
		return new FormGroup<BackendBucketCdnPolicyNegativeCachingPolicyFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			ttl: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum BackendBucketCompressionMode { AUTOMATIC = 'AUTOMATIC', DISABLED = 'DISABLED' }


	/** Contains a list of BackendBucket resources. */
	export interface BackendBucketList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendBucket resources. */
		items?: Array<BackendBucket>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: BackendBucketListWarning;
	}

	/** Contains a list of BackendBucket resources. */
	export interface BackendBucketListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateBackendBucketListFormGroup() {
		return new FormGroup<BackendBucketListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendBucketListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		BackendBucketListWarningData?: Array<BackendBucketListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface BackendBucketListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateBackendBucketListWarningFormGroup() {
		return new FormGroup<BackendBucketListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendBucketListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface BackendBucketListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateBackendBucketListWarningDataFormGroup() {
		return new FormGroup<BackendBucketListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Backend Service resource. A backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly. Backend services in Google Compute Engine can be either regionally or globally scoped. * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionBackendServices) For more information, see Backend Services. */
	export interface BackendService {

		/**
		 * Lifetime of cookies in seconds. This setting is applicable to Application Load Balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		affinityCookieTtlSec?: number | null;

		/** The list of backends that serve this BackendService. */
		backends?: Array<Backend>;

		/** Message containing Cloud CDN configuration for a backend service. */
		cdnPolicy?: BackendServiceCdnPolicy;

		/** Settings controlling the volume of requests, connections and retries to this backend service. */
		circuitBreakers?: CircuitBreakers;

		/** Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. */
		compressionMode?: BackendBucketCompressionMode | null;

		/** Message containing connection draining configuration. */
		connectionDraining?: ConnectionDraining;

		/** Connection Tracking configuration for this BackendService. */
		connectionTrackingPolicy?: BackendServiceConnectionTrackingPolicy;

		/** This message defines settings for a consistent hash style load balancer. */
		consistentHash?: ConsistentHashLoadBalancerSettings;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers). */
		customRequestHeaders?: Array<string>;

		/** Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers). */
		customResponseHeaders?: Array<string>;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The resource URL for the edge security policy associated with this backend service. */
		edgeSecurityPolicy?: string | null;

		/** If true, enables Cloud CDN for the backend service of a global external Application Load Balancer. */
		enableCDN?: boolean | null;

		/** For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes). */
		failoverPolicy?: BackendServiceFailoverPolicy;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService. */
		fingerprint?: string | null;

		/** The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check. */
		healthChecks?: Array<string>;

		/** Identity-Aware Proxy */
		iap?: BackendServiceIAP;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#backendService for backend services. */
		kind?: string | null;

		/** Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer. */
		loadBalancingScheme?: BackendServiceLoadBalancingScheme | null;

		/** A list of locality load-balancing policies to be used in order of preference. When you use localityLbPolicies, you must set at least one value for either the localityLbPolicies[].policy or the localityLbPolicies[].customPolicy field. localityLbPolicies overrides any value set in the localityLbPolicy field. For an example of how to use this field, see Define a list of preferred policies. Caution: This field and its children are intended for use in a service mesh that includes gRPC clients only. Envoy proxies can't use backend services that have this configuration. */
		localityLbPolicies?: Array<BackendServiceLocalityLoadBalancingPolicyConfig>;

		/** The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, or EXTERNAL_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. */
		localityLbPolicy?: BackendServiceLocalityLoadBalancingPolicyConfigPolicyName | null;

		/** The available logging options for the load balancer traffic served by this backend service. */
		logConfig?: BackendServiceLogConfig;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		maxStreamDuration?: Duration;

		/** Deployment metadata associated with the resource to be set by a GKE hub controller and read by the backend RCTH */
		metadatas?: {[id: string]: string };

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL. */
		network?: string | null;

		/** Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. */
		outlierDetection?: OutlierDetection;

		/**
		 * Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For internal passthrough Network Load Balancers and external passthrough Network Load Balancers, omit port.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For internal passthrough Network Load Balancers and external passthrough Network Load Balancers, omit port_name. */
		portName?: string | null;

		/** The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy. */
		protocol?: BackendServiceProtocol | null;

		/** [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] The resource URL for the security policy associated with this backend service. */
		securityPolicy?: string | null;

		/** The authentication and authorization settings for a BackendService. */
		securitySettings?: SecuritySettings;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL_SELF_MANAGED. If set, lists of backends and health checks must be both empty. */
		serviceBindings?: Array<string>;

		/** Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity). */
		sessionAffinity?: BackendServiceSessionAffinity | null;

		/** Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director. */
		subsetting?: Subsetting;

		/**
		 * The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec?: number | null;
		usedBy?: Array<BackendServiceUsedBy>;
	}

	/** Represents a Backend Service resource. A backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly. Backend services in Google Compute Engine can be either regionally or globally scoped. * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionBackendServices) For more information, see Backend Services. */
	export interface BackendServiceFormProperties {

		/**
		 * Lifetime of cookies in seconds. This setting is applicable to Application Load Balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		affinityCookieTtlSec: FormControl<number | null | undefined>,

		/** Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. */
		compressionMode: FormControl<BackendBucketCompressionMode | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The resource URL for the edge security policy associated with this backend service. */
		edgeSecurityPolicy: FormControl<string | null | undefined>,

		/** If true, enables Cloud CDN for the backend service of a global external Application Load Balancer. */
		enableCDN: FormControl<boolean | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#backendService for backend services. */
		kind: FormControl<string | null | undefined>,

		/** Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer. */
		loadBalancingScheme: FormControl<BackendServiceLoadBalancingScheme | null | undefined>,

		/** The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, or EXTERNAL_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. */
		localityLbPolicy: FormControl<BackendServiceLocalityLoadBalancingPolicyConfigPolicyName | null | undefined>,

		/** Deployment metadata associated with the resource to be set by a GKE hub controller and read by the backend RCTH */
		metadatas: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL. */
		network: FormControl<string | null | undefined>,

		/**
		 * Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For internal passthrough Network Load Balancers and external passthrough Network Load Balancers, omit port.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For internal passthrough Network Load Balancers and external passthrough Network Load Balancers, omit port_name. */
		portName: FormControl<string | null | undefined>,

		/** The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy. */
		protocol: FormControl<BackendServiceProtocol | null | undefined>,

		/** [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] The resource URL for the security policy associated with this backend service. */
		securityPolicy: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity). */
		sessionAffinity: FormControl<BackendServiceSessionAffinity | null | undefined>,

		/**
		 * The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec: FormControl<number | null | undefined>,
	}
	export function CreateBackendServiceFormGroup() {
		return new FormGroup<BackendServiceFormProperties>({
			affinityCookieTtlSec: new FormControl<number | null | undefined>(undefined),
			compressionMode: new FormControl<BackendBucketCompressionMode | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			edgeSecurityPolicy: new FormControl<string | null | undefined>(undefined),
			enableCDN: new FormControl<boolean | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			loadBalancingScheme: new FormControl<BackendServiceLoadBalancingScheme | null | undefined>(undefined),
			localityLbPolicy: new FormControl<BackendServiceLocalityLoadBalancingPolicyConfigPolicyName | null | undefined>(undefined),
			metadatas: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			protocol: new FormControl<BackendServiceProtocol | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			securityPolicy: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sessionAffinity: new FormControl<BackendServiceSessionAffinity | null | undefined>(undefined),
			timeoutSec: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Message containing Cloud CDN configuration for a backend service. */
	export interface BackendServiceCdnPolicy {

		/** Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings. */
		bypassCacheOnRequestHeaders?: Array<BackendServiceCdnPolicyBypassCacheOnRequestHeader>;

		/** Message containing what to include in the cache key for a request for Cloud CDN. */
		cacheKeyPolicy?: CacheKeyPolicy;

		/** Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached. */
		cacheMode?: BackendBucketCdnPolicyCacheMode | null;

		/**
		 * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		clientTtl?: number | null;

		/**
		 * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		defaultTtl?: number | null;

		/**
		 * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxTtl?: number | null;

		/** Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy. */
		negativeCaching?: boolean | null;

		/** Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists. */
		negativeCachingPolicy?: Array<BackendServiceCdnPolicyNegativeCachingPolicy>;

		/** If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin. */
		requestCoalescing?: boolean | null;

		/**
		 * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		serveWhileStale?: number | null;

		/** Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered. */
		signedUrlCacheMaxAgeSec?: string | null;

		/** [Output Only] Names of the keys for signing request URLs. */
		signedUrlKeyNames?: Array<string>;
	}

	/** Message containing Cloud CDN configuration for a backend service. */
	export interface BackendServiceCdnPolicyFormProperties {

		/** Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached. */
		cacheMode: FormControl<BackendBucketCdnPolicyCacheMode | null | undefined>,

		/**
		 * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		clientTtl: FormControl<number | null | undefined>,

		/**
		 * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		defaultTtl: FormControl<number | null | undefined>,

		/**
		 * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxTtl: FormControl<number | null | undefined>,

		/** Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy. */
		negativeCaching: FormControl<boolean | null | undefined>,

		/** If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin. */
		requestCoalescing: FormControl<boolean | null | undefined>,

		/**
		 * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		serveWhileStale: FormControl<number | null | undefined>,

		/** Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered. */
		signedUrlCacheMaxAgeSec: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceCdnPolicyFormGroup() {
		return new FormGroup<BackendServiceCdnPolicyFormProperties>({
			cacheMode: new FormControl<BackendBucketCdnPolicyCacheMode | null | undefined>(undefined),
			clientTtl: new FormControl<number | null | undefined>(undefined),
			defaultTtl: new FormControl<number | null | undefined>(undefined),
			maxTtl: new FormControl<number | null | undefined>(undefined),
			negativeCaching: new FormControl<boolean | null | undefined>(undefined),
			requestCoalescing: new FormControl<boolean | null | undefined>(undefined),
			serveWhileStale: new FormControl<number | null | undefined>(undefined),
			signedUrlCacheMaxAgeSec: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting. */
	export interface BackendServiceCdnPolicyBypassCacheOnRequestHeader {

		/** The header field name to match on when bypassing cache. Values are case-insensitive. */
		headerName?: string | null;
	}

	/** Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting. */
	export interface BackendServiceCdnPolicyBypassCacheOnRequestHeaderFormProperties {

		/** The header field name to match on when bypassing cache. Values are case-insensitive. */
		headerName: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceCdnPolicyBypassCacheOnRequestHeaderFormGroup() {
		return new FormGroup<BackendServiceCdnPolicyBypassCacheOnRequestHeaderFormProperties>({
			headerName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Message containing what to include in the cache key for a request for Cloud CDN. */
	export interface CacheKeyPolicy {

		/** If true, requests to different hosts will be cached separately. */
		includeHost?: boolean | null;

		/** Allows HTTP request headers (by name) to be used in the cache key. */
		includeHttpHeaders?: Array<string>;

		/** Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates. */
		includeNamedCookies?: Array<string>;

		/** If true, http and https requests will be cached separately. */
		includeProtocol?: boolean | null;

		/** If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely. */
		includeQueryString?: boolean | null;

		/** Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters. */
		queryStringBlacklist?: Array<string>;

		/** Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters. */
		queryStringWhitelist?: Array<string>;
	}

	/** Message containing what to include in the cache key for a request for Cloud CDN. */
	export interface CacheKeyPolicyFormProperties {

		/** If true, requests to different hosts will be cached separately. */
		includeHost: FormControl<boolean | null | undefined>,

		/** If true, http and https requests will be cached separately. */
		includeProtocol: FormControl<boolean | null | undefined>,

		/** If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely. */
		includeQueryString: FormControl<boolean | null | undefined>,
	}
	export function CreateCacheKeyPolicyFormGroup() {
		return new FormGroup<CacheKeyPolicyFormProperties>({
			includeHost: new FormControl<boolean | null | undefined>(undefined),
			includeProtocol: new FormControl<boolean | null | undefined>(undefined),
			includeQueryString: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Specify CDN TTLs for response error codes. */
	export interface BackendServiceCdnPolicyNegativeCachingPolicy {

		/**
		 * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		code?: number | null;

		/**
		 * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ttl?: number | null;
	}

	/** Specify CDN TTLs for response error codes. */
	export interface BackendServiceCdnPolicyNegativeCachingPolicyFormProperties {

		/**
		 * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		code: FormControl<number | null | undefined>,

		/**
		 * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ttl: FormControl<number | null | undefined>,
	}
	export function CreateBackendServiceCdnPolicyNegativeCachingPolicyFormGroup() {
		return new FormGroup<BackendServiceCdnPolicyNegativeCachingPolicyFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			ttl: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Settings controlling the volume of requests, connections and retries to this backend service. */
	export interface CircuitBreakers {

		/**
		 * The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnections?: number | null;

		/**
		 * The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxPendingRequests?: number | null;

		/**
		 * The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRequests?: number | null;

		/**
		 * Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRequestsPerConnection?: number | null;

		/**
		 * The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRetries?: number | null;
	}

	/** Settings controlling the volume of requests, connections and retries to this backend service. */
	export interface CircuitBreakersFormProperties {

		/**
		 * The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxConnections: FormControl<number | null | undefined>,

		/**
		 * The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxPendingRequests: FormControl<number | null | undefined>,

		/**
		 * The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRequests: FormControl<number | null | undefined>,

		/**
		 * Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRequestsPerConnection: FormControl<number | null | undefined>,

		/**
		 * The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRetries: FormControl<number | null | undefined>,
	}
	export function CreateCircuitBreakersFormGroup() {
		return new FormGroup<CircuitBreakersFormProperties>({
			maxConnections: new FormControl<number | null | undefined>(undefined),
			maxPendingRequests: new FormControl<number | null | undefined>(undefined),
			maxRequests: new FormControl<number | null | undefined>(undefined),
			maxRequestsPerConnection: new FormControl<number | null | undefined>(undefined),
			maxRetries: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Message containing connection draining configuration. */
	export interface ConnectionDraining {

		/**
		 * Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		drainingTimeoutSec?: number | null;
	}

	/** Message containing connection draining configuration. */
	export interface ConnectionDrainingFormProperties {

		/**
		 * Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		drainingTimeoutSec: FormControl<number | null | undefined>,
	}
	export function CreateConnectionDrainingFormGroup() {
		return new FormGroup<ConnectionDrainingFormProperties>({
			drainingTimeoutSec: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Connection Tracking configuration for this BackendService. */
	export interface BackendServiceConnectionTrackingPolicy {

		/** Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence). */
		connectionPersistenceOnUnhealthyBackends?: BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends | null;

		/** Enable Strong Session Affinity for external passthrough Network Load Balancers. This option is not available publicly. */
		enableStrongAffinity?: boolean | null;

		/**
		 * Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For internal passthrough Network Load Balancers: - The minimum (default) is 10 minutes and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT_IP_NO_DESTINATION, CLIENT_IP or CLIENT_IP_PROTO, and Tracking Mode is PER_SESSION). For external passthrough Network Load Balancers the default is 60 seconds. This option is not available publicly.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		idleTimeoutSec?: number | null;

		/** Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode). */
		trackingMode?: BackendServiceConnectionTrackingPolicyTrackingMode | null;
	}

	/** Connection Tracking configuration for this BackendService. */
	export interface BackendServiceConnectionTrackingPolicyFormProperties {

		/** Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence). */
		connectionPersistenceOnUnhealthyBackends: FormControl<BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends | null | undefined>,

		/** Enable Strong Session Affinity for external passthrough Network Load Balancers. This option is not available publicly. */
		enableStrongAffinity: FormControl<boolean | null | undefined>,

		/**
		 * Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For internal passthrough Network Load Balancers: - The minimum (default) is 10 minutes and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT_IP_NO_DESTINATION, CLIENT_IP or CLIENT_IP_PROTO, and Tracking Mode is PER_SESSION). For external passthrough Network Load Balancers the default is 60 seconds. This option is not available publicly.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		idleTimeoutSec: FormControl<number | null | undefined>,

		/** Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode). */
		trackingMode: FormControl<BackendServiceConnectionTrackingPolicyTrackingMode | null | undefined>,
	}
	export function CreateBackendServiceConnectionTrackingPolicyFormGroup() {
		return new FormGroup<BackendServiceConnectionTrackingPolicyFormProperties>({
			connectionPersistenceOnUnhealthyBackends: new FormControl<BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends | null | undefined>(undefined),
			enableStrongAffinity: new FormControl<boolean | null | undefined>(undefined),
			idleTimeoutSec: new FormControl<number | null | undefined>(undefined),
			trackingMode: new FormControl<BackendServiceConnectionTrackingPolicyTrackingMode | null | undefined>(undefined),
		});

	}

	export enum BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends { ALWAYS_PERSIST = 'ALWAYS_PERSIST', DEFAULT_FOR_PROTOCOL = 'DEFAULT_FOR_PROTOCOL', NEVER_PERSIST = 'NEVER_PERSIST' }

	export enum BackendServiceConnectionTrackingPolicyTrackingMode { INVALID_TRACKING_MODE = 'INVALID_TRACKING_MODE', PER_CONNECTION = 'PER_CONNECTION', PER_SESSION = 'PER_SESSION' }


	/** This message defines settings for a consistent hash style load balancer. */
	export interface ConsistentHashLoadBalancerSettings {

		/** The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash. */
		httpCookie?: ConsistentHashLoadBalancerSettingsHttpCookie;

		/** The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD. */
		httpHeaderName?: string | null;

		/** The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node. */
		minimumRingSize?: string | null;
	}

	/** This message defines settings for a consistent hash style load balancer. */
	export interface ConsistentHashLoadBalancerSettingsFormProperties {

		/** The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD. */
		httpHeaderName: FormControl<string | null | undefined>,

		/** The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node. */
		minimumRingSize: FormControl<string | null | undefined>,
	}
	export function CreateConsistentHashLoadBalancerSettingsFormGroup() {
		return new FormGroup<ConsistentHashLoadBalancerSettingsFormProperties>({
			httpHeaderName: new FormControl<string | null | undefined>(undefined),
			minimumRingSize: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash. */
	export interface ConsistentHashLoadBalancerSettingsHttpCookie {

		/** Name of the cookie. */
		name?: string | null;

		/** Path to set for the cookie. */
		path?: string | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		ttl?: Duration;
	}

	/** The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash. */
	export interface ConsistentHashLoadBalancerSettingsHttpCookieFormProperties {

		/** Name of the cookie. */
		name: FormControl<string | null | undefined>,

		/** Path to set for the cookie. */
		path: FormControl<string | null | undefined>,
	}
	export function CreateConsistentHashLoadBalancerSettingsHttpCookieFormGroup() {
		return new FormGroup<ConsistentHashLoadBalancerSettingsHttpCookieFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
	export interface Duration {

		/**
		 * Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nanos?: number | null;

		/** Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years */
		seconds?: string | null;
	}

	/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
	export interface DurationFormProperties {

		/**
		 * Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nanos: FormControl<number | null | undefined>,

		/** Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years */
		seconds: FormControl<string | null | undefined>,
	}
	export function CreateDurationFormGroup() {
		return new FormGroup<DurationFormProperties>({
			nanos: new FormControl<number | null | undefined>(undefined),
			seconds: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes). */
	export interface BackendServiceFailoverPolicy {

		/** This can be set to true only if the protocol is TCP. The default is false. */
		disableConnectionDrainOnFailover?: boolean | null;

		/** If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). The default is false. */
		dropTrafficIfUnhealthy?: boolean | null;

		/**
		 * The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
		 * Type: float
		 */
		failoverRatio?: number | null;
	}

	/** For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes). */
	export interface BackendServiceFailoverPolicyFormProperties {

		/** This can be set to true only if the protocol is TCP. The default is false. */
		disableConnectionDrainOnFailover: FormControl<boolean | null | undefined>,

		/** If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). The default is false. */
		dropTrafficIfUnhealthy: FormControl<boolean | null | undefined>,

		/**
		 * The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
		 * Type: float
		 */
		failoverRatio: FormControl<number | null | undefined>,
	}
	export function CreateBackendServiceFailoverPolicyFormGroup() {
		return new FormGroup<BackendServiceFailoverPolicyFormProperties>({
			disableConnectionDrainOnFailover: new FormControl<boolean | null | undefined>(undefined),
			dropTrafficIfUnhealthy: new FormControl<boolean | null | undefined>(undefined),
			failoverRatio: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Identity-Aware Proxy */
	export interface BackendServiceIAP {

		/** Whether the serving infrastructure will authenticate and authorize all incoming requests. */
		enabled?: boolean | null;

		/** OAuth2 client ID to use for the authentication flow. */
		oauth2ClientId?: string | null;

		/** OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly */
		oauth2ClientSecret?: string | null;

		/** [Output Only] SHA256 hash value for the field oauth2_client_secret above. */
		oauth2ClientSecretSha256?: string | null;
	}

	/** Identity-Aware Proxy */
	export interface BackendServiceIAPFormProperties {

		/** Whether the serving infrastructure will authenticate and authorize all incoming requests. */
		enabled: FormControl<boolean | null | undefined>,

		/** OAuth2 client ID to use for the authentication flow. */
		oauth2ClientId: FormControl<string | null | undefined>,

		/** OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly */
		oauth2ClientSecret: FormControl<string | null | undefined>,

		/** [Output Only] SHA256 hash value for the field oauth2_client_secret above. */
		oauth2ClientSecretSha256: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceIAPFormGroup() {
		return new FormGroup<BackendServiceIAPFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			oauth2ClientId: new FormControl<string | null | undefined>(undefined),
			oauth2ClientSecret: new FormControl<string | null | undefined>(undefined),
			oauth2ClientSecretSha256: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum BackendServiceLoadBalancingScheme { EXTERNAL = 'EXTERNAL', EXTERNAL_MANAGED = 'EXTERNAL_MANAGED', INTERNAL = 'INTERNAL', INTERNAL_MANAGED = 'INTERNAL_MANAGED', INTERNAL_SELF_MANAGED = 'INTERNAL_SELF_MANAGED', INVALID_LOAD_BALANCING_SCHEME = 'INVALID_LOAD_BALANCING_SCHEME' }


	/** Container for either a built-in LB policy supported by gRPC or Envoy or a custom one implemented by the end user. */
	export interface BackendServiceLocalityLoadBalancingPolicyConfig {

		/** The configuration for a custom policy implemented by the user and deployed with the client. */
		customPolicy?: BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy;

		/** The configuration for a built-in load balancing policy. */
		policy?: BackendServiceLocalityLoadBalancingPolicyConfigPolicy;
	}

	/** Container for either a built-in LB policy supported by gRPC or Envoy or a custom one implemented by the end user. */
	export interface BackendServiceLocalityLoadBalancingPolicyConfigFormProperties {
	}
	export function CreateBackendServiceLocalityLoadBalancingPolicyConfigFormGroup() {
		return new FormGroup<BackendServiceLocalityLoadBalancingPolicyConfigFormProperties>({
		});

	}


	/** The configuration for a custom policy implemented by the user and deployed with the client. */
	export interface BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy {

		/** An optional, arbitrary JSON object with configuration data, understood by a locally installed custom policy implementation. */
		data?: string | null;

		/** Identifies the custom policy. The value should match the name of a custom implementation registered on the gRPC clients. It should follow protocol buffer message naming conventions and include the full path (for example, myorg.CustomLbPolicy). The maximum length is 256 characters. Do not specify the same custom policy more than once for a backend. If you do, the configuration is rejected. For an example of how to use this field, see Use a custom policy. */
		name?: string | null;
	}

	/** The configuration for a custom policy implemented by the user and deployed with the client. */
	export interface BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyFormProperties {

		/** An optional, arbitrary JSON object with configuration data, understood by a locally installed custom policy implementation. */
		data: FormControl<string | null | undefined>,

		/** Identifies the custom policy. The value should match the name of a custom implementation registered on the gRPC clients. It should follow protocol buffer message naming conventions and include the full path (for example, myorg.CustomLbPolicy). The maximum length is 256 characters. Do not specify the same custom policy more than once for a backend. If you do, the configuration is rejected. For an example of how to use this field, see Use a custom policy. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyFormGroup() {
		return new FormGroup<BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyFormProperties>({
			data: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration for a built-in load balancing policy. */
	export interface BackendServiceLocalityLoadBalancingPolicyConfigPolicy {

		/** The name of a locality load-balancing policy. Valid values include ROUND_ROBIN and, for Java clients, LEAST_REQUEST. For information about these values, see the description of localityLbPolicy. Do not specify the same policy more than once for a backend. If you do, the configuration is rejected. */
		name?: BackendServiceLocalityLoadBalancingPolicyConfigPolicyName | null;
	}

	/** The configuration for a built-in load balancing policy. */
	export interface BackendServiceLocalityLoadBalancingPolicyConfigPolicyFormProperties {

		/** The name of a locality load-balancing policy. Valid values include ROUND_ROBIN and, for Java clients, LEAST_REQUEST. For information about these values, see the description of localityLbPolicy. Do not specify the same policy more than once for a backend. If you do, the configuration is rejected. */
		name: FormControl<BackendServiceLocalityLoadBalancingPolicyConfigPolicyName | null | undefined>,
	}
	export function CreateBackendServiceLocalityLoadBalancingPolicyConfigPolicyFormGroup() {
		return new FormGroup<BackendServiceLocalityLoadBalancingPolicyConfigPolicyFormProperties>({
			name: new FormControl<BackendServiceLocalityLoadBalancingPolicyConfigPolicyName | null | undefined>(undefined),
		});

	}

	export enum BackendServiceLocalityLoadBalancingPolicyConfigPolicyName { INVALID_LB_POLICY = 'INVALID_LB_POLICY', LEAST_REQUEST = 'LEAST_REQUEST', MAGLEV = 'MAGLEV', ORIGINAL_DESTINATION = 'ORIGINAL_DESTINATION', RANDOM = 'RANDOM', RING_HASH = 'RING_HASH', ROUND_ROBIN = 'ROUND_ROBIN', WEIGHTED_MAGLEV = 'WEIGHTED_MAGLEV' }


	/** The available logging options for the load balancer traffic served by this backend service. */
	export interface BackendServiceLogConfig {

		/** Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false. */
		enable?: boolean | null;

		/** This field can only be specified if logging is enabled for this backend service and "logConfig.optionalMode" was set to CUSTOM. Contains a list of optional fields you want to include in the logs. For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace */
		optionalFields?: Array<string>;

		/** This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL. */
		optionalMode?: BackendServiceLogConfigOptionalMode | null;

		/**
		 * This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
		 * Type: float
		 */
		sampleRate?: number | null;
	}

	/** The available logging options for the load balancer traffic served by this backend service. */
	export interface BackendServiceLogConfigFormProperties {

		/** Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false. */
		enable: FormControl<boolean | null | undefined>,

		/** This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL. */
		optionalMode: FormControl<BackendServiceLogConfigOptionalMode | null | undefined>,

		/**
		 * This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
		 * Type: float
		 */
		sampleRate: FormControl<number | null | undefined>,
	}
	export function CreateBackendServiceLogConfigFormGroup() {
		return new FormGroup<BackendServiceLogConfigFormProperties>({
			enable: new FormControl<boolean | null | undefined>(undefined),
			optionalMode: new FormControl<BackendServiceLogConfigOptionalMode | null | undefined>(undefined),
			sampleRate: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum BackendServiceLogConfigOptionalMode { CUSTOM = 'CUSTOM', EXCLUDE_ALL_OPTIONAL = 'EXCLUDE_ALL_OPTIONAL', INCLUDE_ALL_OPTIONAL = 'INCLUDE_ALL_OPTIONAL' }


	/** Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. */
	export interface OutlierDetection {

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		baseEjectionTime?: Duration;

		/**
		 * Number of consecutive errors before a backend endpoint is ejected from the load balancing pool. When the backend endpoint is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		consecutiveErrors?: number | null;

		/**
		 * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		consecutiveGatewayFailure?: number | null;

		/**
		 * The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		enforcingConsecutiveErrors?: number | null;

		/**
		 * The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		enforcingConsecutiveGatewayFailure?: number | null;

		/**
		 * The percentage chance that a backend endpoint will be ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		enforcingSuccessRate?: number | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		interval?: Duration;

		/**
		 * Maximum percentage of backend endpoints in the load balancing pool for the backend service that can be ejected if the ejection conditions are met. Defaults to 50%.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxEjectionPercent?: number | null;

		/**
		 * The number of backend endpoints in the load balancing pool that must have enough request volume to detect success rate outliers. If the number of backend endpoints is fewer than this setting, outlier detection via success rate statistics is not performed for any backend endpoint in the load balancing pool. Defaults to 5. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		successRateMinimumHosts?: number | null;

		/**
		 * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this backend endpoint in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that backend endpoint. Defaults to 100. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		successRateRequestVolume?: number | null;

		/**
		 * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * successRateStdevFactor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		successRateStdevFactor?: number | null;
	}

	/** Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. */
	export interface OutlierDetectionFormProperties {

		/**
		 * Number of consecutive errors before a backend endpoint is ejected from the load balancing pool. When the backend endpoint is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		consecutiveErrors: FormControl<number | null | undefined>,

		/**
		 * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		consecutiveGatewayFailure: FormControl<number | null | undefined>,

		/**
		 * The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		enforcingConsecutiveErrors: FormControl<number | null | undefined>,

		/**
		 * The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		enforcingConsecutiveGatewayFailure: FormControl<number | null | undefined>,

		/**
		 * The percentage chance that a backend endpoint will be ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		enforcingSuccessRate: FormControl<number | null | undefined>,

		/**
		 * Maximum percentage of backend endpoints in the load balancing pool for the backend service that can be ejected if the ejection conditions are met. Defaults to 50%.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxEjectionPercent: FormControl<number | null | undefined>,

		/**
		 * The number of backend endpoints in the load balancing pool that must have enough request volume to detect success rate outliers. If the number of backend endpoints is fewer than this setting, outlier detection via success rate statistics is not performed for any backend endpoint in the load balancing pool. Defaults to 5. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		successRateMinimumHosts: FormControl<number | null | undefined>,

		/**
		 * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this backend endpoint in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that backend endpoint. Defaults to 100. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		successRateRequestVolume: FormControl<number | null | undefined>,

		/**
		 * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * successRateStdevFactor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. Not supported when the backend service uses Serverless NEG.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		successRateStdevFactor: FormControl<number | null | undefined>,
	}
	export function CreateOutlierDetectionFormGroup() {
		return new FormGroup<OutlierDetectionFormProperties>({
			consecutiveErrors: new FormControl<number | null | undefined>(undefined),
			consecutiveGatewayFailure: new FormControl<number | null | undefined>(undefined),
			enforcingConsecutiveErrors: new FormControl<number | null | undefined>(undefined),
			enforcingConsecutiveGatewayFailure: new FormControl<number | null | undefined>(undefined),
			enforcingSuccessRate: new FormControl<number | null | undefined>(undefined),
			maxEjectionPercent: new FormControl<number | null | undefined>(undefined),
			successRateMinimumHosts: new FormControl<number | null | undefined>(undefined),
			successRateRequestVolume: new FormControl<number | null | undefined>(undefined),
			successRateStdevFactor: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum BackendServiceProtocol { GRPC = 'GRPC', HTTP = 'HTTP', HTTP2 = 'HTTP2', HTTPS = 'HTTPS', SSL = 'SSL', TCP = 'TCP', UDP = 'UDP', UNSPECIFIED = 'UNSPECIFIED' }


	/** The authentication and authorization settings for a BackendService. */
	export interface SecuritySettings {

		/** Contains the configurations necessary to generate a signature for access to private storage buckets that support Signature Version 4 for authentication. The service name for generating the authentication header will always default to 's3'. */
		awsV4Authentication?: AWSV4Signature;

		/** Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. */
		clientTlsPolicy?: string | null;

		/** Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). */
		subjectAltNames?: Array<string>;
	}

	/** The authentication and authorization settings for a BackendService. */
	export interface SecuritySettingsFormProperties {

		/** Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. */
		clientTlsPolicy: FormControl<string | null | undefined>,
	}
	export function CreateSecuritySettingsFormGroup() {
		return new FormGroup<SecuritySettingsFormProperties>({
			clientTlsPolicy: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum BackendServiceSessionAffinity { CLIENT_IP = 'CLIENT_IP', CLIENT_IP_NO_DESTINATION = 'CLIENT_IP_NO_DESTINATION', CLIENT_IP_PORT_PROTO = 'CLIENT_IP_PORT_PROTO', CLIENT_IP_PROTO = 'CLIENT_IP_PROTO', GENERATED_COOKIE = 'GENERATED_COOKIE', HEADER_FIELD = 'HEADER_FIELD', HTTP_COOKIE = 'HTTP_COOKIE', NONE = 'NONE' }


	/** Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director. */
	export interface Subsetting {
		policy?: SubsettingPolicy | null;
	}

	/** Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director. */
	export interface SubsettingFormProperties {
		policy: FormControl<SubsettingPolicy | null | undefined>,
	}
	export function CreateSubsettingFormGroup() {
		return new FormGroup<SubsettingFormProperties>({
			policy: new FormControl<SubsettingPolicy | null | undefined>(undefined),
		});

	}

	export enum SubsettingPolicy { CONSISTENT_HASH_SUBSETTING = 'CONSISTENT_HASH_SUBSETTING', NONE = 'NONE' }

	export interface BackendServiceUsedBy {
		reference?: string | null;
	}
	export interface BackendServiceUsedByFormProperties {
		reference: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceUsedByFormGroup() {
		return new FormGroup<BackendServiceUsedByFormProperties>({
			reference: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of BackendServicesScopedList. */
	export interface BackendServiceAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendServicesScopedList resources. */
		items?: {[id: string]: BackendServicesScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: BackendServiceAggregatedListWarning;
	}

	/** Contains a list of BackendServicesScopedList. */
	export interface BackendServiceAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of BackendServicesScopedList resources. */
		items: FormControl<{[id: string]: BackendServicesScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceAggregatedListFormGroup() {
		return new FormGroup<BackendServiceAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: BackendServicesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServicesScopedList {

		/** A list of BackendServices contained in this scope. */
		backendServices?: Array<BackendService>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: BackendServicesScopedListWarning;
	}
	export interface BackendServicesScopedListFormProperties {
	}
	export function CreateBackendServicesScopedListFormGroup() {
		return new FormGroup<BackendServicesScopedListFormProperties>({
		});

	}

	export interface BackendServicesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		BackendServicesScopedListWarningData?: Array<BackendServicesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface BackendServicesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateBackendServicesScopedListWarningFormGroup() {
		return new FormGroup<BackendServicesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServicesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface BackendServicesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateBackendServicesScopedListWarningDataFormGroup() {
		return new FormGroup<BackendServicesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		BackendServiceAggregatedListWarningData?: Array<BackendServiceAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface BackendServiceAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceAggregatedListWarningFormGroup() {
		return new FormGroup<BackendServiceAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface BackendServiceAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceAggregatedListWarningDataFormGroup() {
		return new FormGroup<BackendServiceAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceGroupHealth {

		/** Metadata defined as annotations on the network endpoint group. */
		annotations?: {[id: string]: string };

		/** Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks. */
		healthStatus?: Array<HealthStatus>;

		/** [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services. */
		kind?: string | null;
	}
	export interface BackendServiceGroupHealthFormProperties {

		/** Metadata defined as annotations on the network endpoint group. */
		annotations: FormControl<{[id: string]: string } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceGroupHealthFormGroup() {
		return new FormGroup<BackendServiceGroupHealthFormProperties>({
			annotations: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthStatus {

		/** Metadata defined as annotations for network endpoint. */
		annotations?: {[id: string]: string };

		/** URL of the forwarding rule associated with the health status of the instance. */
		forwardingRule?: string | null;

		/** A forwarding rule IP address assigned to this instance. */
		forwardingRuleIp?: string | null;

		/** Health state of the IPv4 address of the instance. */
		healthState?: HealthStatusHealthState | null;

		/** URL of the instance resource. */
		instance?: string | null;

		/** For target pool based Network Load Balancing, it indicates the forwarding rule's IP address assigned to this instance. For other types of load balancing, the field indicates VM internal ip. */
		ipAddress?: string | null;

		/**
		 * The named port of the instance group, not necessarily the port that is health-checked.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;
		weight?: string | null;
		weightError?: HealthStatusWeightError | null;
	}
	export interface HealthStatusFormProperties {

		/** Metadata defined as annotations for network endpoint. */
		annotations: FormControl<{[id: string]: string } | null | undefined>,

		/** URL of the forwarding rule associated with the health status of the instance. */
		forwardingRule: FormControl<string | null | undefined>,

		/** A forwarding rule IP address assigned to this instance. */
		forwardingRuleIp: FormControl<string | null | undefined>,

		/** Health state of the IPv4 address of the instance. */
		healthState: FormControl<HealthStatusHealthState | null | undefined>,

		/** URL of the instance resource. */
		instance: FormControl<string | null | undefined>,

		/** For target pool based Network Load Balancing, it indicates the forwarding rule's IP address assigned to this instance. For other types of load balancing, the field indicates VM internal ip. */
		ipAddress: FormControl<string | null | undefined>,

		/**
		 * The named port of the instance group, not necessarily the port that is health-checked.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,
		weight: FormControl<string | null | undefined>,
		weightError: FormControl<HealthStatusWeightError | null | undefined>,
	}
	export function CreateHealthStatusFormGroup() {
		return new FormGroup<HealthStatusFormProperties>({
			annotations: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			forwardingRule: new FormControl<string | null | undefined>(undefined),
			forwardingRuleIp: new FormControl<string | null | undefined>(undefined),
			healthState: new FormControl<HealthStatusHealthState | null | undefined>(undefined),
			instance: new FormControl<string | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			weight: new FormControl<string | null | undefined>(undefined),
			weightError: new FormControl<HealthStatusWeightError | null | undefined>(undefined),
		});

	}

	export enum HealthStatusHealthState { HEALTHY = 'HEALTHY', UNHEALTHY = 'UNHEALTHY' }

	export enum HealthStatusWeightError { INVALID_WEIGHT = 'INVALID_WEIGHT', MISSING_WEIGHT = 'MISSING_WEIGHT', UNAVAILABLE_WEIGHT = 'UNAVAILABLE_WEIGHT', WEIGHT_NONE = 'WEIGHT_NONE' }


	/** Contains a list of BackendService resources. */
	export interface BackendServiceList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendService resources. */
		items?: Array<BackendService>;

		/** [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: BackendServiceListWarning;
	}

	/** Contains a list of BackendService resources. */
	export interface BackendServiceListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceListFormGroup() {
		return new FormGroup<BackendServiceListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		BackendServiceListWarningData?: Array<BackendServiceListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface BackendServiceListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceListWarningFormGroup() {
		return new FormGroup<BackendServiceListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface BackendServiceListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceListWarningDataFormGroup() {
		return new FormGroup<BackendServiceListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of usable BackendService resources. */
	export interface BackendServiceListUsable {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of BackendService resources. */
		items?: Array<BackendService>;

		/** [Output Only] Type of resource. Always compute#usableBackendServiceList for lists of usable backend services. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: BackendServiceListUsableWarning;
	}

	/** Contains a list of usable BackendService resources. */
	export interface BackendServiceListUsableFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#usableBackendServiceList for lists of usable backend services. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceListUsableFormGroup() {
		return new FormGroup<BackendServiceListUsableFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceListUsableWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		BackendServiceListUsableWarningData?: Array<BackendServiceListUsableWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface BackendServiceListUsableWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceListUsableWarningFormGroup() {
		return new FormGroup<BackendServiceListUsableWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceListUsableWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface BackendServiceListUsableWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceListUsableWarningDataFormGroup() {
		return new FormGroup<BackendServiceListUsableWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BackendServiceReference {
		backendService?: string | null;
	}
	export interface BackendServiceReferenceFormProperties {
		backendService: FormControl<string | null | undefined>,
	}
	export function CreateBackendServiceReferenceFormGroup() {
		return new FormGroup<BackendServiceReferenceFormProperties>({
			backendService: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BfdPacket {

		/** The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		authenticationPresent?: boolean | null;

		/** The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		controlPlaneIndependent?: boolean | null;

		/** The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		demand?: boolean | null;

		/** The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880 */
		diagnostic?: BfdPacketDiagnostic | null;

		/** The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		final?: boolean | null;

		/**
		 * The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		length?: number | null;

		/**
		 * The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		minEchoRxIntervalMs?: number | null;

		/**
		 * The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		minRxIntervalMs?: number | null;

		/**
		 * The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		minTxIntervalMs?: number | null;

		/**
		 * The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		multiplier?: number | null;

		/** The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		multipoint?: boolean | null;

		/**
		 * The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		myDiscriminator?: number | null;

		/** The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		poll?: boolean | null;

		/** The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880 */
		state?: BfdPacketState | null;

		/**
		 * The version number of the BFD protocol, as specified in section 4.1 of RFC5880.
		 * Type: uint, 0 to 4,294,967,295
		 */
		version?: number | null;

		/**
		 * The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		yourDiscriminator?: number | null;
	}
	export interface BfdPacketFormProperties {

		/** The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		authenticationPresent: FormControl<boolean | null | undefined>,

		/** The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		controlPlaneIndependent: FormControl<boolean | null | undefined>,

		/** The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		demand: FormControl<boolean | null | undefined>,

		/** The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880 */
		diagnostic: FormControl<BfdPacketDiagnostic | null | undefined>,

		/** The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		final: FormControl<boolean | null | undefined>,

		/**
		 * The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		length: FormControl<number | null | undefined>,

		/**
		 * The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		minEchoRxIntervalMs: FormControl<number | null | undefined>,

		/**
		 * The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		minRxIntervalMs: FormControl<number | null | undefined>,

		/**
		 * The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		minTxIntervalMs: FormControl<number | null | undefined>,

		/**
		 * The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		multiplier: FormControl<number | null | undefined>,

		/** The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		multipoint: FormControl<boolean | null | undefined>,

		/**
		 * The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		myDiscriminator: FormControl<number | null | undefined>,

		/** The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
		poll: FormControl<boolean | null | undefined>,

		/** The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880 */
		state: FormControl<BfdPacketState | null | undefined>,

		/**
		 * The version number of the BFD protocol, as specified in section 4.1 of RFC5880.
		 * Type: uint, 0 to 4,294,967,295
		 */
		version: FormControl<number | null | undefined>,

		/**
		 * The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
		 * Type: uint, 0 to 4,294,967,295
		 */
		yourDiscriminator: FormControl<number | null | undefined>,
	}
	export function CreateBfdPacketFormGroup() {
		return new FormGroup<BfdPacketFormProperties>({
			authenticationPresent: new FormControl<boolean | null | undefined>(undefined),
			controlPlaneIndependent: new FormControl<boolean | null | undefined>(undefined),
			demand: new FormControl<boolean | null | undefined>(undefined),
			diagnostic: new FormControl<BfdPacketDiagnostic | null | undefined>(undefined),
			final: new FormControl<boolean | null | undefined>(undefined),
			length: new FormControl<number | null | undefined>(undefined),
			minEchoRxIntervalMs: new FormControl<number | null | undefined>(undefined),
			minRxIntervalMs: new FormControl<number | null | undefined>(undefined),
			minTxIntervalMs: new FormControl<number | null | undefined>(undefined),
			multiplier: new FormControl<number | null | undefined>(undefined),
			multipoint: new FormControl<boolean | null | undefined>(undefined),
			myDiscriminator: new FormControl<number | null | undefined>(undefined),
			poll: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<BfdPacketState | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
			yourDiscriminator: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum BfdPacketDiagnostic { ADMINISTRATIVELY_DOWN = 'ADMINISTRATIVELY_DOWN', CONCATENATED_PATH_DOWN = 'CONCATENATED_PATH_DOWN', CONTROL_DETECTION_TIME_EXPIRED = 'CONTROL_DETECTION_TIME_EXPIRED', DIAGNOSTIC_UNSPECIFIED = 'DIAGNOSTIC_UNSPECIFIED', ECHO_FUNCTION_FAILED = 'ECHO_FUNCTION_FAILED', FORWARDING_PLANE_RESET = 'FORWARDING_PLANE_RESET', NEIGHBOR_SIGNALED_SESSION_DOWN = 'NEIGHBOR_SIGNALED_SESSION_DOWN', NO_DIAGNOSTIC = 'NO_DIAGNOSTIC', PATH_DOWN = 'PATH_DOWN', REVERSE_CONCATENATED_PATH_DOWN = 'REVERSE_CONCATENATED_PATH_DOWN' }

	export enum BfdPacketState { ADMIN_DOWN = 'ADMIN_DOWN', DOWN = 'DOWN', INIT = 'INIT', STATE_UNSPECIFIED = 'STATE_UNSPECIFIED', UP = 'UP' }


	/** Next free: 15 */
	export interface BfdStatus {

		/** The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. */
		bfdSessionInitializationMode?: BfdStatusBfdSessionInitializationMode | null;

		/** Unix timestamp of the most recent config update. */
		configUpdateTimestampMicros?: string | null;
		controlPacketCounts?: BfdStatusPacketCounts;

		/** Inter-packet time interval statistics for control packets. */
		controlPacketIntervals?: Array<PacketIntervals>;

		/** The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880 */
		localDiagnostic?: BfdPacketDiagnostic | null;

		/** The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880 */
		localState?: BfdPacketState | null;

		/**
		 * Negotiated transmit interval for control packets.
		 * Type: uint, 0 to 4,294,967,295
		 */
		negotiatedLocalControlTxIntervalMs?: number | null;
		rxPacket?: BfdPacket;
		txPacket?: BfdPacket;

		/** Session uptime in milliseconds. Value will be 0 if session is not up. */
		uptimeMs?: string | null;
	}

	/** Next free: 15 */
	export interface BfdStatusFormProperties {

		/** The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. */
		bfdSessionInitializationMode: FormControl<BfdStatusBfdSessionInitializationMode | null | undefined>,

		/** Unix timestamp of the most recent config update. */
		configUpdateTimestampMicros: FormControl<string | null | undefined>,

		/** The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880 */
		localDiagnostic: FormControl<BfdPacketDiagnostic | null | undefined>,

		/** The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880 */
		localState: FormControl<BfdPacketState | null | undefined>,

		/**
		 * Negotiated transmit interval for control packets.
		 * Type: uint, 0 to 4,294,967,295
		 */
		negotiatedLocalControlTxIntervalMs: FormControl<number | null | undefined>,

		/** Session uptime in milliseconds. Value will be 0 if session is not up. */
		uptimeMs: FormControl<string | null | undefined>,
	}
	export function CreateBfdStatusFormGroup() {
		return new FormGroup<BfdStatusFormProperties>({
			bfdSessionInitializationMode: new FormControl<BfdStatusBfdSessionInitializationMode | null | undefined>(undefined),
			configUpdateTimestampMicros: new FormControl<string | null | undefined>(undefined),
			localDiagnostic: new FormControl<BfdPacketDiagnostic | null | undefined>(undefined),
			localState: new FormControl<BfdPacketState | null | undefined>(undefined),
			negotiatedLocalControlTxIntervalMs: new FormControl<number | null | undefined>(undefined),
			uptimeMs: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum BfdStatusBfdSessionInitializationMode { ACTIVE = 'ACTIVE', DISABLED = 'DISABLED', PASSIVE = 'PASSIVE' }

	export interface BfdStatusPacketCounts {

		/**
		 * Number of packets received since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRx?: number | null;

		/**
		 * Number of packets received that were rejected because of errors since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRxRejected?: number | null;

		/**
		 * Number of packets received that were successfully processed since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRxSuccessful?: number | null;

		/**
		 * Number of packets transmitted since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numTx?: number | null;
	}
	export interface BfdStatusPacketCountsFormProperties {

		/**
		 * Number of packets received since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRx: FormControl<number | null | undefined>,

		/**
		 * Number of packets received that were rejected because of errors since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRxRejected: FormControl<number | null | undefined>,

		/**
		 * Number of packets received that were successfully processed since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRxSuccessful: FormControl<number | null | undefined>,

		/**
		 * Number of packets transmitted since the beginning of the current BFD session.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numTx: FormControl<number | null | undefined>,
	}
	export function CreateBfdStatusPacketCountsFormGroup() {
		return new FormGroup<BfdStatusPacketCountsFormProperties>({
			numRx: new FormControl<number | null | undefined>(undefined),
			numRxRejected: new FormControl<number | null | undefined>(undefined),
			numRxSuccessful: new FormControl<number | null | undefined>(undefined),
			numTx: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Next free: 7 */
	export interface PacketIntervals {

		/** Average observed inter-packet interval in milliseconds. */
		avgMs?: string | null;

		/** From how long ago in the past these intervals were observed. */
		duration?: PacketIntervalsDuration | null;

		/** Maximum observed inter-packet interval in milliseconds. */
		maxMs?: string | null;

		/** Minimum observed inter-packet interval in milliseconds. */
		minMs?: string | null;

		/** Number of inter-packet intervals from which these statistics were derived. */
		numIntervals?: string | null;

		/** The type of packets for which inter-packet intervals were computed. */
		type?: PacketIntervalsType | null;
	}

	/** Next free: 7 */
	export interface PacketIntervalsFormProperties {

		/** Average observed inter-packet interval in milliseconds. */
		avgMs: FormControl<string | null | undefined>,

		/** From how long ago in the past these intervals were observed. */
		duration: FormControl<PacketIntervalsDuration | null | undefined>,

		/** Maximum observed inter-packet interval in milliseconds. */
		maxMs: FormControl<string | null | undefined>,

		/** Minimum observed inter-packet interval in milliseconds. */
		minMs: FormControl<string | null | undefined>,

		/** Number of inter-packet intervals from which these statistics were derived. */
		numIntervals: FormControl<string | null | undefined>,

		/** The type of packets for which inter-packet intervals were computed. */
		type: FormControl<PacketIntervalsType | null | undefined>,
	}
	export function CreatePacketIntervalsFormGroup() {
		return new FormGroup<PacketIntervalsFormProperties>({
			avgMs: new FormControl<string | null | undefined>(undefined),
			duration: new FormControl<PacketIntervalsDuration | null | undefined>(undefined),
			maxMs: new FormControl<string | null | undefined>(undefined),
			minMs: new FormControl<string | null | undefined>(undefined),
			numIntervals: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<PacketIntervalsType | null | undefined>(undefined),
		});

	}

	export enum PacketIntervalsDuration { DURATION_UNSPECIFIED = 'DURATION_UNSPECIFIED', HOUR = 'HOUR', MAX = 'MAX', MINUTE = 'MINUTE' }

	export enum PacketIntervalsType { LOOPBACK = 'LOOPBACK', RECEIVE = 'RECEIVE', TRANSMIT = 'TRANSMIT', TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED' }


	/** Associates `members`, or principals, with a `role`. */
	export interface Binding {

		/** This is deprecated and has no effect. Do not use. */
		bindingId?: string | null;

		/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
		condition?: Expr;

		/** Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`. */
		members?: Array<string>;

		/** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
		role?: string | null;
	}

	/** Associates `members`, or principals, with a `role`. */
	export interface BindingFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		bindingId: FormControl<string | null | undefined>,

		/** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
		role: FormControl<string | null | undefined>,
	}
	export function CreateBindingFormGroup() {
		return new FormGroup<BindingFormProperties>({
			bindingId: new FormControl<string | null | undefined>(undefined),
			role: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
	export interface Expr {

		/** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
		description?: string | null;

		/** Textual representation of an expression in Common Expression Language syntax. */
		expression?: string | null;

		/** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
		location?: string | null;

		/** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
		title?: string | null;
	}

	/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
	export interface ExprFormProperties {

		/** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
		description: FormControl<string | null | undefined>,

		/** Textual representation of an expression in Common Expression Language syntax. */
		expression: FormControl<string | null | undefined>,

		/** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
		location: FormControl<string | null | undefined>,

		/** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateExprFormGroup() {
		return new FormGroup<ExprFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			expression: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A transient resource used in compute.disks.bulkInsert and compute.regionDisks.bulkInsert. It is only used to process requests and is not persisted. */
	export interface BulkInsertDiskResource {

		/** The URL of the DiskConsistencyGroupPolicy for the group of disks to clone. This may be a full or partial URL, such as: - https://www.googleapis.com/compute/v1/projects/project/regions/region /resourcePolicies/resourcePolicy - projects/project/regions/region/resourcePolicies/resourcePolicy - regions/region/resourcePolicies/resourcePolicy */
		sourceConsistencyGroupPolicy?: string | null;
	}

	/** A transient resource used in compute.disks.bulkInsert and compute.regionDisks.bulkInsert. It is only used to process requests and is not persisted. */
	export interface BulkInsertDiskResourceFormProperties {

		/** The URL of the DiskConsistencyGroupPolicy for the group of disks to clone. This may be a full or partial URL, such as: - https://www.googleapis.com/compute/v1/projects/project/regions/region /resourcePolicies/resourcePolicy - projects/project/regions/region/resourcePolicies/resourcePolicy - regions/region/resourcePolicies/resourcePolicy */
		sourceConsistencyGroupPolicy: FormControl<string | null | undefined>,
	}
	export function CreateBulkInsertDiskResourceFormGroup() {
		return new FormGroup<BulkInsertDiskResourceFormProperties>({
			sourceConsistencyGroupPolicy: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A transient resource used in compute.instances.bulkInsert and compute.regionInstances.bulkInsert . This resource is not persisted anywhere, it is used only for processing the requests. */
	export interface BulkInsertInstanceResource {

		/** The maximum number of instances to create. */
		count?: string | null;
		instanceProperties?: InstanceProperties;

		/** Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region). */
		locationPolicy?: LocationPolicy;

		/** The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted. */
		minCount?: string | null;

		/** The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters. */
		namePattern?: string | null;

		/** Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used. */
		perInstanceProperties?: {[id: string]: BulkInsertInstanceResourcePerInstanceProperties };

		/** Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional. */
		sourceInstanceTemplate?: string | null;
	}

	/** A transient resource used in compute.instances.bulkInsert and compute.regionInstances.bulkInsert . This resource is not persisted anywhere, it is used only for processing the requests. */
	export interface BulkInsertInstanceResourceFormProperties {

		/** The maximum number of instances to create. */
		count: FormControl<string | null | undefined>,

		/** The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted. */
		minCount: FormControl<string | null | undefined>,

		/** The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters. */
		namePattern: FormControl<string | null | undefined>,

		/** Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used. */
		perInstanceProperties: FormControl<{[id: string]: BulkInsertInstanceResourcePerInstanceProperties } | null | undefined>,

		/** Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional. */
		sourceInstanceTemplate: FormControl<string | null | undefined>,
	}
	export function CreateBulkInsertInstanceResourceFormGroup() {
		return new FormGroup<BulkInsertInstanceResourceFormProperties>({
			count: new FormControl<string | null | undefined>(undefined),
			minCount: new FormControl<string | null | undefined>(undefined),
			namePattern: new FormControl<string | null | undefined>(undefined),
			perInstanceProperties: new FormControl<{[id: string]: BulkInsertInstanceResourcePerInstanceProperties } | null | undefined>(undefined),
			sourceInstanceTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceProperties {

		/** Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled). */
		advancedMachineFeatures?: AdvancedMachineFeatures;

		/** Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information. */
		canIpForward?: boolean | null;

		/** A set of Confidential Instance options. */
		confidentialInstanceConfig?: ConfidentialInstanceConfig;

		/** An optional text description for the instances that are created from these properties. */
		description?: string | null;

		/** An array of disks that are associated with the instances that are created from these properties. */
		disks?: Array<AttachedDisk>;

		/** A list of guest accelerator cards' type and count to use for instances created from these properties. */
		guestAccelerators?: Array<AcceleratorConfig>;

		/** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
		keyRevocationActionType?: InstancePropertiesKeyRevocationActionType | null;

		/** Labels to apply to instances that are created from these properties. */
		labels?: {[id: string]: string };

		/** The machine type to use for instances that are created from these properties. */
		machineType?: string | null;

		/** A metadata key/value entry. */
		metadata?: Metadata;

		/** Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform. */
		minCpuPlatform?: string | null;

		/** An array of network access configurations for this interface. */
		networkInterfaces?: Array<NetworkInterface>;
		networkPerformanceConfig?: NetworkPerformanceConfig;

		/** The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet. */
		privateIpv6GoogleAccess?: InstancePropertiesPrivateIpv6GoogleAccess | null;

		/** Specifies the reservations that this instance can consume from. */
		reservationAffinity?: ReservationAffinity;

		/** Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags?: {[id: string]: string };

		/** Resource policies (names, not URLs) applied to instances created from these properties. Note that for MachineImage, this is not supported yet. */
		resourcePolicies?: Array<string>;

		/** Sets the scheduling options for an Instance. */
		scheduling?: Scheduling;

		/** A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances. */
		serviceAccounts?: Array<ServiceAccount>;

		/** A set of Shielded Instance options. */
		shieldedInstanceConfig?: ShieldedInstanceConfig;

		/** A set of instance tags. */
		tags?: Tags;
	}
	export interface InstancePropertiesFormProperties {

		/** Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information. */
		canIpForward: FormControl<boolean | null | undefined>,

		/** An optional text description for the instances that are created from these properties. */
		description: FormControl<string | null | undefined>,

		/** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
		keyRevocationActionType: FormControl<InstancePropertiesKeyRevocationActionType | null | undefined>,

		/** Labels to apply to instances that are created from these properties. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The machine type to use for instances that are created from these properties. */
		machineType: FormControl<string | null | undefined>,

		/** Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform. */
		minCpuPlatform: FormControl<string | null | undefined>,

		/** The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet. */
		privateIpv6GoogleAccess: FormControl<InstancePropertiesPrivateIpv6GoogleAccess | null | undefined>,

		/** Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateInstancePropertiesFormGroup() {
		return new FormGroup<InstancePropertiesFormProperties>({
			canIpForward: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			keyRevocationActionType: new FormControl<InstancePropertiesKeyRevocationActionType | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			machineType: new FormControl<string | null | undefined>(undefined),
			minCpuPlatform: new FormControl<string | null | undefined>(undefined),
			privateIpv6GoogleAccess: new FormControl<InstancePropertiesPrivateIpv6GoogleAccess | null | undefined>(undefined),
			resourceManagerTags: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** A set of Confidential Instance options. */
	export interface ConfidentialInstanceConfig {

		/** Defines whether the instance should have confidential compute enabled. */
		enableConfidentialCompute?: boolean | null;
	}

	/** A set of Confidential Instance options. */
	export interface ConfidentialInstanceConfigFormProperties {

		/** Defines whether the instance should have confidential compute enabled. */
		enableConfidentialCompute: FormControl<boolean | null | undefined>,
	}
	export function CreateConfidentialInstanceConfigFormGroup() {
		return new FormGroup<ConfidentialInstanceConfigFormProperties>({
			enableConfidentialCompute: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum InstancePropertiesKeyRevocationActionType { KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED = 'KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED', NONE = 'NONE', STOP = 'STOP' }


	/** A metadata key/value entry. */
	export interface Metadata {

		/** Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource. */
		fingerprint?: string | null;

		/** Array of key/value pairs. The total size of all keys and values must be less than 512 KB. */
		MetadataItems?: Array<MetadataItems>;

		/** [Output Only] Type of the resource. Always compute#metadata for metadata. */
		kind?: string | null;
	}

	/** A metadata key/value entry. */
	export interface MetadataFormProperties {

		/** Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#metadata for metadata. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateMetadataFormGroup() {
		return new FormGroup<MetadataFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MetadataItems {

		/** Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project. */
		key?: string | null;

		/** Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB). */
		value?: string | null;
	}
	export interface MetadataItemsFormProperties {

		/** Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project. */
		key: FormControl<string | null | undefined>,

		/** Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB). */
		value: FormControl<string | null | undefined>,
	}
	export function CreateMetadataItemsFormGroup() {
		return new FormGroup<MetadataItemsFormProperties>({
			key: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-zA-Z0-9-_]{1,128}')]),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A network interface resource attached to an instance. */
	export interface NetworkInterface {

		/** An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access. */
		accessConfigs?: Array<AccessConfig>;

		/** An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks. */
		aliasIpRanges?: Array<AliasIpRange>;

		/** Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date. */
		fingerprint?: string | null;

		/**
		 * The prefix length of the primary internal IPv6 range.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		internalIpv6PrefixLength?: number | null;

		/** An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access. */
		ipv6AccessConfigs?: Array<AccessConfig>;

		/** [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6. */
		ipv6AccessType?: NetworkInterfaceIpv6AccessType | null;

		/** An IPv6 internal network address for this network interface. To use a static internal IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork. */
		ipv6Address?: string | null;

		/** [Output Only] Type of the resource. Always compute#networkInterface for network interfaces. */
		kind?: string | null;

		/** [Output Only] The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7. The default interface value is nic0. */
		name?: string | null;

		/** URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default */
		network?: string | null;

		/** The URL of the network attachment that this interface should connect to in the following format: projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}. */
		networkAttachment?: string | null;

		/** An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system. */
		networkIP?: string | null;

		/** The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet. */
		nicType?: NetworkInterfaceNicType | null;

		/**
		 * The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		queueCount?: number | null;

		/** The stack type for this network interface. To assign only IPv4 addresses, use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations. */
		stackType?: NetworkInterfaceStackType | null;

		/** The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork */
		subnetwork?: string | null;
	}

	/** A network interface resource attached to an instance. */
	export interface NetworkInterfaceFormProperties {

		/** Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date. */
		fingerprint: FormControl<string | null | undefined>,

		/**
		 * The prefix length of the primary internal IPv6 range.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		internalIpv6PrefixLength: FormControl<number | null | undefined>,

		/** [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6. */
		ipv6AccessType: FormControl<NetworkInterfaceIpv6AccessType | null | undefined>,

		/** An IPv6 internal network address for this network interface. To use a static internal IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork. */
		ipv6Address: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#networkInterface for network interfaces. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7. The default interface value is nic0. */
		name: FormControl<string | null | undefined>,

		/** URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default */
		network: FormControl<string | null | undefined>,

		/** The URL of the network attachment that this interface should connect to in the following format: projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}. */
		networkAttachment: FormControl<string | null | undefined>,

		/** An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system. */
		networkIP: FormControl<string | null | undefined>,

		/** The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet. */
		nicType: FormControl<NetworkInterfaceNicType | null | undefined>,

		/**
		 * The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		queueCount: FormControl<number | null | undefined>,

		/** The stack type for this network interface. To assign only IPv4 addresses, use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations. */
		stackType: FormControl<NetworkInterfaceStackType | null | undefined>,

		/** The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork */
		subnetwork: FormControl<string | null | undefined>,
	}
	export function CreateNetworkInterfaceFormGroup() {
		return new FormGroup<NetworkInterfaceFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
			internalIpv6PrefixLength: new FormControl<number | null | undefined>(undefined),
			ipv6AccessType: new FormControl<NetworkInterfaceIpv6AccessType | null | undefined>(undefined),
			ipv6Address: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			network: new FormControl<string | null | undefined>(undefined),
			networkAttachment: new FormControl<string | null | undefined>(undefined),
			networkIP: new FormControl<string | null | undefined>(undefined),
			nicType: new FormControl<NetworkInterfaceNicType | null | undefined>(undefined),
			queueCount: new FormControl<number | null | undefined>(undefined),
			stackType: new FormControl<NetworkInterfaceStackType | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NetworkInterfaceIpv6AccessType { EXTERNAL = 'EXTERNAL', INTERNAL = 'INTERNAL' }

	export enum NetworkInterfaceNicType { GVNIC = 'GVNIC', UNSPECIFIED_NIC_TYPE = 'UNSPECIFIED_NIC_TYPE', VIRTIO_NET = 'VIRTIO_NET' }

	export enum NetworkInterfaceStackType { IPV4_IPV6 = 'IPV4_IPV6', IPV4_ONLY = 'IPV4_ONLY' }

	export interface NetworkPerformanceConfig {
		totalEgressBandwidthTier?: NetworkPerformanceConfigTotalEgressBandwidthTier | null;
	}
	export interface NetworkPerformanceConfigFormProperties {
		totalEgressBandwidthTier: FormControl<NetworkPerformanceConfigTotalEgressBandwidthTier | null | undefined>,
	}
	export function CreateNetworkPerformanceConfigFormGroup() {
		return new FormGroup<NetworkPerformanceConfigFormProperties>({
			totalEgressBandwidthTier: new FormControl<NetworkPerformanceConfigTotalEgressBandwidthTier | null | undefined>(undefined),
		});

	}

	export enum NetworkPerformanceConfigTotalEgressBandwidthTier { DEFAULT = 'DEFAULT', TIER_1 = 'TIER_1' }

	export enum InstancePropertiesPrivateIpv6GoogleAccess { ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = 'ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE', ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = 'ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE', INHERIT_FROM_SUBNETWORK = 'INHERIT_FROM_SUBNETWORK' }


	/** Specifies the reservations that this instance can consume from. */
	export interface ReservationAffinity {

		/** Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples. */
		consumeReservationType?: ReservationAffinityConsumeReservationType | null;

		/** Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value. */
		key?: string | null;

		/** Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project. */
		values?: Array<string>;
	}

	/** Specifies the reservations that this instance can consume from. */
	export interface ReservationAffinityFormProperties {

		/** Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples. */
		consumeReservationType: FormControl<ReservationAffinityConsumeReservationType | null | undefined>,

		/** Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value. */
		key: FormControl<string | null | undefined>,
	}
	export function CreateReservationAffinityFormGroup() {
		return new FormGroup<ReservationAffinityFormProperties>({
			consumeReservationType: new FormControl<ReservationAffinityConsumeReservationType | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ReservationAffinityConsumeReservationType { ANY_RESERVATION = 'ANY_RESERVATION', NO_RESERVATION = 'NO_RESERVATION', SPECIFIC_RESERVATION = 'SPECIFIC_RESERVATION', UNSPECIFIED = 'UNSPECIFIED' }


	/** Sets the scheduling options for an Instance. */
	export interface Scheduling {

		/** Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine. */
		automaticRestart?: boolean | null;

		/** Specifies the termination action for the instance. */
		instanceTerminationAction?: SchedulingInstanceTerminationAction | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		localSsdRecoveryTimeout?: Duration;

		/** An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API. */
		locationHint?: string | null;

		/**
		 * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNodeCpus?: number | null;

		/** A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity. */
		nodeAffinities?: Array<SchedulingNodeAffinity>;

		/** Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy. */
		onHostMaintenance?: SchedulingOnHostMaintenance | null;

		/** Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states. */
		preemptible?: boolean | null;

		/** Specifies the provisioning model of the instance. */
		provisioningModel?: SchedulingProvisioningModel | null;
	}

	/** Sets the scheduling options for an Instance. */
	export interface SchedulingFormProperties {

		/** Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine. */
		automaticRestart: FormControl<boolean | null | undefined>,

		/** Specifies the termination action for the instance. */
		instanceTerminationAction: FormControl<SchedulingInstanceTerminationAction | null | undefined>,

		/** An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API. */
		locationHint: FormControl<string | null | undefined>,

		/**
		 * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNodeCpus: FormControl<number | null | undefined>,

		/** Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy. */
		onHostMaintenance: FormControl<SchedulingOnHostMaintenance | null | undefined>,

		/** Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states. */
		preemptible: FormControl<boolean | null | undefined>,

		/** Specifies the provisioning model of the instance. */
		provisioningModel: FormControl<SchedulingProvisioningModel | null | undefined>,
	}
	export function CreateSchedulingFormGroup() {
		return new FormGroup<SchedulingFormProperties>({
			automaticRestart: new FormControl<boolean | null | undefined>(undefined),
			instanceTerminationAction: new FormControl<SchedulingInstanceTerminationAction | null | undefined>(undefined),
			locationHint: new FormControl<string | null | undefined>(undefined),
			minNodeCpus: new FormControl<number | null | undefined>(undefined),
			onHostMaintenance: new FormControl<SchedulingOnHostMaintenance | null | undefined>(undefined),
			preemptible: new FormControl<boolean | null | undefined>(undefined),
			provisioningModel: new FormControl<SchedulingProvisioningModel | null | undefined>(undefined),
		});

	}

	export enum SchedulingInstanceTerminationAction { DELETE = 'DELETE', INSTANCE_TERMINATION_ACTION_UNSPECIFIED = 'INSTANCE_TERMINATION_ACTION_UNSPECIFIED', STOP = 'STOP' }


	/** Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. */
	export interface SchedulingNodeAffinity {

		/** Corresponds to the label key of Node resource. */
		key?: string | null;

		/** Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity. */
		operator?: SchedulingNodeAffinityOperator | null;

		/** Corresponds to the label values of Node resource. */
		values?: Array<string>;
	}

	/** Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. */
	export interface SchedulingNodeAffinityFormProperties {

		/** Corresponds to the label key of Node resource. */
		key: FormControl<string | null | undefined>,

		/** Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity. */
		operator: FormControl<SchedulingNodeAffinityOperator | null | undefined>,
	}
	export function CreateSchedulingNodeAffinityFormGroup() {
		return new FormGroup<SchedulingNodeAffinityFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			operator: new FormControl<SchedulingNodeAffinityOperator | null | undefined>(undefined),
		});

	}

	export enum SchedulingNodeAffinityOperator { IN = 'IN', NOT_IN = 'NOT_IN', OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED' }

	export enum SchedulingOnHostMaintenance { MIGRATE = 'MIGRATE', TERMINATE = 'TERMINATE' }

	export enum SchedulingProvisioningModel { SPOT = 'SPOT', STANDARD = 'STANDARD' }


	/** A service account. */
	export interface ServiceAccount {

		/** Email address of the service account. */
		email?: string | null;

		/** The list of scopes to be made available for this service account. */
		scopes?: Array<string>;
	}

	/** A service account. */
	export interface ServiceAccountFormProperties {

		/** Email address of the service account. */
		email: FormControl<string | null | undefined>,
	}
	export function CreateServiceAccountFormGroup() {
		return new FormGroup<ServiceAccountFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A set of Shielded Instance options. */
	export interface ShieldedInstanceConfig {

		/** Defines whether the instance has integrity monitoring enabled. Enabled by default. */
		enableIntegrityMonitoring?: boolean | null;

		/** Defines whether the instance has Secure Boot enabled. Disabled by default. */
		enableSecureBoot?: boolean | null;

		/** Defines whether the instance has the vTPM enabled. Enabled by default. */
		enableVtpm?: boolean | null;
	}

	/** A set of Shielded Instance options. */
	export interface ShieldedInstanceConfigFormProperties {

		/** Defines whether the instance has integrity monitoring enabled. Enabled by default. */
		enableIntegrityMonitoring: FormControl<boolean | null | undefined>,

		/** Defines whether the instance has Secure Boot enabled. Disabled by default. */
		enableSecureBoot: FormControl<boolean | null | undefined>,

		/** Defines whether the instance has the vTPM enabled. Enabled by default. */
		enableVtpm: FormControl<boolean | null | undefined>,
	}
	export function CreateShieldedInstanceConfigFormGroup() {
		return new FormGroup<ShieldedInstanceConfigFormProperties>({
			enableIntegrityMonitoring: new FormControl<boolean | null | undefined>(undefined),
			enableSecureBoot: new FormControl<boolean | null | undefined>(undefined),
			enableVtpm: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A set of instance tags. */
	export interface Tags {

		/** Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance. */
		fingerprint?: string | null;

		/** An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035. */
		items?: Array<string>;
	}

	/** A set of instance tags. */
	export interface TagsFormProperties {

		/** Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance. */
		fingerprint: FormControl<string | null | undefined>,
	}
	export function CreateTagsFormGroup() {
		return new FormGroup<TagsFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region). */
	export interface LocationPolicy {

		/** Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a. */
		locations?: {[id: string]: LocationPolicyLocation };

		/** Strategy for distributing VMs across zones in a region. */
		targetShape?: LocationPolicyTargetShape | null;
	}

	/** Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region). */
	export interface LocationPolicyFormProperties {

		/** Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a. */
		locations: FormControl<{[id: string]: LocationPolicyLocation } | null | undefined>,

		/** Strategy for distributing VMs across zones in a region. */
		targetShape: FormControl<LocationPolicyTargetShape | null | undefined>,
	}
	export function CreateLocationPolicyFormGroup() {
		return new FormGroup<LocationPolicyFormProperties>({
			locations: new FormControl<{[id: string]: LocationPolicyLocation } | null | undefined>(undefined),
			targetShape: new FormControl<LocationPolicyTargetShape | null | undefined>(undefined),
		});

	}

	export interface LocationPolicyLocation {

		/** Per-zone constraints on location policy for this zone. */
		constraints?: LocationPolicyLocationConstraints;

		/** Preference for a given location. Set to either ALLOW or DENY. */
		preference?: LocationPolicyLocationPreference | null;
	}
	export interface LocationPolicyLocationFormProperties {

		/** Preference for a given location. Set to either ALLOW or DENY. */
		preference: FormControl<LocationPolicyLocationPreference | null | undefined>,
	}
	export function CreateLocationPolicyLocationFormGroup() {
		return new FormGroup<LocationPolicyLocationFormProperties>({
			preference: new FormControl<LocationPolicyLocationPreference | null | undefined>(undefined),
		});

	}


	/** Per-zone constraints on location policy for this zone. */
	export interface LocationPolicyLocationConstraints {

		/**
		 * Maximum number of items that are allowed to be placed in this zone. The value must be non-negative.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxCount?: number | null;
	}

	/** Per-zone constraints on location policy for this zone. */
	export interface LocationPolicyLocationConstraintsFormProperties {

		/**
		 * Maximum number of items that are allowed to be placed in this zone. The value must be non-negative.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxCount: FormControl<number | null | undefined>,
	}
	export function CreateLocationPolicyLocationConstraintsFormGroup() {
		return new FormGroup<LocationPolicyLocationConstraintsFormProperties>({
			maxCount: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum LocationPolicyLocationPreference { ALLOW = 'ALLOW', DENY = 'DENY', PREFERENCE_UNSPECIFIED = 'PREFERENCE_UNSPECIFIED' }

	export enum LocationPolicyTargetShape { ANY = 'ANY', ANY_SINGLE_ZONE = 'ANY_SINGLE_ZONE', BALANCED = 'BALANCED' }


	/** Per-instance properties to be set on individual instances. To be extended in the future. */
	export interface BulkInsertInstanceResourcePerInstanceProperties {

		/** Specifies the hostname of the instance. More details in: https://cloud.google.com/compute/docs/instances/custom-hostname-vm#naming_convention */
		hostname?: string | null;

		/** This field is only temporary. It will be removed. Do not use it. */
		name?: string | null;
	}

	/** Per-instance properties to be set on individual instances. To be extended in the future. */
	export interface BulkInsertInstanceResourcePerInstancePropertiesFormProperties {

		/** Specifies the hostname of the instance. More details in: https://cloud.google.com/compute/docs/instances/custom-hostname-vm#naming_convention */
		hostname: FormControl<string | null | undefined>,

		/** This field is only temporary. It will be removed. Do not use it. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateBulkInsertInstanceResourcePerInstancePropertiesFormGroup() {
		return new FormGroup<BulkInsertInstanceResourcePerInstancePropertiesFormProperties>({
			hostname: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BulkInsertOperationStatus {

		/**
		 * [Output Only] Count of VMs successfully created so far.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		createdVmCount?: number | null;

		/**
		 * [Output Only] Count of VMs that got deleted during rollback.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		deletedVmCount?: number | null;

		/**
		 * [Output Only] Count of VMs that started creating but encountered an error.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failedToCreateVmCount?: number | null;

		/** [Output Only] Creation status of BulkInsert operation - information if the flow is rolling forward or rolling back. */
		status?: BulkInsertOperationStatusStatus | null;

		/**
		 * [Output Only] Count of VMs originally planned to be created.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		targetVmCount?: number | null;
	}
	export interface BulkInsertOperationStatusFormProperties {

		/**
		 * [Output Only] Count of VMs successfully created so far.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		createdVmCount: FormControl<number | null | undefined>,

		/**
		 * [Output Only] Count of VMs that got deleted during rollback.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		deletedVmCount: FormControl<number | null | undefined>,

		/**
		 * [Output Only] Count of VMs that started creating but encountered an error.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failedToCreateVmCount: FormControl<number | null | undefined>,

		/** [Output Only] Creation status of BulkInsert operation - information if the flow is rolling forward or rolling back. */
		status: FormControl<BulkInsertOperationStatusStatus | null | undefined>,

		/**
		 * [Output Only] Count of VMs originally planned to be created.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		targetVmCount: FormControl<number | null | undefined>,
	}
	export function CreateBulkInsertOperationStatusFormGroup() {
		return new FormGroup<BulkInsertOperationStatusFormProperties>({
			createdVmCount: new FormControl<number | null | undefined>(undefined),
			deletedVmCount: new FormControl<number | null | undefined>(undefined),
			failedToCreateVmCount: new FormControl<number | null | undefined>(undefined),
			status: new FormControl<BulkInsertOperationStatusStatus | null | undefined>(undefined),
			targetVmCount: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum BulkInsertOperationStatusStatus { CREATING = 'CREATING', DONE = 'DONE', ROLLING_BACK = 'ROLLING_BACK', STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED' }

	export interface CacheInvalidationRule {

		/** If set, this invalidation rule will only apply to requests with a Host header matching host. */
		host?: string | null;
		path?: string | null;
	}
	export interface CacheInvalidationRuleFormProperties {

		/** If set, this invalidation rule will only apply to requests with a Host header matching host. */
		host: FormControl<string | null | undefined>,
		path: FormControl<string | null | undefined>,
	}
	export function CreateCacheInvalidationRuleFormGroup() {
		return new FormGroup<CacheInvalidationRuleFormProperties>({
			host: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a regional Commitment resource. Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts. */
	export interface Commitment {

		/** Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment. */
		autoRenew?: boolean | null;

		/** The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified. */
		category?: CommitmentCategory | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Commitment end time in RFC3339 text format. */
		endTimestamp?: string | null;

		/** Specifies the already existing reservations to attach to the Commitment. This field is optional, and it can be a full or partial URL. For example, the following are valid URLs to an reservation: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /reservations/reservation - projects/project/zones/zone/reservations/reservation */
		existingReservations?: Array<string>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#commitment for commitments. */
		kind?: string | null;

		/** Commitment for a particular license resource. */
		licenseResource?: LicenseResourceCommitment;

		/** List of source commitments to be merged into a new commitment. */
		mergeSourceCommitments?: Array<string>;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). */
		plan?: CommitmentPlan | null;

		/** [Output Only] URL of the region where this commitment may be used. */
		region?: string | null;

		/** List of create-on-create reservations for this commitment. */
		reservations?: Array<Reservation>;

		/** A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together. */
		resources?: Array<ResourceCommitment>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Source commitment to be split into a new commitment. */
		splitSourceCommitment?: string | null;

		/** [Output Only] Commitment start time in RFC3339 text format. */
		startTimestamp?: string | null;

		/** [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED. */
		status?: CommitmentStatus | null;

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage?: string | null;

		/** The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines. */
		type?: CommitmentType | null;
	}

	/** Represents a regional Commitment resource. Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts. */
	export interface CommitmentFormProperties {

		/** Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment. */
		autoRenew: FormControl<boolean | null | undefined>,

		/** The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified. */
		category: FormControl<CommitmentCategory | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] Commitment end time in RFC3339 text format. */
		endTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#commitment for commitments. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). */
		plan: FormControl<CommitmentPlan | null | undefined>,

		/** [Output Only] URL of the region where this commitment may be used. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Source commitment to be split into a new commitment. */
		splitSourceCommitment: FormControl<string | null | undefined>,

		/** [Output Only] Commitment start time in RFC3339 text format. */
		startTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED. */
		status: FormControl<CommitmentStatus | null | undefined>,

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage: FormControl<string | null | undefined>,

		/** The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines. */
		type: FormControl<CommitmentType | null | undefined>,
	}
	export function CreateCommitmentFormGroup() {
		return new FormGroup<CommitmentFormProperties>({
			autoRenew: new FormControl<boolean | null | undefined>(undefined),
			category: new FormControl<CommitmentCategory | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			endTimestamp: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			plan: new FormControl<CommitmentPlan | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			splitSourceCommitment: new FormControl<string | null | undefined>(undefined),
			startTimestamp: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<CommitmentStatus | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<CommitmentType | null | undefined>(undefined),
		});

	}

	export enum CommitmentCategory { CATEGORY_UNSPECIFIED = 'CATEGORY_UNSPECIFIED', LICENSE = 'LICENSE', MACHINE = 'MACHINE' }


	/** Commitment for a particular license resource. */
	export interface LicenseResourceCommitment {

		/** The number of licenses purchased. */
		amount?: string | null;

		/** Specifies the core range of the instance for which this license applies. */
		coresPerLicense?: string | null;

		/** Any applicable license URI. */
		license?: string | null;
	}

	/** Commitment for a particular license resource. */
	export interface LicenseResourceCommitmentFormProperties {

		/** The number of licenses purchased. */
		amount: FormControl<string | null | undefined>,

		/** Specifies the core range of the instance for which this license applies. */
		coresPerLicense: FormControl<string | null | undefined>,

		/** Any applicable license URI. */
		license: FormControl<string | null | undefined>,
	}
	export function CreateLicenseResourceCommitmentFormGroup() {
		return new FormGroup<LicenseResourceCommitmentFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined),
			coresPerLicense: new FormControl<string | null | undefined>(undefined),
			license: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum CommitmentPlan { INVALID = 'INVALID', THIRTY_SIX_MONTH = 'THIRTY_SIX_MONTH', TWELVE_MONTH = 'TWELVE_MONTH' }


	/** Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources. */
	export interface Reservation {

		/** This reservation type is specified by total resource amounts (e.g. total count of CPUs) and can account for multiple instance SKUs. In other words, one can create instances of varying shapes against this reservation. */
		aggregateReservation?: AllocationAggregateReservation;

		/** [Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment. */
		commitment?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#reservations for reservations. */
		kind?: string | null;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation. */
		resourcePolicies?: {[id: string]: string };

		/** [Output Only] Contains output only fields. */
		resourceStatus?: AllocationResourceStatus;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** The share setting for reservations and sole tenancy node groups. */
		shareSettings?: ShareSettings;

		/** This reservation type allows to pre allocate specific instance configuration. Next ID: 6 */
		specificReservation?: AllocationSpecificSKUReservation;

		/** Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation. */
		specificReservationRequired?: boolean | null;

		/** [Output Only] The status of the reservation. */
		status?: ReservationStatus | null;

		/** Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment. */
		zone?: string | null;
	}

	/** Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources. */
	export interface ReservationFormProperties {

		/** [Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment. */
		commitment: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#reservations for reservations. */
		kind: FormControl<string | null | undefined>,

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation. */
		resourcePolicies: FormControl<{[id: string]: string } | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation. */
		specificReservationRequired: FormControl<boolean | null | undefined>,

		/** [Output Only] The status of the reservation. */
		status: FormControl<ReservationStatus | null | undefined>,

		/** Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateReservationFormGroup() {
		return new FormGroup<ReservationFormProperties>({
			commitment: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			resourcePolicies: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			specificReservationRequired: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<ReservationStatus | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The share setting for reservations and sole tenancy node groups. */
	export interface ShareSettings {

		/** A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS. */
		projectMap?: {[id: string]: ShareSettingsProjectConfig };

		/** Type of sharing for this shared-reservation */
		shareType?: ShareSettingsShareType | null;
	}

	/** The share setting for reservations and sole tenancy node groups. */
	export interface ShareSettingsFormProperties {

		/** A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS. */
		projectMap: FormControl<{[id: string]: ShareSettingsProjectConfig } | null | undefined>,

		/** Type of sharing for this shared-reservation */
		shareType: FormControl<ShareSettingsShareType | null | undefined>,
	}
	export function CreateShareSettingsFormGroup() {
		return new FormGroup<ShareSettingsFormProperties>({
			projectMap: new FormControl<{[id: string]: ShareSettingsProjectConfig } | null | undefined>(undefined),
			shareType: new FormControl<ShareSettingsShareType | null | undefined>(undefined),
		});

	}


	/** Config for each project in the share settings. */
	export interface ShareSettingsProjectConfig {

		/** The project ID, should be same as the key of this project config in the parent map. */
		projectId?: string | null;
	}

	/** Config for each project in the share settings. */
	export interface ShareSettingsProjectConfigFormProperties {

		/** The project ID, should be same as the key of this project config in the parent map. */
		projectId: FormControl<string | null | undefined>,
	}
	export function CreateShareSettingsProjectConfigFormGroup() {
		return new FormGroup<ShareSettingsProjectConfigFormProperties>({
			projectId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ShareSettingsShareType { LOCAL = 'LOCAL', ORGANIZATION = 'ORGANIZATION', SHARE_TYPE_UNSPECIFIED = 'SHARE_TYPE_UNSPECIFIED', SPECIFIC_PROJECTS = 'SPECIFIC_PROJECTS' }

	export enum ReservationStatus { CREATING = 'CREATING', DELETING = 'DELETING', INVALID = 'INVALID', READY = 'READY', UPDATING = 'UPDATING' }


	/** Commitment for a particular resource (a Commitment is composed of one or more of these). */
	export interface ResourceCommitment {

		/** Name of the accelerator type resource. Applicable only when the type is ACCELERATOR. */
		acceleratorType?: string | null;

		/** The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU. */
		amount?: string | null;

		/** Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR. */
		type?: ResourceCommitmentType | null;
	}

	/** Commitment for a particular resource (a Commitment is composed of one or more of these). */
	export interface ResourceCommitmentFormProperties {

		/** Name of the accelerator type resource. Applicable only when the type is ACCELERATOR. */
		acceleratorType: FormControl<string | null | undefined>,

		/** The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU. */
		amount: FormControl<string | null | undefined>,

		/** Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR. */
		type: FormControl<ResourceCommitmentType | null | undefined>,
	}
	export function CreateResourceCommitmentFormGroup() {
		return new FormGroup<ResourceCommitmentFormProperties>({
			acceleratorType: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<ResourceCommitmentType | null | undefined>(undefined),
		});

	}

	export enum ResourceCommitmentType { ACCELERATOR = 'ACCELERATOR', LOCAL_SSD = 'LOCAL_SSD', MEMORY = 'MEMORY', UNSPECIFIED = 'UNSPECIFIED', VCPU = 'VCPU' }

	export enum CommitmentStatus { ACTIVE = 'ACTIVE', CANCELLED = 'CANCELLED', CREATING = 'CREATING', EXPIRED = 'EXPIRED', NOT_YET_ACTIVE = 'NOT_YET_ACTIVE' }

	export enum CommitmentType { ACCELERATOR_OPTIMIZED = 'ACCELERATOR_OPTIMIZED', ACCELERATOR_OPTIMIZED_A3 = 'ACCELERATOR_OPTIMIZED_A3', COMPUTE_OPTIMIZED = 'COMPUTE_OPTIMIZED', COMPUTE_OPTIMIZED_C2D = 'COMPUTE_OPTIMIZED_C2D', COMPUTE_OPTIMIZED_C3 = 'COMPUTE_OPTIMIZED_C3', COMPUTE_OPTIMIZED_C3D = 'COMPUTE_OPTIMIZED_C3D', COMPUTE_OPTIMIZED_H3 = 'COMPUTE_OPTIMIZED_H3', GENERAL_PURPOSE = 'GENERAL_PURPOSE', GENERAL_PURPOSE_E2 = 'GENERAL_PURPOSE_E2', GENERAL_PURPOSE_N2 = 'GENERAL_PURPOSE_N2', GENERAL_PURPOSE_N2D = 'GENERAL_PURPOSE_N2D', GENERAL_PURPOSE_T2D = 'GENERAL_PURPOSE_T2D', GRAPHICS_OPTIMIZED = 'GRAPHICS_OPTIMIZED', MEMORY_OPTIMIZED = 'MEMORY_OPTIMIZED', MEMORY_OPTIMIZED_M3 = 'MEMORY_OPTIMIZED_M3', TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED' }

	export interface CommitmentAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of CommitmentsScopedList resources. */
		items?: {[id: string]: CommitmentsScopedList };

		/** [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: CommitmentAggregatedListWarning;
	}
	export interface CommitmentAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of CommitmentsScopedList resources. */
		items: FormControl<{[id: string]: CommitmentsScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentAggregatedListFormGroup() {
		return new FormGroup<CommitmentAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: CommitmentsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitmentsScopedList {

		/** [Output Only] A list of commitments contained in this scope. */
		commitments?: Array<Commitment>;

		/** [Output Only] Informational warning which replaces the list of commitments when the list is empty. */
		warning?: CommitmentsScopedListWarning;
	}
	export interface CommitmentsScopedListFormProperties {
	}
	export function CreateCommitmentsScopedListFormGroup() {
		return new FormGroup<CommitmentsScopedListFormProperties>({
		});

	}

	export interface CommitmentsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		CommitmentsScopedListWarningData?: Array<CommitmentsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface CommitmentsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentsScopedListWarningFormGroup() {
		return new FormGroup<CommitmentsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitmentsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface CommitmentsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentsScopedListWarningDataFormGroup() {
		return new FormGroup<CommitmentsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitmentAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		CommitmentAggregatedListWarningData?: Array<CommitmentAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface CommitmentAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentAggregatedListWarningFormGroup() {
		return new FormGroup<CommitmentAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitmentAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface CommitmentAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentAggregatedListWarningDataFormGroup() {
		return new FormGroup<CommitmentAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of Commitment resources. */
	export interface CommitmentList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Commitment resources. */
		items?: Array<Commitment>;

		/** [Output Only] Type of resource. Always compute#commitmentList for lists of commitments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: CommitmentListWarning;
	}

	/** Contains a list of Commitment resources. */
	export interface CommitmentListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#commitmentList for lists of commitments. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentListFormGroup() {
		return new FormGroup<CommitmentListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitmentListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		CommitmentListWarningData?: Array<CommitmentListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface CommitmentListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentListWarningFormGroup() {
		return new FormGroup<CommitmentListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitmentListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface CommitmentListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateCommitmentListWarningDataFormGroup() {
		return new FormGroup<CommitmentListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This is deprecated and has no effect. Do not use. */
	export interface Condition {

		/** This is deprecated and has no effect. Do not use. */
		iam?: ConditionIam | null;

		/** This is deprecated and has no effect. Do not use. */
		op?: ConditionOp | null;

		/** This is deprecated and has no effect. Do not use. */
		svc?: string | null;

		/** This is deprecated and has no effect. Do not use. */
		sys?: ConditionSys | null;

		/** This is deprecated and has no effect. Do not use. */
		values?: Array<string>;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface ConditionFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		iam: FormControl<ConditionIam | null | undefined>,

		/** This is deprecated and has no effect. Do not use. */
		op: FormControl<ConditionOp | null | undefined>,

		/** This is deprecated and has no effect. Do not use. */
		svc: FormControl<string | null | undefined>,

		/** This is deprecated and has no effect. Do not use. */
		sys: FormControl<ConditionSys | null | undefined>,
	}
	export function CreateConditionFormGroup() {
		return new FormGroup<ConditionFormProperties>({
			iam: new FormControl<ConditionIam | null | undefined>(undefined),
			op: new FormControl<ConditionOp | null | undefined>(undefined),
			svc: new FormControl<string | null | undefined>(undefined),
			sys: new FormControl<ConditionSys | null | undefined>(undefined),
		});

	}

	export enum ConditionIam { APPROVER = 'APPROVER', ATTRIBUTION = 'ATTRIBUTION', AUTHORITY = 'AUTHORITY', CREDENTIALS_TYPE = 'CREDENTIALS_TYPE', CREDS_ASSERTION = 'CREDS_ASSERTION', JUSTIFICATION_TYPE = 'JUSTIFICATION_TYPE', NO_ATTR = 'NO_ATTR', SECURITY_REALM = 'SECURITY_REALM' }

	export enum ConditionOp { DISCHARGED = 'DISCHARGED', EQUALS = 'EQUALS', IN = 'IN', NOT_EQUALS = 'NOT_EQUALS', NOT_IN = 'NOT_IN', NO_OP = 'NO_OP' }

	export enum ConditionSys { IP = 'IP', NAME = 'NAME', NO_ATTR = 'NO_ATTR', REGION = 'REGION', SERVICE = 'SERVICE' }


	/** The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard. */
	export interface CorsPolicy {

		/** In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the Access-Control-Allow-Credentials header. Default is false. */
		allowCredentials?: boolean | null;

		/** Specifies the content for the Access-Control-Allow-Headers header. */
		allowHeaders?: Array<string>;

		/** Specifies the content for the Access-Control-Allow-Methods header. */
		allowMethods?: Array<string>;

		/** Specifies a regular expression that matches allowed origins. For more information about the regular expression syntax, see Syntax. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		allowOriginRegexes?: Array<string>;

		/** Specifies the list of origins that is allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. */
		allowOrigins?: Array<string>;

		/** If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect. */
		disabled?: boolean | null;

		/** Specifies the content for the Access-Control-Expose-Headers header. */
		exposeHeaders?: Array<string>;

		/**
		 * Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxAge?: number | null;
	}

	/** The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard. */
	export interface CorsPolicyFormProperties {

		/** In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the Access-Control-Allow-Credentials header. Default is false. */
		allowCredentials: FormControl<boolean | null | undefined>,

		/** If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect. */
		disabled: FormControl<boolean | null | undefined>,

		/**
		 * Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxAge: FormControl<number | null | undefined>,
	}
	export function CreateCorsPolicyFormGroup() {
		return new FormGroup<CorsPolicyFormProperties>({
			allowCredentials: new FormControl<boolean | null | undefined>(undefined),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			maxAge: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CustomerEncryptionKeyProtectedDisk {
		diskEncryptionKey?: CustomerEncryptionKey;

		/** Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks. For example: "source": "/compute/v1/projects/project_id/zones/zone/disks/ disk_name */
		source?: string | null;
	}
	export interface CustomerEncryptionKeyProtectedDiskFormProperties {

		/** Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks. For example: "source": "/compute/v1/projects/project_id/zones/zone/disks/ disk_name */
		source: FormControl<string | null | undefined>,
	}
	export function CreateCustomerEncryptionKeyProtectedDiskFormGroup() {
		return new FormGroup<CustomerEncryptionKeyProtectedDiskFormProperties>({
			source: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](/compute/docs/reference/rest/v1/disks) * [Regional](/compute/docs/reference/rest/v1/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources. */
	export interface Disk {

		/** The architecture of the disk. Valid values are ARM64 or X86_64. */
		architecture?: AttachedDiskArchitecture | null;
		asyncPrimaryDisk?: DiskAsyncReplication;

		/** [Output Only] A list of disks this disk is asynchronously replicated to. */
		asyncSecondaryDisks?: {[id: string]: DiskAsyncReplicationList };

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		diskEncryptionKey?: CustomerEncryptionKey;

		/** Whether this disk is using confidential compute mode. */
		enableConfidentialCompute?: boolean | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#disk for disks. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk. */
		labelFingerprint?: string | null;

		/** Labels to apply to this disk. These can be later modified by the setLabels method. */
		labels?: {[id: string]: string };

		/** [Output Only] Last attach timestamp in RFC3339 text format. */
		lastAttachTimestamp?: string | null;

		/** [Output Only] Last detach timestamp in RFC3339 text format. */
		lastDetachTimestamp?: string | null;

		/** Integer license codes indicating which licenses are attached to this disk. */
		licenseCodes?: Array<string>;

		/** A list of publicly visible licenses. Reserved for Google's use. */
		licenses?: Array<string>;

		/** An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API. */
		locationHint?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Internal use only. */
		options?: string | null;

		/** Additional disk params. */
		params?: DiskParams;

		/** Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project. */
		physicalBlockSizeBytes?: string | null;

		/** Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation. */
		provisionedIops?: string | null;

		/** Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle. Values must be between 1 and 7,124. */
		provisionedThroughput?: string | null;

		/** [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** URLs of the zones where the disk should be replicated to. Only applicable for regional resources. */
		replicaZones?: Array<string>;

		/** Resource policies applied to this disk for automatic snapshot creations. */
		resourcePolicies?: Array<string>;
		resourceStatus?: DiskResourceStatus;

		/** Output only. Reserved for future use. */
		satisfiesPzi?: boolean | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are greater than 0. */
		sizeGb?: string | null;

		/** [Output Only] URL of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group. */
		sourceConsistencyGroupPolicy?: string | null;

		/** [Output Only] ID of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group. */
		sourceConsistencyGroupPolicyId?: string | null;

		/** The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk */
		sourceDisk?: string | null;

		/** [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used. */
		sourceDiskId?: string | null;

		/** The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family */
		sourceImage?: string | null;
		sourceImageEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used. */
		sourceImageId?: string | null;

		/** The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot */
		sourceSnapshot?: string | null;
		sourceSnapshotEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used. */
		sourceSnapshotId?: string | null;

		/** The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead. */
		sourceStorageObject?: string | null;

		/** [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting. */
		status?: DiskStatus | null;

		/** URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types. */
		type?: string | null;

		/** [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance */
		users?: Array<string>;

		/** [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	/** Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](/compute/docs/reference/rest/v1/disks) * [Regional](/compute/docs/reference/rest/v1/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources. */
	export interface DiskFormProperties {

		/** The architecture of the disk. Valid values are ARM64 or X86_64. */
		architecture: FormControl<AttachedDiskArchitecture | null | undefined>,

		/** [Output Only] A list of disks this disk is asynchronously replicated to. */
		asyncSecondaryDisks: FormControl<{[id: string]: DiskAsyncReplicationList } | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Whether this disk is using confidential compute mode. */
		enableConfidentialCompute: FormControl<boolean | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#disk for disks. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels to apply to this disk. These can be later modified by the setLabels method. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** [Output Only] Last attach timestamp in RFC3339 text format. */
		lastAttachTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Last detach timestamp in RFC3339 text format. */
		lastDetachTimestamp: FormControl<string | null | undefined>,

		/** An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API. */
		locationHint: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Internal use only. */
		options: FormControl<string | null | undefined>,

		/** Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project. */
		physicalBlockSizeBytes: FormControl<string | null | undefined>,

		/** Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation. */
		provisionedIops: FormControl<string | null | undefined>,

		/** Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle. Values must be between 1 and 7,124. */
		provisionedThroughput: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** Output only. Reserved for future use. */
		satisfiesPzi: FormControl<boolean | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are greater than 0. */
		sizeGb: FormControl<string | null | undefined>,

		/** [Output Only] URL of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group. */
		sourceConsistencyGroupPolicy: FormControl<string | null | undefined>,

		/** [Output Only] ID of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group. */
		sourceConsistencyGroupPolicyId: FormControl<string | null | undefined>,

		/** The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk */
		sourceDisk: FormControl<string | null | undefined>,

		/** [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used. */
		sourceDiskId: FormControl<string | null | undefined>,

		/** The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family */
		sourceImage: FormControl<string | null | undefined>,

		/** [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used. */
		sourceImageId: FormControl<string | null | undefined>,

		/** The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot */
		sourceSnapshot: FormControl<string | null | undefined>,

		/** [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used. */
		sourceSnapshotId: FormControl<string | null | undefined>,

		/** The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead. */
		sourceStorageObject: FormControl<string | null | undefined>,

		/** [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting. */
		status: FormControl<DiskStatus | null | undefined>,

		/** URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types. */
		type: FormControl<string | null | undefined>,

		/** [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateDiskFormGroup() {
		return new FormGroup<DiskFormProperties>({
			architecture: new FormControl<AttachedDiskArchitecture | null | undefined>(undefined),
			asyncSecondaryDisks: new FormControl<{[id: string]: DiskAsyncReplicationList } | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enableConfidentialCompute: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			lastAttachTimestamp: new FormControl<string | null | undefined>(undefined),
			lastDetachTimestamp: new FormControl<string | null | undefined>(undefined),
			locationHint: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			options: new FormControl<string | null | undefined>(undefined),
			physicalBlockSizeBytes: new FormControl<string | null | undefined>(undefined),
			provisionedIops: new FormControl<string | null | undefined>(undefined),
			provisionedThroughput: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			satisfiesPzi: new FormControl<boolean | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sizeGb: new FormControl<string | null | undefined>(undefined),
			sourceConsistencyGroupPolicy: new FormControl<string | null | undefined>(undefined),
			sourceConsistencyGroupPolicyId: new FormControl<string | null | undefined>(undefined),
			sourceDisk: new FormControl<string | null | undefined>(undefined),
			sourceDiskId: new FormControl<string | null | undefined>(undefined),
			sourceImage: new FormControl<string | null | undefined>(undefined),
			sourceImageId: new FormControl<string | null | undefined>(undefined),
			sourceSnapshot: new FormControl<string | null | undefined>(undefined),
			sourceSnapshotId: new FormControl<string | null | undefined>(undefined),
			sourceStorageObject: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<DiskStatus | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskAsyncReplication {

		/** [Output Only] URL of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group. */
		consistencyGroupPolicy?: string | null;

		/** [Output Only] ID of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group. */
		consistencyGroupPolicyId?: string | null;

		/** The other disk asynchronously replicated to or from the current disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk */
		disk?: string | null;

		/** [Output Only] The unique ID of the other disk asynchronously replicated to or from the current disk. This value identifies the exact disk that was used to create this replication. For example, if you started replicating the persistent disk from a disk that was later deleted and recreated under the same name, the disk ID would identify the exact version of the disk that was used. */
		diskId?: string | null;
	}
	export interface DiskAsyncReplicationFormProperties {

		/** [Output Only] URL of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group. */
		consistencyGroupPolicy: FormControl<string | null | undefined>,

		/** [Output Only] ID of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group. */
		consistencyGroupPolicyId: FormControl<string | null | undefined>,

		/** The other disk asynchronously replicated to or from the current disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk */
		disk: FormControl<string | null | undefined>,

		/** [Output Only] The unique ID of the other disk asynchronously replicated to or from the current disk. This value identifies the exact disk that was used to create this replication. For example, if you started replicating the persistent disk from a disk that was later deleted and recreated under the same name, the disk ID would identify the exact version of the disk that was used. */
		diskId: FormControl<string | null | undefined>,
	}
	export function CreateDiskAsyncReplicationFormGroup() {
		return new FormGroup<DiskAsyncReplicationFormProperties>({
			consistencyGroupPolicy: new FormControl<string | null | undefined>(undefined),
			consistencyGroupPolicyId: new FormControl<string | null | undefined>(undefined),
			disk: new FormControl<string | null | undefined>(undefined),
			diskId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskAsyncReplicationList {
		asyncReplicationDisk?: DiskAsyncReplication;
	}
	export interface DiskAsyncReplicationListFormProperties {
	}
	export function CreateDiskAsyncReplicationListFormGroup() {
		return new FormGroup<DiskAsyncReplicationListFormProperties>({
		});

	}


	/** Additional disk params. */
	export interface DiskParams {

		/** Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags?: {[id: string]: string };
	}

	/** Additional disk params. */
	export interface DiskParamsFormProperties {

		/** Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateDiskParamsFormGroup() {
		return new FormGroup<DiskParamsFormProperties>({
			resourceManagerTags: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface DiskResourceStatus {
		asyncPrimaryDisk?: DiskResourceStatusAsyncReplicationStatus;

		/** Key: disk, value: AsyncReplicationStatus message */
		asyncSecondaryDisks?: {[id: string]: DiskResourceStatusAsyncReplicationStatus };
	}
	export interface DiskResourceStatusFormProperties {

		/** Key: disk, value: AsyncReplicationStatus message */
		asyncSecondaryDisks: FormControl<{[id: string]: DiskResourceStatusAsyncReplicationStatus } | null | undefined>,
	}
	export function CreateDiskResourceStatusFormGroup() {
		return new FormGroup<DiskResourceStatusFormProperties>({
			asyncSecondaryDisks: new FormControl<{[id: string]: DiskResourceStatusAsyncReplicationStatus } | null | undefined>(undefined),
		});

	}

	export interface DiskResourceStatusAsyncReplicationStatus {
		state?: DiskResourceStatusAsyncReplicationStatusState | null;
	}
	export interface DiskResourceStatusAsyncReplicationStatusFormProperties {
		state: FormControl<DiskResourceStatusAsyncReplicationStatusState | null | undefined>,
	}
	export function CreateDiskResourceStatusAsyncReplicationStatusFormGroup() {
		return new FormGroup<DiskResourceStatusAsyncReplicationStatusFormProperties>({
			state: new FormControl<DiskResourceStatusAsyncReplicationStatusState | null | undefined>(undefined),
		});

	}

	export enum DiskResourceStatusAsyncReplicationStatusState { ACTIVE = 'ACTIVE', CREATED = 'CREATED', STARTING = 'STARTING', STATE_UNSPECIFIED = 'STATE_UNSPECIFIED', STOPPED = 'STOPPED', STOPPING = 'STOPPING' }

	export enum DiskStatus { CREATING = 'CREATING', DELETING = 'DELETING', FAILED = 'FAILED', READY = 'READY', RESTORING = 'RESTORING' }

	export interface DiskAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DisksScopedList resources. */
		items?: {[id: string]: DisksScopedList };

		/** [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: DiskAggregatedListWarning;
	}
	export interface DiskAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of DisksScopedList resources. */
		items: FormControl<{[id: string]: DisksScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateDiskAggregatedListFormGroup() {
		return new FormGroup<DiskAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: DisksScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisksScopedList {

		/** [Output Only] A list of disks contained in this scope. */
		disks?: Array<Disk>;

		/** [Output Only] Informational warning which replaces the list of disks when the list is empty. */
		warning?: DisksScopedListWarning;
	}
	export interface DisksScopedListFormProperties {
	}
	export function CreateDisksScopedListFormGroup() {
		return new FormGroup<DisksScopedListFormProperties>({
		});

	}

	export interface DisksScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		DisksScopedListWarningData?: Array<DisksScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface DisksScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateDisksScopedListWarningFormGroup() {
		return new FormGroup<DisksScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisksScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface DisksScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateDisksScopedListWarningDataFormGroup() {
		return new FormGroup<DisksScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		DiskAggregatedListWarningData?: Array<DiskAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface DiskAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateDiskAggregatedListWarningFormGroup() {
		return new FormGroup<DiskAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface DiskAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateDiskAggregatedListWarningDataFormGroup() {
		return new FormGroup<DiskAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A specification of the desired way to instantiate a disk in the instance template when its created from a source instance. */
	export interface DiskInstantiationConfig {

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete?: boolean | null;

		/** The custom source image to be used to restore this disk when instantiating this instance template. */
		customImage?: string | null;

		/** Specifies the device name of the disk to which the configurations apply to. */
		deviceName?: string | null;

		/** Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks. */
		instantiateFrom?: DiskInstantiationConfigInstantiateFrom | null;
	}

	/** A specification of the desired way to instantiate a disk in the instance template when its created from a source instance. */
	export interface DiskInstantiationConfigFormProperties {

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete: FormControl<boolean | null | undefined>,

		/** The custom source image to be used to restore this disk when instantiating this instance template. */
		customImage: FormControl<string | null | undefined>,

		/** Specifies the device name of the disk to which the configurations apply to. */
		deviceName: FormControl<string | null | undefined>,

		/** Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks. */
		instantiateFrom: FormControl<DiskInstantiationConfigInstantiateFrom | null | undefined>,
	}
	export function CreateDiskInstantiationConfigFormGroup() {
		return new FormGroup<DiskInstantiationConfigFormProperties>({
			autoDelete: new FormControl<boolean | null | undefined>(undefined),
			customImage: new FormControl<string | null | undefined>(undefined),
			deviceName: new FormControl<string | null | undefined>(undefined),
			instantiateFrom: new FormControl<DiskInstantiationConfigInstantiateFrom | null | undefined>(undefined),
		});

	}

	export enum DiskInstantiationConfigInstantiateFrom { ATTACH_READ_ONLY = 'ATTACH_READ_ONLY', BLANK = 'BLANK', CUSTOM_IMAGE = 'CUSTOM_IMAGE', DEFAULT = 'DEFAULT', DO_NOT_INCLUDE = 'DO_NOT_INCLUDE', SOURCE_IMAGE = 'SOURCE_IMAGE', SOURCE_IMAGE_FAMILY = 'SOURCE_IMAGE_FAMILY' }


	/** A list of Disk resources. */
	export interface DiskList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Disk resources. */
		items?: Array<Disk>;

		/** [Output Only] Type of resource. Always compute#diskList for lists of disks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: DiskListWarning;
	}

	/** A list of Disk resources. */
	export interface DiskListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#diskList for lists of disks. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateDiskListFormGroup() {
		return new FormGroup<DiskListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		DiskListWarningData?: Array<DiskListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface DiskListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateDiskListWarningFormGroup() {
		return new FormGroup<DiskListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface DiskListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateDiskListWarningDataFormGroup() {
		return new FormGroup<DiskListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskMoveRequest {

		/** The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone */
		destinationZone?: string | null;

		/** The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk */
		targetDisk?: string | null;
	}
	export interface DiskMoveRequestFormProperties {

		/** The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone */
		destinationZone: FormControl<string | null | undefined>,

		/** The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk */
		targetDisk: FormControl<string | null | undefined>,
	}
	export function CreateDiskMoveRequestFormGroup() {
		return new FormGroup<DiskMoveRequestFormProperties>({
			destinationZone: new FormControl<string | null | undefined>(undefined),
			targetDisk: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Disk Type resource. Google Compute Engine has two Disk Type resources: * [Regional](/compute/docs/reference/rest/v1/regionDiskTypes) * [Zonal](/compute/docs/reference/rest/v1/diskTypes) You can choose from a variety of disk types based on your needs. For more information, read Storage options. The diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks. The regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks. */
	export interface DiskType {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] Server-defined default disk size in GB. */
		defaultDiskSizeGb?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** [Output Only] An optional description of this resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#diskType for disk types. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] An optional textual description of the valid disk size, such as "10GB-10TB". */
		validDiskSize?: string | null;

		/** [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	/** Represents a Disk Type resource. Google Compute Engine has two Disk Type resources: * [Regional](/compute/docs/reference/rest/v1/regionDiskTypes) * [Zonal](/compute/docs/reference/rest/v1/diskTypes) You can choose from a variety of disk types based on your needs. For more information, read Storage options. The diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks. The regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks. */
	export interface DiskTypeFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined default disk size in GB. */
		defaultDiskSizeGb: FormControl<string | null | undefined>,

		/** [Output Only] An optional description of this resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#diskType for disk types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] An optional textual description of the valid disk size, such as "10GB-10TB". */
		validDiskSize: FormControl<string | null | undefined>,

		/** [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeFormGroup() {
		return new FormGroup<DiskTypeFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			defaultDiskSizeGb: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			validDiskSize: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DiskTypesScopedList resources. */
		items?: {[id: string]: DiskTypesScopedList };

		/** [Output Only] Type of resource. Always compute#diskTypeAggregatedList. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: DiskTypeAggregatedListWarning;
	}
	export interface DiskTypeAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of DiskTypesScopedList resources. */
		items: FormControl<{[id: string]: DiskTypesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#diskTypeAggregatedList. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeAggregatedListFormGroup() {
		return new FormGroup<DiskTypeAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: DiskTypesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypesScopedList {

		/** [Output Only] A list of disk types contained in this scope. */
		diskTypes?: Array<DiskType>;

		/** [Output Only] Informational warning which replaces the list of disk types when the list is empty. */
		warning?: DiskTypesScopedListWarning;
	}
	export interface DiskTypesScopedListFormProperties {
	}
	export function CreateDiskTypesScopedListFormGroup() {
		return new FormGroup<DiskTypesScopedListFormProperties>({
		});

	}

	export interface DiskTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		DiskTypesScopedListWarningData?: Array<DiskTypesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface DiskTypesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypesScopedListWarningFormGroup() {
		return new FormGroup<DiskTypesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface DiskTypesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypesScopedListWarningDataFormGroup() {
		return new FormGroup<DiskTypesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		DiskTypeAggregatedListWarningData?: Array<DiskTypeAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface DiskTypeAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeAggregatedListWarningFormGroup() {
		return new FormGroup<DiskTypeAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface DiskTypeAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeAggregatedListWarningDataFormGroup() {
		return new FormGroup<DiskTypeAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of disk types. */
	export interface DiskTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DiskType resources. */
		items?: Array<DiskType>;

		/** [Output Only] Type of resource. Always compute#diskTypeList for disk types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: DiskTypeListWarning;
	}

	/** Contains a list of disk types. */
	export interface DiskTypeListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#diskTypeList for disk types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeListFormGroup() {
		return new FormGroup<DiskTypeListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		DiskTypeListWarningData?: Array<DiskTypeListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface DiskTypeListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeListWarningFormGroup() {
		return new FormGroup<DiskTypeListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DiskTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface DiskTypeListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateDiskTypeListWarningDataFormGroup() {
		return new FormGroup<DiskTypeListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisksAddResourcePoliciesRequest {

		/** Full or relative path to the resource policy to be added to this disk. You can only specify one resource policy. */
		resourcePolicies?: Array<string>;
	}
	export interface DisksAddResourcePoliciesRequestFormProperties {
	}
	export function CreateDisksAddResourcePoliciesRequestFormGroup() {
		return new FormGroup<DisksAddResourcePoliciesRequestFormProperties>({
		});

	}

	export interface DisksRemoveResourcePoliciesRequest {

		/** Resource policies to be removed from this disk. */
		resourcePolicies?: Array<string>;
	}
	export interface DisksRemoveResourcePoliciesRequestFormProperties {
	}
	export function CreateDisksRemoveResourcePoliciesRequestFormGroup() {
		return new FormGroup<DisksRemoveResourcePoliciesRequestFormProperties>({
		});

	}

	export interface DisksResizeRequest {

		/** The new size of the persistent disk, which is specified in GB. */
		sizeGb?: string | null;
	}
	export interface DisksResizeRequestFormProperties {

		/** The new size of the persistent disk, which is specified in GB. */
		sizeGb: FormControl<string | null | undefined>,
	}
	export function CreateDisksResizeRequestFormGroup() {
		return new FormGroup<DisksResizeRequestFormProperties>({
			sizeGb: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisksStartAsyncReplicationRequest {

		/** The secondary disk to start asynchronous replication to. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk */
		asyncSecondaryDisk?: string | null;
	}
	export interface DisksStartAsyncReplicationRequestFormProperties {

		/** The secondary disk to start asynchronous replication to. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk */
		asyncSecondaryDisk: FormControl<string | null | undefined>,
	}
	export function CreateDisksStartAsyncReplicationRequestFormGroup() {
		return new FormGroup<DisksStartAsyncReplicationRequestFormProperties>({
			asyncSecondaryDisk: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A transient resource used in compute.disks.stopGroupAsyncReplication and compute.regionDisks.stopGroupAsyncReplication. It is only used to process requests and is not persisted. */
	export interface DisksStopGroupAsyncReplicationResource {

		/** The URL of the DiskConsistencyGroupPolicy for the group of disks to stop. This may be a full or partial URL, such as: - https://www.googleapis.com/compute/v1/projects/project/regions/region /resourcePolicies/resourcePolicy - projects/project/regions/region/resourcePolicies/resourcePolicy - regions/region/resourcePolicies/resourcePolicy */
		resourcePolicy?: string | null;
	}

	/** A transient resource used in compute.disks.stopGroupAsyncReplication and compute.regionDisks.stopGroupAsyncReplication. It is only used to process requests and is not persisted. */
	export interface DisksStopGroupAsyncReplicationResourceFormProperties {

		/** The URL of the DiskConsistencyGroupPolicy for the group of disks to stop. This may be a full or partial URL, such as: - https://www.googleapis.com/compute/v1/projects/project/regions/region /resourcePolicies/resourcePolicy - projects/project/regions/region/resourcePolicies/resourcePolicy - regions/region/resourcePolicies/resourcePolicy */
		resourcePolicy: FormControl<string | null | undefined>,
	}
	export function CreateDisksStopGroupAsyncReplicationResourceFormGroup() {
		return new FormGroup<DisksStopGroupAsyncReplicationResourceFormProperties>({
			resourcePolicy: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A set of Display Device options */
	export interface DisplayDevice {

		/** Defines whether the instance has Display enabled. */
		enableDisplay?: boolean | null;
	}

	/** A set of Display Device options */
	export interface DisplayDeviceFormProperties {

		/** Defines whether the instance has Display enabled. */
		enableDisplay: FormControl<boolean | null | undefined>,
	}
	export function CreateDisplayDeviceFormGroup() {
		return new FormGroup<DisplayDeviceFormProperties>({
			enableDisplay: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface DistributionPolicy {

		/** The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType). */
		targetShape?: DistributionPolicyTargetShape | null;

		/** Zones where the regional managed instance group will create and manage its instances. */
		zones?: Array<DistributionPolicyZoneConfiguration>;
	}
	export interface DistributionPolicyFormProperties {

		/** The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType). */
		targetShape: FormControl<DistributionPolicyTargetShape | null | undefined>,
	}
	export function CreateDistributionPolicyFormGroup() {
		return new FormGroup<DistributionPolicyFormProperties>({
			targetShape: new FormControl<DistributionPolicyTargetShape | null | undefined>(undefined),
		});

	}

	export enum DistributionPolicyTargetShape { ANY = 'ANY', ANY_SINGLE_ZONE = 'ANY_SINGLE_ZONE', BALANCED = 'BALANCED', EVEN = 'EVEN' }

	export interface DistributionPolicyZoneConfiguration {

		/** The URL of the zone. The zone must exist in the region where the managed instance group is located. */
		zone?: string | null;
	}
	export interface DistributionPolicyZoneConfigurationFormProperties {

		/** The URL of the zone. The zone must exist in the region where the managed instance group is located. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateDistributionPolicyZoneConfigurationFormGroup() {
		return new FormGroup<DistributionPolicyZoneConfigurationFormProperties>({
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } } */
	export interface ErrorInfo {

		/** The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis.com". */
		domain?: string | null;

		/** Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the client exceeds the number of instances that can be created in a single (batch) request. */
		metadatas?: {[id: string]: string };

		/** The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE. */
		reason?: string | null;
	}

	/** Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } } */
	export interface ErrorInfoFormProperties {

		/** The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis.com". */
		domain: FormControl<string | null | undefined>,

		/** Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the client exceeds the number of instances that can be created in a single (batch) request. */
		metadatas: FormControl<{[id: string]: string } | null | undefined>,

		/** The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE. */
		reason: FormControl<string | null | undefined>,
	}
	export function CreateErrorInfoFormGroup() {
		return new FormGroup<ErrorInfoFormProperties>({
			domain: new FormControl<string | null | undefined>(undefined),
			metadatas: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			reason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ExchangedPeeringRoute {

		/** The destination range of the route. */
		destRange?: string | null;

		/** True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict. */
		imported?: boolean | null;

		/** The region of peering route next hop, only applies to dynamic routes. */
		nextHopRegion?: string | null;

		/**
		 * The priority of the peering route.
		 * Type: uint, 0 to 4,294,967,295
		 */
		priority?: number | null;

		/** The type of the peering route. */
		type?: ExchangedPeeringRouteType | null;
	}
	export interface ExchangedPeeringRouteFormProperties {

		/** The destination range of the route. */
		destRange: FormControl<string | null | undefined>,

		/** True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict. */
		imported: FormControl<boolean | null | undefined>,

		/** The region of peering route next hop, only applies to dynamic routes. */
		nextHopRegion: FormControl<string | null | undefined>,

		/**
		 * The priority of the peering route.
		 * Type: uint, 0 to 4,294,967,295
		 */
		priority: FormControl<number | null | undefined>,

		/** The type of the peering route. */
		type: FormControl<ExchangedPeeringRouteType | null | undefined>,
	}
	export function CreateExchangedPeeringRouteFormGroup() {
		return new FormGroup<ExchangedPeeringRouteFormProperties>({
			destRange: new FormControl<string | null | undefined>(undefined),
			imported: new FormControl<boolean | null | undefined>(undefined),
			nextHopRegion: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<ExchangedPeeringRouteType | null | undefined>(undefined),
		});

	}

	export enum ExchangedPeeringRouteType { DYNAMIC_PEERING_ROUTE = 'DYNAMIC_PEERING_ROUTE', STATIC_PEERING_ROUTE = 'STATIC_PEERING_ROUTE', SUBNET_PEERING_ROUTE = 'SUBNET_PEERING_ROUTE' }

	export interface ExchangedPeeringRoutesList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ExchangedPeeringRoute resources. */
		items?: Array<ExchangedPeeringRoute>;

		/** [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ExchangedPeeringRoutesListWarning;
	}
	export interface ExchangedPeeringRoutesListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateExchangedPeeringRoutesListFormGroup() {
		return new FormGroup<ExchangedPeeringRoutesListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ExchangedPeeringRoutesListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ExchangedPeeringRoutesListWarningData?: Array<ExchangedPeeringRoutesListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ExchangedPeeringRoutesListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateExchangedPeeringRoutesListWarningFormGroup() {
		return new FormGroup<ExchangedPeeringRoutesListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ExchangedPeeringRoutesListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ExchangedPeeringRoutesListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateExchangedPeeringRoutesListWarningDataFormGroup() {
		return new FormGroup<ExchangedPeeringRoutesListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an external VPN gateway. External VPN gateway is the on-premises VPN gateway(s) or another cloud provider's VPN gateway that connects to your Google Cloud VPN gateway. To create a highly available VPN from Google Cloud Platform to your VPN gateway or another cloud provider's VPN gateway, you must create a external VPN gateway resource with information about the other gateway. For more information about using external VPN gateways, see Creating an HA VPN gateway and tunnel pair to a peer VPN. */
	export interface ExternalVpnGateway {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** A list of interfaces for this external VPN gateway. If your peer-side gateway is an on-premises gateway and non-AWS cloud providers' gateway, at most two interfaces can be provided for an external VPN gateway. If your peer side is an AWS virtual private gateway, four interfaces should be provided for an external VPN gateway. */
		interfaces?: Array<ExternalVpnGatewayInterface>;

		/** [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Indicates the user-supplied redundancy type of this external VPN gateway. */
		redundancyType?: ExternalVpnGatewayRedundancyType | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	/** Represents an external VPN gateway. External VPN gateway is the on-premises VPN gateway(s) or another cloud provider's VPN gateway that connects to your Google Cloud VPN gateway. To create a highly available VPN from Google Cloud Platform to your VPN gateway or another cloud provider's VPN gateway, you must create a external VPN gateway resource with information about the other gateway. For more information about using external VPN gateways, see Creating an HA VPN gateway and tunnel pair to a peer VPN. */
	export interface ExternalVpnGatewayFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Indicates the user-supplied redundancy type of this external VPN gateway. */
		redundancyType: FormControl<ExternalVpnGatewayRedundancyType | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateExternalVpnGatewayFormGroup() {
		return new FormGroup<ExternalVpnGatewayFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			redundancyType: new FormControl<ExternalVpnGatewayRedundancyType | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The interface for the external VPN gateway. */
	export interface ExternalVpnGatewayInterface {

		/**
		 * The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
		 * Type: uint, 0 to 4,294,967,295
		 */
		id?: number | null;

		/** IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine. */
		ipAddress?: string | null;
	}

	/** The interface for the external VPN gateway. */
	export interface ExternalVpnGatewayInterfaceFormProperties {

		/**
		 * The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
		 * Type: uint, 0 to 4,294,967,295
		 */
		id: FormControl<number | null | undefined>,

		/** IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine. */
		ipAddress: FormControl<string | null | undefined>,
	}
	export function CreateExternalVpnGatewayInterfaceFormGroup() {
		return new FormGroup<ExternalVpnGatewayInterfaceFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ExternalVpnGatewayRedundancyType { FOUR_IPS_REDUNDANCY = 'FOUR_IPS_REDUNDANCY', SINGLE_IP_INTERNALLY_REDUNDANT = 'SINGLE_IP_INTERNALLY_REDUNDANT', TWO_IPS_REDUNDANCY = 'TWO_IPS_REDUNDANCY' }


	/** Response to the list request, and contains a list of externalVpnGateways. */
	export interface ExternalVpnGatewayList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ExternalVpnGateway resources. */
		items?: Array<ExternalVpnGateway>;

		/** [Output Only] Type of resource. Always compute#externalVpnGatewayList for lists of externalVpnGateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ExternalVpnGatewayListWarning;
	}

	/** Response to the list request, and contains a list of externalVpnGateways. */
	export interface ExternalVpnGatewayListFormProperties {
		etag: FormControl<string | null | undefined>,

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#externalVpnGatewayList for lists of externalVpnGateways. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateExternalVpnGatewayListFormGroup() {
		return new FormGroup<ExternalVpnGatewayListFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ExternalVpnGatewayListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ExternalVpnGatewayListWarningData?: Array<ExternalVpnGatewayListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ExternalVpnGatewayListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateExternalVpnGatewayListWarningFormGroup() {
		return new FormGroup<ExternalVpnGatewayListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ExternalVpnGatewayListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ExternalVpnGatewayListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateExternalVpnGatewayListWarningDataFormGroup() {
		return new FormGroup<ExternalVpnGatewayListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Firewall Rule resource. Firewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules. */
	export interface Firewall {

		/** The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection. */
		FirewallAllowed?: Array<FirewallAllowed>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection. */
		FirewallDenied?: Array<FirewallDenied>;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Both IPv4 and IPv6 are supported. */
		destinationRanges?: Array<string>;

		/** Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `EGRESS` traffic, you cannot specify the sourceTags fields. */
		direction?: FirewallDirection | null;

		/** Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled. */
		disabled?: boolean | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#firewall for firewall rules. */
		kind?: string | null;

		/** The available logging options for a firewall rule. */
		logConfig?: FirewallLogConfig;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name?: string | null;

		/** URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network - projects/myproject/global/networks/my-network - global/networks/default */
		network?: string | null;

		/**
		 * Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than `65535`.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority?: number | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Both IPv4 and IPv6 are supported. */
		sourceRanges?: Array<string>;

		/** If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags. */
		sourceServiceAccounts?: Array<string>;

		/** If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the firewall to apply. */
		sourceTags?: Array<string>;

		/** A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network. */
		targetServiceAccounts?: Array<string>;

		/** A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network. */
		targetTags?: Array<string>;
	}

	/** Represents a Firewall Rule resource. Firewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules. */
	export interface FirewallFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this field when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `EGRESS` traffic, you cannot specify the sourceTags fields. */
		direction: FormControl<FirewallDirection | null | undefined>,

		/** Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled. */
		disabled: FormControl<boolean | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#firewall for firewall rules. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name: FormControl<string | null | undefined>,

		/** URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network - projects/myproject/global/networks/my-network - global/networks/default */
		network: FormControl<string | null | undefined>,

		/**
		 * Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than `65535`.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority: FormControl<number | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateFirewallFormGroup() {
		return new FormGroup<FirewallFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			direction: new FormControl<FirewallDirection | null | undefined>(undefined),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallAllowed {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number. */
		IPProtocol?: string | null;

		/** An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"]. */
		ports?: Array<string>;
	}
	export interface FirewallAllowedFormProperties {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number. */
		IPProtocol: FormControl<string | null | undefined>,
	}
	export function CreateFirewallAllowedFormGroup() {
		return new FormGroup<FirewallAllowedFormProperties>({
			IPProtocol: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallDenied {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number. */
		IPProtocol?: string | null;

		/** An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"]. */
		ports?: Array<string>;
	}
	export interface FirewallDeniedFormProperties {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number. */
		IPProtocol: FormControl<string | null | undefined>,
	}
	export function CreateFirewallDeniedFormGroup() {
		return new FormGroup<FirewallDeniedFormProperties>({
			IPProtocol: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FirewallDirection { EGRESS = 'EGRESS', INGRESS = 'INGRESS' }


	/** The available logging options for a firewall rule. */
	export interface FirewallLogConfig {

		/** This field denotes whether to enable logging for a particular firewall rule. */
		enable?: boolean | null;

		/** This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs. */
		metadata?: FirewallLogConfigMetadata | null;
	}

	/** The available logging options for a firewall rule. */
	export interface FirewallLogConfigFormProperties {

		/** This field denotes whether to enable logging for a particular firewall rule. */
		enable: FormControl<boolean | null | undefined>,

		/** This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs. */
		metadata: FormControl<FirewallLogConfigMetadata | null | undefined>,
	}
	export function CreateFirewallLogConfigFormGroup() {
		return new FormGroup<FirewallLogConfigFormProperties>({
			enable: new FormControl<boolean | null | undefined>(undefined),
			metadata: new FormControl<FirewallLogConfigMetadata | null | undefined>(undefined),
		});

	}

	export enum FirewallLogConfigMetadata { EXCLUDE_ALL_METADATA = 'EXCLUDE_ALL_METADATA', INCLUDE_ALL_METADATA = 'INCLUDE_ALL_METADATA' }


	/** Contains a list of firewalls. */
	export interface FirewallList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Firewall resources. */
		items?: Array<Firewall>;

		/** [Output Only] Type of resource. Always compute#firewallList for lists of firewalls. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: FirewallListWarning;
	}

	/** Contains a list of firewalls. */
	export interface FirewallListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#firewallList for lists of firewalls. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateFirewallListFormGroup() {
		return new FormGroup<FirewallListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		FirewallListWarningData?: Array<FirewallListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface FirewallListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateFirewallListWarningFormGroup() {
		return new FormGroup<FirewallListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface FirewallListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateFirewallListWarningDataFormGroup() {
		return new FormGroup<FirewallListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallPoliciesListAssociationsResponse {

		/** A list of associations. */
		associations?: Array<FirewallPolicyAssociation>;

		/** [Output Only] Type of firewallPolicy associations. Always compute#FirewallPoliciesListAssociations for lists of firewallPolicy associations. */
		kind?: string | null;
	}
	export interface FirewallPoliciesListAssociationsResponseFormProperties {

		/** [Output Only] Type of firewallPolicy associations. Always compute#FirewallPoliciesListAssociations for lists of firewallPolicy associations. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPoliciesListAssociationsResponseFormGroup() {
		return new FormGroup<FirewallPoliciesListAssociationsResponseFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallPolicyAssociation {

		/** The target that the firewall policy is attached to. */
		attachmentTarget?: string | null;

		/** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy of the association. */
		displayName?: string | null;

		/** [Output Only] The firewall policy ID of the association. */
		firewallPolicyId?: string | null;

		/** The name for an association. */
		name?: string | null;

		/** [Output Only] The short name of the firewall policy of the association. */
		shortName?: string | null;
	}
	export interface FirewallPolicyAssociationFormProperties {

		/** The target that the firewall policy is attached to. */
		attachmentTarget: FormControl<string | null | undefined>,

		/** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy of the association. */
		displayName: FormControl<string | null | undefined>,

		/** [Output Only] The firewall policy ID of the association. */
		firewallPolicyId: FormControl<string | null | undefined>,

		/** The name for an association. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The short name of the firewall policy of the association. */
		shortName: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPolicyAssociationFormGroup() {
		return new FormGroup<FirewallPolicyAssociationFormProperties>({
			attachmentTarget: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			firewallPolicyId: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			shortName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Firewall Policy resource. */
	export interface FirewallPolicy {

		/** A list of associations that belong to this firewall policy. */
		associations?: Array<FirewallPolicyAssociation>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Deprecated, please use short name instead. User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		displayName?: string | null;

		/** Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the firewall policy. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#firewallPolicyfor firewall policies */
		kind?: string | null;

		/** Name of the resource. For Organization Firewall Policies it's a [Output Only] numeric ID allocated by Google Cloud which uniquely identifies the Organization Firewall Policy. */
		name?: string | null;

		/** [Output Only] The parent of the firewall policy. This field is not applicable to network firewall policies. */
		parent?: string | null;

		/** [Output Only] URL of the region where the regional firewall policy resides. This field is not applicable to global firewall policies. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/**
		 * [Output Only] Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleTupleCount?: number | null;

		/** A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a firewall policy, a default rule with action "allow" will be added. */
		rules?: Array<FirewallPolicyRule>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Server-defined URL for this resource with the resource id. */
		selfLinkWithId?: string | null;

		/** User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		shortName?: string | null;
	}

	/** Represents a Firewall Policy resource. */
	export interface FirewallPolicyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Deprecated, please use short name instead. User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		displayName: FormControl<string | null | undefined>,

		/** Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the firewall policy. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output only] Type of the resource. Always compute#firewallPolicyfor firewall policies */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. For Organization Firewall Policies it's a [Output Only] numeric ID allocated by Google Cloud which uniquely identifies the Organization Firewall Policy. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The parent of the firewall policy. This field is not applicable to network firewall policies. */
		parent: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the regional firewall policy resides. This field is not applicable to global firewall policies. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleTupleCount: FormControl<number | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource with the resource id. */
		selfLinkWithId: FormControl<string | null | undefined>,

		/** User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		shortName: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPolicyFormGroup() {
		return new FormGroup<FirewallPolicyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parent: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			ruleTupleCount: new FormControl<number | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			selfLinkWithId: new FormControl<string | null | undefined>(undefined),
			shortName: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
		});

	}


	/** Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny). */
	export interface FirewallPolicyRule {

		/** The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "goto_next". */
		action?: string | null;

		/** An optional description for this resource. */
		description?: string | null;

		/** The direction in which this rule applies. */
		direction?: FirewallDirection | null;

		/** Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled. */
		disabled?: boolean | null;

		/** Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules. */
		enableLogging?: boolean | null;

		/** [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules */
		kind?: string | null;

		/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
		match?: FirewallPolicyRuleMatcher;

		/**
		 * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority?: number | null;

		/** An optional name for the rule. This field is not a unique identifier and can be updated. */
		ruleName?: string | null;

		/**
		 * [Output Only] Calculation of the complexity of a single firewall policy rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleTupleCount?: number | null;

		/** A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule. */
		targetResources?: Array<string>;

		/** A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256. */
		targetSecureTags?: Array<FirewallPolicyRuleSecureTag>;

		/** A list of service accounts indicating the sets of instances that are applied with this rule. */
		targetServiceAccounts?: Array<string>;
	}

	/** Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny). */
	export interface FirewallPolicyRuleFormProperties {

		/** The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "goto_next". */
		action: FormControl<string | null | undefined>,

		/** An optional description for this resource. */
		description: FormControl<string | null | undefined>,

		/** The direction in which this rule applies. */
		direction: FormControl<FirewallDirection | null | undefined>,

		/** Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled. */
		disabled: FormControl<boolean | null | undefined>,

		/** Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules. */
		enableLogging: FormControl<boolean | null | undefined>,

		/** [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules */
		kind: FormControl<string | null | undefined>,

		/**
		 * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority: FormControl<number | null | undefined>,

		/** An optional name for the rule. This field is not a unique identifier and can be updated. */
		ruleName: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Calculation of the complexity of a single firewall policy rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleTupleCount: FormControl<number | null | undefined>,
	}
	export function CreateFirewallPolicyRuleFormGroup() {
		return new FormGroup<FirewallPolicyRuleFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			direction: new FormControl<FirewallDirection | null | undefined>(undefined),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			enableLogging: new FormControl<boolean | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			ruleName: new FormControl<string | null | undefined>(undefined),
			ruleTupleCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
	export interface FirewallPolicyRuleMatcher {

		/** Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10. */
		destAddressGroups?: Array<string>;

		/** Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100. */
		destFqdns?: Array<string>;

		/** CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000. */
		destIpRanges?: Array<string>;

		/** Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex."US" Maximum number of dest region codes allowed is 5000. */
		destRegionCodes?: Array<string>;

		/** Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination. */
		destThreatIntelligences?: Array<string>;

		/** Pairs of IP protocols and ports that the rule should match. */
		layer4Configs?: Array<FirewallPolicyRuleMatcherLayer4Config>;

		/** Address groups which should be matched against the traffic source. Maximum number of source address groups is 10. */
		srcAddressGroups?: Array<string>;

		/** Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100. */
		srcFqdns?: Array<string>;

		/** CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000. */
		srcIpRanges?: Array<string>;

		/** Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex."US" Maximum number of source region codes allowed is 5000. */
		srcRegionCodes?: Array<string>;

		/** List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256. */
		srcSecureTags?: Array<FirewallPolicyRuleSecureTag>;

		/** Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source. */
		srcThreatIntelligences?: Array<string>;
	}

	/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
	export interface FirewallPolicyRuleMatcherFormProperties {
	}
	export function CreateFirewallPolicyRuleMatcherFormGroup() {
		return new FormGroup<FirewallPolicyRuleMatcherFormProperties>({
		});

	}

	export interface FirewallPolicyRuleMatcherLayer4Config {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number. */
		ipProtocol?: string | null;

		/** An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"]. */
		ports?: Array<string>;
	}
	export interface FirewallPolicyRuleMatcherLayer4ConfigFormProperties {

		/** The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number. */
		ipProtocol: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPolicyRuleMatcherLayer4ConfigFormGroup() {
		return new FormGroup<FirewallPolicyRuleMatcherLayer4ConfigFormProperties>({
			ipProtocol: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallPolicyRuleSecureTag {

		/** Name of the secure tag, created with TagManager's TagValue API. */
		name?: string | null;

		/** [Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted. */
		state?: FirewallPolicyRuleSecureTagState | null;
	}
	export interface FirewallPolicyRuleSecureTagFormProperties {

		/** Name of the secure tag, created with TagManager's TagValue API. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted. */
		state: FormControl<FirewallPolicyRuleSecureTagState | null | undefined>,
	}
	export function CreateFirewallPolicyRuleSecureTagFormGroup() {
		return new FormGroup<FirewallPolicyRuleSecureTagFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('tagValues/[0-9]+')]),
			state: new FormControl<FirewallPolicyRuleSecureTagState | null | undefined>(undefined),
		});

	}

	export enum FirewallPolicyRuleSecureTagState { EFFECTIVE = 'EFFECTIVE', INEFFECTIVE = 'INEFFECTIVE' }

	export interface FirewallPolicyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of FirewallPolicy resources. */
		items?: Array<FirewallPolicy>;

		/** [Output Only] Type of resource. Always compute#firewallPolicyList for listsof FirewallPolicies */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: FirewallPolicyListWarning;
	}
	export interface FirewallPolicyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#firewallPolicyList for listsof FirewallPolicies */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPolicyListFormGroup() {
		return new FormGroup<FirewallPolicyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallPolicyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		FirewallPolicyListWarningData?: Array<FirewallPolicyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface FirewallPolicyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPolicyListWarningFormGroup() {
		return new FormGroup<FirewallPolicyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface FirewallPolicyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface FirewallPolicyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateFirewallPolicyListWarningDataFormGroup() {
		return new FormGroup<FirewallPolicyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Forwarding Rule resource. Forwarding rule resources in Google Cloud can be either regional or global in scope: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/globalForwardingRules) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/forwardingRules) A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway). For more information, read Forwarding rule concepts and Using protocol forwarding. */
	export interface ForwardingRule {

		/** IP address for which this forwarding rule accepts traffic. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the referenced target or backendService. While creating a forwarding rule, specifying an IPAddress is required under the following circumstances: - When the target is set to targetGrpcProxy and validateForProxyless is set to true, the IPAddress should be set to 0.0.0.0. - When the target is a Private Service Connect Google APIs bundle, you must specify an IPAddress. Otherwise, you can optionally specify an IP address that references an existing static (reserved) IP address resource. When omitted, Google Cloud assigns an ephemeral IP address. Use one of the following formats to specify an IP address while creating a forwarding rule: * IP address number, as in `100.1.2.3` * IPv6 address range, as in `2600:1234::/96` * Full resource URL, as in https://www.googleapis.com/compute/v1/projects/ project_id/regions/region/addresses/address-name * Partial URL or by name, as in: - projects/project_id/regions/region/addresses/address-name - regions/region/addresses/address-name - global/addresses/address-name - address-name The forwarding rule's target or backendService, and in most cases, also the loadBalancingScheme, determine the type of IP address that you can use. For detailed information, see [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). When reading an IPAddress, the API always returns the IP address number. */
		IPAddress?: string | null;

		/** The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends). */
		IPProtocol?: ForwardingRuleIPProtocol | null;

		/** The ports, portRange, and allPorts fields are mutually exclusive. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The allPorts field has the following limitations: - It requires that the forwarding rule IPProtocol be TCP, UDP, SCTP, or L3_DEFAULT. - It's applicable only to the following products: internal passthrough Network Load Balancers, backend service-based external passthrough Network Load Balancers, and internal and external protocol forwarding. - Set this field to true to allow packets addressed to any port or packets lacking destination port information (for example, UDP fragments after the first fragment) to be forwarded to the backends configured with this forwarding rule. The L3_DEFAULT protocol requires allPorts be set to true. */
		allPorts?: boolean | null;

		/** This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If set to true, clients can access the internal passthrough Network Load Balancers, the regional internal Application Load Balancer, and the regional internal proxy Network Load Balancer from all regions. If false, only allows access from the local region the load balancer is located at. Note that for INTERNAL_MANAGED forwarding rules, this field cannot be changed after the forwarding rule is created. */
		allowGlobalAccess?: boolean | null;

		/** This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region. */
		allowPscGlobalAccess?: boolean | null;

		/** Identifies the backend service to which the forwarding rule sends traffic. Required for internal and external passthrough Network Load Balancers; must be omitted for all other load balancer types. */
		backendService?: string | null;

		/** [Output Only] The URL for the corresponding base forwarding rule. By base forwarding rule, we mean the forwarding rule that has the same IP address, protocol, and port settings with the current forwarding rule, but without sourceIPRanges specified. Always empty if the current forwarding rule does not have sourceIPRanges specified. */
		baseForwardingRule?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. */
		ipVersion?: AddressIpVersion | null;

		/** Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL. */
		isMirroringCollector?: boolean | null;

		/** [Output Only] Type of the resource. Always compute#forwardingRule for forwarding rule resources. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts. */
		loadBalancingScheme?: ForwardingRuleLoadBalancingScheme | null;

		/** Opaque filter criteria used by load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to load balancer, xDS clients present node metadata. When there is a match, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. TargetHttpProxy, UrlMap) referenced by the ForwardingRule are not visible to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applifed before those specified in the UrlMap that this ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. */
		metadataFilters?: Array<MetadataFilter>;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For Private Service Connect forwarding rules that forward traffic to Google APIs, the forwarding rule name must be a 1-20 characters string with lowercase letters and numbers and must start with a letter. */
		name?: string | null;

		/** This field is not used for global external load balancing. For internal passthrough Network Load Balancers, this field identifies the network that the load balanced IP should belong to for this forwarding rule. If the subnetwork is specified, the network of the subnetwork will be used. If neither subnetwork nor this field is specified, the default network will be used. For Private Service Connect forwarding rules that forward traffic to Google APIs, a network must be provided. */
		network?: string | null;

		/** This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address. */
		networkTier?: AccessConfigNetworkTier | null;

		/** This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field. Once set, this field is not mutable. */
		noAutomateDnsZone?: boolean | null;

		/** The ports, portRange, and allPorts fields are mutually exclusive. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The portRange field has the following limitations: - It requires that the forwarding rule IPProtocol be TCP, UDP, or SCTP, and - It's applicable only to the following products: external passthrough Network Load Balancers, internal and external proxy Network Load Balancers, internal and external Application Load Balancers, external protocol forwarding, and Classic VPN. - Some products have restrictions on what ports can be used. See port specifications for details. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. @pattern: \\d+(?:-\\d+)? */
		portRange?: string | null;

		/** The ports, portRange, and allPorts fields are mutually exclusive. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The ports field has the following limitations: - It requires that the forwarding rule IPProtocol be TCP, UDP, or SCTP, and - It's applicable only to the following products: internal passthrough Network Load Balancers, backend service-based external passthrough Network Load Balancers, and internal protocol forwarding. - You can specify a list of up to five ports by number, separated by commas. The ports can be contiguous or discontiguous. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair if they share at least one port number. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair if they share at least one port number. @pattern: \\d+(?:-\\d+)? */
		ports?: Array<string>;

		/** [Output Only] The PSC connection id of the PSC forwarding rule. */
		pscConnectionId?: string | null;
		pscConnectionStatus?: ForwardingRulePscConnectionStatus | null;

		/** [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Service Directory resources to register this forwarding rule with. Currently, only supports a single Service Directory resource. */
		serviceDirectoryRegistrations?: Array<ForwardingRuleServiceDirectoryRegistration>;

		/** An optional prefix to the service name for this forwarding rule. If specified, the prefix is the first label of the fully qualified service name. The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. This field is only used for internal load balancing. */
		serviceLabel?: string | null;

		/** [Output Only] The internal fully qualified service name for this forwarding rule. This field is only used for internal load balancing. */
		serviceName?: string | null;

		/** If not empty, this forwarding rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a forwarding rule can only have up to 64 source IP ranges, and this field can only be used with a regional forwarding rule whose scheme is EXTERNAL. Each source_ip_range entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24). */
		sourceIpRanges?: Array<string>;

		/** This field identifies the subnetwork that the load balanced IP should belong to for this forwarding rule, used with internal load balancers and external passthrough Network Load Balancers with IPv6. If the network specified is in auto subnet mode, this field is optional. However, a subnetwork must be specified if the network is in custom subnet mode or when creating external forwarding rule with IPv6. */
		subnetwork?: string | null;

		/** The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must be in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. - For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). - For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle: - vpc-sc - APIs that support VPC Service Controls. - all-apis - All supported Google APIs. - For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment. The target is not mutable once set as a service attachment. */
		target?: string | null;
	}

	/** Represents a Forwarding Rule resource. Forwarding rule resources in Google Cloud can be either regional or global in scope: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/globalForwardingRules) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/forwardingRules) A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway). For more information, read Forwarding rule concepts and Using protocol forwarding. */
	export interface ForwardingRuleFormProperties {

		/** IP address for which this forwarding rule accepts traffic. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the referenced target or backendService. While creating a forwarding rule, specifying an IPAddress is required under the following circumstances: - When the target is set to targetGrpcProxy and validateForProxyless is set to true, the IPAddress should be set to 0.0.0.0. - When the target is a Private Service Connect Google APIs bundle, you must specify an IPAddress. Otherwise, you can optionally specify an IP address that references an existing static (reserved) IP address resource. When omitted, Google Cloud assigns an ephemeral IP address. Use one of the following formats to specify an IP address while creating a forwarding rule: * IP address number, as in `100.1.2.3` * IPv6 address range, as in `2600:1234::/96` * Full resource URL, as in https://www.googleapis.com/compute/v1/projects/ project_id/regions/region/addresses/address-name * Partial URL or by name, as in: - projects/project_id/regions/region/addresses/address-name - regions/region/addresses/address-name - global/addresses/address-name - address-name The forwarding rule's target or backendService, and in most cases, also the loadBalancingScheme, determine the type of IP address that you can use. For detailed information, see [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). When reading an IPAddress, the API always returns the IP address number. */
		IPAddress: FormControl<string | null | undefined>,

		/** The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends). */
		IPProtocol: FormControl<ForwardingRuleIPProtocol | null | undefined>,

		/** The ports, portRange, and allPorts fields are mutually exclusive. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The allPorts field has the following limitations: - It requires that the forwarding rule IPProtocol be TCP, UDP, SCTP, or L3_DEFAULT. - It's applicable only to the following products: internal passthrough Network Load Balancers, backend service-based external passthrough Network Load Balancers, and internal and external protocol forwarding. - Set this field to true to allow packets addressed to any port or packets lacking destination port information (for example, UDP fragments after the first fragment) to be forwarded to the backends configured with this forwarding rule. The L3_DEFAULT protocol requires allPorts be set to true. */
		allPorts: FormControl<boolean | null | undefined>,

		/** This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If set to true, clients can access the internal passthrough Network Load Balancers, the regional internal Application Load Balancer, and the regional internal proxy Network Load Balancer from all regions. If false, only allows access from the local region the load balancer is located at. Note that for INTERNAL_MANAGED forwarding rules, this field cannot be changed after the forwarding rule is created. */
		allowGlobalAccess: FormControl<boolean | null | undefined>,

		/** This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region. */
		allowPscGlobalAccess: FormControl<boolean | null | undefined>,

		/** Identifies the backend service to which the forwarding rule sends traffic. Required for internal and external passthrough Network Load Balancers; must be omitted for all other load balancer types. */
		backendService: FormControl<string | null | undefined>,

		/** [Output Only] The URL for the corresponding base forwarding rule. By base forwarding rule, we mean the forwarding rule that has the same IP address, protocol, and port settings with the current forwarding rule, but without sourceIPRanges specified. Always empty if the current forwarding rule does not have sourceIPRanges specified. */
		baseForwardingRule: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. */
		ipVersion: FormControl<AddressIpVersion | null | undefined>,

		/** Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL. */
		isMirroringCollector: FormControl<boolean | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#forwardingRule for forwarding rule resources. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts. */
		loadBalancingScheme: FormControl<ForwardingRuleLoadBalancingScheme | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For Private Service Connect forwarding rules that forward traffic to Google APIs, the forwarding rule name must be a 1-20 characters string with lowercase letters and numbers and must start with a letter. */
		name: FormControl<string | null | undefined>,

		/** This field is not used for global external load balancing. For internal passthrough Network Load Balancers, this field identifies the network that the load balanced IP should belong to for this forwarding rule. If the subnetwork is specified, the network of the subnetwork will be used. If neither subnetwork nor this field is specified, the default network will be used. For Private Service Connect forwarding rules that forward traffic to Google APIs, a network must be provided. */
		network: FormControl<string | null | undefined>,

		/** This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address. */
		networkTier: FormControl<AccessConfigNetworkTier | null | undefined>,

		/** This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field. Once set, this field is not mutable. */
		noAutomateDnsZone: FormControl<boolean | null | undefined>,

		/** The ports, portRange, and allPorts fields are mutually exclusive. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The portRange field has the following limitations: - It requires that the forwarding rule IPProtocol be TCP, UDP, or SCTP, and - It's applicable only to the following products: external passthrough Network Load Balancers, internal and external proxy Network Load Balancers, internal and external Application Load Balancers, external protocol forwarding, and Classic VPN. - Some products have restrictions on what ports can be used. See port specifications for details. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. @pattern: \\d+(?:-\\d+)? */
		portRange: FormControl<string | null | undefined>,

		/** [Output Only] The PSC connection id of the PSC forwarding rule. */
		pscConnectionId: FormControl<string | null | undefined>,
		pscConnectionStatus: FormControl<ForwardingRulePscConnectionStatus | null | undefined>,

		/** [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** An optional prefix to the service name for this forwarding rule. If specified, the prefix is the first label of the fully qualified service name. The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. This field is only used for internal load balancing. */
		serviceLabel: FormControl<string | null | undefined>,

		/** [Output Only] The internal fully qualified service name for this forwarding rule. This field is only used for internal load balancing. */
		serviceName: FormControl<string | null | undefined>,

		/** This field identifies the subnetwork that the load balanced IP should belong to for this forwarding rule, used with internal load balancers and external passthrough Network Load Balancers with IPv6. If the network specified is in auto subnet mode, this field is optional. However, a subnetwork must be specified if the network is in custom subnet mode or when creating external forwarding rule with IPv6. */
		subnetwork: FormControl<string | null | undefined>,

		/** The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must be in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. - For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). - For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle: - vpc-sc - APIs that support VPC Service Controls. - all-apis - All supported Google APIs. - For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment. The target is not mutable once set as a service attachment. */
		target: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleFormGroup() {
		return new FormGroup<ForwardingRuleFormProperties>({
			IPAddress: new FormControl<string | null | undefined>(undefined),
			IPProtocol: new FormControl<ForwardingRuleIPProtocol | null | undefined>(undefined),
			allPorts: new FormControl<boolean | null | undefined>(undefined),
			allowGlobalAccess: new FormControl<boolean | null | undefined>(undefined),
			allowPscGlobalAccess: new FormControl<boolean | null | undefined>(undefined),
			backendService: new FormControl<string | null | undefined>(undefined),
			baseForwardingRule: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ipVersion: new FormControl<AddressIpVersion | null | undefined>(undefined),
			isMirroringCollector: new FormControl<boolean | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			loadBalancingScheme: new FormControl<ForwardingRuleLoadBalancingScheme | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			networkTier: new FormControl<AccessConfigNetworkTier | null | undefined>(undefined),
			noAutomateDnsZone: new FormControl<boolean | null | undefined>(undefined),
			portRange: new FormControl<string | null | undefined>(undefined),
			pscConnectionId: new FormControl<string | null | undefined>(undefined),
			pscConnectionStatus: new FormControl<ForwardingRulePscConnectionStatus | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			serviceLabel: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			serviceName: new FormControl<string | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ForwardingRuleIPProtocol { AH = 'AH', ESP = 'ESP', ICMP = 'ICMP', L3_DEFAULT = 'L3_DEFAULT', SCTP = 'SCTP', TCP = 'TCP', UDP = 'UDP' }

	export enum ForwardingRuleLoadBalancingScheme { EXTERNAL = 'EXTERNAL', EXTERNAL_MANAGED = 'EXTERNAL_MANAGED', INTERNAL = 'INTERNAL', INTERNAL_MANAGED = 'INTERNAL_MANAGED', INTERNAL_SELF_MANAGED = 'INTERNAL_SELF_MANAGED', INVALID = 'INVALID' }


	/** Opaque filter criteria used by load balancers to restrict routing configuration to a limited set of load balancing proxies. Proxies and sidecars involved in load balancing would typically present metadata to the load balancers that need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if load balancing involves Envoys, they receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers. */
	export interface MetadataFilter {

		/** The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries. */
		filterLabels?: Array<MetadataFilterLabelMatch>;

		/** Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata. */
		filterMatchCriteria?: MetadataFilterFilterMatchCriteria | null;
	}

	/** Opaque filter criteria used by load balancers to restrict routing configuration to a limited set of load balancing proxies. Proxies and sidecars involved in load balancing would typically present metadata to the load balancers that need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if load balancing involves Envoys, they receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers. */
	export interface MetadataFilterFormProperties {

		/** Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata. */
		filterMatchCriteria: FormControl<MetadataFilterFilterMatchCriteria | null | undefined>,
	}
	export function CreateMetadataFilterFormGroup() {
		return new FormGroup<MetadataFilterFormProperties>({
			filterMatchCriteria: new FormControl<MetadataFilterFilterMatchCriteria | null | undefined>(undefined),
		});

	}


	/** MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the load balancer. */
	export interface MetadataFilterLabelMatch {

		/** Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long. */
		name?: string | null;

		/** The value of the label must match the specified value. value can have a maximum length of 1024 characters. */
		value?: string | null;
	}

	/** MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the load balancer. */
	export interface MetadataFilterLabelMatchFormProperties {

		/** Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long. */
		name: FormControl<string | null | undefined>,

		/** The value of the label must match the specified value. value can have a maximum length of 1024 characters. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateMetadataFilterLabelMatchFormGroup() {
		return new FormGroup<MetadataFilterLabelMatchFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum MetadataFilterFilterMatchCriteria { MATCH_ALL = 'MATCH_ALL', MATCH_ANY = 'MATCH_ANY', NOT_SET = 'NOT_SET' }

	export enum ForwardingRulePscConnectionStatus { ACCEPTED = 'ACCEPTED', CLOSED = 'CLOSED', NEEDS_ATTENTION = 'NEEDS_ATTENTION', PENDING = 'PENDING', REJECTED = 'REJECTED', STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED' }


	/** Describes the auto-registration of the forwarding rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this forwarding rule. */
	export interface ForwardingRuleServiceDirectoryRegistration {

		/** Service Directory namespace to register the forwarding rule under. */
		namespace?: string | null;

		/** Service Directory service to register the forwarding rule under. */
		service?: string | null;

		/** [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs forwarding rules on the same network should use the same Service Directory region. */
		serviceDirectoryRegion?: string | null;
	}

	/** Describes the auto-registration of the forwarding rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this forwarding rule. */
	export interface ForwardingRuleServiceDirectoryRegistrationFormProperties {

		/** Service Directory namespace to register the forwarding rule under. */
		namespace: FormControl<string | null | undefined>,

		/** Service Directory service to register the forwarding rule under. */
		service: FormControl<string | null | undefined>,

		/** [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs forwarding rules on the same network should use the same Service Directory region. */
		serviceDirectoryRegion: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleServiceDirectoryRegistrationFormGroup() {
		return new FormGroup<ForwardingRuleServiceDirectoryRegistrationFormProperties>({
			namespace: new FormControl<string | null | undefined>(undefined),
			service: new FormControl<string | null | undefined>(undefined),
			serviceDirectoryRegion: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRuleAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ForwardingRulesScopedList resources. */
		items?: {[id: string]: ForwardingRulesScopedList };

		/** [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: ForwardingRuleAggregatedListWarning;
	}
	export interface ForwardingRuleAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of ForwardingRulesScopedList resources. */
		items: FormControl<{[id: string]: ForwardingRulesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleAggregatedListFormGroup() {
		return new FormGroup<ForwardingRuleAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: ForwardingRulesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRulesScopedList {

		/** A list of forwarding rules contained in this scope. */
		forwardingRules?: Array<ForwardingRule>;

		/** Informational warning which replaces the list of forwarding rules when the list is empty. */
		warning?: ForwardingRulesScopedListWarning;
	}
	export interface ForwardingRulesScopedListFormProperties {
	}
	export function CreateForwardingRulesScopedListFormGroup() {
		return new FormGroup<ForwardingRulesScopedListFormProperties>({
		});

	}

	export interface ForwardingRulesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ForwardingRulesScopedListWarningData?: Array<ForwardingRulesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ForwardingRulesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRulesScopedListWarningFormGroup() {
		return new FormGroup<ForwardingRulesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRulesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ForwardingRulesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRulesScopedListWarningDataFormGroup() {
		return new FormGroup<ForwardingRulesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRuleAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ForwardingRuleAggregatedListWarningData?: Array<ForwardingRuleAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ForwardingRuleAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleAggregatedListWarningFormGroup() {
		return new FormGroup<ForwardingRuleAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRuleAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ForwardingRuleAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleAggregatedListWarningDataFormGroup() {
		return new FormGroup<ForwardingRuleAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of ForwardingRule resources. */
	export interface ForwardingRuleList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ForwardingRule resources. */
		items?: Array<ForwardingRule>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ForwardingRuleListWarning;
	}

	/** Contains a list of ForwardingRule resources. */
	export interface ForwardingRuleListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleListFormGroup() {
		return new FormGroup<ForwardingRuleListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRuleListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ForwardingRuleListWarningData?: Array<ForwardingRuleListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ForwardingRuleListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleListWarningFormGroup() {
		return new FormGroup<ForwardingRuleListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRuleListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ForwardingRuleListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleListWarningDataFormGroup() {
		return new FormGroup<ForwardingRuleListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ForwardingRuleReference {
		forwardingRule?: string | null;
	}
	export interface ForwardingRuleReferenceFormProperties {
		forwardingRule: FormControl<string | null | undefined>,
	}
	export function CreateForwardingRuleReferenceFormGroup() {
		return new FormGroup<ForwardingRuleReferenceFormProperties>({
			forwardingRule: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GRPCHealthCheck {

		/** The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII. */
		grpcServiceName?: string | null;

		/**
		 * The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** Not supported. */
		portName?: string | null;

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification?: GRPCHealthCheckPortSpecification | null;
	}
	export interface GRPCHealthCheckFormProperties {

		/** The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII. */
		grpcServiceName: FormControl<string | null | undefined>,

		/**
		 * The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** Not supported. */
		portName: FormControl<string | null | undefined>,

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification: FormControl<GRPCHealthCheckPortSpecification | null | undefined>,
	}
	export function CreateGRPCHealthCheckFormGroup() {
		return new FormGroup<GRPCHealthCheckFormProperties>({
			grpcServiceName: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			portSpecification: new FormControl<GRPCHealthCheckPortSpecification | null | undefined>(undefined),
		});

	}

	export enum GRPCHealthCheckPortSpecification { USE_FIXED_PORT = 'USE_FIXED_PORT', USE_NAMED_PORT = 'USE_NAMED_PORT', USE_SERVING_PORT = 'USE_SERVING_PORT' }

	export interface GlobalAddressesMoveRequest {

		/** An optional destination address description if intended to be different from the source. */
		description?: string | null;

		/** The URL of the destination address to move to. This can be a full or partial URL. For example, the following are all valid URLs to a address: - https://www.googleapis.com/compute/v1/projects/project /global/addresses/address - projects/project/global/addresses/address Note that destination project must be different from the source project. So /global/addresses/address is not valid partial url. */
		destinationAddress?: string | null;
	}
	export interface GlobalAddressesMoveRequestFormProperties {

		/** An optional destination address description if intended to be different from the source. */
		description: FormControl<string | null | undefined>,

		/** The URL of the destination address to move to. This can be a full or partial URL. For example, the following are all valid URLs to a address: - https://www.googleapis.com/compute/v1/projects/project /global/addresses/address - projects/project/global/addresses/address Note that destination project must be different from the source project. So /global/addresses/address is not valid partial url. */
		destinationAddress: FormControl<string | null | undefined>,
	}
	export function CreateGlobalAddressesMoveRequestFormGroup() {
		return new FormGroup<GlobalAddressesMoveRequestFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			destinationAddress: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GlobalNetworkEndpointGroupsAttachEndpointsRequest {

		/** The list of network endpoints to be attached. */
		networkEndpoints?: Array<NetworkEndpoint>;
	}
	export interface GlobalNetworkEndpointGroupsAttachEndpointsRequestFormProperties {
	}
	export function CreateGlobalNetworkEndpointGroupsAttachEndpointsRequestFormGroup() {
		return new FormGroup<GlobalNetworkEndpointGroupsAttachEndpointsRequestFormProperties>({
		});

	}


	/** The network endpoint. */
	export interface NetworkEndpoint {

		/** Metadata defined as annotations on the network endpoint. */
		annotations?: {[id: string]: string };

		/** Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT. */
		fqdn?: string | null;

		/** The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group. The name must be 1-63 characters long, and comply with RFC1035. */
		instance?: string | null;

		/** Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used. */
		ipAddress?: string | null;

		/**
		 * Optional port number of network endpoint. If not specified, the defaultPort for the network endpoint group will be used.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;
	}

	/** The network endpoint. */
	export interface NetworkEndpointFormProperties {

		/** Metadata defined as annotations on the network endpoint. */
		annotations: FormControl<{[id: string]: string } | null | undefined>,

		/** Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT. */
		fqdn: FormControl<string | null | undefined>,

		/** The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group. The name must be 1-63 characters long, and comply with RFC1035. */
		instance: FormControl<string | null | undefined>,

		/** Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used. */
		ipAddress: FormControl<string | null | undefined>,

		/**
		 * Optional port number of network endpoint. If not specified, the defaultPort for the network endpoint group will be used.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,
	}
	export function CreateNetworkEndpointFormGroup() {
		return new FormGroup<NetworkEndpointFormProperties>({
			annotations: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			fqdn: new FormControl<string | null | undefined>(undefined),
			instance: new FormControl<string | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GlobalNetworkEndpointGroupsDetachEndpointsRequest {

		/** The list of network endpoints to be detached. */
		networkEndpoints?: Array<NetworkEndpoint>;
	}
	export interface GlobalNetworkEndpointGroupsDetachEndpointsRequestFormProperties {
	}
	export function CreateGlobalNetworkEndpointGroupsDetachEndpointsRequestFormGroup() {
		return new FormGroup<GlobalNetworkEndpointGroupsDetachEndpointsRequestFormProperties>({
		});

	}

	export interface GlobalOrganizationSetPolicyRequest {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding>;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
		policy?: Policy;
	}
	export interface GlobalOrganizationSetPolicyRequestFormProperties {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag: FormControl<string | null | undefined>,
	}
	export function CreateGlobalOrganizationSetPolicyRequestFormGroup() {
		return new FormGroup<GlobalOrganizationSetPolicyRequestFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
	export interface Policy {

		/** Specifies cloud audit logging configuration for this policy. */
		auditConfigs?: Array<AuditConfig>;

		/** Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`. */
		bindings?: Array<Binding>;

		/** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
		etag?: string | null;

		/** This is deprecated and has no effect. Do not use. */
		rules?: Array<Rule>;

		/**
		 * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		version?: number | null;
	}

	/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
	export interface PolicyFormProperties {

		/** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
		etag: FormControl<string | null | undefined>,

		/**
		 * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreatePolicyFormGroup() {
		return new FormGroup<PolicyFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** This is deprecated and has no effect. Do not use. */
	export interface Rule {

		/** This is deprecated and has no effect. Do not use. */
		action?: RuleAction | null;

		/** This is deprecated and has no effect. Do not use. */
		conditions?: Array<Condition>;

		/** This is deprecated and has no effect. Do not use. */
		description?: string | null;

		/** This is deprecated and has no effect. Do not use. */
		ins?: Array<string>;

		/** This is deprecated and has no effect. Do not use. */
		logConfigs?: Array<LogConfig>;

		/** This is deprecated and has no effect. Do not use. */
		notIns?: Array<string>;

		/** This is deprecated and has no effect. Do not use. */
		permissions?: Array<string>;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface RuleFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		action: FormControl<RuleAction | null | undefined>,

		/** This is deprecated and has no effect. Do not use. */
		description: FormControl<string | null | undefined>,
	}
	export function CreateRuleFormGroup() {
		return new FormGroup<RuleFormProperties>({
			action: new FormControl<RuleAction | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RuleAction { ALLOW = 'ALLOW', ALLOW_WITH_LOG = 'ALLOW_WITH_LOG', DENY = 'DENY', DENY_WITH_LOG = 'DENY_WITH_LOG', LOG = 'LOG', NO_ACTION = 'NO_ACTION' }


	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfig {

		/** This is deprecated and has no effect. Do not use. */
		cloudAudit?: LogConfigCloudAuditOptions;

		/** This is deprecated and has no effect. Do not use. */
		counter?: LogConfigCounterOptions;

		/** This is deprecated and has no effect. Do not use. */
		dataAccess?: LogConfigDataAccessOptions;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigFormProperties {
	}
	export function CreateLogConfigFormGroup() {
		return new FormGroup<LogConfigFormProperties>({
		});

	}


	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigCloudAuditOptions {

		/** This is deprecated and has no effect. Do not use. */
		authorizationLoggingOptions?: AuthorizationLoggingOptions;

		/** This is deprecated and has no effect. Do not use. */
		logName?: LogConfigCloudAuditOptionsLogName | null;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigCloudAuditOptionsFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		logName: FormControl<LogConfigCloudAuditOptionsLogName | null | undefined>,
	}
	export function CreateLogConfigCloudAuditOptionsFormGroup() {
		return new FormGroup<LogConfigCloudAuditOptionsFormProperties>({
			logName: new FormControl<LogConfigCloudAuditOptionsLogName | null | undefined>(undefined),
		});

	}

	export enum LogConfigCloudAuditOptionsLogName { ADMIN_ACTIVITY = 'ADMIN_ACTIVITY', DATA_ACCESS = 'DATA_ACCESS', UNSPECIFIED_LOG_NAME = 'UNSPECIFIED_LOG_NAME' }


	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigCounterOptions {

		/** This is deprecated and has no effect. Do not use. */
		customFields?: Array<LogConfigCounterOptionsCustomField>;

		/** This is deprecated and has no effect. Do not use. */
		field?: string | null;

		/** This is deprecated and has no effect. Do not use. */
		metric?: string | null;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigCounterOptionsFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		field: FormControl<string | null | undefined>,

		/** This is deprecated and has no effect. Do not use. */
		metric: FormControl<string | null | undefined>,
	}
	export function CreateLogConfigCounterOptionsFormGroup() {
		return new FormGroup<LogConfigCounterOptionsFormProperties>({
			field: new FormControl<string | null | undefined>(undefined),
			metric: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigCounterOptionsCustomField {

		/** This is deprecated and has no effect. Do not use. */
		name?: string | null;

		/** This is deprecated and has no effect. Do not use. */
		value?: string | null;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigCounterOptionsCustomFieldFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		name: FormControl<string | null | undefined>,

		/** This is deprecated and has no effect. Do not use. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateLogConfigCounterOptionsCustomFieldFormGroup() {
		return new FormGroup<LogConfigCounterOptionsCustomFieldFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigDataAccessOptions {

		/** This is deprecated and has no effect. Do not use. */
		logMode?: LogConfigDataAccessOptionsLogMode | null;
	}

	/** This is deprecated and has no effect. Do not use. */
	export interface LogConfigDataAccessOptionsFormProperties {

		/** This is deprecated and has no effect. Do not use. */
		logMode: FormControl<LogConfigDataAccessOptionsLogMode | null | undefined>,
	}
	export function CreateLogConfigDataAccessOptionsFormGroup() {
		return new FormGroup<LogConfigDataAccessOptionsFormProperties>({
			logMode: new FormControl<LogConfigDataAccessOptionsLogMode | null | undefined>(undefined),
		});

	}

	export enum LogConfigDataAccessOptionsLogMode { LOG_FAIL_CLOSED = 'LOG_FAIL_CLOSED', LOG_MODE_UNSPECIFIED = 'LOG_MODE_UNSPECIFIED' }

	export interface GlobalSetLabelsRequest {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint?: string | null;

		/** A list of labels to apply for this resource. Each label must comply with the requirements for labels. For example, "webserver-frontend": "images". A label value can also be empty (e.g. "my-label": ""). */
		labels?: {[id: string]: string };
	}
	export interface GlobalSetLabelsRequestFormProperties {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** A list of labels to apply for this resource. Each label must comply with the requirements for labels. For example, "webserver-frontend": "images". A label value can also be empty (e.g. "my-label": ""). */
		labels: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGlobalSetLabelsRequestFormGroup() {
		return new FormGroup<GlobalSetLabelsRequestFormProperties>({
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface GlobalSetPolicyRequest {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding>;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
		policy?: Policy;
	}
	export interface GlobalSetPolicyRequestFormProperties {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag: FormControl<string | null | undefined>,
	}
	export function CreateGlobalSetPolicyRequestFormGroup() {
		return new FormGroup<GlobalSetPolicyRequestFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A guest attributes entry. */
	export interface GuestAttributes {

		/** [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry. */
		kind?: string | null;

		/** The path to be queried. This can be the default namespace ('') or a nested namespace ('\/') or a specified key ('\/\'). */
		queryPath?: string | null;

		/** Array of guest attribute namespace/key/value tuples. */
		queryValue?: GuestAttributesValue;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** The key to search for. */
		variableKey?: string | null;

		/** [Output Only] The value found for the requested key. */
		variableValue?: string | null;
	}

	/** A guest attributes entry. */
	export interface GuestAttributesFormProperties {

		/** [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry. */
		kind: FormControl<string | null | undefined>,

		/** The path to be queried. This can be the default namespace ('') or a nested namespace ('\/') or a specified key ('\/\'). */
		queryPath: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The key to search for. */
		variableKey: FormControl<string | null | undefined>,

		/** [Output Only] The value found for the requested key. */
		variableValue: FormControl<string | null | undefined>,
	}
	export function CreateGuestAttributesFormGroup() {
		return new FormGroup<GuestAttributesFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
			queryPath: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			variableKey: new FormControl<string | null | undefined>(undefined),
			variableValue: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Array of guest attribute namespace/key/value tuples. */
	export interface GuestAttributesValue {
		items?: Array<GuestAttributesEntry>;
	}

	/** Array of guest attribute namespace/key/value tuples. */
	export interface GuestAttributesValueFormProperties {
	}
	export function CreateGuestAttributesValueFormGroup() {
		return new FormGroup<GuestAttributesValueFormProperties>({
		});

	}


	/** A guest attributes namespace/key/value entry. */
	export interface GuestAttributesEntry {

		/** Key for the guest attribute entry. */
		key?: string | null;

		/** Namespace for the guest attribute entry. */
		namespace?: string | null;

		/** Value for the guest attribute entry. */
		value?: string | null;
	}

	/** A guest attributes namespace/key/value entry. */
	export interface GuestAttributesEntryFormProperties {

		/** Key for the guest attribute entry. */
		key: FormControl<string | null | undefined>,

		/** Namespace for the guest attribute entry. */
		namespace: FormControl<string | null | undefined>,

		/** Value for the guest attribute entry. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGuestAttributesEntryFormGroup() {
		return new FormGroup<GuestAttributesEntryFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			namespace: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HTTP2HealthCheck {

		/** The value of the host header in the HTTP/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest */
		host?: string | null;

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** Not supported. */
		portName?: string | null;

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification?: GRPCHealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The request path of the HTTP/2 health check request. The default value is /. */
		requestPath?: string | null;

		/** Creates a content-based HTTP/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http */
		response?: string | null;
	}
	export interface HTTP2HealthCheckFormProperties {

		/** The value of the host header in the HTTP/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest */
		host: FormControl<string | null | undefined>,

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** Not supported. */
		portName: FormControl<string | null | undefined>,

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification: FormControl<GRPCHealthCheckPortSpecification | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** The request path of the HTTP/2 health check request. The default value is /. */
		requestPath: FormControl<string | null | undefined>,

		/** Creates a content-based HTTP/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http */
		response: FormControl<string | null | undefined>,
	}
	export function CreateHTTP2HealthCheckFormGroup() {
		return new FormGroup<HTTP2HealthCheckFormProperties>({
			host: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			portSpecification: new FormControl<GRPCHealthCheckPortSpecification | null | undefined>(undefined),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			requestPath: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HTTP2HealthCheckProxyHeader { NONE = 'NONE', PROXY_V1 = 'PROXY_V1' }

	export interface HTTPHealthCheck {

		/** The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest */
		host?: string | null;

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** Not supported. */
		portName?: string | null;

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification?: GRPCHealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The request path of the HTTP health check request. The default value is /. */
		requestPath?: string | null;

		/** Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http */
		response?: string | null;
	}
	export interface HTTPHealthCheckFormProperties {

		/** The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest */
		host: FormControl<string | null | undefined>,

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** Not supported. */
		portName: FormControl<string | null | undefined>,

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification: FormControl<GRPCHealthCheckPortSpecification | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** The request path of the HTTP health check request. The default value is /. */
		requestPath: FormControl<string | null | undefined>,

		/** Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http */
		response: FormControl<string | null | undefined>,
	}
	export function CreateHTTPHealthCheckFormGroup() {
		return new FormGroup<HTTPHealthCheckFormProperties>({
			host: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			portSpecification: new FormControl<GRPCHealthCheckPortSpecification | null | undefined>(undefined),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			requestPath: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HTTPSHealthCheck {

		/** The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest */
		host?: string | null;

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** Not supported. */
		portName?: string | null;

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification?: GRPCHealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** The request path of the HTTPS health check request. The default value is /. */
		requestPath?: string | null;

		/** Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http */
		response?: string | null;
	}
	export interface HTTPSHealthCheckFormProperties {

		/** The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest */
		host: FormControl<string | null | undefined>,

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** Not supported. */
		portName: FormControl<string | null | undefined>,

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification: FormControl<GRPCHealthCheckPortSpecification | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** The request path of the HTTPS health check request. The default value is /. */
		requestPath: FormControl<string | null | undefined>,

		/** Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http */
		response: FormControl<string | null | undefined>,
	}
	export function CreateHTTPSHealthCheckFormGroup() {
		return new FormGroup<HTTPSHealthCheckFormProperties>({
			host: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			portSpecification: new FormControl<GRPCHealthCheckPortSpecification | null | undefined>(undefined),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			requestPath: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a health check resource. Google Compute Engine has two health check resources: * [Regional](/compute/docs/reference/rest/v1/regionHealthChecks) * [Global](/compute/docs/reference/rest/v1/healthChecks) These health check resources can be used for load balancing and for autohealing VMs in a managed instance group (MIG). **Load balancing** Health check requirements vary depending on the type of load balancer. For details about the type of health check supported for each load balancer and corresponding backend type, see Health checks overview: Load balancer guide. **Autohealing in MIGs** The health checks that you use for autohealing VMs in a MIG can be either regional or global. For more information, see Set up an application health check and autohealing. For more information, see Health checks overview. */
	export interface HealthCheck {

		/**
		 * How often (in seconds) to send a health check. The default value is 5 seconds.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		checkIntervalSec?: number | null;

		/** [Output Only] Creation timestamp in 3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		grpcHealthCheck?: GRPCHealthCheck;

		/**
		 * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		healthyThreshold?: number | null;
		http2HealthCheck?: HTTP2HealthCheck;
		httpHealthCheck?: HTTPHealthCheck;
		httpsHealthCheck?: HTTPSHealthCheck;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Type of the resource. */
		kind?: string | null;

		/** Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver. */
		logConfig?: HealthCheckLogConfig;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash. */
		name?: string | null;

		/** [Output Only] Region where the health check resides. Not applicable to global health checks. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
		sslHealthCheck?: SSLHealthCheck;
		tcpHealthCheck?: TCPHealthCheck;

		/**
		 * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec?: number | null;

		/** Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field. */
		type?: HealthCheckType | null;

		/**
		 * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unhealthyThreshold?: number | null;
	}

	/** Represents a health check resource. Google Compute Engine has two health check resources: * [Regional](/compute/docs/reference/rest/v1/regionHealthChecks) * [Global](/compute/docs/reference/rest/v1/healthChecks) These health check resources can be used for load balancing and for autohealing VMs in a managed instance group (MIG). **Load balancing** Health check requirements vary depending on the type of load balancer. For details about the type of health check supported for each load balancer and corresponding backend type, see Health checks overview: Load balancer guide. **Autohealing in MIGs** The health checks that you use for autohealing VMs in a MIG can be either regional or global. For more information, see Set up an application health check and autohealing. For more information, see Health checks overview. */
	export interface HealthCheckFormProperties {

		/**
		 * How often (in seconds) to send a health check. The default value is 5 seconds.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		checkIntervalSec: FormControl<number | null | undefined>,

		/** [Output Only] Creation timestamp in 3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/**
		 * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		healthyThreshold: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of the resource. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Region where the health check resides. Not applicable to global health checks. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec: FormControl<number | null | undefined>,

		/** Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field. */
		type: FormControl<HealthCheckType | null | undefined>,

		/**
		 * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unhealthyThreshold: FormControl<number | null | undefined>,
	}
	export function CreateHealthCheckFormGroup() {
		return new FormGroup<HealthCheckFormProperties>({
			checkIntervalSec: new FormControl<number | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			healthyThreshold: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			timeoutSec: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<HealthCheckType | null | undefined>(undefined),
			unhealthyThreshold: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver. */
	export interface HealthCheckLogConfig {

		/** Indicates whether or not to export logs. This is false by default, which means no health check logging will be done. */
		enable?: boolean | null;
	}

	/** Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver. */
	export interface HealthCheckLogConfigFormProperties {

		/** Indicates whether or not to export logs. This is false by default, which means no health check logging will be done. */
		enable: FormControl<boolean | null | undefined>,
	}
	export function CreateHealthCheckLogConfigFormGroup() {
		return new FormGroup<HealthCheckLogConfigFormProperties>({
			enable: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface SSLHealthCheck {

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** Not supported. */
		portName?: string | null;

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification?: GRPCHealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake. */
		request?: string | null;

		/** Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp */
		response?: string | null;
	}
	export interface SSLHealthCheckFormProperties {

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** Not supported. */
		portName: FormControl<string | null | undefined>,

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification: FormControl<GRPCHealthCheckPortSpecification | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake. */
		request: FormControl<string | null | undefined>,

		/** Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp */
		response: FormControl<string | null | undefined>,
	}
	export function CreateSSLHealthCheckFormGroup() {
		return new FormGroup<SSLHealthCheckFormProperties>({
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			portSpecification: new FormControl<GRPCHealthCheckPortSpecification | null | undefined>(undefined),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			request: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TCPHealthCheck {

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** Not supported. */
		portName?: string | null;

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification?: GRPCHealthCheckPortSpecification | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection. */
		request?: string | null;

		/** Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp */
		response?: string | null;
	}
	export interface TCPHealthCheckFormProperties {

		/**
		 * The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** Not supported. */
		portName: FormControl<string | null | undefined>,

		/** Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports. */
		portSpecification: FormControl<GRPCHealthCheckPortSpecification | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection. */
		request: FormControl<string | null | undefined>,

		/** Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp */
		response: FormControl<string | null | undefined>,
	}
	export function CreateTCPHealthCheckFormGroup() {
		return new FormGroup<TCPHealthCheckFormProperties>({
			port: new FormControl<number | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined),
			portSpecification: new FormControl<GRPCHealthCheckPortSpecification | null | undefined>(undefined),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			request: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HealthCheckType { GRPC = 'GRPC', HTTP = 'HTTP', HTTP2 = 'HTTP2', HTTPS = 'HTTPS', INVALID = 'INVALID', SSL = 'SSL', TCP = 'TCP' }


	/** Contains a list of HealthCheck resources. */
	export interface HealthCheckList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HealthCheck resources. */
		items?: Array<HealthCheck>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HealthCheckListWarning;
	}

	/** Contains a list of HealthCheck resources. */
	export interface HealthCheckListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckListFormGroup() {
		return new FormGroup<HealthCheckListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthCheckListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		HealthCheckListWarningData?: Array<HealthCheckListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface HealthCheckListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckListWarningFormGroup() {
		return new FormGroup<HealthCheckListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthCheckListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface HealthCheckListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckListWarningDataFormGroup() {
		return new FormGroup<HealthCheckListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A full or valid partial URL to a health check. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check - projects/project-id/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check  */
	export interface HealthCheckReference {
		healthCheck?: string | null;
	}

	/** A full or valid partial URL to a health check. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check - projects/project-id/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check  */
	export interface HealthCheckReferenceFormProperties {
		healthCheck: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckReferenceFormGroup() {
		return new FormGroup<HealthCheckReferenceFormProperties>({
			healthCheck: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Health-Check as a Service resource. */
	export interface HealthCheckService {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService. */
		fingerprint?: string | null;

		/** A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10 for regional HealthCheckService, and not more than 1 for global HealthCheckService. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NetworkEndpointGroups. For global HealthCheckService using global INTERNET_IP_PORT NetworkEndpointGroups, the global HealthChecks must specify sourceRegions, and HealthChecks that specify sourceRegions can only be used with global INTERNET_IP_PORT NetworkEndpointGroups. */
		healthChecks?: Array<string>;

		/** Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService. */
		healthStatusAggregationPolicy?: HealthCheckServiceHealthStatusAggregationPolicy | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#healthCheckServicefor health check services. */
		kind?: string | null;

		/** Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService. For global HealthCheckServices, the NetworkEndpointGroups must be global INTERNET_IP_PORT. */
		networkEndpointGroups?: Array<string>;

		/** A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global. */
		notificationEndpoints?: Array<string>;

		/** [Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	/** Represents a Health-Check as a Service resource. */
	export interface HealthCheckServiceFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService. */
		fingerprint: FormControl<string | null | undefined>,

		/** Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService. */
		healthStatusAggregationPolicy: FormControl<HealthCheckServiceHealthStatusAggregationPolicy | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output only] Type of the resource. Always compute#healthCheckServicefor health check services. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckServiceFormGroup() {
		return new FormGroup<HealthCheckServiceFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			healthStatusAggregationPolicy: new FormControl<HealthCheckServiceHealthStatusAggregationPolicy | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HealthCheckServiceHealthStatusAggregationPolicy { AND = 'AND', NO_AGGREGATION = 'NO_AGGREGATION' }


	/** A full or valid partial URL to a health check service. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/regions/us-west1/healthCheckServices/health-check-service - projects/project-id/regions/us-west1/healthCheckServices/health-check-service - regions/us-west1/healthCheckServices/health-check-service  */
	export interface HealthCheckServiceReference {
		healthCheckService?: string | null;
	}

	/** A full or valid partial URL to a health check service. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/regions/us-west1/healthCheckServices/health-check-service - projects/project-id/regions/us-west1/healthCheckServices/health-check-service - regions/us-west1/healthCheckServices/health-check-service  */
	export interface HealthCheckServiceReferenceFormProperties {
		healthCheckService: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckServiceReferenceFormGroup() {
		return new FormGroup<HealthCheckServiceReferenceFormProperties>({
			healthCheckService: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthCheckServicesList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HealthCheckService resources. */
		items?: Array<HealthCheckService>;

		/** [Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HealthCheckServicesListWarning;
	}
	export interface HealthCheckServicesListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckServicesListFormGroup() {
		return new FormGroup<HealthCheckServicesListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthCheckServicesListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		HealthCheckServicesListWarningData?: Array<HealthCheckServicesListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface HealthCheckServicesListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckServicesListWarningFormGroup() {
		return new FormGroup<HealthCheckServicesListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthCheckServicesListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface HealthCheckServicesListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateHealthCheckServicesListWarningDataFormGroup() {
		return new FormGroup<HealthCheckServicesListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthChecksAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HealthChecksScopedList resources. */
		items?: {[id: string]: HealthChecksScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: HealthChecksAggregatedListWarning;
	}
	export interface HealthChecksAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of HealthChecksScopedList resources. */
		items: FormControl<{[id: string]: HealthChecksScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateHealthChecksAggregatedListFormGroup() {
		return new FormGroup<HealthChecksAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: HealthChecksScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthChecksScopedList {

		/** A list of HealthChecks contained in this scope. */
		healthChecks?: Array<HealthCheck>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: HealthChecksScopedListWarning;
	}
	export interface HealthChecksScopedListFormProperties {
	}
	export function CreateHealthChecksScopedListFormGroup() {
		return new FormGroup<HealthChecksScopedListFormProperties>({
		});

	}

	export interface HealthChecksScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		HealthChecksScopedListWarningData?: Array<HealthChecksScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface HealthChecksScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateHealthChecksScopedListWarningFormGroup() {
		return new FormGroup<HealthChecksScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthChecksScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface HealthChecksScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateHealthChecksScopedListWarningDataFormGroup() {
		return new FormGroup<HealthChecksScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthChecksAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		HealthChecksAggregatedListWarningData?: Array<HealthChecksAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface HealthChecksAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateHealthChecksAggregatedListWarningFormGroup() {
		return new FormGroup<HealthChecksAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthChecksAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface HealthChecksAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateHealthChecksAggregatedListWarningDataFormGroup() {
		return new FormGroup<HealthChecksAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HealthStatusForNetworkEndpoint {
		backendService?: BackendServiceReference;
		forwardingRule?: ForwardingRuleReference;

		/** A full or valid partial URL to a health check. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check - projects/project-id/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check */
		healthCheck?: HealthCheckReference;

		/** A full or valid partial URL to a health check service. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/regions/us-west1/healthCheckServices/health-check-service - projects/project-id/regions/us-west1/healthCheckServices/health-check-service - regions/us-west1/healthCheckServices/health-check-service */
		healthCheckService?: HealthCheckServiceReference;

		/** Health state of the network endpoint determined based on the health checks configured. */
		healthState?: HealthStatusForNetworkEndpointHealthState | null;
	}
	export interface HealthStatusForNetworkEndpointFormProperties {

		/** Health state of the network endpoint determined based on the health checks configured. */
		healthState: FormControl<HealthStatusForNetworkEndpointHealthState | null | undefined>,
	}
	export function CreateHealthStatusForNetworkEndpointFormGroup() {
		return new FormGroup<HealthStatusForNetworkEndpointFormProperties>({
			healthState: new FormControl<HealthStatusForNetworkEndpointHealthState | null | undefined>(undefined),
		});

	}

	export enum HealthStatusForNetworkEndpointHealthState { DRAINING = 'DRAINING', HEALTHY = 'HEALTHY', UNHEALTHY = 'UNHEALTHY', UNKNOWN = 'UNKNOWN' }


	/** Provides links to documentation or for performing an out of band action. For example, if a quota check failed with an error indicating the calling project hasn't enabled the accessed service, this can contain a URL pointing directly to the right place in the developer console to flip the bit. */
	export interface Help {

		/** URL(s) pointing to additional information on handling the current error. */
		links?: Array<HelpLink>;
	}

	/** Provides links to documentation or for performing an out of band action. For example, if a quota check failed with an error indicating the calling project hasn't enabled the accessed service, this can contain a URL pointing directly to the right place in the developer console to flip the bit. */
	export interface HelpFormProperties {
	}
	export function CreateHelpFormGroup() {
		return new FormGroup<HelpFormProperties>({
		});

	}


	/** Describes a URL link. */
	export interface HelpLink {

		/** Describes what the link offers. */
		description?: string | null;

		/** The URL of the link. */
		url?: string | null;
	}

	/** Describes a URL link. */
	export interface HelpLinkFormProperties {

		/** Describes what the link offers. */
		description: FormControl<string | null | undefined>,

		/** The URL of the link. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateHelpLinkFormGroup() {
		return new FormGroup<HelpLinkFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService. */
	export interface HostRule {

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character, and if followed by anything, the immediate following character must be either - or .. * based matching is not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true. */
		hosts?: Array<string>;

		/** The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion. */
		pathMatcher?: string | null;
	}

	/** UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService. */
	export interface HostRuleFormProperties {

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion. */
		pathMatcher: FormControl<string | null | undefined>,
	}
	export function CreateHostRuleFormGroup() {
		return new FormGroup<HostRuleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			pathMatcher: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specification for how requests are aborted as part of fault injection. */
	export interface HttpFaultAbort {

		/**
		 * The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
		 * Type: uint, 0 to 4,294,967,295
		 */
		httpStatus?: number | null;

		/**
		 * The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
		 * Type: double
		 */
		percentage?: number | null;
	}

	/** Specification for how requests are aborted as part of fault injection. */
	export interface HttpFaultAbortFormProperties {

		/**
		 * The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
		 * Type: uint, 0 to 4,294,967,295
		 */
		httpStatus: FormControl<number | null | undefined>,

		/**
		 * The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
		 * Type: double
		 */
		percentage: FormControl<number | null | undefined>,
	}
	export function CreateHttpFaultAbortFormGroup() {
		return new FormGroup<HttpFaultAbortFormProperties>({
			httpStatus: new FormControl<number | null | undefined>(undefined),
			percentage: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the delay introduced by the load balancer before forwarding the request to the backend service as part of fault injection. */
	export interface HttpFaultDelay {

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		fixedDelay?: Duration;

		/**
		 * The percentage of traffic for connections, operations, or requests for which a delay is introduced as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
		 * Type: double
		 */
		percentage?: number | null;
	}

	/** Specifies the delay introduced by the load balancer before forwarding the request to the backend service as part of fault injection. */
	export interface HttpFaultDelayFormProperties {

		/**
		 * The percentage of traffic for connections, operations, or requests for which a delay is introduced as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
		 * Type: double
		 */
		percentage: FormControl<number | null | undefined>,
	}
	export function CreateHttpFaultDelayFormGroup() {
		return new FormGroup<HttpFaultDelayFormProperties>({
			percentage: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests. */
	export interface HttpFaultInjection {

		/** Specification for how requests are aborted as part of fault injection. */
		abort?: HttpFaultAbort;

		/** Specifies the delay introduced by the load balancer before forwarding the request to the backend service as part of fault injection. */
		delay?: HttpFaultDelay;
	}

	/** The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests. */
	export interface HttpFaultInjectionFormProperties {
	}
	export function CreateHttpFaultInjectionFormGroup() {
		return new FormGroup<HttpFaultInjectionFormProperties>({
		});

	}


	/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
	export interface HttpHeaderAction {

		/** Headers to add to a matching request before forwarding the request to the backendService. */
		requestHeadersToAdd?: Array<HttpHeaderOption>;

		/** A list of header names for headers that need to be removed from the request before forwarding the request to the backendService. */
		requestHeadersToRemove?: Array<string>;

		/** Headers to add the response before sending the response back to the client. */
		responseHeadersToAdd?: Array<HttpHeaderOption>;

		/** A list of header names for headers that need to be removed from the response before sending the response back to the client. */
		responseHeadersToRemove?: Array<string>;
	}

	/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
	export interface HttpHeaderActionFormProperties {
	}
	export function CreateHttpHeaderActionFormGroup() {
		return new FormGroup<HttpHeaderActionFormProperties>({
		});

	}


	/** Specification determining how headers are added to requests or responses. */
	export interface HttpHeaderOption {

		/** The name of the header. */
		headerName?: string | null;

		/** The value of the header to add. */
		headerValue?: string | null;

		/** If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false. */
		replace?: boolean | null;
	}

	/** Specification determining how headers are added to requests or responses. */
	export interface HttpHeaderOptionFormProperties {

		/** The name of the header. */
		headerName: FormControl<string | null | undefined>,

		/** The value of the header to add. */
		headerValue: FormControl<string | null | undefined>,

		/** If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false. */
		replace: FormControl<boolean | null | undefined>,
	}
	export function CreateHttpHeaderOptionFormGroup() {
		return new FormGroup<HttpHeaderOptionFormProperties>({
			headerName: new FormControl<string | null | undefined>(undefined),
			headerValue: new FormControl<string | null | undefined>(undefined),
			replace: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** matchRule criteria for request header matches. */
	export interface HttpHeaderMatch {

		/** The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		exactMatch?: string | null;

		/** The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin`. */
		headerName?: string | null;

		/** If set to false, the headerMatch is considered a match if the preceding match criteria are met. If set to true, the headerMatch is considered a match if the preceding match criteria are NOT met. The default setting is false. */
		invertMatch?: boolean | null;

		/** The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		prefixMatch?: string | null;

		/** A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		presentMatch?: boolean | null;

		/** HttpRouteRuleMatch criteria for field values that must stay within the specified integer range. */
		rangeMatch?: Int64RangeMatch;

		/** The value of the header must match the regular expression specified in regexMatch. For more information about regular expression syntax, see Syntax. For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		regexMatch?: string | null;

		/** The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		suffixMatch?: string | null;
	}

	/** matchRule criteria for request header matches. */
	export interface HttpHeaderMatchFormProperties {

		/** The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		exactMatch: FormControl<string | null | undefined>,

		/** The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin`. */
		headerName: FormControl<string | null | undefined>,

		/** If set to false, the headerMatch is considered a match if the preceding match criteria are met. If set to true, the headerMatch is considered a match if the preceding match criteria are NOT met. The default setting is false. */
		invertMatch: FormControl<boolean | null | undefined>,

		/** The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		prefixMatch: FormControl<string | null | undefined>,

		/** A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		presentMatch: FormControl<boolean | null | undefined>,

		/** The value of the header must match the regular expression specified in regexMatch. For more information about regular expression syntax, see Syntax. For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		regexMatch: FormControl<string | null | undefined>,

		/** The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
		suffixMatch: FormControl<string | null | undefined>,
	}
	export function CreateHttpHeaderMatchFormGroup() {
		return new FormGroup<HttpHeaderMatchFormProperties>({
			exactMatch: new FormControl<string | null | undefined>(undefined),
			headerName: new FormControl<string | null | undefined>(undefined),
			invertMatch: new FormControl<boolean | null | undefined>(undefined),
			prefixMatch: new FormControl<string | null | undefined>(undefined),
			presentMatch: new FormControl<boolean | null | undefined>(undefined),
			regexMatch: new FormControl<string | null | undefined>(undefined),
			suffixMatch: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** HttpRouteRuleMatch criteria for field values that must stay within the specified integer range. */
	export interface Int64RangeMatch {

		/** The end of the range (exclusive) in signed long integer format. */
		rangeEnd?: string | null;

		/** The start of the range (inclusive) in signed long integer format. */
		rangeStart?: string | null;
	}

	/** HttpRouteRuleMatch criteria for field values that must stay within the specified integer range. */
	export interface Int64RangeMatchFormProperties {

		/** The end of the range (exclusive) in signed long integer format. */
		rangeEnd: FormControl<string | null | undefined>,

		/** The start of the range (inclusive) in signed long integer format. */
		rangeStart: FormControl<string | null | undefined>,
	}
	export function CreateInt64RangeMatchFormGroup() {
		return new FormGroup<Int64RangeMatchFormProperties>({
			rangeEnd: new FormControl<string | null | undefined>(undefined),
			rangeStart: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a legacy HTTP Health Check resource. Legacy HTTP health checks are now only required by target pool-based network load balancers. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview . */
	export interface HttpHealthCheck {

		/**
		 * How often (in seconds) to send a health check. The default value is 5 seconds.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		checkIntervalSec?: number | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		healthyThreshold?: number | null;

		/** The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/**
		 * The TCP port number for the HTTP health check request. The default value is 80.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** The request path of the HTTP health check request. The default value is /. This field does not support query parameters. Must comply with RFC3986. */
		requestPath?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec?: number | null;

		/**
		 * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unhealthyThreshold?: number | null;
	}

	/** Represents a legacy HTTP Health Check resource. Legacy HTTP health checks are now only required by target pool-based network load balancers. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview . */
	export interface HttpHealthCheckFormProperties {

		/**
		 * How often (in seconds) to send a health check. The default value is 5 seconds.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		checkIntervalSec: FormControl<number | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/**
		 * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		healthyThreshold: FormControl<number | null | undefined>,

		/** The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
		host: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/**
		 * The TCP port number for the HTTP health check request. The default value is 80.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** The request path of the HTTP health check request. The default value is /. This field does not support query parameters. Must comply with RFC3986. */
		requestPath: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec: FormControl<number | null | undefined>,

		/**
		 * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unhealthyThreshold: FormControl<number | null | undefined>,
	}
	export function CreateHttpHealthCheckFormGroup() {
		return new FormGroup<HttpHealthCheckFormProperties>({
			checkIntervalSec: new FormControl<number | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			healthyThreshold: new FormControl<number | null | undefined>(undefined),
			host: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			port: new FormControl<number | null | undefined>(undefined),
			requestPath: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			timeoutSec: new FormControl<number | null | undefined>(undefined),
			unhealthyThreshold: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Contains a list of HttpHealthCheck resources. */
	export interface HttpHealthCheckList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HttpHealthCheck resources. */
		items?: Array<HttpHealthCheck>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HttpHealthCheckListWarning;
	}

	/** Contains a list of HttpHealthCheck resources. */
	export interface HttpHealthCheckListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateHttpHealthCheckListFormGroup() {
		return new FormGroup<HttpHealthCheckListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HttpHealthCheckListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		HttpHealthCheckListWarningData?: Array<HttpHealthCheckListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface HttpHealthCheckListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateHttpHealthCheckListWarningFormGroup() {
		return new FormGroup<HttpHealthCheckListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HttpHealthCheckListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface HttpHealthCheckListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateHttpHealthCheckListWarningDataFormGroup() {
		return new FormGroup<HttpHealthCheckListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** HttpRouteRuleMatch criteria for a request's query parameter. */
	export interface HttpQueryParameterMatch {

		/** The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch, or regexMatch must be set. */
		exactMatch?: string | null;

		/** The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails. */
		name?: string | null;

		/** Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch, or regexMatch must be set. */
		presentMatch?: boolean | null;

		/** The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For more information about regular expression syntax, see Syntax. Only one of presentMatch, exactMatch, or regexMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		regexMatch?: string | null;
	}

	/** HttpRouteRuleMatch criteria for a request's query parameter. */
	export interface HttpQueryParameterMatchFormProperties {

		/** The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch, or regexMatch must be set. */
		exactMatch: FormControl<string | null | undefined>,

		/** The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails. */
		name: FormControl<string | null | undefined>,

		/** Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch, or regexMatch must be set. */
		presentMatch: FormControl<boolean | null | undefined>,

		/** The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For more information about regular expression syntax, see Syntax. Only one of presentMatch, exactMatch, or regexMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		regexMatch: FormControl<string | null | undefined>,
	}
	export function CreateHttpQueryParameterMatchFormGroup() {
		return new FormGroup<HttpQueryParameterMatchFormProperties>({
			exactMatch: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			presentMatch: new FormControl<boolean | null | undefined>(undefined),
			regexMatch: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies settings for an HTTP redirect. */
	export interface HttpRedirectAction {

		/** The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters. */
		hostRedirect?: string | null;

		/** If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false. */
		httpsRedirect?: boolean | null;

		/** The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters. */
		pathRedirect?: string | null;

		/** The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters. */
		prefixRedirect?: string | null;

		/** The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. */
		redirectResponseCode?: HttpRedirectActionRedirectResponseCode | null;

		/** If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false. */
		stripQuery?: boolean | null;
	}

	/** Specifies settings for an HTTP redirect. */
	export interface HttpRedirectActionFormProperties {

		/** The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters. */
		hostRedirect: FormControl<string | null | undefined>,

		/** If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false. */
		httpsRedirect: FormControl<boolean | null | undefined>,

		/** The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters. */
		pathRedirect: FormControl<string | null | undefined>,

		/** The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters. */
		prefixRedirect: FormControl<string | null | undefined>,

		/** The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. */
		redirectResponseCode: FormControl<HttpRedirectActionRedirectResponseCode | null | undefined>,

		/** If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false. */
		stripQuery: FormControl<boolean | null | undefined>,
	}
	export function CreateHttpRedirectActionFormGroup() {
		return new FormGroup<HttpRedirectActionFormProperties>({
			hostRedirect: new FormControl<string | null | undefined>(undefined),
			httpsRedirect: new FormControl<boolean | null | undefined>(undefined),
			pathRedirect: new FormControl<string | null | undefined>(undefined),
			prefixRedirect: new FormControl<string | null | undefined>(undefined),
			redirectResponseCode: new FormControl<HttpRedirectActionRedirectResponseCode | null | undefined>(undefined),
			stripQuery: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum HttpRedirectActionRedirectResponseCode { FOUND = 'FOUND', MOVED_PERMANENTLY_DEFAULT = 'MOVED_PERMANENTLY_DEFAULT', PERMANENT_REDIRECT = 'PERMANENT_REDIRECT', SEE_OTHER = 'SEE_OTHER', TEMPORARY_REDIRECT = 'TEMPORARY_REDIRECT' }


	/** The retry policy associates with HttpRouteRule */
	export interface HttpRetryPolicy {

		/**
		 * Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRetries?: number | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		perTryTimeout?: Duration;

		/** Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: retry is attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all. For example, disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - connect-failure: a retry is attempted on failures connecting to the instance or endpoint. For example, connection timeouts. - retriable-4xx: a retry is attempted if the instance or endpoint responds with a 4xx response code. The only error that you can retry is error code 409. - refused-stream: a retry is attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: a retry is attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: a retry is attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: a retry is attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: a retry is attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: a retry is attempted if the gRPC status code in the response header is set to unavailable. Only the following codes are supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true. - cancelled - deadline-exceeded - internal - resource-exhausted - unavailable */
		retryConditions?: Array<string>;
	}

	/** The retry policy associates with HttpRouteRule */
	export interface HttpRetryPolicyFormProperties {

		/**
		 * Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numRetries: FormControl<number | null | undefined>,
	}
	export function CreateHttpRetryPolicyFormGroup() {
		return new FormGroup<HttpRetryPolicyFormProperties>({
			numRetries: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface HttpRouteAction {

		/** The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard. */
		corsPolicy?: CorsPolicy;

		/** The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests. */
		faultInjectionPolicy?: HttpFaultInjection;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		maxStreamDuration?: Duration;

		/** A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer doesn't wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow. */
		requestMirrorPolicy?: RequestMirrorPolicy;

		/** The retry policy associates with HttpRouteRule */
		retryPolicy?: HttpRetryPolicy;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		timeout?: Duration;

		/** The spec for modifying the path before sending the request to the matched backend service. */
		urlRewrite?: UrlRewrite;

		/** A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction. */
		weightedBackendServices?: Array<WeightedBackendService>;
	}
	export interface HttpRouteActionFormProperties {
	}
	export function CreateHttpRouteActionFormGroup() {
		return new FormGroup<HttpRouteActionFormProperties>({
		});

	}


	/** A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer doesn't wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow. */
	export interface RequestMirrorPolicy {

		/** The full or partial URL to the BackendService resource being mirrored to. The backend service configured for a mirroring policy must reference backends that are of the same type as the original backend service matched in the URL map. Serverless NEG backends are not currently supported as a mirrored backend service. */
		backendService?: string | null;
	}

	/** A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer doesn't wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow. */
	export interface RequestMirrorPolicyFormProperties {

		/** The full or partial URL to the BackendService resource being mirrored to. The backend service configured for a mirroring policy must reference backends that are of the same type as the original backend service matched in the URL map. Serverless NEG backends are not currently supported as a mirrored backend service. */
		backendService: FormControl<string | null | undefined>,
	}
	export function CreateRequestMirrorPolicyFormGroup() {
		return new FormGroup<RequestMirrorPolicyFormProperties>({
			backendService: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The spec for modifying the path before sending the request to the matched backend service. */
	export interface UrlRewrite {

		/** Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters. */
		hostRewrite?: string | null;

		/** Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters. */
		pathPrefixRewrite?: string | null;

		/** If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax. A corresponding path_template_match must be specified. Any template variables must exist in the path_template_match field. - -At least one variable must be specified in the path_template_match field - You can omit variables from the rewritten URL - The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}. For example, a path_template_match of /static/{format=**} could be rewritten as /static/content/{format} to prefix /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be rewritten as /content/{format}/{country}/{suffix}. At least one non-empty routeRules[].matchRules[].path_template_match is required. Only one of path_prefix_rewrite or path_template_rewrite may be specified. */
		pathTemplateRewrite?: string | null;
	}

	/** The spec for modifying the path before sending the request to the matched backend service. */
	export interface UrlRewriteFormProperties {

		/** Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters. */
		hostRewrite: FormControl<string | null | undefined>,

		/** Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters. */
		pathPrefixRewrite: FormControl<string | null | undefined>,

		/** If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax. A corresponding path_template_match must be specified. Any template variables must exist in the path_template_match field. - -At least one variable must be specified in the path_template_match field - You can omit variables from the rewritten URL - The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}. For example, a path_template_match of /static/{format=**} could be rewritten as /static/content/{format} to prefix /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be rewritten as /content/{format}/{country}/{suffix}. At least one non-empty routeRules[].matchRules[].path_template_match is required. Only one of path_prefix_rewrite or path_template_rewrite may be specified. */
		pathTemplateRewrite: FormControl<string | null | undefined>,
	}
	export function CreateUrlRewriteFormGroup() {
		return new FormGroup<UrlRewriteFormProperties>({
			hostRewrite: new FormControl<string | null | undefined>(undefined),
			pathPrefixRewrite: new FormControl<string | null | undefined>(undefined),
			pathTemplateRewrite: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService */
	export interface WeightedBackendService {

		/** The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight. */
		backendService?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction;

		/**
		 * Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
		 * Type: uint, 0 to 4,294,967,295
		 */
		weight?: number | null;
	}

	/** In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService */
	export interface WeightedBackendServiceFormProperties {

		/** The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight. */
		backendService: FormControl<string | null | undefined>,

		/**
		 * Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
		 * Type: uint, 0 to 4,294,967,295
		 */
		weight: FormControl<number | null | undefined>,
	}
	export function CreateWeightedBackendServiceFormGroup() {
		return new FormGroup<WeightedBackendServiceFormProperties>({
			backendService: new FormControl<string | null | undefined>(undefined),
			weight: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The HttpRouteRule setting specifies how to match an HTTP request and the corresponding routing action that load balancing proxies perform. */
	export interface HttpRouteRule {

		/** The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters. */
		description?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction;

		/** The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule. */
		matchRules?: Array<HttpRouteRuleMatch>;

		/**
		 * For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority?: number | null;
		routeAction?: HttpRouteAction;

		/** The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. */
		service?: string | null;

		/** Specifies settings for an HTTP redirect. */
		urlRedirect?: HttpRedirectAction;
	}

	/** The HttpRouteRule setting specifies how to match an HTTP request and the corresponding routing action that load balancing proxies perform. */
	export interface HttpRouteRuleFormProperties {

		/** The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters. */
		description: FormControl<string | null | undefined>,

		/**
		 * For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority: FormControl<number | null | undefined>,

		/** The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateHttpRouteRuleFormGroup() {
		return new FormGroup<HttpRouteRuleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur. */
	export interface HttpRouteRuleMatch {

		/** For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. */
		fullPathMatch?: string | null;

		/** Specifies a list of header match criteria, all of which must match corresponding headers in the request. */
		headerMatches?: Array<HttpHeaderMatch>;

		/** Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to a target gRPC proxy. */
		ignoreCase?: boolean | null;

		/** Opaque filter criteria used by the load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to the load balancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadata filters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here is applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to load balancers that have loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true. */
		metadataFilters?: Array<MetadataFilter>;

		/** If specified, the route is a pattern match expression that must match the :path header once the query string is removed. A pattern match allows you to match - The value must be between 1 and 1024 characters - The pattern must start with a leading slash ("/") - There may be no more than 5 operators in pattern Precisely one of prefix_match, full_path_match, regex_match or path_template_match must be set. */
		pathTemplateMatch?: string | null;

		/** For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. */
		prefixMatch?: string | null;

		/** Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to a target gRPC proxy. */
		queryParameterMatches?: Array<HttpQueryParameterMatch>;

		/** For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For more information about regular expression syntax, see Syntax. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		regexMatch?: string | null;
	}

	/** HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur. */
	export interface HttpRouteRuleMatchFormProperties {

		/** For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. */
		fullPathMatch: FormControl<string | null | undefined>,

		/** Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to a target gRPC proxy. */
		ignoreCase: FormControl<boolean | null | undefined>,

		/** If specified, the route is a pattern match expression that must match the :path header once the query string is removed. A pattern match allows you to match - The value must be between 1 and 1024 characters - The pattern must start with a leading slash ("/") - There may be no more than 5 operators in pattern Precisely one of prefix_match, full_path_match, regex_match or path_template_match must be set. */
		pathTemplateMatch: FormControl<string | null | undefined>,

		/** For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. */
		prefixMatch: FormControl<string | null | undefined>,

		/** For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For more information about regular expression syntax, see Syntax. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. */
		regexMatch: FormControl<string | null | undefined>,
	}
	export function CreateHttpRouteRuleMatchFormGroup() {
		return new FormGroup<HttpRouteRuleMatchFormProperties>({
			fullPathMatch: new FormControl<string | null | undefined>(undefined),
			ignoreCase: new FormControl<boolean | null | undefined>(undefined),
			pathTemplateMatch: new FormControl<string | null | undefined>(undefined),
			prefixMatch: new FormControl<string | null | undefined>(undefined),
			regexMatch: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a legacy HTTPS Health Check resource. Legacy HTTPS health checks have been deprecated. If you are using a target pool-based network load balancer, you must use a legacy HTTP (not HTTPS) health check. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview . */
	export interface HttpsHealthCheck {

		/**
		 * How often (in seconds) to send a health check. The default value is 5 seconds.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		checkIntervalSec?: number | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		healthyThreshold?: number | null;

		/** The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
		host?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Type of the resource. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/**
		 * The TCP port number for the HTTPS health check request. The default value is 443.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;

		/** The request path of the HTTPS health check request. The default value is "/". Must comply with RFC3986. */
		requestPath?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec?: number | null;

		/**
		 * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unhealthyThreshold?: number | null;
	}

	/** Represents a legacy HTTPS Health Check resource. Legacy HTTPS health checks have been deprecated. If you are using a target pool-based network load balancer, you must use a legacy HTTP (not HTTPS) health check. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview . */
	export interface HttpsHealthCheckFormProperties {

		/**
		 * How often (in seconds) to send a health check. The default value is 5 seconds.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		checkIntervalSec: FormControl<number | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/**
		 * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		healthyThreshold: FormControl<number | null | undefined>,

		/** The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
		host: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of the resource. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/**
		 * The TCP port number for the HTTPS health check request. The default value is 443.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,

		/** The request path of the HTTPS health check request. The default value is "/". Must comply with RFC3986. */
		requestPath: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		timeoutSec: FormControl<number | null | undefined>,

		/**
		 * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unhealthyThreshold: FormControl<number | null | undefined>,
	}
	export function CreateHttpsHealthCheckFormGroup() {
		return new FormGroup<HttpsHealthCheckFormProperties>({
			checkIntervalSec: new FormControl<number | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			healthyThreshold: new FormControl<number | null | undefined>(undefined),
			host: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			port: new FormControl<number | null | undefined>(undefined),
			requestPath: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			timeoutSec: new FormControl<number | null | undefined>(undefined),
			unhealthyThreshold: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Contains a list of HttpsHealthCheck resources. */
	export interface HttpsHealthCheckList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of HttpsHealthCheck resources. */
		items?: Array<HttpsHealthCheck>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: HttpsHealthCheckListWarning;
	}

	/** Contains a list of HttpsHealthCheck resources. */
	export interface HttpsHealthCheckListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateHttpsHealthCheckListFormGroup() {
		return new FormGroup<HttpsHealthCheckListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HttpsHealthCheckListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		HttpsHealthCheckListWarningData?: Array<HttpsHealthCheckListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface HttpsHealthCheckListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateHttpsHealthCheckListWarningFormGroup() {
		return new FormGroup<HttpsHealthCheckListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface HttpsHealthCheckListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface HttpsHealthCheckListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateHttpsHealthCheckListWarningDataFormGroup() {
		return new FormGroup<HttpsHealthCheckListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an Image resource. You can use images to create boot disks for your VM instances. For more information, read Images. */
	export interface Image {

		/** The architecture of the image. Valid values are ARM64 or X86_64. */
		architecture?: AttachedDiskArchitecture | null;

		/** Size of the image tar.gz archive stored in Google Cloud Storage (in bytes). */
		archiveSizeBytes?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Size of the image when restored onto a persistent disk (in GB). */
		diskSizeGb?: string | null;

		/** Whether this image is created from a confidential compute mode disk. [Output Only]: This field is not set by user, but from source disk. */
		enableConfidentialCompute?: boolean | null;

		/** The name of the image family to which this image belongs. The image family name can be from a publicly managed image family provided by Compute Engine, or from a custom image family you create. For example, centos-stream-9 is a publicly available image family. For more information, see Image family best practices. When creating disks, you can specify an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035. */
		family?: string | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. To see a list of available options, see the guestOSfeatures[].type parameter. */
		guestOsFeatures?: Array<GuestOsFeature>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;
		imageEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] Type of the resource. Always compute#image for images. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an image. */
		labelFingerprint?: string | null;

		/** Labels to apply to this image. These can be later modified by the setLabels method. */
		labels?: {[id: string]: string };

		/** Integer license codes indicating which licenses are attached to this image. */
		licenseCodes?: Array<string>;

		/** Any applicable license URI. */
		licenses?: Array<string>;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The parameters of the raw disk image. */
		rawDisk?: ImageRawDisk;

		/** Output only. Reserved for future use. */
		satisfiesPzi?: boolean | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Initial State for shielded instance, these are public keys which are safe to store in public */
		shieldedInstanceInitialState?: InitialStateConfig;

		/** URL of the source disk used to create this image. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		sourceDisk?: string | null;
		sourceDiskEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name. */
		sourceDiskId?: string | null;

		/** URL of the source image used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ images/image_name - projects/project_id/global/images/image_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		sourceImage?: string | null;
		sourceImageEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name. */
		sourceImageId?: string | null;

		/** URL of the source snapshot used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ snapshots/snapshot_name - projects/project_id/global/snapshots/snapshot_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		sourceSnapshot?: string | null;
		sourceSnapshotEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name. */
		sourceSnapshotId?: string | null;

		/** The type of the image used to create this disk. The default and only valid value is RAW. */
		sourceType?: ImageSourceType | null;

		/** [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY. */
		status?: ImageStatus | null;

		/** Cloud Storage bucket storage location of the image (regional or multi-regional). */
		storageLocations?: Array<string>;
	}

	/** Represents an Image resource. You can use images to create boot disks for your VM instances. For more information, read Images. */
	export interface ImageFormProperties {

		/** The architecture of the image. Valid values are ARM64 or X86_64. */
		architecture: FormControl<AttachedDiskArchitecture | null | undefined>,

		/** Size of the image tar.gz archive stored in Google Cloud Storage (in bytes). */
		archiveSizeBytes: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Size of the image when restored onto a persistent disk (in GB). */
		diskSizeGb: FormControl<string | null | undefined>,

		/** Whether this image is created from a confidential compute mode disk. [Output Only]: This field is not set by user, but from source disk. */
		enableConfidentialCompute: FormControl<boolean | null | undefined>,

		/** The name of the image family to which this image belongs. The image family name can be from a publicly managed image family provided by Compute Engine, or from a custom image family you create. For example, centos-stream-9 is a publicly available image family. For more information, see Image family best practices. When creating disks, you can specify an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035. */
		family: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#image for images. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an image. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels to apply to this image. These can be later modified by the setLabels method. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Output only. Reserved for future use. */
		satisfiesPzi: FormControl<boolean | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** URL of the source disk used to create this image. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		sourceDisk: FormControl<string | null | undefined>,

		/** [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name. */
		sourceDiskId: FormControl<string | null | undefined>,

		/** URL of the source image used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ images/image_name - projects/project_id/global/images/image_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		sourceImage: FormControl<string | null | undefined>,

		/** [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name. */
		sourceImageId: FormControl<string | null | undefined>,

		/** URL of the source snapshot used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ snapshots/snapshot_name - projects/project_id/global/snapshots/snapshot_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		sourceSnapshot: FormControl<string | null | undefined>,

		/** [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name. */
		sourceSnapshotId: FormControl<string | null | undefined>,

		/** The type of the image used to create this disk. The default and only valid value is RAW. */
		sourceType: FormControl<ImageSourceType | null | undefined>,

		/** [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY. */
		status: FormControl<ImageStatus | null | undefined>,
	}
	export function CreateImageFormGroup() {
		return new FormGroup<ImageFormProperties>({
			architecture: new FormControl<AttachedDiskArchitecture | null | undefined>(undefined),
			archiveSizeBytes: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			diskSizeGb: new FormControl<string | null | undefined>(undefined),
			enableConfidentialCompute: new FormControl<boolean | null | undefined>(undefined),
			family: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			satisfiesPzi: new FormControl<boolean | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sourceDisk: new FormControl<string | null | undefined>(undefined),
			sourceDiskId: new FormControl<string | null | undefined>(undefined),
			sourceImage: new FormControl<string | null | undefined>(undefined),
			sourceImageId: new FormControl<string | null | undefined>(undefined),
			sourceSnapshot: new FormControl<string | null | undefined>(undefined),
			sourceSnapshotId: new FormControl<string | null | undefined>(undefined),
			sourceType: new FormControl<ImageSourceType | null | undefined>(undefined),
			status: new FormControl<ImageStatus | null | undefined>(undefined),
		});

	}

	export interface ImageRawDisk {

		/** The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created. */
		containerType?: ImageRawDiskContainerType | null;

		/** [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created. */
		sha1Checksum?: string | null;

		/** The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: - https://storage.googleapis.com/bucket_name/image_archive_name - https://storage.googleapis.com/bucket_name/folder_name/ image_archive_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		source?: string | null;
	}
	export interface ImageRawDiskFormProperties {

		/** The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created. */
		containerType: FormControl<ImageRawDiskContainerType | null | undefined>,

		/** [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created. */
		sha1Checksum: FormControl<string | null | undefined>,

		/** The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: - https://storage.googleapis.com/bucket_name/image_archive_name - https://storage.googleapis.com/bucket_name/folder_name/ image_archive_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL */
		source: FormControl<string | null | undefined>,
	}
	export function CreateImageRawDiskFormGroup() {
		return new FormGroup<ImageRawDiskFormProperties>({
			containerType: new FormControl<ImageRawDiskContainerType | null | undefined>(undefined),
			sha1Checksum: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-f0-9]{40}')]),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ImageRawDiskContainerType { TAR = 'TAR' }

	export enum ImageSourceType { RAW = 'RAW' }

	export enum ImageStatus { DELETING = 'DELETING', FAILED = 'FAILED', PENDING = 'PENDING', READY = 'READY' }

	export interface ImageFamilyView {

		/** Represents an Image resource. You can use images to create boot disks for your VM instances. For more information, read Images. */
		image?: Image;
	}
	export interface ImageFamilyViewFormProperties {
	}
	export function CreateImageFamilyViewFormGroup() {
		return new FormGroup<ImageFamilyViewFormProperties>({
		});

	}


	/** Contains a list of images. */
	export interface ImageList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Image resources. */
		items?: Array<Image>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ImageListWarning;
	}

	/** Contains a list of images. */
	export interface ImageListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateImageListFormGroup() {
		return new FormGroup<ImageListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ImageListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ImageListWarningData?: Array<ImageListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ImageListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateImageListWarningFormGroup() {
		return new FormGroup<ImageListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ImageListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ImageListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateImageListWarningDataFormGroup() {
		return new FormGroup<ImageListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an Instance resource. An instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances. */
	export interface Instance {

		/** Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled). */
		advancedMachineFeatures?: AdvancedMachineFeatures;

		/** Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding . */
		canIpForward?: boolean | null;

		/** A set of Confidential Instance options. */
		confidentialInstanceConfig?: ConfidentialInstanceConfig;

		/** [Output Only] The CPU platform used by this instance. */
		cpuPlatform?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Whether the resource should be protected against deletion. */
		deletionProtection?: boolean | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Array of disks associated with this instance. Persistent disks must be created before you can assign them. */
		disks?: Array<AttachedDisk>;

		/** A set of Display Device options */
		displayDevice?: DisplayDevice;

		/** Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance. To see the latest fingerprint, make get() request to the instance. */
		fingerprint?: string | null;

		/** A list of the type and count of accelerator cards attached to the instance. */
		guestAccelerators?: Array<AcceleratorConfig>;

		/** Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS. */
		hostname?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;
		instanceEncryptionKey?: CustomerEncryptionKey;

		/** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
		keyRevocationActionType?: InstancePropertiesKeyRevocationActionType | null;

		/** [Output Only] Type of the resource. Always compute#instance for instances. */
		kind?: string | null;

		/** A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the instance. */
		labelFingerprint?: string | null;

		/** Labels to apply to this instance. These can be later modified by the setLabels method. */
		labels?: {[id: string]: string };

		/** [Output Only] Last start timestamp in RFC3339 text format. */
		lastStartTimestamp?: string | null;

		/** [Output Only] Last stop timestamp in RFC3339 text format. */
		lastStopTimestamp?: string | null;

		/** [Output Only] Last suspended timestamp in RFC3339 text format. */
		lastSuspendedTimestamp?: string | null;

		/** Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type: zones/us-central1-f/machineTypes/n1-standard-1 To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones/zone/machineTypes/custom-CPUS-MEMORY For example: zones/us-central1-f/machineTypes/custom-4-5120 For a full list of restrictions, read the Specifications for custom machine types. */
		machineType?: string | null;

		/** A metadata key/value entry. */
		metadata?: Metadata;

		/** Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". */
		minCpuPlatform?: string | null;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance. */
		networkInterfaces?: Array<NetworkInterface>;
		networkPerformanceConfig?: NetworkPerformanceConfig;

		/** Additional instance params. */
		params?: InstanceParams;

		/** The private IPv6 google access type for the VM. If not specified, use INHERIT_FROM_SUBNETWORK as default. */
		privateIpv6GoogleAccess?: InstancePropertiesPrivateIpv6GoogleAccess | null;

		/** Specifies the reservations that this instance can consume from. */
		reservationAffinity?: ReservationAffinity;

		/** Resource policies applied to this instance. */
		resourcePolicies?: Array<string>;

		/** Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls. */
		resourceStatus?: ResourceStatus;

		/** [Output Only] Reserved for future use. */
		satisfiesPzi?: boolean | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** Sets the scheduling options for an Instance. */
		scheduling?: Scheduling;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported. Service accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information. */
		serviceAccounts?: Array<ServiceAccount>;

		/** A set of Shielded Instance options. */
		shieldedInstanceConfig?: ShieldedInstanceConfig;

		/** The policy describes the baseline against which Instance boot integrity is measured. */
		shieldedInstanceIntegrityPolicy?: ShieldedInstanceIntegrityPolicy;

		/** Source machine image */
		sourceMachineImage?: string | null;
		sourceMachineImageEncryptionKey?: CustomerEncryptionKey;

		/** [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity. */
		startRestricted?: boolean | null;

		/** [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see Instance life cycle. */
		status?: InstanceStatus | null;

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage?: string | null;

		/** A set of instance tags. */
		tags?: Tags;

		/** [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	/** Represents an Instance resource. An instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances. */
	export interface InstanceFormProperties {

		/** Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding . */
		canIpForward: FormControl<boolean | null | undefined>,

		/** [Output Only] The CPU platform used by this instance. */
		cpuPlatform: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** Whether the resource should be protected against deletion. */
		deletionProtection: FormControl<boolean | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance. To see the latest fingerprint, make get() request to the instance. */
		fingerprint: FormControl<string | null | undefined>,

		/** Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS. */
		hostname: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
		keyRevocationActionType: FormControl<InstancePropertiesKeyRevocationActionType | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#instance for instances. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the instance. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels to apply to this instance. These can be later modified by the setLabels method. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** [Output Only] Last start timestamp in RFC3339 text format. */
		lastStartTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Last stop timestamp in RFC3339 text format. */
		lastStopTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Last suspended timestamp in RFC3339 text format. */
		lastSuspendedTimestamp: FormControl<string | null | undefined>,

		/** Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type: zones/us-central1-f/machineTypes/n1-standard-1 To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones/zone/machineTypes/custom-CPUS-MEMORY For example: zones/us-central1-f/machineTypes/custom-4-5120 For a full list of restrictions, read the Specifications for custom machine types. */
		machineType: FormControl<string | null | undefined>,

		/** Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". */
		minCpuPlatform: FormControl<string | null | undefined>,

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The private IPv6 google access type for the VM. If not specified, use INHERIT_FROM_SUBNETWORK as default. */
		privateIpv6GoogleAccess: FormControl<InstancePropertiesPrivateIpv6GoogleAccess | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzi: FormControl<boolean | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Source machine image */
		sourceMachineImage: FormControl<string | null | undefined>,

		/** [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity. */
		startRestricted: FormControl<boolean | null | undefined>,

		/** [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see Instance life cycle. */
		status: FormControl<InstanceStatus | null | undefined>,

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage: FormControl<string | null | undefined>,

		/** [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateInstanceFormGroup() {
		return new FormGroup<InstanceFormProperties>({
			canIpForward: new FormControl<boolean | null | undefined>(undefined),
			cpuPlatform: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			deletionProtection: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			hostname: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			keyRevocationActionType: new FormControl<InstancePropertiesKeyRevocationActionType | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			lastStartTimestamp: new FormControl<string | null | undefined>(undefined),
			lastStopTimestamp: new FormControl<string | null | undefined>(undefined),
			lastSuspendedTimestamp: new FormControl<string | null | undefined>(undefined),
			machineType: new FormControl<string | null | undefined>(undefined),
			minCpuPlatform: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			privateIpv6GoogleAccess: new FormControl<InstancePropertiesPrivateIpv6GoogleAccess | null | undefined>(undefined),
			satisfiesPzi: new FormControl<boolean | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sourceMachineImage: new FormControl<string | null | undefined>(undefined),
			startRestricted: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<InstanceStatus | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Additional instance params. */
	export interface InstanceParams {

		/** Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags?: {[id: string]: string };
	}

	/** Additional instance params. */
	export interface InstanceParamsFormProperties {

		/** Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty. */
		resourceManagerTags: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateInstanceParamsFormGroup() {
		return new FormGroup<InstanceParamsFormProperties>({
			resourceManagerTags: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls. */
	export interface ResourceStatus {

		/** [Output Only] An opaque ID of the host on which the VM is running. */
		physicalHost?: string | null;

		/** Upcoming Maintenance notification information. */
		upcomingMaintenance?: UpcomingMaintenance;
	}

	/** Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls. */
	export interface ResourceStatusFormProperties {

		/** [Output Only] An opaque ID of the host on which the VM is running. */
		physicalHost: FormControl<string | null | undefined>,
	}
	export function CreateResourceStatusFormGroup() {
		return new FormGroup<ResourceStatusFormProperties>({
			physicalHost: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Upcoming Maintenance notification information. */
	export interface UpcomingMaintenance {

		/** Indicates if the maintenance can be customer triggered. */
		canReschedule?: boolean | null;

		/** The latest time for the planned maintenance window to start. This timestamp value is in RFC3339 text format. */
		latestWindowStartTime?: string | null;
		maintenanceStatus?: UpcomingMaintenanceMaintenanceStatus | null;

		/** Defines the type of maintenance. */
		type?: UpcomingMaintenanceType | null;

		/** The time by which the maintenance disruption will be completed. This timestamp value is in RFC3339 text format. */
		windowEndTime?: string | null;

		/** The current start time of the maintenance window. This timestamp value is in RFC3339 text format. */
		windowStartTime?: string | null;
	}

	/** Upcoming Maintenance notification information. */
	export interface UpcomingMaintenanceFormProperties {

		/** Indicates if the maintenance can be customer triggered. */
		canReschedule: FormControl<boolean | null | undefined>,

		/** The latest time for the planned maintenance window to start. This timestamp value is in RFC3339 text format. */
		latestWindowStartTime: FormControl<string | null | undefined>,
		maintenanceStatus: FormControl<UpcomingMaintenanceMaintenanceStatus | null | undefined>,

		/** Defines the type of maintenance. */
		type: FormControl<UpcomingMaintenanceType | null | undefined>,

		/** The time by which the maintenance disruption will be completed. This timestamp value is in RFC3339 text format. */
		windowEndTime: FormControl<string | null | undefined>,

		/** The current start time of the maintenance window. This timestamp value is in RFC3339 text format. */
		windowStartTime: FormControl<string | null | undefined>,
	}
	export function CreateUpcomingMaintenanceFormGroup() {
		return new FormGroup<UpcomingMaintenanceFormProperties>({
			canReschedule: new FormControl<boolean | null | undefined>(undefined),
			latestWindowStartTime: new FormControl<string | null | undefined>(undefined),
			maintenanceStatus: new FormControl<UpcomingMaintenanceMaintenanceStatus | null | undefined>(undefined),
			type: new FormControl<UpcomingMaintenanceType | null | undefined>(undefined),
			windowEndTime: new FormControl<string | null | undefined>(undefined),
			windowStartTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum UpcomingMaintenanceMaintenanceStatus { ONGOING = 'ONGOING', PENDING = 'PENDING', UNKNOWN = 'UNKNOWN' }

	export enum UpcomingMaintenanceType { SCHEDULED = 'SCHEDULED', UNKNOWN_TYPE = 'UNKNOWN_TYPE', UNSCHEDULED = 'UNSCHEDULED' }


	/** The policy describes the baseline against which Instance boot integrity is measured. */
	export interface ShieldedInstanceIntegrityPolicy {

		/** Updates the integrity policy baseline using the measurements from the VM instance's most recent boot. */
		updateAutoLearnPolicy?: boolean | null;
	}

	/** The policy describes the baseline against which Instance boot integrity is measured. */
	export interface ShieldedInstanceIntegrityPolicyFormProperties {

		/** Updates the integrity policy baseline using the measurements from the VM instance's most recent boot. */
		updateAutoLearnPolicy: FormControl<boolean | null | undefined>,
	}
	export function CreateShieldedInstanceIntegrityPolicyFormGroup() {
		return new FormGroup<ShieldedInstanceIntegrityPolicyFormProperties>({
			updateAutoLearnPolicy: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum InstanceStatus { DEPROVISIONING = 'DEPROVISIONING', PROVISIONING = 'PROVISIONING', REPAIRING = 'REPAIRING', RUNNING = 'RUNNING', STAGING = 'STAGING', STOPPED = 'STOPPED', STOPPING = 'STOPPING', SUSPENDED = 'SUSPENDED', SUSPENDING = 'SUSPENDING', TERMINATED = 'TERMINATED' }

	export interface InstanceAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** An object that contains a list of instances scoped by zone. */
		items?: {[id: string]: InstancesScopedList };

		/** [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: InstanceAggregatedListWarning;
	}
	export interface InstanceAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** An object that contains a list of instances scoped by zone. */
		items: FormControl<{[id: string]: InstancesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceAggregatedListFormGroup() {
		return new FormGroup<InstanceAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: InstancesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesScopedList {

		/** [Output Only] A list of instances contained in this scope. */
		instances?: Array<Instance>;

		/** [Output Only] Informational warning which replaces the list of instances when the list is empty. */
		warning?: InstancesScopedListWarning;
	}
	export interface InstancesScopedListFormProperties {
	}
	export function CreateInstancesScopedListFormGroup() {
		return new FormGroup<InstancesScopedListFormProperties>({
		});

	}

	export interface InstancesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstancesScopedListWarningData?: Array<InstancesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstancesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstancesScopedListWarningFormGroup() {
		return new FormGroup<InstancesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstancesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstancesScopedListWarningDataFormGroup() {
		return new FormGroup<InstancesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceAggregatedListWarningData?: Array<InstanceAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceAggregatedListWarningFormGroup() {
		return new FormGroup<InstanceAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceAggregatedListWarningDataFormGroup() {
		return new FormGroup<InstanceAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceConsumptionData {
		consumptionInfo?: InstanceConsumptionInfo;

		/** Server-defined URL for the instance. */
		instance?: string | null;
	}
	export interface InstanceConsumptionDataFormProperties {

		/** Server-defined URL for the instance. */
		instance: FormControl<string | null | undefined>,
	}
	export function CreateInstanceConsumptionDataFormGroup() {
		return new FormGroup<InstanceConsumptionDataFormProperties>({
			instance: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceConsumptionInfo {

		/**
		 * The number of virtual CPUs that are available to the instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestCpus?: number | null;

		/**
		 * The amount of local SSD storage available to the instance, defined in GiB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		localSsdGb?: number | null;

		/**
		 * The amount of physical memory available to the instance, defined in MiB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		memoryMb?: number | null;

		/**
		 * The minimal guaranteed number of virtual CPUs that are reserved.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNodeCpus?: number | null;
	}
	export interface InstanceConsumptionInfoFormProperties {

		/**
		 * The number of virtual CPUs that are available to the instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestCpus: FormControl<number | null | undefined>,

		/**
		 * The amount of local SSD storage available to the instance, defined in GiB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		localSsdGb: FormControl<number | null | undefined>,

		/**
		 * The amount of physical memory available to the instance, defined in MiB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		memoryMb: FormControl<number | null | undefined>,

		/**
		 * The minimal guaranteed number of virtual CPUs that are reserved.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNodeCpus: FormControl<number | null | undefined>,
	}
	export function CreateInstanceConsumptionInfoFormGroup() {
		return new FormGroup<InstanceConsumptionInfoFormProperties>({
			guestCpus: new FormControl<number | null | undefined>(undefined),
			localSsdGb: new FormControl<number | null | undefined>(undefined),
			memoryMb: new FormControl<number | null | undefined>(undefined),
			minNodeCpus: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents an Instance Group resource. Instance Groups can be used to configure a target for load balancing. Instance groups can either be managed or unmanaged. To create managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead. Use zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups. For more information, read Instance groups. */
	export interface InstanceGroup {

		/** [Output Only] The creation timestamp for this instance group in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently. */
		fingerprint?: string | null;

		/** [Output Only] A unique identifier for this instance group, generated by the server. */
		id?: string | null;

		/** [Output Only] The resource type, which is always compute#instanceGroup for instance groups. */
		kind?: string | null;

		/** The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035. */
		name?: string | null;

		/** Assigns a name to a port number. For example: {name: "http", port: 80} This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: "app1", port: 8080}, {name: "app1", port: 8081}, {name: "app2", port: 8082}] Named ports apply to all instances in this instance group. */
		namedPorts?: Array<NamedPort>;

		/** [Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0). */
		network?: string | null;

		/** [Output Only] The URL of the region where the instance group is located (for regional resources). */
		region?: string | null;

		/** [Output Only] The URL for this instance group. The server generates this URL. */
		selfLink?: string | null;

		/**
		 * [Output Only] The total number of instances in the instance group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size?: number | null;

		/** [Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0). */
		subnetwork?: string | null;

		/** [Output Only] The URL of the zone where the instance group is located (for zonal resources). */
		zone?: string | null;
	}

	/** Represents an Instance Group resource. Instance Groups can be used to configure a target for load balancing. Instance groups can either be managed or unmanaged. To create managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead. Use zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups. For more information, read Instance groups. */
	export interface InstanceGroupFormProperties {

		/** [Output Only] The creation timestamp for this instance group in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] A unique identifier for this instance group, generated by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroup for instance groups. */
		kind: FormControl<string | null | undefined>,

		/** The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0). */
		network: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the region where the instance group is located (for regional resources). */
		region: FormControl<string | null | undefined>,

		/** [Output Only] The URL for this instance group. The server generates this URL. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * [Output Only] The total number of instances in the instance group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size: FormControl<number | null | undefined>,

		/** [Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0). */
		subnetwork: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the zone where the instance group is located (for zonal resources). */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupFormGroup() {
		return new FormGroup<InstanceGroupFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The named port. For example: <"http", 80>. */
	export interface NamedPort {

		/** The name for this named port. The name must be 1-63 characters long, and comply with RFC1035. */
		name?: string | null;

		/**
		 * The port number, which can be a value between 1 and 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port?: number | null;
	}

	/** The named port. For example: <"http", 80>. */
	export interface NamedPortFormProperties {

		/** The name for this named port. The name must be 1-63 characters long, and comply with RFC1035. */
		name: FormControl<string | null | undefined>,

		/**
		 * The port number, which can be a value between 1 and 65535.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		port: FormControl<number | null | undefined>,
	}
	export function CreateNamedPortFormGroup() {
		return new FormGroup<NamedPortFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupsScopedList resources. */
		items?: {[id: string]: InstanceGroupsScopedList };

		/** [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupAggregatedListWarning;
	}
	export interface InstanceGroupAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of InstanceGroupsScopedList resources. */
		items: FormControl<{[id: string]: InstanceGroupsScopedList } | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupAggregatedListFormGroup() {
		return new FormGroup<InstanceGroupAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: InstanceGroupsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupsScopedList {

		/** [Output Only] The list of instance groups that are contained in this scope. */
		instanceGroups?: Array<InstanceGroup>;

		/** [Output Only] An informational warning that replaces the list of instance groups when the list is empty. */
		warning?: InstanceGroupsScopedListWarning;
	}
	export interface InstanceGroupsScopedListFormProperties {
	}
	export function CreateInstanceGroupsScopedListFormGroup() {
		return new FormGroup<InstanceGroupsScopedListFormProperties>({
		});

	}

	export interface InstanceGroupsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupsScopedListWarningData?: Array<InstanceGroupsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupsScopedListWarningFormGroup() {
		return new FormGroup<InstanceGroupsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupsScopedListWarningDataFormGroup() {
		return new FormGroup<InstanceGroupsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupAggregatedListWarningData?: Array<InstanceGroupAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupAggregatedListWarningFormGroup() {
		return new FormGroup<InstanceGroupAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupAggregatedListWarningDataFormGroup() {
		return new FormGroup<InstanceGroupAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of InstanceGroup resources. */
	export interface InstanceGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroup resources. */
		items?: Array<InstanceGroup>;

		/** [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupListWarning;
	}

	/** A list of InstanceGroup resources. */
	export interface InstanceGroupListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupListFormGroup() {
		return new FormGroup<InstanceGroupListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupListWarningData?: Array<InstanceGroupListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupListWarningFormGroup() {
		return new FormGroup<InstanceGroupListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupListWarningDataFormGroup() {
		return new FormGroup<InstanceGroupListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Managed Instance Group resource. An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups. For zonal Managed Instance Group, use the instanceGroupManagers resource. For regional Managed Instance Group, use the regionInstanceGroupManagers resource. */
	export interface InstanceGroupManager {

		/** The autohealing policy for this managed instance group. You can specify only one value. */
		autoHealingPolicies?: Array<InstanceGroupManagerAutoHealingPolicy>;

		/** The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035. */
		baseInstanceName?: string | null;

		/** [Output Only] The creation timestamp for this managed instance group in RFC3339 text format. */
		creationTimestamp?: string | null;
		currentActions?: InstanceGroupManagerActionsSummary;

		/** An optional description of this resource. */
		description?: string | null;
		distributionPolicy?: DistributionPolicy;

		/** Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager. */
		fingerprint?: string | null;

		/** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
		id?: string | null;

		/** [Output Only] The URL of the Instance Group resource. */
		instanceGroup?: string | null;
		instanceLifecyclePolicy?: InstanceGroupManagerInstanceLifecyclePolicy;

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE. */
		instanceTemplate?: string | null;

		/** [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups. */
		kind?: string | null;

		/** Pagination behavior of the listManagedInstances API method for this managed instance group. */
		listManagedInstancesResults?: InstanceGroupManagerListManagedInstancesResults | null;

		/** The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035. */
		name?: string | null;

		/** Named ports configured for the Instance Groups complementary to this Instance Group Manager. */
		namedPorts?: Array<NamedPort>;

		/** [Output Only] The URL of the region where the managed instance group resides (for regional resources). */
		region?: string | null;

		/** [Output Only] The URL for this managed instance group. The server defines this URL. */
		selfLink?: string | null;
		statefulPolicy?: StatefulPolicy;
		status?: InstanceGroupManagerStatus;

		/** The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group. */
		targetPools?: Array<string>;

		/**
		 * The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		targetSize?: number | null;
		updatePolicy?: InstanceGroupManagerUpdatePolicy;

		/** Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates. */
		versions?: Array<InstanceGroupManagerVersion>;

		/** [Output Only] The URL of a zone where the managed instance group is located (for zonal resources). */
		zone?: string | null;
	}

	/** Represents a Managed Instance Group resource. An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups. For zonal Managed Instance Group, use the instanceGroupManagers resource. For regional Managed Instance Group, use the regionInstanceGroupManagers resource. */
	export interface InstanceGroupManagerFormProperties {

		/** The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035. */
		baseInstanceName: FormControl<string | null | undefined>,

		/** [Output Only] The creation timestamp for this managed instance group in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the Instance Group resource. */
		instanceGroup: FormControl<string | null | undefined>,

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE. */
		instanceTemplate: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups. */
		kind: FormControl<string | null | undefined>,

		/** Pagination behavior of the listManagedInstances API method for this managed instance group. */
		listManagedInstancesResults: FormControl<InstanceGroupManagerListManagedInstancesResults | null | undefined>,

		/** The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the region where the managed instance group resides (for regional resources). */
		region: FormControl<string | null | undefined>,

		/** [Output Only] The URL for this managed instance group. The server defines this URL. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		targetSize: FormControl<number | null | undefined>,

		/** [Output Only] The URL of a zone where the managed instance group is located (for zonal resources). */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerFormGroup() {
		return new FormGroup<InstanceGroupManagerFormProperties>({
			baseInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z][-a-z0-9]{0,57}')]),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			instanceGroup: new FormControl<string | null | undefined>(undefined),
			instanceTemplate: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			listManagedInstancesResults: new FormControl<InstanceGroupManagerListManagedInstancesResults | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			targetSize: new FormControl<number | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerAutoHealingPolicy {

		/** The URL for the health check that signals autohealing. */
		healthCheck?: string | null;

		/**
		 * The initial delay is the number of seconds that a new VM takes to initialize and run its startup script. During a VM's initial delay period, the MIG ignores unsuccessful health checks because the VM might be in the startup process. This prevents the MIG from prematurely recreating a VM. If the health check receives a healthy response during the initial delay, it indicates that the startup process is complete and the VM is ready. The value of initial delay must be between 0 and 3600 seconds. The default value is 0.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		initialDelaySec?: number | null;
	}
	export interface InstanceGroupManagerAutoHealingPolicyFormProperties {

		/** The URL for the health check that signals autohealing. */
		healthCheck: FormControl<string | null | undefined>,

		/**
		 * The initial delay is the number of seconds that a new VM takes to initialize and run its startup script. During a VM's initial delay period, the MIG ignores unsuccessful health checks because the VM might be in the startup process. This prevents the MIG from prematurely recreating a VM. If the health check receives a healthy response during the initial delay, it indicates that the startup process is complete and the VM is ready. The value of initial delay must be between 0 and 3600 seconds. The default value is 0.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		initialDelaySec: FormControl<number | null | undefined>,
	}
	export function CreateInstanceGroupManagerAutoHealingPolicyFormGroup() {
		return new FormGroup<InstanceGroupManagerAutoHealingPolicyFormProperties>({
			healthCheck: new FormControl<string | null | undefined>(undefined),
			initialDelaySec: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerActionsSummary {

		/**
		 * [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		abandoning?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		creating?: number | null;

		/**
		 * [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		creatingWithoutRetries?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		deleting?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		none?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		recreating?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		refreshing?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		restarting?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be resumed or are currently being resumed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		resuming?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be started or are currently being started.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		starting?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be stopped or are currently being stopped.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		stopping?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be suspended or are currently being suspended.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		suspending?: number | null;

		/**
		 * [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		verifying?: number | null;
	}
	export interface InstanceGroupManagerActionsSummaryFormProperties {

		/**
		 * [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		abandoning: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		creating: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		creatingWithoutRetries: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		deleting: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		none: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		recreating: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		refreshing: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		restarting: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be resumed or are currently being resumed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		resuming: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be started or are currently being started.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		starting: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be stopped or are currently being stopped.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		stopping: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are scheduled to be suspended or are currently being suspended.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		suspending: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		verifying: FormControl<number | null | undefined>,
	}
	export function CreateInstanceGroupManagerActionsSummaryFormGroup() {
		return new FormGroup<InstanceGroupManagerActionsSummaryFormProperties>({
			abandoning: new FormControl<number | null | undefined>(undefined),
			creating: new FormControl<number | null | undefined>(undefined),
			creatingWithoutRetries: new FormControl<number | null | undefined>(undefined),
			deleting: new FormControl<number | null | undefined>(undefined),
			none: new FormControl<number | null | undefined>(undefined),
			recreating: new FormControl<number | null | undefined>(undefined),
			refreshing: new FormControl<number | null | undefined>(undefined),
			restarting: new FormControl<number | null | undefined>(undefined),
			resuming: new FormControl<number | null | undefined>(undefined),
			starting: new FormControl<number | null | undefined>(undefined),
			stopping: new FormControl<number | null | undefined>(undefined),
			suspending: new FormControl<number | null | undefined>(undefined),
			verifying: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerInstanceLifecyclePolicy {

		/** A bit indicating whether to forcefully apply the group's latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. Instead, configuration updates are applied according to the group's update policy. - YES: If configuration updates are available, they are applied during repair. */
		forceUpdateOnRepair?: InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepair | null;
	}
	export interface InstanceGroupManagerInstanceLifecyclePolicyFormProperties {

		/** A bit indicating whether to forcefully apply the group's latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. Instead, configuration updates are applied according to the group's update policy. - YES: If configuration updates are available, they are applied during repair. */
		forceUpdateOnRepair: FormControl<InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepair | null | undefined>,
	}
	export function CreateInstanceGroupManagerInstanceLifecyclePolicyFormGroup() {
		return new FormGroup<InstanceGroupManagerInstanceLifecyclePolicyFormProperties>({
			forceUpdateOnRepair: new FormControl<InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepair | null | undefined>(undefined),
		});

	}

	export enum InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepair { NO = 'NO', YES = 'YES' }

	export enum InstanceGroupManagerListManagedInstancesResults { PAGELESS = 'PAGELESS', PAGINATED = 'PAGINATED' }

	export interface StatefulPolicy {

		/** Configuration of preserved resources. */
		preservedState?: StatefulPolicyPreservedState;
	}
	export interface StatefulPolicyFormProperties {
	}
	export function CreateStatefulPolicyFormGroup() {
		return new FormGroup<StatefulPolicyFormProperties>({
		});

	}


	/** Configuration of preserved resources. */
	export interface StatefulPolicyPreservedState {

		/** Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks. */
		disks?: {[id: string]: StatefulPolicyPreservedStateDiskDevice };

		/** External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. */
		externalIPs?: {[id: string]: StatefulPolicyPreservedStateNetworkIp };

		/** Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. */
		internalIPs?: {[id: string]: StatefulPolicyPreservedStateNetworkIp };
	}

	/** Configuration of preserved resources. */
	export interface StatefulPolicyPreservedStateFormProperties {

		/** Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks. */
		disks: FormControl<{[id: string]: StatefulPolicyPreservedStateDiskDevice } | null | undefined>,

		/** External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. */
		externalIPs: FormControl<{[id: string]: StatefulPolicyPreservedStateNetworkIp } | null | undefined>,

		/** Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. */
		internalIPs: FormControl<{[id: string]: StatefulPolicyPreservedStateNetworkIp } | null | undefined>,
	}
	export function CreateStatefulPolicyPreservedStateFormGroup() {
		return new FormGroup<StatefulPolicyPreservedStateFormProperties>({
			disks: new FormControl<{[id: string]: StatefulPolicyPreservedStateDiskDevice } | null | undefined>(undefined),
			externalIPs: new FormControl<{[id: string]: StatefulPolicyPreservedStateNetworkIp } | null | undefined>(undefined),
			internalIPs: new FormControl<{[id: string]: StatefulPolicyPreservedStateNetworkIp } | null | undefined>(undefined),
		});

	}

	export interface StatefulPolicyPreservedStateDiskDevice {

		/** These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted. */
		autoDelete?: StatefulPolicyPreservedStateDiskDeviceAutoDelete | null;
	}
	export interface StatefulPolicyPreservedStateDiskDeviceFormProperties {

		/** These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted. */
		autoDelete: FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>,
	}
	export function CreateStatefulPolicyPreservedStateDiskDeviceFormGroup() {
		return new FormGroup<StatefulPolicyPreservedStateDiskDeviceFormProperties>({
			autoDelete: new FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>(undefined),
		});

	}

	export enum StatefulPolicyPreservedStateDiskDeviceAutoDelete { NEVER = 'NEVER', ON_PERMANENT_INSTANCE_DELETION = 'ON_PERMANENT_INSTANCE_DELETION' }

	export interface StatefulPolicyPreservedStateNetworkIp {

		/** These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. */
		autoDelete?: StatefulPolicyPreservedStateDiskDeviceAutoDelete | null;
	}
	export interface StatefulPolicyPreservedStateNetworkIpFormProperties {

		/** These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. */
		autoDelete: FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>,
	}
	export function CreateStatefulPolicyPreservedStateNetworkIpFormGroup() {
		return new FormGroup<StatefulPolicyPreservedStateNetworkIpFormProperties>({
			autoDelete: new FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerStatus {

		/** [Output Only] The URL of the Autoscaler that targets this instance group manager. */
		autoscaler?: string | null;

		/** [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified. */
		isStable?: boolean | null;
		stateful?: InstanceGroupManagerStatusStateful;
		versionTarget?: InstanceGroupManagerStatusVersionTarget;
	}
	export interface InstanceGroupManagerStatusFormProperties {

		/** [Output Only] The URL of the Autoscaler that targets this instance group manager. */
		autoscaler: FormControl<string | null | undefined>,

		/** [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified. */
		isStable: FormControl<boolean | null | undefined>,
	}
	export function CreateInstanceGroupManagerStatusFormGroup() {
		return new FormGroup<InstanceGroupManagerStatusFormProperties>({
			autoscaler: new FormControl<string | null | undefined>(undefined),
			isStable: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerStatusStateful {

		/** [Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions. */
		hasStatefulConfig?: boolean | null;
		perInstanceConfigs?: InstanceGroupManagerStatusStatefulPerInstanceConfigs;
	}
	export interface InstanceGroupManagerStatusStatefulFormProperties {

		/** [Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions. */
		hasStatefulConfig: FormControl<boolean | null | undefined>,
	}
	export function CreateInstanceGroupManagerStatusStatefulFormGroup() {
		return new FormGroup<InstanceGroupManagerStatusStatefulFormProperties>({
			hasStatefulConfig: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerStatusStatefulPerInstanceConfigs {

		/** A bit indicating if all of the group's per-instance configurations (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs. */
		allEffective?: boolean | null;
	}
	export interface InstanceGroupManagerStatusStatefulPerInstanceConfigsFormProperties {

		/** A bit indicating if all of the group's per-instance configurations (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs. */
		allEffective: FormControl<boolean | null | undefined>,
	}
	export function CreateInstanceGroupManagerStatusStatefulPerInstanceConfigsFormGroup() {
		return new FormGroup<InstanceGroupManagerStatusStatefulPerInstanceConfigsFormProperties>({
			allEffective: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerStatusVersionTarget {

		/** [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager. */
		isReached?: boolean | null;
	}
	export interface InstanceGroupManagerStatusVersionTargetFormProperties {

		/** [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager. */
		isReached: FormControl<boolean | null | undefined>,
	}
	export function CreateInstanceGroupManagerStatusVersionTargetFormGroup() {
		return new FormGroup<InstanceGroupManagerStatusVersionTargetFormProperties>({
			isReached: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerUpdatePolicy {

		/** The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled. */
		instanceRedistributionType?: InstanceGroupManagerUpdatePolicyInstanceRedistributionType | null;

		/** Encapsulates numeric value that can be either absolute or relative. */
		maxSurge?: FixedOrPercent;

		/** Encapsulates numeric value that can be either absolute or relative. */
		maxUnavailable?: FixedOrPercent;

		/** Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes. */
		minimalAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/** Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to avoid restarting the VM and to limit disruption as much as possible. RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all. */
		mostDisruptiveAllowedAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/** What action should be used to replace instances. See minimal_action.REPLACE */
		replacementMethod?: InstanceGroupManagerUpdatePolicyReplacementMethod | null;

		/** The type of update process. You can specify either PROACTIVE so that the MIG automatically updates VMs to the latest configurations or OPPORTUNISTIC so that you can select the VMs that you want to update. */
		type?: InstanceGroupManagerUpdatePolicyType | null;
	}
	export interface InstanceGroupManagerUpdatePolicyFormProperties {

		/** The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled. */
		instanceRedistributionType: FormControl<InstanceGroupManagerUpdatePolicyInstanceRedistributionType | null | undefined>,

		/** Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes. */
		minimalAction: FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>,

		/** Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to avoid restarting the VM and to limit disruption as much as possible. RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all. */
		mostDisruptiveAllowedAction: FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>,

		/** What action should be used to replace instances. See minimal_action.REPLACE */
		replacementMethod: FormControl<InstanceGroupManagerUpdatePolicyReplacementMethod | null | undefined>,

		/** The type of update process. You can specify either PROACTIVE so that the MIG automatically updates VMs to the latest configurations or OPPORTUNISTIC so that you can select the VMs that you want to update. */
		type: FormControl<InstanceGroupManagerUpdatePolicyType | null | undefined>,
	}
	export function CreateInstanceGroupManagerUpdatePolicyFormGroup() {
		return new FormGroup<InstanceGroupManagerUpdatePolicyFormProperties>({
			instanceRedistributionType: new FormControl<InstanceGroupManagerUpdatePolicyInstanceRedistributionType | null | undefined>(undefined),
			minimalAction: new FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>(undefined),
			mostDisruptiveAllowedAction: new FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>(undefined),
			replacementMethod: new FormControl<InstanceGroupManagerUpdatePolicyReplacementMethod | null | undefined>(undefined),
			type: new FormControl<InstanceGroupManagerUpdatePolicyType | null | undefined>(undefined),
		});

	}

	export enum InstanceGroupManagerUpdatePolicyInstanceRedistributionType { NONE = 'NONE', PROACTIVE = 'PROACTIVE' }

	export enum InstanceGroupManagerUpdatePolicyMinimalAction { NONE = 'NONE', REFRESH = 'REFRESH', REPLACE = 'REPLACE', RESTART = 'RESTART' }

	export enum InstanceGroupManagerUpdatePolicyReplacementMethod { RECREATE = 'RECREATE', SUBSTITUTE = 'SUBSTITUTE' }

	export enum InstanceGroupManagerUpdatePolicyType { OPPORTUNISTIC = 'OPPORTUNISTIC', PROACTIVE = 'PROACTIVE' }

	export interface InstanceGroupManagerVersion {

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached. */
		instanceTemplate?: string | null;

		/** Name of the version. Unique among all versions in the scope of this managed instance group. */
		name?: string | null;

		/** Encapsulates numeric value that can be either absolute or relative. */
		targetSize?: FixedOrPercent;
	}
	export interface InstanceGroupManagerVersionFormProperties {

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached. */
		instanceTemplate: FormControl<string | null | undefined>,

		/** Name of the version. Unique among all versions in the scope of this managed instance group. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerVersionFormGroup() {
		return new FormGroup<InstanceGroupManagerVersionFormProperties>({
			instanceTemplate: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupManagersScopedList resources. */
		items?: {[id: string]: InstanceGroupManagersScopedList };

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupManagerAggregatedListWarning;
	}
	export interface InstanceGroupManagerAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of InstanceGroupManagersScopedList resources. */
		items: FormControl<{[id: string]: InstanceGroupManagersScopedList } | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerAggregatedListFormGroup() {
		return new FormGroup<InstanceGroupManagerAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: InstanceGroupManagersScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersScopedList {

		/** [Output Only] The list of managed instance groups that are contained in the specified project and zone. */
		instanceGroupManagers?: Array<InstanceGroupManager>;

		/** [Output Only] The warning that replaces the list of managed instance groups when the list is empty. */
		warning?: InstanceGroupManagersScopedListWarning;
	}
	export interface InstanceGroupManagersScopedListFormProperties {
	}
	export function CreateInstanceGroupManagersScopedListFormGroup() {
		return new FormGroup<InstanceGroupManagersScopedListFormProperties>({
		});

	}

	export interface InstanceGroupManagersScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupManagersScopedListWarningData?: Array<InstanceGroupManagersScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupManagersScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersScopedListWarningFormGroup() {
		return new FormGroup<InstanceGroupManagersScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupManagersScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersScopedListWarningDataFormGroup() {
		return new FormGroup<InstanceGroupManagersScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupManagerAggregatedListWarningData?: Array<InstanceGroupManagerAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupManagerAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerAggregatedListWarningFormGroup() {
		return new FormGroup<InstanceGroupManagerAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupManagerAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerAggregatedListWarningDataFormGroup() {
		return new FormGroup<InstanceGroupManagerAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** [Output Only] A list of managed instance groups. */
	export interface InstanceGroupManagerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupManager resources. */
		items?: Array<InstanceGroupManager>;

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupManagerListWarning;
	}

	/** [Output Only] A list of managed instance groups. */
	export interface InstanceGroupManagerListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerListFormGroup() {
		return new FormGroup<InstanceGroupManagerListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupManagerListWarningData?: Array<InstanceGroupManagerListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupManagerListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerListWarningFormGroup() {
		return new FormGroup<InstanceGroupManagerListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupManagerListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagerListWarningDataFormGroup() {
		return new FormGroup<InstanceGroupManagerListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersAbandonInstancesRequest {

		/** The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;
	}
	export interface InstanceGroupManagersAbandonInstancesRequestFormProperties {
	}
	export function CreateInstanceGroupManagersAbandonInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersAbandonInstancesRequestFormProperties>({
		});

	}


	/** InstanceGroupManagers.applyUpdatesToInstances */
	export interface InstanceGroupManagersApplyUpdatesRequest {

		/** Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request. */
		allInstances?: boolean | null;

		/** The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;

		/** The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update. */
		minimalAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/** The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail. */
		mostDisruptiveAllowedAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;
	}

	/** InstanceGroupManagers.applyUpdatesToInstances */
	export interface InstanceGroupManagersApplyUpdatesRequestFormProperties {

		/** Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request. */
		allInstances: FormControl<boolean | null | undefined>,

		/** The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update. */
		minimalAction: FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>,

		/** The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail. */
		mostDisruptiveAllowedAction: FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>,
	}
	export function CreateInstanceGroupManagersApplyUpdatesRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersApplyUpdatesRequestFormProperties>({
			allInstances: new FormControl<boolean | null | undefined>(undefined),
			minimalAction: new FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>(undefined),
			mostDisruptiveAllowedAction: new FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>(undefined),
		});

	}


	/** InstanceGroupManagers.createInstances */
	export interface InstanceGroupManagersCreateInstancesRequest {

		/** [Required] List of specifications of per-instance configs. */
		instances?: Array<PerInstanceConfig>;
	}

	/** InstanceGroupManagers.createInstances */
	export interface InstanceGroupManagersCreateInstancesRequestFormProperties {
	}
	export function CreateInstanceGroupManagersCreateInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersCreateInstancesRequestFormProperties>({
		});

	}

	export interface PerInstanceConfig {

		/** Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance configuration or the field needs to be unset. */
		fingerprint?: string | null;

		/** The name of a per-instance configuration and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance configuration with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance configconfiguration for a VM instance that either doesn't exist or is not part of the group will result in an error. */
		name?: string | null;

		/** Preserved state for a given instance. */
		preservedState?: PreservedState;

		/** The status of applying this per-instance configuration on the corresponding managed instance. */
		status?: PerInstanceConfigStatus | null;
	}
	export interface PerInstanceConfigFormProperties {

		/** Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance configuration or the field needs to be unset. */
		fingerprint: FormControl<string | null | undefined>,

		/** The name of a per-instance configuration and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance configuration with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance configconfiguration for a VM instance that either doesn't exist or is not part of the group will result in an error. */
		name: FormControl<string | null | undefined>,

		/** The status of applying this per-instance configuration on the corresponding managed instance. */
		status: FormControl<PerInstanceConfigStatus | null | undefined>,
	}
	export function CreatePerInstanceConfigFormGroup() {
		return new FormGroup<PerInstanceConfigFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<PerInstanceConfigStatus | null | undefined>(undefined),
		});

	}


	/** Preserved state for a given instance. */
	export interface PreservedState {

		/** Preserved disks defined for this instance. This map is keyed with the device names of the disks. */
		disks?: {[id: string]: PreservedStatePreservedDisk };

		/** Preserved external IPs defined for this instance. This map is keyed with the name of the network interface. */
		externalIPs?: {[id: string]: PreservedStatePreservedNetworkIp };

		/** Preserved internal IPs defined for this instance. This map is keyed with the name of the network interface. */
		internalIPs?: {[id: string]: PreservedStatePreservedNetworkIp };

		/** Preserved metadata defined for this instance. */
		metadata?: {[id: string]: string };
	}

	/** Preserved state for a given instance. */
	export interface PreservedStateFormProperties {

		/** Preserved disks defined for this instance. This map is keyed with the device names of the disks. */
		disks: FormControl<{[id: string]: PreservedStatePreservedDisk } | null | undefined>,

		/** Preserved external IPs defined for this instance. This map is keyed with the name of the network interface. */
		externalIPs: FormControl<{[id: string]: PreservedStatePreservedNetworkIp } | null | undefined>,

		/** Preserved internal IPs defined for this instance. This map is keyed with the name of the network interface. */
		internalIPs: FormControl<{[id: string]: PreservedStatePreservedNetworkIp } | null | undefined>,

		/** Preserved metadata defined for this instance. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreatePreservedStateFormGroup() {
		return new FormGroup<PreservedStateFormProperties>({
			disks: new FormControl<{[id: string]: PreservedStatePreservedDisk } | null | undefined>(undefined),
			externalIPs: new FormControl<{[id: string]: PreservedStatePreservedNetworkIp } | null | undefined>(undefined),
			internalIPs: new FormControl<{[id: string]: PreservedStatePreservedNetworkIp } | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface PreservedStatePreservedDisk {

		/** These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted. */
		autoDelete?: StatefulPolicyPreservedStateDiskDeviceAutoDelete | null;

		/** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
		mode?: AttachedDiskMode | null;

		/** The URL of the disk resource that is stateful and should be attached to the VM instance. */
		source?: string | null;
	}
	export interface PreservedStatePreservedDiskFormProperties {

		/** These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted. */
		autoDelete: FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>,

		/** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
		mode: FormControl<AttachedDiskMode | null | undefined>,

		/** The URL of the disk resource that is stateful and should be attached to the VM instance. */
		source: FormControl<string | null | undefined>,
	}
	export function CreatePreservedStatePreservedDiskFormGroup() {
		return new FormGroup<PreservedStatePreservedDiskFormProperties>({
			autoDelete: new FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>(undefined),
			mode: new FormControl<AttachedDiskMode | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PreservedStatePreservedNetworkIp {

		/** These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. */
		autoDelete?: StatefulPolicyPreservedStateDiskDeviceAutoDelete | null;
		ipAddress?: PreservedStatePreservedNetworkIpIpAddress;
	}
	export interface PreservedStatePreservedNetworkIpFormProperties {

		/** These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. */
		autoDelete: FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>,
	}
	export function CreatePreservedStatePreservedNetworkIpFormGroup() {
		return new FormGroup<PreservedStatePreservedNetworkIpFormProperties>({
			autoDelete: new FormControl<StatefulPolicyPreservedStateDiskDeviceAutoDelete | null | undefined>(undefined),
		});

	}

	export interface PreservedStatePreservedNetworkIpIpAddress {

		/** The URL of the reservation for this IP address. */
		address?: string | null;

		/** An IPv4 internal network address to assign to the instance for this network interface. */
		literal?: string | null;
	}
	export interface PreservedStatePreservedNetworkIpIpAddressFormProperties {

		/** The URL of the reservation for this IP address. */
		address: FormControl<string | null | undefined>,

		/** An IPv4 internal network address to assign to the instance for this network interface. */
		literal: FormControl<string | null | undefined>,
	}
	export function CreatePreservedStatePreservedNetworkIpIpAddressFormGroup() {
		return new FormGroup<PreservedStatePreservedNetworkIpIpAddressFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			literal: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PerInstanceConfigStatus { APPLYING = 'APPLYING', DELETING = 'DELETING', EFFECTIVE = 'EFFECTIVE', NONE = 'NONE', UNAPPLIED = 'UNAPPLIED', UNAPPLIED_DELETION = 'UNAPPLIED_DELETION' }

	export interface InstanceGroupManagersDeleteInstancesRequest {

		/** The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. Queued instances do not have URL and can be deleted only by name. One cannot specify both URLs and names in a single request. */
		instances?: Array<string>;

		/** Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group's zone or region. */
		skipInstancesOnValidationError?: boolean | null;
	}
	export interface InstanceGroupManagersDeleteInstancesRequestFormProperties {

		/** Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group's zone or region. */
		skipInstancesOnValidationError: FormControl<boolean | null | undefined>,
	}
	export function CreateInstanceGroupManagersDeleteInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersDeleteInstancesRequestFormProperties>({
			skipInstancesOnValidationError: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** InstanceGroupManagers.deletePerInstanceConfigs */
	export interface InstanceGroupManagersDeletePerInstanceConfigsReq {

		/** The list of instance names for which we want to delete per-instance configs on this managed instance group. */
		names?: Array<string>;
	}

	/** InstanceGroupManagers.deletePerInstanceConfigs */
	export interface InstanceGroupManagersDeletePerInstanceConfigsReqFormProperties {
	}
	export function CreateInstanceGroupManagersDeletePerInstanceConfigsReqFormGroup() {
		return new FormGroup<InstanceGroupManagersDeletePerInstanceConfigsReqFormProperties>({
		});

	}

	export interface InstanceGroupManagersListErrorsResponse {

		/** [Output Only] The list of errors of the managed instance group. */
		items?: Array<InstanceManagedByIgmError>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}
	export interface InstanceGroupManagersListErrorsResponseFormProperties {

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersListErrorsResponseFormGroup() {
		return new FormGroup<InstanceGroupManagersListErrorsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceManagedByIgmError {
		error?: InstanceManagedByIgmErrorManagedInstanceError;
		instanceActionDetails?: InstanceManagedByIgmErrorInstanceActionDetails;

		/** [Output Only] The time that this error occurred. This value is in RFC3339 text format. */
		timestamp?: string | null;
	}
	export interface InstanceManagedByIgmErrorFormProperties {

		/** [Output Only] The time that this error occurred. This value is in RFC3339 text format. */
		timestamp: FormControl<string | null | undefined>,
	}
	export function CreateInstanceManagedByIgmErrorFormGroup() {
		return new FormGroup<InstanceManagedByIgmErrorFormProperties>({
			timestamp: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceManagedByIgmErrorManagedInstanceError {

		/** [Output Only] Error code. */
		code?: string | null;

		/** [Output Only] Error message. */
		message?: string | null;
	}
	export interface InstanceManagedByIgmErrorManagedInstanceErrorFormProperties {

		/** [Output Only] Error code. */
		code: FormControl<string | null | undefined>,

		/** [Output Only] Error message. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceManagedByIgmErrorManagedInstanceErrorFormGroup() {
		return new FormGroup<InstanceManagedByIgmErrorManagedInstanceErrorFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceManagedByIgmErrorInstanceActionDetails {

		/** [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values: */
		action?: InstanceManagedByIgmErrorInstanceActionDetailsAction | null;

		/** [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created. */
		instance?: string | null;
		version?: ManagedInstanceVersion;
	}
	export interface InstanceManagedByIgmErrorInstanceActionDetailsFormProperties {

		/** [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values: */
		action: FormControl<InstanceManagedByIgmErrorInstanceActionDetailsAction | null | undefined>,

		/** [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created. */
		instance: FormControl<string | null | undefined>,
	}
	export function CreateInstanceManagedByIgmErrorInstanceActionDetailsFormGroup() {
		return new FormGroup<InstanceManagedByIgmErrorInstanceActionDetailsFormProperties>({
			action: new FormControl<InstanceManagedByIgmErrorInstanceActionDetailsAction | null | undefined>(undefined),
			instance: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum InstanceManagedByIgmErrorInstanceActionDetailsAction { ABANDONING = 'ABANDONING', CREATING = 'CREATING', CREATING_WITHOUT_RETRIES = 'CREATING_WITHOUT_RETRIES', DELETING = 'DELETING', NONE = 'NONE', RECREATING = 'RECREATING', REFRESHING = 'REFRESHING', RESTARTING = 'RESTARTING', RESUMING = 'RESUMING', STARTING = 'STARTING', STOPPING = 'STOPPING', SUSPENDING = 'SUSPENDING', VERIFYING = 'VERIFYING' }

	export interface ManagedInstanceVersion {

		/** [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }. */
		instanceTemplate?: string | null;

		/** [Output Only] Name of the version. */
		name?: string | null;
	}
	export interface ManagedInstanceVersionFormProperties {

		/** [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }. */
		instanceTemplate: FormControl<string | null | undefined>,

		/** [Output Only] Name of the version. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateManagedInstanceVersionFormGroup() {
		return new FormGroup<ManagedInstanceVersionFormProperties>({
			instanceTemplate: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersListManagedInstancesResponse {

		/** [Output Only] The list of instances in the managed instance group. */
		managedInstances?: Array<ManagedInstance>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}
	export interface InstanceGroupManagersListManagedInstancesResponseFormProperties {

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersListManagedInstancesResponseFormGroup() {
		return new FormGroup<InstanceGroupManagersListManagedInstancesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A Managed Instance resource. */
	export interface ManagedInstance {

		/** [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead. - RECREATING The managed instance group is recreating this instance. - DELETING The managed instance group is permanently deleting this instance. - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. - RESTARTING The managed instance group is restarting the instance. - REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. - VERIFYING The managed instance group has created the instance and it is in the process of being verified. */
		currentAction?: InstanceManagedByIgmErrorInstanceActionDetailsAction | null;

		/** [Output only] The unique identifier for this resource. This field is empty when instance does not exist. */
		id?: string | null;

		/** [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created. */
		instance?: string | null;

		/** [Output Only] Health state of the instance per health-check. */
		instanceHealth?: Array<ManagedInstanceInstanceHealth>;

		/** [Output Only] The status of the instance. This field is empty when the instance does not exist. */
		instanceStatus?: InstanceStatus | null;
		lastAttempt?: ManagedInstanceLastAttempt;

		/** [Output Only] The name of the instance. The name always exists even if the instance has not yet been created. */
		name?: string | null;

		/** Preserved state for a given instance. */
		preservedStateFromConfig?: PreservedState;

		/** Preserved state for a given instance. */
		preservedStateFromPolicy?: PreservedState;
		version?: ManagedInstanceVersion;
	}

	/** A Managed Instance resource. */
	export interface ManagedInstanceFormProperties {

		/** [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead. - RECREATING The managed instance group is recreating this instance. - DELETING The managed instance group is permanently deleting this instance. - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. - RESTARTING The managed instance group is restarting the instance. - REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. - VERIFYING The managed instance group has created the instance and it is in the process of being verified. */
		currentAction: FormControl<InstanceManagedByIgmErrorInstanceActionDetailsAction | null | undefined>,

		/** [Output only] The unique identifier for this resource. This field is empty when instance does not exist. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created. */
		instance: FormControl<string | null | undefined>,

		/** [Output Only] The status of the instance. This field is empty when the instance does not exist. */
		instanceStatus: FormControl<InstanceStatus | null | undefined>,

		/** [Output Only] The name of the instance. The name always exists even if the instance has not yet been created. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateManagedInstanceFormGroup() {
		return new FormGroup<ManagedInstanceFormProperties>({
			currentAction: new FormControl<InstanceManagedByIgmErrorInstanceActionDetailsAction | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			instance: new FormControl<string | null | undefined>(undefined),
			instanceStatus: new FormControl<InstanceStatus | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ManagedInstanceInstanceHealth {

		/** [Output Only] The current detailed instance health state. */
		detailedHealthState?: ManagedInstanceInstanceHealthDetailedHealthState | null;

		/** [Output Only] The URL for the health check that verifies whether the instance is healthy. */
		healthCheck?: string | null;
	}
	export interface ManagedInstanceInstanceHealthFormProperties {

		/** [Output Only] The current detailed instance health state. */
		detailedHealthState: FormControl<ManagedInstanceInstanceHealthDetailedHealthState | null | undefined>,

		/** [Output Only] The URL for the health check that verifies whether the instance is healthy. */
		healthCheck: FormControl<string | null | undefined>,
	}
	export function CreateManagedInstanceInstanceHealthFormGroup() {
		return new FormGroup<ManagedInstanceInstanceHealthFormProperties>({
			detailedHealthState: new FormControl<ManagedInstanceInstanceHealthDetailedHealthState | null | undefined>(undefined),
			healthCheck: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ManagedInstanceInstanceHealthDetailedHealthState { DRAINING = 'DRAINING', HEALTHY = 'HEALTHY', TIMEOUT = 'TIMEOUT', UNHEALTHY = 'UNHEALTHY', UNKNOWN = 'UNKNOWN' }

	export interface ManagedInstanceLastAttempt {

		/** [Output Only] Encountered errors during the last attempt to create or delete the instance. */
		errors?: ManagedInstanceLastAttemptErrors;
	}
	export interface ManagedInstanceLastAttemptFormProperties {
	}
	export function CreateManagedInstanceLastAttemptFormGroup() {
		return new FormGroup<ManagedInstanceLastAttemptFormProperties>({
		});

	}

	export interface ManagedInstanceLastAttemptErrors {

		/** [Output Only] The array of errors encountered while processing this operation. */
		ManagedInstanceLastAttemptErrorsErrors?: Array<ManagedInstanceLastAttemptErrorsErrors>;
	}
	export interface ManagedInstanceLastAttemptErrorsFormProperties {
	}
	export function CreateManagedInstanceLastAttemptErrorsFormGroup() {
		return new FormGroup<ManagedInstanceLastAttemptErrorsFormProperties>({
		});

	}

	export interface ManagedInstanceLastAttemptErrorsErrors {

		/** [Output Only] The error type identifier for this error. */
		code?: string | null;

		/** [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED. */
		ManagedInstanceLastAttemptErrorsErrorsErrorDetails?: Array<ManagedInstanceLastAttemptErrorsErrorsErrorDetails>;

		/** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
		location?: string | null;

		/** [Output Only] An optional, human-readable error message. */
		message?: string | null;
	}
	export interface ManagedInstanceLastAttemptErrorsErrorsFormProperties {

		/** [Output Only] The error type identifier for this error. */
		code: FormControl<string | null | undefined>,

		/** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
		location: FormControl<string | null | undefined>,

		/** [Output Only] An optional, human-readable error message. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateManagedInstanceLastAttemptErrorsErrorsFormGroup() {
		return new FormGroup<ManagedInstanceLastAttemptErrorsErrorsFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ManagedInstanceLastAttemptErrorsErrorsErrorDetails {

		/** Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } } */
		errorInfo?: ErrorInfo;

		/** Provides links to documentation or for performing an out of band action. For example, if a quota check failed with an error indicating the calling project hasn't enabled the accessed service, this can contain a URL pointing directly to the right place in the developer console to flip the bit. */
		help?: Help;

		/** Provides a localized error message that is safe to return to the user which can be attached to an RPC error. */
		localizedMessage?: LocalizedMessage;

		/** Additional details for quota exceeded error for resource quota. */
		quotaInfo?: QuotaExceededInfo;
	}
	export interface ManagedInstanceLastAttemptErrorsErrorsErrorDetailsFormProperties {
	}
	export function CreateManagedInstanceLastAttemptErrorsErrorsErrorDetailsFormGroup() {
		return new FormGroup<ManagedInstanceLastAttemptErrorsErrorsErrorDetailsFormProperties>({
		});

	}


	/** Provides a localized error message that is safe to return to the user which can be attached to an RPC error. */
	export interface LocalizedMessage {

		/** The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX" */
		locale?: string | null;

		/** The localized error message in the above locale. */
		message?: string | null;
	}

	/** Provides a localized error message that is safe to return to the user which can be attached to an RPC error. */
	export interface LocalizedMessageFormProperties {

		/** The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX" */
		locale: FormControl<string | null | undefined>,

		/** The localized error message in the above locale. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateLocalizedMessageFormGroup() {
		return new FormGroup<LocalizedMessageFormProperties>({
			locale: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Additional details for quota exceeded error for resource quota. */
	export interface QuotaExceededInfo {

		/** The map holding related quota dimensions. */
		dimensions?: {[id: string]: string };

		/**
		 * Future quota limit being rolled out. The limit's unit depends on the quota type or metric.
		 * Type: double
		 */
		futureLimit?: number | null;

		/**
		 * Current effective quota limit. The limit's unit depends on the quota type or metric.
		 * Type: double
		 */
		limit?: number | null;

		/** The name of the quota limit. */
		limitName?: string | null;

		/** The Compute Engine quota metric name. */
		metricName?: string | null;

		/** Rollout status of the future quota limit. */
		rolloutStatus?: QuotaExceededInfoRolloutStatus | null;
	}

	/** Additional details for quota exceeded error for resource quota. */
	export interface QuotaExceededInfoFormProperties {

		/** The map holding related quota dimensions. */
		dimensions: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * Future quota limit being rolled out. The limit's unit depends on the quota type or metric.
		 * Type: double
		 */
		futureLimit: FormControl<number | null | undefined>,

		/**
		 * Current effective quota limit. The limit's unit depends on the quota type or metric.
		 * Type: double
		 */
		limit: FormControl<number | null | undefined>,

		/** The name of the quota limit. */
		limitName: FormControl<string | null | undefined>,

		/** The Compute Engine quota metric name. */
		metricName: FormControl<string | null | undefined>,

		/** Rollout status of the future quota limit. */
		rolloutStatus: FormControl<QuotaExceededInfoRolloutStatus | null | undefined>,
	}
	export function CreateQuotaExceededInfoFormGroup() {
		return new FormGroup<QuotaExceededInfoFormProperties>({
			dimensions: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			futureLimit: new FormControl<number | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			limitName: new FormControl<string | null | undefined>(undefined),
			metricName: new FormControl<string | null | undefined>(undefined),
			rolloutStatus: new FormControl<QuotaExceededInfoRolloutStatus | null | undefined>(undefined),
		});

	}

	export enum QuotaExceededInfoRolloutStatus { IN_PROGRESS = 'IN_PROGRESS', ROLLOUT_STATUS_UNSPECIFIED = 'ROLLOUT_STATUS_UNSPECIFIED' }

	export interface InstanceGroupManagersListPerInstanceConfigsResp {

		/** [Output Only] The list of PerInstanceConfig. */
		items?: Array<PerInstanceConfig>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupManagersListPerInstanceConfigsRespWarning;
	}
	export interface InstanceGroupManagersListPerInstanceConfigsRespFormProperties {

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersListPerInstanceConfigsRespFormGroup() {
		return new FormGroup<InstanceGroupManagersListPerInstanceConfigsRespFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersListPerInstanceConfigsRespWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupManagersListPerInstanceConfigsRespWarningData?: Array<InstanceGroupManagersListPerInstanceConfigsRespWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupManagersListPerInstanceConfigsRespWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersListPerInstanceConfigsRespWarningFormGroup() {
		return new FormGroup<InstanceGroupManagersListPerInstanceConfigsRespWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersListPerInstanceConfigsRespWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupManagersListPerInstanceConfigsRespWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersListPerInstanceConfigsRespWarningDataFormGroup() {
		return new FormGroup<InstanceGroupManagersListPerInstanceConfigsRespWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** InstanceGroupManagers.patchPerInstanceConfigs */
	export interface InstanceGroupManagersPatchPerInstanceConfigsReq {

		/** The list of per-instance configurations to insert or patch on this managed instance group. */
		perInstanceConfigs?: Array<PerInstanceConfig>;
	}

	/** InstanceGroupManagers.patchPerInstanceConfigs */
	export interface InstanceGroupManagersPatchPerInstanceConfigsReqFormProperties {
	}
	export function CreateInstanceGroupManagersPatchPerInstanceConfigsReqFormGroup() {
		return new FormGroup<InstanceGroupManagersPatchPerInstanceConfigsReqFormProperties>({
		});

	}

	export interface InstanceGroupManagersRecreateInstancesRequest {

		/** The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;
	}
	export interface InstanceGroupManagersRecreateInstancesRequestFormProperties {
	}
	export function CreateInstanceGroupManagersRecreateInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersRecreateInstancesRequestFormProperties>({
		});

	}

	export interface InstanceGroupManagersSetInstanceTemplateRequest {

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE. */
		instanceTemplate?: string | null;
	}
	export interface InstanceGroupManagersSetInstanceTemplateRequestFormProperties {

		/** The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE. */
		instanceTemplate: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersSetInstanceTemplateRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersSetInstanceTemplateRequestFormProperties>({
			instanceTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupManagersSetTargetPoolsRequest {

		/** The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. */
		fingerprint?: string | null;

		/** The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings. */
		targetPools?: Array<string>;
	}
	export interface InstanceGroupManagersSetTargetPoolsRequestFormProperties {

		/** The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. */
		fingerprint: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupManagersSetTargetPoolsRequestFormGroup() {
		return new FormGroup<InstanceGroupManagersSetTargetPoolsRequestFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** InstanceGroupManagers.updatePerInstanceConfigs */
	export interface InstanceGroupManagersUpdatePerInstanceConfigsReq {

		/** The list of per-instance configurations to insert or patch on this managed instance group. */
		perInstanceConfigs?: Array<PerInstanceConfig>;
	}

	/** InstanceGroupManagers.updatePerInstanceConfigs */
	export interface InstanceGroupManagersUpdatePerInstanceConfigsReqFormProperties {
	}
	export function CreateInstanceGroupManagersUpdatePerInstanceConfigsReqFormGroup() {
		return new FormGroup<InstanceGroupManagersUpdatePerInstanceConfigsReqFormProperties>({
		});

	}

	export interface InstanceGroupsAddInstancesRequest {

		/** The list of instances to add to the instance group. */
		instances?: Array<InstanceReference>;
	}
	export interface InstanceGroupsAddInstancesRequestFormProperties {
	}
	export function CreateInstanceGroupsAddInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupsAddInstancesRequestFormProperties>({
		});

	}

	export interface InstanceReference {

		/** The URL for a specific instance. @required compute.instancegroups.addInstances/removeInstances */
		instance?: string | null;
	}
	export interface InstanceReferenceFormProperties {

		/** The URL for a specific instance. @required compute.instancegroups.addInstances/removeInstances */
		instance: FormControl<string | null | undefined>,
	}
	export function CreateInstanceReferenceFormGroup() {
		return new FormGroup<InstanceReferenceFormProperties>({
			instance: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupsListInstances {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceWithNamedPorts resources. */
		items?: Array<InstanceWithNamedPorts>;

		/** [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceGroupsListInstancesWarning;
	}
	export interface InstanceGroupsListInstancesFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupsListInstancesFormGroup() {
		return new FormGroup<InstanceGroupsListInstancesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceWithNamedPorts {

		/** [Output Only] The URL of the instance. */
		instance?: string | null;

		/** [Output Only] The named ports that belong to this instance group. */
		namedPorts?: Array<NamedPort>;

		/** [Output Only] The status of the instance. */
		status?: InstanceStatus | null;
	}
	export interface InstanceWithNamedPortsFormProperties {

		/** [Output Only] The URL of the instance. */
		instance: FormControl<string | null | undefined>,

		/** [Output Only] The status of the instance. */
		status: FormControl<InstanceStatus | null | undefined>,
	}
	export function CreateInstanceWithNamedPortsFormGroup() {
		return new FormGroup<InstanceWithNamedPortsFormProperties>({
			instance: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<InstanceStatus | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupsListInstancesWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceGroupsListInstancesWarningData?: Array<InstanceGroupsListInstancesWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceGroupsListInstancesWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupsListInstancesWarningFormGroup() {
		return new FormGroup<InstanceGroupsListInstancesWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupsListInstancesWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceGroupsListInstancesWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupsListInstancesWarningDataFormGroup() {
		return new FormGroup<InstanceGroupsListInstancesWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceGroupsListInstancesRequest {

		/** A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state. */
		instanceState?: InstanceGroupsListInstancesRequestInstanceState | null;
	}
	export interface InstanceGroupsListInstancesRequestFormProperties {

		/** A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state. */
		instanceState: FormControl<InstanceGroupsListInstancesRequestInstanceState | null | undefined>,
	}
	export function CreateInstanceGroupsListInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupsListInstancesRequestFormProperties>({
			instanceState: new FormControl<InstanceGroupsListInstancesRequestInstanceState | null | undefined>(undefined),
		});

	}

	export enum InstanceGroupsListInstancesRequestInstanceState { ALL = 'ALL', RUNNING = 'RUNNING' }

	export interface InstanceGroupsRemoveInstancesRequest {

		/** The list of instances to remove from the instance group. */
		instances?: Array<InstanceReference>;
	}
	export interface InstanceGroupsRemoveInstancesRequestFormProperties {
	}
	export function CreateInstanceGroupsRemoveInstancesRequestFormGroup() {
		return new FormGroup<InstanceGroupsRemoveInstancesRequestFormProperties>({
		});

	}

	export interface InstanceGroupsSetNamedPortsRequest {

		/** The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet. */
		fingerprint?: string | null;

		/** The list of named ports to set for this instance group. */
		namedPorts?: Array<NamedPort>;
	}
	export interface InstanceGroupsSetNamedPortsRequestFormProperties {

		/** The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet. */
		fingerprint: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupsSetNamedPortsRequestFormGroup() {
		return new FormGroup<InstanceGroupsSetNamedPortsRequestFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of instances. */
	export interface InstanceList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Instance resources. */
		items?: Array<Instance>;

		/** [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceListWarning;
	}

	/** Contains a list of instances. */
	export interface InstanceListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceListFormGroup() {
		return new FormGroup<InstanceListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceListWarningData?: Array<InstanceListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceListWarningFormGroup() {
		return new FormGroup<InstanceListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceListWarningDataFormGroup() {
		return new FormGroup<InstanceListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of instance referrers. */
	export interface InstanceListReferrers {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Reference resources. */
		items?: Array<Reference>;

		/** [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceListReferrersWarning;
	}

	/** Contains a list of instance referrers. */
	export interface InstanceListReferrersFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceListReferrersFormGroup() {
		return new FormGroup<InstanceListReferrersFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a reference to a resource. */
	export interface Reference {

		/** [Output Only] Type of the resource. Always compute#reference for references. */
		kind?: string | null;

		/** A description of the reference type with no implied semantics. Possible values include: 1. MEMBER_OF */
		referenceType?: string | null;

		/** URL of the resource which refers to the target. */
		referrer?: string | null;

		/** URL of the resource to which this reference points. */
		target?: string | null;
	}

	/** Represents a reference to a resource. */
	export interface ReferenceFormProperties {

		/** [Output Only] Type of the resource. Always compute#reference for references. */
		kind: FormControl<string | null | undefined>,

		/** A description of the reference type with no implied semantics. Possible values include: 1. MEMBER_OF */
		referenceType: FormControl<string | null | undefined>,

		/** URL of the resource which refers to the target. */
		referrer: FormControl<string | null | undefined>,

		/** URL of the resource to which this reference points. */
		target: FormControl<string | null | undefined>,
	}
	export function CreateReferenceFormGroup() {
		return new FormGroup<ReferenceFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
			referenceType: new FormControl<string | null | undefined>(undefined),
			referrer: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceListReferrersWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceListReferrersWarningData?: Array<InstanceListReferrersWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceListReferrersWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceListReferrersWarningFormGroup() {
		return new FormGroup<InstanceListReferrersWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceListReferrersWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceListReferrersWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceListReferrersWarningDataFormGroup() {
		return new FormGroup<InstanceListReferrersWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceMoveRequest {

		/** The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone */
		destinationZone?: string | null;

		/** The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance */
		targetInstance?: string | null;
	}
	export interface InstanceMoveRequestFormProperties {

		/** The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone */
		destinationZone: FormControl<string | null | undefined>,

		/** The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance */
		targetInstance: FormControl<string | null | undefined>,
	}
	export function CreateInstanceMoveRequestFormGroup() {
		return new FormGroup<InstanceMoveRequestFormProperties>({
			destinationZone: new FormControl<string | null | undefined>(undefined),
			targetInstance: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an Instance Template resource. Google Compute Engine has two Instance Template resources: * [Global](/compute/docs/reference/rest/v1/instanceTemplates) * [Regional](/compute/docs/reference/rest/v1/regionInstanceTemplates) You can reuse a global instance template in different regions whereas you can use a regional instance template in a specified region only. If you want to reduce cross-region dependency or achieve data residency, use a regional instance template. To create VMs, managed instance groups, and reservations, you can use either global or regional instance templates. For more information, read Instance Templates. */
	export interface InstanceTemplate {

		/** [Output Only] The creation timestamp for this instance template in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] A unique identifier for this instance template. The server defines this identifier. */
		id?: string | null;

		/** [Output Only] The resource type, which is always compute#instanceTemplate for instance templates. */
		kind?: string | null;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;
		properties?: InstanceProperties;

		/** [Output Only] URL of the region where the instance template resides. Only applicable for regional resources. */
		region?: string | null;

		/** [Output Only] The URL for this instance template. The server defines this URL. */
		selfLink?: string | null;

		/** The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance */
		sourceInstance?: string | null;

		/** A specification of the parameters to use when creating the instance template from a source instance. */
		sourceInstanceParams?: SourceInstanceParams;
	}

	/** Represents an Instance Template resource. Google Compute Engine has two Instance Template resources: * [Global](/compute/docs/reference/rest/v1/instanceTemplates) * [Regional](/compute/docs/reference/rest/v1/regionInstanceTemplates) You can reuse a global instance template in different regions whereas you can use a regional instance template in a specified region only. If you want to reduce cross-region dependency or achieve data residency, use a regional instance template. To create VMs, managed instance groups, and reservations, you can use either global or regional instance templates. For more information, read Instance Templates. */
	export interface InstanceTemplateFormProperties {

		/** [Output Only] The creation timestamp for this instance template in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] A unique identifier for this instance template. The server defines this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceTemplate for instance templates. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the instance template resides. Only applicable for regional resources. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] The URL for this instance template. The server defines this URL. */
		selfLink: FormControl<string | null | undefined>,

		/** The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance */
		sourceInstance: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateFormGroup() {
		return new FormGroup<InstanceTemplateFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sourceInstance: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A specification of the parameters to use when creating the instance template from a source instance. */
	export interface SourceInstanceParams {

		/** Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, the source images for each disk will be used. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes. */
		diskConfigs?: Array<DiskInstantiationConfig>;
	}

	/** A specification of the parameters to use when creating the instance template from a source instance. */
	export interface SourceInstanceParamsFormProperties {
	}
	export function CreateSourceInstanceParamsFormGroup() {
		return new FormGroup<SourceInstanceParamsFormProperties>({
		});

	}


	/** Contains a list of InstanceTemplatesScopedList. */
	export interface InstanceTemplateAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceTemplatesScopedList resources. */
		items?: {[id: string]: InstanceTemplatesScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceTemplateAggregatedListWarning;
	}

	/** Contains a list of InstanceTemplatesScopedList. */
	export interface InstanceTemplateAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of InstanceTemplatesScopedList resources. */
		items: FormControl<{[id: string]: InstanceTemplatesScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateAggregatedListFormGroup() {
		return new FormGroup<InstanceTemplateAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: InstanceTemplatesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceTemplatesScopedList {

		/** [Output Only] A list of instance templates that are contained within the specified project and zone. */
		instanceTemplates?: Array<InstanceTemplate>;

		/** [Output Only] An informational warning that replaces the list of instance templates when the list is empty. */
		warning?: InstanceTemplatesScopedListWarning;
	}
	export interface InstanceTemplatesScopedListFormProperties {
	}
	export function CreateInstanceTemplatesScopedListFormGroup() {
		return new FormGroup<InstanceTemplatesScopedListFormProperties>({
		});

	}

	export interface InstanceTemplatesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceTemplatesScopedListWarningData?: Array<InstanceTemplatesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceTemplatesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplatesScopedListWarningFormGroup() {
		return new FormGroup<InstanceTemplatesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceTemplatesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceTemplatesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplatesScopedListWarningDataFormGroup() {
		return new FormGroup<InstanceTemplatesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceTemplateAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceTemplateAggregatedListWarningData?: Array<InstanceTemplateAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceTemplateAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateAggregatedListWarningFormGroup() {
		return new FormGroup<InstanceTemplateAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceTemplateAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceTemplateAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateAggregatedListWarningDataFormGroup() {
		return new FormGroup<InstanceTemplateAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of instance templates. */
	export interface InstanceTemplateList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceTemplate resources. */
		items?: Array<InstanceTemplate>;

		/** [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InstanceTemplateListWarning;
	}

	/** A list of instance templates. */
	export interface InstanceTemplateListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateListFormGroup() {
		return new FormGroup<InstanceTemplateListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceTemplateListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InstanceTemplateListWarningData?: Array<InstanceTemplateListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InstanceTemplateListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateListWarningFormGroup() {
		return new FormGroup<InstanceTemplateListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstanceTemplateListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InstanceTemplateListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInstanceTemplateListWarningDataFormGroup() {
		return new FormGroup<InstanceTemplateListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesAddResourcePoliciesRequest {

		/** Resource policies to be added to this instance. */
		resourcePolicies?: Array<string>;
	}
	export interface InstancesAddResourcePoliciesRequestFormProperties {
	}
	export function CreateInstancesAddResourcePoliciesRequestFormGroup() {
		return new FormGroup<InstancesAddResourcePoliciesRequestFormProperties>({
		});

	}

	export interface InstancesBulkInsertOperationMetadata {

		/** Status information per location (location name is key). Example key: zones/us-central1-a */
		perLocationStatus?: {[id: string]: BulkInsertOperationStatus };
	}
	export interface InstancesBulkInsertOperationMetadataFormProperties {

		/** Status information per location (location name is key). Example key: zones/us-central1-a */
		perLocationStatus: FormControl<{[id: string]: BulkInsertOperationStatus } | null | undefined>,
	}
	export function CreateInstancesBulkInsertOperationMetadataFormGroup() {
		return new FormGroup<InstancesBulkInsertOperationMetadataFormProperties>({
			perLocationStatus: new FormControl<{[id: string]: BulkInsertOperationStatus } | null | undefined>(undefined),
		});

	}

	export interface InstancesGetEffectiveFirewallsResponse {

		/** Effective firewalls from firewall policies. */
		firewallPolicys?: Array<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>;

		/** Effective firewalls on the instance. */
		firewalls?: Array<Firewall>;
	}
	export interface InstancesGetEffectiveFirewallsResponseFormProperties {
	}
	export function CreateInstancesGetEffectiveFirewallsResponseFormGroup() {
		return new FormGroup<InstancesGetEffectiveFirewallsResponseFormProperties>({
		});

	}

	export interface InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {

		/** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy. */
		displayName?: string | null;

		/** [Output Only] The name of the firewall policy. */
		name?: string | null;

		/** The rules that apply to the network. */
		rules?: Array<FirewallPolicyRule>;

		/** [Output Only] The short name of the firewall policy. */
		shortName?: string | null;

		/** [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL. */
		type?: InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null;
	}
	export interface InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormProperties {

		/** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy. */
		displayName: FormControl<string | null | undefined>,

		/** [Output Only] The name of the firewall policy. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The short name of the firewall policy. */
		shortName: FormControl<string | null | undefined>,

		/** [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL. */
		type: FormControl<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null | undefined>,
	}
	export function CreateInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormGroup() {
		return new FormGroup<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			shortName: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null | undefined>(undefined),
		});

	}

	export enum InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType { HIERARCHY = 'HIERARCHY', NETWORK = 'NETWORK', NETWORK_REGIONAL = 'NETWORK_REGIONAL', UNSPECIFIED = 'UNSPECIFIED' }

	export interface InstancesRemoveResourcePoliciesRequest {

		/** Resource policies to be removed from this instance. */
		resourcePolicies?: Array<string>;
	}
	export interface InstancesRemoveResourcePoliciesRequestFormProperties {
	}
	export function CreateInstancesRemoveResourcePoliciesRequestFormGroup() {
		return new FormGroup<InstancesRemoveResourcePoliciesRequestFormProperties>({
		});

	}

	export interface InstancesSetLabelsRequest {

		/** Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels. */
		labelFingerprint?: string | null;
		labels?: {[id: string]: string };
	}
	export interface InstancesSetLabelsRequestFormProperties {

		/** Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels. */
		labelFingerprint: FormControl<string | null | undefined>,
		labels: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateInstancesSetLabelsRequestFormGroup() {
		return new FormGroup<InstancesSetLabelsRequestFormProperties>({
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface InstancesSetMachineResourcesRequest {

		/** A list of the type and count of accelerator cards attached to the instance. */
		guestAccelerators?: Array<AcceleratorConfig>;
	}
	export interface InstancesSetMachineResourcesRequestFormProperties {
	}
	export function CreateInstancesSetMachineResourcesRequestFormGroup() {
		return new FormGroup<InstancesSetMachineResourcesRequestFormProperties>({
		});

	}

	export interface InstancesSetMachineTypeRequest {

		/** Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1 */
		machineType?: string | null;
	}
	export interface InstancesSetMachineTypeRequestFormProperties {

		/** Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1 */
		machineType: FormControl<string | null | undefined>,
	}
	export function CreateInstancesSetMachineTypeRequestFormGroup() {
		return new FormGroup<InstancesSetMachineTypeRequestFormProperties>({
			machineType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesSetMinCpuPlatformRequest {

		/** Minimum cpu/platform this instance should be started at. */
		minCpuPlatform?: string | null;
	}
	export interface InstancesSetMinCpuPlatformRequestFormProperties {

		/** Minimum cpu/platform this instance should be started at. */
		minCpuPlatform: FormControl<string | null | undefined>,
	}
	export function CreateInstancesSetMinCpuPlatformRequestFormGroup() {
		return new FormGroup<InstancesSetMinCpuPlatformRequestFormProperties>({
			minCpuPlatform: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesSetNameRequest {

		/** The current name of this resource, used to prevent conflicts. Provide the latest name when making a request to change name. */
		currentName?: string | null;

		/** The name to be applied to the instance. Needs to be RFC 1035 compliant. */
		name?: string | null;
	}
	export interface InstancesSetNameRequestFormProperties {

		/** The current name of this resource, used to prevent conflicts. Provide the latest name when making a request to change name. */
		currentName: FormControl<string | null | undefined>,

		/** The name to be applied to the instance. Needs to be RFC 1035 compliant. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateInstancesSetNameRequestFormGroup() {
		return new FormGroup<InstancesSetNameRequestFormProperties>({
			currentName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesSetSecurityPolicyRequest {

		/** The network interfaces that the security policy will be applied to. Network interfaces use the nicN naming format. You can only set a security policy for network interfaces with an access config. */
		networkInterfaces?: Array<string>;

		/** A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy. */
		securityPolicy?: string | null;
	}
	export interface InstancesSetSecurityPolicyRequestFormProperties {

		/** A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy. */
		securityPolicy: FormControl<string | null | undefined>,
	}
	export function CreateInstancesSetSecurityPolicyRequestFormGroup() {
		return new FormGroup<InstancesSetSecurityPolicyRequestFormProperties>({
			securityPolicy: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesSetServiceAccountRequest {

		/** Email address of the service account. */
		email?: string | null;

		/** The list of scopes to be made available for this service account. */
		scopes?: Array<string>;
	}
	export interface InstancesSetServiceAccountRequestFormProperties {

		/** Email address of the service account. */
		email: FormControl<string | null | undefined>,
	}
	export function CreateInstancesSetServiceAccountRequestFormGroup() {
		return new FormGroup<InstancesSetServiceAccountRequestFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InstancesStartWithEncryptionKeyRequest {

		/** Array of disks associated with this instance that are protected with a customer-supplied encryption key. In order to start the instance, the disk url and its corresponding key must be provided. If the disk is not protected with a customer-supplied encryption key it should not be specified. */
		disks?: Array<CustomerEncryptionKeyProtectedDisk>;
	}
	export interface InstancesStartWithEncryptionKeyRequestFormProperties {
	}
	export function CreateInstancesStartWithEncryptionKeyRequestFormGroup() {
		return new FormGroup<InstancesStartWithEncryptionKeyRequestFormProperties>({
		});

	}


	/** Represents an Interconnect resource. An Interconnect resource is a dedicated connection between the Google Cloud network and your on-premises network. For more information, read the Dedicated Interconnect Overview. */
	export interface Interconnect {

		/** Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true. */
		adminEnabled?: boolean | null;

		/** [Output only] List of features available for this Interconnect connection, which can take one of the following values: - MACSEC If present then the Interconnect connection is provisioned on MACsec capable hardware ports. If not present then the Interconnect connection is provisioned on non-MACsec capable ports and MACsec isn't supported and enabling MACsec fails. */
		availableFeatures?: Array<string>;

		/** [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG. */
		circuitInfos?: Array<InterconnectCircuitInfo>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect. */
		customerName?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] A list of outages expected for this Interconnect. */
		expectedOutages?: Array<InterconnectOutageNotification>;

		/** [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests. */
		googleIpAddress?: string | null;

		/** [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. */
		googleReferenceId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect. */
		interconnectAttachments?: Array<string>;

		/** Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED. */
		interconnectType?: InterconnectInterconnectType | null;

		/** [Output Only] Type of the resource. Always compute#interconnect for interconnects. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Interconnect. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle. */
		linkType?: InterconnectLinkType | null;

		/** URL of the InterconnectLocation object that represents where this connection is to be provisioned. */
		location?: string | null;

		/** Configuration information for enabling Media Access Control security (MACsec) on this Cloud Interconnect connection between Google and your on-premises router. */
		macsec?: InterconnectMacsec;

		/** Enable or disable MACsec on this Interconnect connection. MACsec enablement fails if the MACsec object is not specified. */
		macsecEnabled?: boolean | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation. */
		nocContactEmail?: string | null;

		/** [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. */
		operationalStatus?: InterconnectOperationalStatus | null;

		/** [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests. */
		peerIpAddress?: string | null;

		/**
		 * [Output Only] Number of links actually provisioned in this interconnect.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		provisionedLinkCount?: number | null;

		/** Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to. */
		remoteLocation?: string | null;

		/** Optional. List of features requested for this Interconnect connection, which can take one of the following values: - MACSEC If specified then the connection is created on MACsec capable hardware ports. If not specified, the default value is false, which allocates non-MACsec capable ports first if available. This parameter can be provided only with Interconnect INSERT. It isn't valid for Interconnect PATCH. */
		requestedFeatures?: Array<string>;

		/**
		 * Target number of physical links in the link bundle, as requested by the customer.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		requestedLinkCount?: number | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. */
		state?: InterconnectState | null;
	}

	/** Represents an Interconnect resource. An Interconnect resource is a dedicated connection between the Google Cloud network and your on-premises network. For more information, read the Dedicated Interconnect Overview. */
	export interface InterconnectFormProperties {

		/** Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true. */
		adminEnabled: FormControl<boolean | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect. */
		customerName: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests. */
		googleIpAddress: FormControl<string | null | undefined>,

		/** [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. */
		googleReferenceId: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED. */
		interconnectType: FormControl<InterconnectInterconnectType | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#interconnect for interconnects. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Interconnect. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle. */
		linkType: FormControl<InterconnectLinkType | null | undefined>,

		/** URL of the InterconnectLocation object that represents where this connection is to be provisioned. */
		location: FormControl<string | null | undefined>,

		/** Enable or disable MACsec on this Interconnect connection. MACsec enablement fails if the MACsec object is not specified. */
		macsecEnabled: FormControl<boolean | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation. */
		nocContactEmail: FormControl<string | null | undefined>,

		/** [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. */
		operationalStatus: FormControl<InterconnectOperationalStatus | null | undefined>,

		/** [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests. */
		peerIpAddress: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Number of links actually provisioned in this interconnect.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		provisionedLinkCount: FormControl<number | null | undefined>,

		/** Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to. */
		remoteLocation: FormControl<string | null | undefined>,

		/**
		 * Target number of physical links in the link bundle, as requested by the customer.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		requestedLinkCount: FormControl<number | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. */
		state: FormControl<InterconnectState | null | undefined>,
	}
	export function CreateInterconnectFormGroup() {
		return new FormGroup<InterconnectFormProperties>({
			adminEnabled: new FormControl<boolean | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			customerName: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			googleIpAddress: new FormControl<string | null | undefined>(undefined),
			googleReferenceId: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interconnectType: new FormControl<InterconnectInterconnectType | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			linkType: new FormControl<InterconnectLinkType | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			macsecEnabled: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			nocContactEmail: new FormControl<string | null | undefined>(undefined),
			operationalStatus: new FormControl<InterconnectOperationalStatus | null | undefined>(undefined),
			peerIpAddress: new FormControl<string | null | undefined>(undefined),
			provisionedLinkCount: new FormControl<number | null | undefined>(undefined),
			remoteLocation: new FormControl<string | null | undefined>(undefined),
			requestedLinkCount: new FormControl<number | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<InterconnectState | null | undefined>(undefined),
		});

	}


	/** Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only. */
	export interface InterconnectCircuitInfo {

		/** Customer-side demarc ID for this circuit. */
		customerDemarcId?: string | null;

		/** Google-assigned unique ID for this circuit. Assigned at circuit turn-up. */
		googleCircuitId?: string | null;

		/** Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA. */
		googleDemarcId?: string | null;
	}

	/** Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only. */
	export interface InterconnectCircuitInfoFormProperties {

		/** Customer-side demarc ID for this circuit. */
		customerDemarcId: FormControl<string | null | undefined>,

		/** Google-assigned unique ID for this circuit. Assigned at circuit turn-up. */
		googleCircuitId: FormControl<string | null | undefined>,

		/** Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA. */
		googleDemarcId: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectCircuitInfoFormGroup() {
		return new FormGroup<InterconnectCircuitInfoFormProperties>({
			customerDemarcId: new FormControl<string | null | undefined>(undefined),
			googleCircuitId: new FormControl<string | null | undefined>(undefined),
			googleDemarcId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Description of a planned outage on this Interconnect. */
	export interface InterconnectOutageNotification {

		/** If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected. */
		affectedCircuits?: Array<string>;

		/** A description about the purpose of the outage. */
		description?: string | null;

		/** Scheduled end time for the outage (milliseconds since Unix epoch). */
		endTime?: string | null;

		/** Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values. */
		issueType?: InterconnectOutageNotificationIssueType | null;

		/** Unique identifier for this outage notification. */
		name?: string | null;

		/** The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE. */
		source?: InterconnectOutageNotificationSource | null;

		/** Scheduled start time for the outage (milliseconds since Unix epoch). */
		startTime?: string | null;

		/** State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values. */
		state?: InterconnectOutageNotificationState | null;
	}

	/** Description of a planned outage on this Interconnect. */
	export interface InterconnectOutageNotificationFormProperties {

		/** A description about the purpose of the outage. */
		description: FormControl<string | null | undefined>,

		/** Scheduled end time for the outage (milliseconds since Unix epoch). */
		endTime: FormControl<string | null | undefined>,

		/** Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values. */
		issueType: FormControl<InterconnectOutageNotificationIssueType | null | undefined>,

		/** Unique identifier for this outage notification. */
		name: FormControl<string | null | undefined>,

		/** The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE. */
		source: FormControl<InterconnectOutageNotificationSource | null | undefined>,

		/** Scheduled start time for the outage (milliseconds since Unix epoch). */
		startTime: FormControl<string | null | undefined>,

		/** State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values. */
		state: FormControl<InterconnectOutageNotificationState | null | undefined>,
	}
	export function CreateInterconnectOutageNotificationFormGroup() {
		return new FormGroup<InterconnectOutageNotificationFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			issueType: new FormControl<InterconnectOutageNotificationIssueType | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			source: new FormControl<InterconnectOutageNotificationSource | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<InterconnectOutageNotificationState | null | undefined>(undefined),
		});

	}

	export enum InterconnectOutageNotificationIssueType { IT_OUTAGE = 'IT_OUTAGE', IT_PARTIAL_OUTAGE = 'IT_PARTIAL_OUTAGE', OUTAGE = 'OUTAGE', PARTIAL_OUTAGE = 'PARTIAL_OUTAGE' }

	export enum InterconnectOutageNotificationSource { GOOGLE = 'GOOGLE', NSRC_GOOGLE = 'NSRC_GOOGLE' }

	export enum InterconnectOutageNotificationState { ACTIVE = 'ACTIVE', CANCELLED = 'CANCELLED', COMPLETED = 'COMPLETED', NS_ACTIVE = 'NS_ACTIVE', NS_CANCELED = 'NS_CANCELED' }

	export enum InterconnectInterconnectType { DEDICATED = 'DEDICATED', IT_PRIVATE = 'IT_PRIVATE', PARTNER = 'PARTNER' }

	export enum InterconnectLinkType { LINK_TYPE_ETHERNET_100G_LR = 'LINK_TYPE_ETHERNET_100G_LR', LINK_TYPE_ETHERNET_10G_LR = 'LINK_TYPE_ETHERNET_10G_LR' }


	/** Configuration information for enabling Media Access Control security (MACsec) on this Cloud Interconnect connection between Google and your on-premises router. */
	export interface InterconnectMacsec {

		/** If set to true, the Interconnect connection is configured with a should-secure MACsec security policy, that allows the Google router to fallback to cleartext traffic if the MKA session cannot be established. By default, the Interconnect connection is configured with a must-secure security policy that drops all traffic if the MKA session cannot be established with your router. */
		failOpen?: boolean | null;

		/** Required. A keychain placeholder describing a set of named key objects along with their start times. A MACsec CKN/CAK is generated for each key in the key chain. Google router automatically picks the key with the most recent startTime when establishing or re-establishing a MACsec secure link. */
		preSharedKeys?: Array<InterconnectMacsecPreSharedKey>;
	}

	/** Configuration information for enabling Media Access Control security (MACsec) on this Cloud Interconnect connection between Google and your on-premises router. */
	export interface InterconnectMacsecFormProperties {

		/** If set to true, the Interconnect connection is configured with a should-secure MACsec security policy, that allows the Google router to fallback to cleartext traffic if the MKA session cannot be established. By default, the Interconnect connection is configured with a must-secure security policy that drops all traffic if the MKA session cannot be established with your router. */
		failOpen: FormControl<boolean | null | undefined>,
	}
	export function CreateInterconnectMacsecFormGroup() {
		return new FormGroup<InterconnectMacsecFormProperties>({
			failOpen: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Describes a pre-shared key used to setup MACsec in static connectivity association key (CAK) mode. */
	export interface InterconnectMacsecPreSharedKey {

		/** Required. A name for this pre-shared key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** A RFC3339 timestamp on or after which the key is valid. startTime can be in the future. If the keychain has a single key, startTime can be omitted. If the keychain has multiple keys, startTime is mandatory for each key. The start times of keys must be in increasing order. The start times of two consecutive keys must be at least 6 hours apart. */
		startTime?: string | null;
	}

	/** Describes a pre-shared key used to setup MACsec in static connectivity association key (CAK) mode. */
	export interface InterconnectMacsecPreSharedKeyFormProperties {

		/** Required. A name for this pre-shared key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** A RFC3339 timestamp on or after which the key is valid. startTime can be in the future. If the keychain has a single key, startTime can be omitted. If the keychain has multiple keys, startTime is mandatory for each key. The start times of keys must be in increasing order. The start times of two consecutive keys must be at least 6 hours apart. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectMacsecPreSharedKeyFormGroup() {
		return new FormGroup<InterconnectMacsecPreSharedKeyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum InterconnectOperationalStatus { OS_ACTIVE = 'OS_ACTIVE', OS_UNPROVISIONED = 'OS_UNPROVISIONED' }

	export enum InterconnectState { ACTIVE = 'ACTIVE', UNPROVISIONED = 'UNPROVISIONED' }


	/** Represents an Interconnect Attachment (VLAN) resource. You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read Creating VLAN Attachments. */
	export interface InterconnectAttachment {

		/** Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER. */
		adminEnabled?: boolean | null;

		/** Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s */
		bandwidth?: InterconnectAttachmentBandwidth | null;

		/** This field is not available. */
		candidateIpv6Subnets?: Array<string>;

		/** Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space. */
		candidateSubnets?: Array<string>;

		/** [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
		cloudRouterIpAddress?: string | null;

		/** [Output Only] IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
		cloudRouterIpv6Address?: string | null;

		/** This field is not available. */
		cloudRouterIpv6InterfaceId?: string | null;
		configurationConstraints?: InterconnectAttachmentConfigurationConstraints;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
		customerRouterIpAddress?: string | null;

		/** [Output Only] IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
		customerRouterIpv6Address?: string | null;

		/** This field is not available. */
		customerRouterIpv6InterfaceId?: string | null;

		/**
		 * [Output Only] Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		dataplaneVersion?: number | null;

		/** An optional description of this resource. */
		description?: string | null;

		/** Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY. */
		edgeAvailabilityDomain?: InterconnectAttachmentEdgeAvailabilityDomain | null;

		/** Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option. */
		encryption?: InterconnectAttachmentEncryption | null;

		/** [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used. */
		googleReferenceId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** URL of the underlying Interconnect object that this attachment's traffic will traverse through. */
		interconnect?: string | null;

		/** A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN gateway's IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is paired to this VLAN attachment, then a regional internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway's IP address is allocated from the regional external IP address pool. */
		ipsecInternalAddresses?: Array<string>;

		/** [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this InterconnectAttachment, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InterconnectAttachment. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/**
		 * Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		mtu?: number | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. */
		operationalStatus?: InterconnectOperationalStatus | null;

		/** [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of a PARTNER attachment used to initiate provisioning with a selected partner. Of the form "XXXXX/region/domain" */
		pairingKey?: string | null;

		/** Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED. */
		partnerAsn?: string | null;

		/** Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments. */
		partnerMetadata?: InterconnectAttachmentPartnerMetadata;

		/** Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED. */
		privateInterconnectInfo?: InterconnectAttachmentPrivateInfo;

		/** [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] If the attachment is on a Cross-Cloud Interconnect connection, this field contains the interconnect's remote location service provider. Example values: "Amazon Web Services" "Microsoft Azure". The field is set only for attachments on Cross-Cloud Interconnect connections. Its value is copied from the InterconnectRemoteLocation remoteService field. */
		remoteService?: string | null;

		/** URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured. */
		router?: string | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations. */
		stackType?: NetworkInterfaceStackType | null;

		/** [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted. */
		state?: InterconnectAttachmentState | null;

		/**
		 * Length of the IPv4 subnet mask. Allowed values: - 29 (default) - 30 The default value is 29, except for Cross-Cloud Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30. For example, connections that use an Azure remote location fall into this category. In these cases, the default value is 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud Support more debugging visibility.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		subnetLength?: number | null;

		/** The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner. */
		type?: InterconnectAttachmentType | null;

		/**
		 * The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4093. Only specified at creation time.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		vlanTag8021q?: number | null;
	}

	/** Represents an Interconnect Attachment (VLAN) resource. You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read Creating VLAN Attachments. */
	export interface InterconnectAttachmentFormProperties {

		/** Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER. */
		adminEnabled: FormControl<boolean | null | undefined>,

		/** Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s */
		bandwidth: FormControl<InterconnectAttachmentBandwidth | null | undefined>,

		/** [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
		cloudRouterIpAddress: FormControl<string | null | undefined>,

		/** [Output Only] IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
		cloudRouterIpv6Address: FormControl<string | null | undefined>,

		/** This field is not available. */
		cloudRouterIpv6InterfaceId: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
		customerRouterIpAddress: FormControl<string | null | undefined>,

		/** [Output Only] IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
		customerRouterIpv6Address: FormControl<string | null | undefined>,

		/** This field is not available. */
		customerRouterIpv6InterfaceId: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		dataplaneVersion: FormControl<number | null | undefined>,

		/** An optional description of this resource. */
		description: FormControl<string | null | undefined>,

		/** Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY. */
		edgeAvailabilityDomain: FormControl<InterconnectAttachmentEdgeAvailabilityDomain | null | undefined>,

		/** Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option. */
		encryption: FormControl<InterconnectAttachmentEncryption | null | undefined>,

		/** [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used. */
		googleReferenceId: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** URL of the underlying Interconnect object that this attachment's traffic will traverse through. */
		interconnect: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this InterconnectAttachment, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InterconnectAttachment. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		mtu: FormControl<number | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. */
		operationalStatus: FormControl<InterconnectOperationalStatus | null | undefined>,

		/** [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of a PARTNER attachment used to initiate provisioning with a selected partner. Of the form "XXXXX/region/domain" */
		pairingKey: FormControl<string | null | undefined>,

		/** Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED. */
		partnerAsn: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] If the attachment is on a Cross-Cloud Interconnect connection, this field contains the interconnect's remote location service provider. Example values: "Amazon Web Services" "Microsoft Azure". The field is set only for attachments on Cross-Cloud Interconnect connections. Its value is copied from the InterconnectRemoteLocation remoteService field. */
		remoteService: FormControl<string | null | undefined>,

		/** URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured. */
		router: FormControl<string | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations. */
		stackType: FormControl<NetworkInterfaceStackType | null | undefined>,

		/** [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted. */
		state: FormControl<InterconnectAttachmentState | null | undefined>,

		/**
		 * Length of the IPv4 subnet mask. Allowed values: - 29 (default) - 30 The default value is 29, except for Cross-Cloud Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30. For example, connections that use an Azure remote location fall into this category. In these cases, the default value is 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud Support more debugging visibility.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		subnetLength: FormControl<number | null | undefined>,

		/** The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner. */
		type: FormControl<InterconnectAttachmentType | null | undefined>,

		/**
		 * The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4093. Only specified at creation time.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		vlanTag8021q: FormControl<number | null | undefined>,
	}
	export function CreateInterconnectAttachmentFormGroup() {
		return new FormGroup<InterconnectAttachmentFormProperties>({
			adminEnabled: new FormControl<boolean | null | undefined>(undefined),
			bandwidth: new FormControl<InterconnectAttachmentBandwidth | null | undefined>(undefined),
			cloudRouterIpAddress: new FormControl<string | null | undefined>(undefined),
			cloudRouterIpv6Address: new FormControl<string | null | undefined>(undefined),
			cloudRouterIpv6InterfaceId: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			customerRouterIpAddress: new FormControl<string | null | undefined>(undefined),
			customerRouterIpv6Address: new FormControl<string | null | undefined>(undefined),
			customerRouterIpv6InterfaceId: new FormControl<string | null | undefined>(undefined),
			dataplaneVersion: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			edgeAvailabilityDomain: new FormControl<InterconnectAttachmentEdgeAvailabilityDomain | null | undefined>(undefined),
			encryption: new FormControl<InterconnectAttachmentEncryption | null | undefined>(undefined),
			googleReferenceId: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			interconnect: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			mtu: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			operationalStatus: new FormControl<InterconnectOperationalStatus | null | undefined>(undefined),
			pairingKey: new FormControl<string | null | undefined>(undefined),
			partnerAsn: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			remoteService: new FormControl<string | null | undefined>(undefined),
			router: new FormControl<string | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			stackType: new FormControl<NetworkInterfaceStackType | null | undefined>(undefined),
			state: new FormControl<InterconnectAttachmentState | null | undefined>(undefined),
			subnetLength: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<InterconnectAttachmentType | null | undefined>(undefined),
			vlanTag8021q: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum InterconnectAttachmentBandwidth { BPS_100M = 'BPS_100M', BPS_10G = 'BPS_10G', BPS_1G = 'BPS_1G', BPS_200M = 'BPS_200M', BPS_20G = 'BPS_20G', BPS_2G = 'BPS_2G', BPS_300M = 'BPS_300M', BPS_400M = 'BPS_400M', BPS_500M = 'BPS_500M', BPS_50G = 'BPS_50G', BPS_50M = 'BPS_50M', BPS_5G = 'BPS_5G' }

	export interface InterconnectAttachmentConfigurationConstraints {

		/** [Output Only] Whether the attachment's BGP session requires/allows/disallows BGP MD5 authentication. This can take one of the following values: MD5_OPTIONAL, MD5_REQUIRED, MD5_UNSUPPORTED. For example, a Cross-Cloud Interconnect connection to a remote cloud provider that requires BGP MD5 authentication has the interconnectRemoteLocation attachment_configuration_constraints.bgp_md5 field set to MD5_REQUIRED, and that property is propagated to the attachment. Similarly, if BGP MD5 is MD5_UNSUPPORTED, an error is returned if MD5 is requested. */
		bgpMd5?: InterconnectAttachmentConfigurationConstraintsBgpMd5 | null;

		/** [Output Only] List of ASN ranges that the remote location is known to support. Formatted as an array of inclusive ranges {min: min-value, max: max-value}. For example, [{min: 123, max: 123}, {min: 64512, max: 65534}] allows the peer ASN to be 123 or anything in the range 64512-65534. This field is only advisory. Although the API accepts other ranges, these are the ranges that we recommend. */
		bgpPeerAsnRanges?: Array<InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange>;
	}
	export interface InterconnectAttachmentConfigurationConstraintsFormProperties {

		/** [Output Only] Whether the attachment's BGP session requires/allows/disallows BGP MD5 authentication. This can take one of the following values: MD5_OPTIONAL, MD5_REQUIRED, MD5_UNSUPPORTED. For example, a Cross-Cloud Interconnect connection to a remote cloud provider that requires BGP MD5 authentication has the interconnectRemoteLocation attachment_configuration_constraints.bgp_md5 field set to MD5_REQUIRED, and that property is propagated to the attachment. Similarly, if BGP MD5 is MD5_UNSUPPORTED, an error is returned if MD5 is requested. */
		bgpMd5: FormControl<InterconnectAttachmentConfigurationConstraintsBgpMd5 | null | undefined>,
	}
	export function CreateInterconnectAttachmentConfigurationConstraintsFormGroup() {
		return new FormGroup<InterconnectAttachmentConfigurationConstraintsFormProperties>({
			bgpMd5: new FormControl<InterconnectAttachmentConfigurationConstraintsBgpMd5 | null | undefined>(undefined),
		});

	}

	export enum InterconnectAttachmentConfigurationConstraintsBgpMd5 { MD5_OPTIONAL = 'MD5_OPTIONAL', MD5_REQUIRED = 'MD5_REQUIRED', MD5_UNSUPPORTED = 'MD5_UNSUPPORTED' }

	export interface InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange {

		/** Type: uint, 0 to 4,294,967,295 */
		max?: number | null;

		/** Type: uint, 0 to 4,294,967,295 */
		min?: number | null;
	}
	export interface InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeFormProperties {

		/** Type: uint, 0 to 4,294,967,295 */
		max: FormControl<number | null | undefined>,

		/** Type: uint, 0 to 4,294,967,295 */
		min: FormControl<number | null | undefined>,
	}
	export function CreateInterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeFormGroup() {
		return new FormGroup<InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeFormProperties>({
			max: new FormControl<number | null | undefined>(undefined),
			min: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum InterconnectAttachmentEdgeAvailabilityDomain { AVAILABILITY_DOMAIN_1 = 'AVAILABILITY_DOMAIN_1', AVAILABILITY_DOMAIN_2 = 'AVAILABILITY_DOMAIN_2', AVAILABILITY_DOMAIN_ANY = 'AVAILABILITY_DOMAIN_ANY' }

	export enum InterconnectAttachmentEncryption { IPSEC = 'IPSEC', NONE = 'NONE' }


	/** Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments. */
	export interface InterconnectAttachmentPartnerMetadata {

		/** Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values. */
		interconnectName?: string | null;

		/** Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values. */
		partnerName?: string | null;

		/** URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values. */
		portalUrl?: string | null;
	}

	/** Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments. */
	export interface InterconnectAttachmentPartnerMetadataFormProperties {

		/** Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values. */
		interconnectName: FormControl<string | null | undefined>,

		/** Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values. */
		partnerName: FormControl<string | null | undefined>,

		/** URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values. */
		portalUrl: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentPartnerMetadataFormGroup() {
		return new FormGroup<InterconnectAttachmentPartnerMetadataFormProperties>({
			interconnectName: new FormControl<string | null | undefined>(undefined),
			partnerName: new FormControl<string | null | undefined>(undefined),
			portalUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED. */
	export interface InterconnectAttachmentPrivateInfo {

		/**
		 * [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
		 * Type: uint, 0 to 4,294,967,295
		 */
		tag8021q?: number | null;
	}

	/** Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED. */
	export interface InterconnectAttachmentPrivateInfoFormProperties {

		/**
		 * [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
		 * Type: uint, 0 to 4,294,967,295
		 */
		tag8021q: FormControl<number | null | undefined>,
	}
	export function CreateInterconnectAttachmentPrivateInfoFormGroup() {
		return new FormGroup<InterconnectAttachmentPrivateInfoFormProperties>({
			tag8021q: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum InterconnectAttachmentState { ACTIVE = 'ACTIVE', DEFUNCT = 'DEFUNCT', PARTNER_REQUEST_RECEIVED = 'PARTNER_REQUEST_RECEIVED', PENDING_CUSTOMER = 'PENDING_CUSTOMER', PENDING_PARTNER = 'PENDING_PARTNER', STATE_UNSPECIFIED = 'STATE_UNSPECIFIED', UNPROVISIONED = 'UNPROVISIONED' }

	export enum InterconnectAttachmentType { DEDICATED = 'DEDICATED', PARTNER = 'PARTNER', PARTNER_PROVIDER = 'PARTNER_PROVIDER' }

	export interface InterconnectAttachmentAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectAttachmentsScopedList resources. */
		items?: {[id: string]: InterconnectAttachmentsScopedList };

		/** [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectAttachmentAggregatedListWarning;
	}
	export interface InterconnectAttachmentAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of InterconnectAttachmentsScopedList resources. */
		items: FormControl<{[id: string]: InterconnectAttachmentsScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentAggregatedListFormGroup() {
		return new FormGroup<InterconnectAttachmentAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: InterconnectAttachmentsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectAttachmentsScopedList {

		/** A list of interconnect attachments contained in this scope. */
		interconnectAttachments?: Array<InterconnectAttachment>;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: InterconnectAttachmentsScopedListWarning;
	}
	export interface InterconnectAttachmentsScopedListFormProperties {
	}
	export function CreateInterconnectAttachmentsScopedListFormGroup() {
		return new FormGroup<InterconnectAttachmentsScopedListFormProperties>({
		});

	}

	export interface InterconnectAttachmentsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InterconnectAttachmentsScopedListWarningData?: Array<InterconnectAttachmentsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InterconnectAttachmentsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentsScopedListWarningFormGroup() {
		return new FormGroup<InterconnectAttachmentsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectAttachmentsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InterconnectAttachmentsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentsScopedListWarningDataFormGroup() {
		return new FormGroup<InterconnectAttachmentsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectAttachmentAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InterconnectAttachmentAggregatedListWarningData?: Array<InterconnectAttachmentAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InterconnectAttachmentAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentAggregatedListWarningFormGroup() {
		return new FormGroup<InterconnectAttachmentAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectAttachmentAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InterconnectAttachmentAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentAggregatedListWarningDataFormGroup() {
		return new FormGroup<InterconnectAttachmentAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response to the list request, and contains a list of interconnect attachments. */
	export interface InterconnectAttachmentList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectAttachment resources. */
		items?: Array<InterconnectAttachment>;

		/** [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectAttachmentListWarning;
	}

	/** Response to the list request, and contains a list of interconnect attachments. */
	export interface InterconnectAttachmentListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentListFormGroup() {
		return new FormGroup<InterconnectAttachmentListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectAttachmentListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InterconnectAttachmentListWarningData?: Array<InterconnectAttachmentListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InterconnectAttachmentListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentListWarningFormGroup() {
		return new FormGroup<InterconnectAttachmentListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectAttachmentListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InterconnectAttachmentListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectAttachmentListWarningDataFormGroup() {
		return new FormGroup<InterconnectAttachmentListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Diagnostics information about the Interconnect connection, which contains detailed and current technical information about Google's side of the connection. */
	export interface InterconnectDiagnostics {

		/** A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled. */
		arpCaches?: Array<InterconnectDiagnosticsARPEntry>;

		/** The aggregation type of the bundle interface. */
		bundleAggregationType?: InterconnectDiagnosticsBundleAggregationType | null;

		/** The operational status of the bundle interface. */
		bundleOperationalStatus?: InterconnectDiagnosticsBundleOperationalStatus | null;

		/** A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect. */
		links?: Array<InterconnectDiagnosticsLinkStatus>;

		/** The MAC address of the Interconnect's bundle interface. */
		macAddress?: string | null;
	}

	/** Diagnostics information about the Interconnect connection, which contains detailed and current technical information about Google's side of the connection. */
	export interface InterconnectDiagnosticsFormProperties {

		/** The aggregation type of the bundle interface. */
		bundleAggregationType: FormControl<InterconnectDiagnosticsBundleAggregationType | null | undefined>,

		/** The operational status of the bundle interface. */
		bundleOperationalStatus: FormControl<InterconnectDiagnosticsBundleOperationalStatus | null | undefined>,

		/** The MAC address of the Interconnect's bundle interface. */
		macAddress: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectDiagnosticsFormGroup() {
		return new FormGroup<InterconnectDiagnosticsFormProperties>({
			bundleAggregationType: new FormControl<InterconnectDiagnosticsBundleAggregationType | null | undefined>(undefined),
			bundleOperationalStatus: new FormControl<InterconnectDiagnosticsBundleOperationalStatus | null | undefined>(undefined),
			macAddress: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describing the ARP neighbor entries seen on this link */
	export interface InterconnectDiagnosticsARPEntry {

		/** The IP address of this ARP neighbor. */
		ipAddress?: string | null;

		/** The MAC address of this ARP neighbor. */
		macAddress?: string | null;
	}

	/** Describing the ARP neighbor entries seen on this link */
	export interface InterconnectDiagnosticsARPEntryFormProperties {

		/** The IP address of this ARP neighbor. */
		ipAddress: FormControl<string | null | undefined>,

		/** The MAC address of this ARP neighbor. */
		macAddress: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectDiagnosticsARPEntryFormGroup() {
		return new FormGroup<InterconnectDiagnosticsARPEntryFormProperties>({
			ipAddress: new FormControl<string | null | undefined>(undefined),
			macAddress: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum InterconnectDiagnosticsBundleAggregationType { BUNDLE_AGGREGATION_TYPE_LACP = 'BUNDLE_AGGREGATION_TYPE_LACP', BUNDLE_AGGREGATION_TYPE_STATIC = 'BUNDLE_AGGREGATION_TYPE_STATIC' }

	export enum InterconnectDiagnosticsBundleOperationalStatus { BUNDLE_OPERATIONAL_STATUS_DOWN = 'BUNDLE_OPERATIONAL_STATUS_DOWN', BUNDLE_OPERATIONAL_STATUS_UP = 'BUNDLE_OPERATIONAL_STATUS_UP' }

	export interface InterconnectDiagnosticsLinkStatus {

		/** A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled */
		arpCaches?: Array<InterconnectDiagnosticsARPEntry>;

		/** The unique ID for this link assigned during turn up by Google. */
		circuitId?: string | null;

		/** The Demarc address assigned by Google and provided in the LoA. */
		googleDemarc?: string | null;
		lacpStatus?: InterconnectDiagnosticsLinkLACPStatus;

		/** Describes the status of MACsec encryption on the link. */
		macsec?: InterconnectDiagnosticsMacsecStatus;

		/** The operational status of the link. */
		operationalStatus?: InterconnectDiagnosticsLinkStatusOperationalStatus | null;
		receivingOpticalPower?: InterconnectDiagnosticsLinkOpticalPower;
		transmittingOpticalPower?: InterconnectDiagnosticsLinkOpticalPower;
	}
	export interface InterconnectDiagnosticsLinkStatusFormProperties {

		/** The unique ID for this link assigned during turn up by Google. */
		circuitId: FormControl<string | null | undefined>,

		/** The Demarc address assigned by Google and provided in the LoA. */
		googleDemarc: FormControl<string | null | undefined>,

		/** The operational status of the link. */
		operationalStatus: FormControl<InterconnectDiagnosticsLinkStatusOperationalStatus | null | undefined>,
	}
	export function CreateInterconnectDiagnosticsLinkStatusFormGroup() {
		return new FormGroup<InterconnectDiagnosticsLinkStatusFormProperties>({
			circuitId: new FormControl<string | null | undefined>(undefined),
			googleDemarc: new FormControl<string | null | undefined>(undefined),
			operationalStatus: new FormControl<InterconnectDiagnosticsLinkStatusOperationalStatus | null | undefined>(undefined),
		});

	}

	export interface InterconnectDiagnosticsLinkLACPStatus {

		/** System ID of the port on Google's side of the LACP exchange. */
		googleSystemId?: string | null;

		/** System ID of the port on the neighbor's side of the LACP exchange. */
		neighborSystemId?: string | null;

		/** The state of a LACP link, which can take one of the following values: - ACTIVE: The link is configured and active within the bundle. - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty. */
		state?: InterconnectDiagnosticsLinkLACPStatusState | null;
	}
	export interface InterconnectDiagnosticsLinkLACPStatusFormProperties {

		/** System ID of the port on Google's side of the LACP exchange. */
		googleSystemId: FormControl<string | null | undefined>,

		/** System ID of the port on the neighbor's side of the LACP exchange. */
		neighborSystemId: FormControl<string | null | undefined>,

		/** The state of a LACP link, which can take one of the following values: - ACTIVE: The link is configured and active within the bundle. - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty. */
		state: FormControl<InterconnectDiagnosticsLinkLACPStatusState | null | undefined>,
	}
	export function CreateInterconnectDiagnosticsLinkLACPStatusFormGroup() {
		return new FormGroup<InterconnectDiagnosticsLinkLACPStatusFormProperties>({
			googleSystemId: new FormControl<string | null | undefined>(undefined),
			neighborSystemId: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<InterconnectDiagnosticsLinkLACPStatusState | null | undefined>(undefined),
		});

	}

	export enum InterconnectDiagnosticsLinkLACPStatusState { ACTIVE = 'ACTIVE', DETACHED = 'DETACHED' }


	/** Describes the status of MACsec encryption on the link. */
	export interface InterconnectDiagnosticsMacsecStatus {

		/** Indicates the Connectivity Association Key Name (CKN) currently being used if MACsec is operational. */
		ckn?: string | null;

		/** Indicates whether or not MACsec is operational on this link. */
		operational?: boolean | null;
	}

	/** Describes the status of MACsec encryption on the link. */
	export interface InterconnectDiagnosticsMacsecStatusFormProperties {

		/** Indicates the Connectivity Association Key Name (CKN) currently being used if MACsec is operational. */
		ckn: FormControl<string | null | undefined>,

		/** Indicates whether or not MACsec is operational on this link. */
		operational: FormControl<boolean | null | undefined>,
	}
	export function CreateInterconnectDiagnosticsMacsecStatusFormGroup() {
		return new FormGroup<InterconnectDiagnosticsMacsecStatusFormProperties>({
			ckn: new FormControl<string | null | undefined>(undefined),
			operational: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum InterconnectDiagnosticsLinkStatusOperationalStatus { LINK_OPERATIONAL_STATUS_DOWN = 'LINK_OPERATIONAL_STATUS_DOWN', LINK_OPERATIONAL_STATUS_UP = 'LINK_OPERATIONAL_STATUS_UP' }

	export interface InterconnectDiagnosticsLinkOpticalPower {

		/** The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed a warning threshold. - LOW_WARNING: The value has crossed below the low warning threshold. - HIGH_WARNING: The value has crossed above the high warning threshold. - LOW_ALARM: The value has crossed below the low alarm threshold. - HIGH_ALARM: The value has crossed above the high alarm threshold. */
		state?: InterconnectDiagnosticsLinkOpticalPowerState | null;

		/**
		 * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
		 * Type: float
		 */
		value?: number | null;
	}
	export interface InterconnectDiagnosticsLinkOpticalPowerFormProperties {

		/** The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed a warning threshold. - LOW_WARNING: The value has crossed below the low warning threshold. - HIGH_WARNING: The value has crossed above the high warning threshold. - LOW_ALARM: The value has crossed below the low alarm threshold. - HIGH_ALARM: The value has crossed above the high alarm threshold. */
		state: FormControl<InterconnectDiagnosticsLinkOpticalPowerState | null | undefined>,

		/**
		 * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
		 * Type: float
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreateInterconnectDiagnosticsLinkOpticalPowerFormGroup() {
		return new FormGroup<InterconnectDiagnosticsLinkOpticalPowerFormProperties>({
			state: new FormControl<InterconnectDiagnosticsLinkOpticalPowerState | null | undefined>(undefined),
			value: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum InterconnectDiagnosticsLinkOpticalPowerState { HIGH_ALARM = 'HIGH_ALARM', HIGH_WARNING = 'HIGH_WARNING', LOW_ALARM = 'LOW_ALARM', LOW_WARNING = 'LOW_WARNING', OK = 'OK' }


	/** Response to the list request, and contains a list of interconnects. */
	export interface InterconnectList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Interconnect resources. */
		items?: Array<Interconnect>;

		/** [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectListWarning;
	}

	/** Response to the list request, and contains a list of interconnects. */
	export interface InterconnectListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectListFormGroup() {
		return new FormGroup<InterconnectListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InterconnectListWarningData?: Array<InterconnectListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InterconnectListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectListWarningFormGroup() {
		return new FormGroup<InterconnectListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InterconnectListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectListWarningDataFormGroup() {
		return new FormGroup<InterconnectListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an Interconnect Attachment (VLAN) Location resource. You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read Creating VLAN Attachments. */
	export interface InterconnectLocation {

		/** [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character. */
		address?: string | null;

		/** [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: "zone1" or "zone2". */
		availabilityZone?: string | null;

		/** [Output only] List of features available at this InterconnectLocation, which can take one of the following values: - MACSEC */
		availableFeatures?: Array<string>;

		/** [Output only] List of link types available at this InterconnectLocation, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR - LINK_TYPE_ETHERNET_100G_LR */
		availableLinkTypes?: Array<InterconnectLinkType>;

		/** [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands". */
		city?: string | null;

		/** [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA */
		continent?: InterconnectLocationContinent | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] An optional description of the resource. */
		description?: string | null;

		/** [Output Only] The name of the provider for this facility (e.g., EQUINIX). */
		facilityProvider?: string | null;

		/** [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1). */
		facilityProviderFacilityId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb). */
		peeringdbFacilityId?: string | null;

		/** [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions. */
		regionInfos?: Array<InterconnectLocationRegionInfo>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects. */
		status?: InterconnectLocationStatus | null;

		/** [Output Only] Reserved for future use. */
		supportsPzs?: boolean | null;
	}

	/** Represents an Interconnect Attachment (VLAN) Location resource. You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read Creating VLAN Attachments. */
	export interface InterconnectLocationFormProperties {

		/** [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character. */
		address: FormControl<string | null | undefined>,

		/** [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: "zone1" or "zone2". */
		availabilityZone: FormControl<string | null | undefined>,

		/** [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands". */
		city: FormControl<string | null | undefined>,

		/** [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA */
		continent: FormControl<InterconnectLocationContinent | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] An optional description of the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The name of the provider for this facility (e.g., EQUINIX). */
		facilityProvider: FormControl<string | null | undefined>,

		/** [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1). */
		facilityProviderFacilityId: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb). */
		peeringdbFacilityId: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects. */
		status: FormControl<InterconnectLocationStatus | null | undefined>,

		/** [Output Only] Reserved for future use. */
		supportsPzs: FormControl<boolean | null | undefined>,
	}
	export function CreateInterconnectLocationFormGroup() {
		return new FormGroup<InterconnectLocationFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			availabilityZone: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			continent: new FormControl<InterconnectLocationContinent | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			facilityProvider: new FormControl<string | null | undefined>(undefined),
			facilityProviderFacilityId: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			peeringdbFacilityId: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<InterconnectLocationStatus | null | undefined>(undefined),
			supportsPzs: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum InterconnectLocationContinent { AFRICA = 'AFRICA', ASIA_PAC = 'ASIA_PAC', C_AFRICA = 'C_AFRICA', C_ASIA_PAC = 'C_ASIA_PAC', C_EUROPE = 'C_EUROPE', C_NORTH_AMERICA = 'C_NORTH_AMERICA', C_SOUTH_AMERICA = 'C_SOUTH_AMERICA', EUROPE = 'EUROPE', NORTH_AMERICA = 'NORTH_AMERICA', SOUTH_AMERICA = 'SOUTH_AMERICA' }


	/** Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region. */
	export interface InterconnectLocationRegionInfo {

		/** Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region. */
		expectedRttMs?: string | null;

		/** Identifies the network presence of this location. */
		locationPresence?: InterconnectLocationRegionInfoLocationPresence | null;

		/** URL for the region of this location. */
		region?: string | null;
	}

	/** Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region. */
	export interface InterconnectLocationRegionInfoFormProperties {

		/** Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region. */
		expectedRttMs: FormControl<string | null | undefined>,

		/** Identifies the network presence of this location. */
		locationPresence: FormControl<InterconnectLocationRegionInfoLocationPresence | null | undefined>,

		/** URL for the region of this location. */
		region: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectLocationRegionInfoFormGroup() {
		return new FormGroup<InterconnectLocationRegionInfoFormProperties>({
			expectedRttMs: new FormControl<string | null | undefined>(undefined),
			locationPresence: new FormControl<InterconnectLocationRegionInfoLocationPresence | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum InterconnectLocationRegionInfoLocationPresence { GLOBAL = 'GLOBAL', LOCAL_REGION = 'LOCAL_REGION', LP_GLOBAL = 'LP_GLOBAL', LP_LOCAL_REGION = 'LP_LOCAL_REGION' }

	export enum InterconnectLocationStatus { AVAILABLE = 'AVAILABLE', CLOSED = 'CLOSED' }


	/** Response to the list request, and contains a list of interconnect locations. */
	export interface InterconnectLocationList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectLocation resources. */
		items?: Array<InterconnectLocation>;

		/** [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectLocationListWarning;
	}

	/** Response to the list request, and contains a list of interconnect locations. */
	export interface InterconnectLocationListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectLocationListFormGroup() {
		return new FormGroup<InterconnectLocationListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectLocationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InterconnectLocationListWarningData?: Array<InterconnectLocationListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InterconnectLocationListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectLocationListWarningFormGroup() {
		return new FormGroup<InterconnectLocationListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectLocationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InterconnectLocationListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectLocationListWarningDataFormGroup() {
		return new FormGroup<InterconnectLocationListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** MACsec configuration information for the Interconnect connection. Contains the generated Connectivity Association Key Name (CKN) and the key (CAK) for this Interconnect connection. */
	export interface InterconnectMacsecConfig {

		/** A keychain placeholder describing a set of named key objects along with their start times. A MACsec CKN/CAK is generated for each key in the key chain. Google router automatically picks the key with the most recent startTime when establishing or re-establishing a MACsec secure link. */
		preSharedKeys?: Array<InterconnectMacsecConfigPreSharedKey>;
	}

	/** MACsec configuration information for the Interconnect connection. Contains the generated Connectivity Association Key Name (CKN) and the key (CAK) for this Interconnect connection. */
	export interface InterconnectMacsecConfigFormProperties {
	}
	export function CreateInterconnectMacsecConfigFormGroup() {
		return new FormGroup<InterconnectMacsecConfigFormProperties>({
		});

	}


	/** Describes a pre-shared key used to setup MACsec in static connectivity association key (CAK) mode. */
	export interface InterconnectMacsecConfigPreSharedKey {

		/** An auto-generated Connectivity Association Key (CAK) for this key. */
		cak?: string | null;

		/** An auto-generated Connectivity Association Key Name (CKN) for this key. */
		ckn?: string | null;

		/** User provided name for this pre-shared key. */
		name?: string | null;

		/** User provided timestamp on or after which this key is valid. */
		startTime?: string | null;
	}

	/** Describes a pre-shared key used to setup MACsec in static connectivity association key (CAK) mode. */
	export interface InterconnectMacsecConfigPreSharedKeyFormProperties {

		/** An auto-generated Connectivity Association Key (CAK) for this key. */
		cak: FormControl<string | null | undefined>,

		/** An auto-generated Connectivity Association Key Name (CKN) for this key. */
		ckn: FormControl<string | null | undefined>,

		/** User provided name for this pre-shared key. */
		name: FormControl<string | null | undefined>,

		/** User provided timestamp on or after which this key is valid. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectMacsecConfigPreSharedKeyFormGroup() {
		return new FormGroup<InterconnectMacsecConfigPreSharedKeyFormProperties>({
			cak: new FormControl<string | null | undefined>(undefined),
			ckn: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Cross-Cloud Interconnect Remote Location resource. You can use this resource to find remote location details about an Interconnect attachment (VLAN). */
	export interface InterconnectRemoteLocation {

		/** [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character. */
		address?: string | null;
		attachmentConfigurationConstraints?: InterconnectAttachmentConfigurationConstraints;

		/** [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands". */
		city?: string | null;
		constraints?: InterconnectRemoteLocationConstraints;

		/** [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA */
		continent?: InterconnectRemoteLocationContinent | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] An optional description of the resource. */
		description?: string | null;

		/** [Output Only] The name of the provider for this facility (e.g., EQUINIX). */
		facilityProvider?: string | null;

		/** [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1). */
		facilityProviderFacilityId?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#interconnectRemoteLocation for interconnect remote locations. */
		kind?: string | null;

		/** [Output Only] Link Aggregation Control Protocol (LACP) constraints, which can take one of the following values: LACP_SUPPORTED, LACP_UNSUPPORTED */
		lacp?: InterconnectRemoteLocationLacp | null;

		/**
		 * [Output Only] The maximum number of 100 Gbps ports supported in a link aggregation group (LAG). When linkType is 100 Gbps, requestedLinkCount cannot exceed max_lag_size_100_gbps.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxLagSize100Gbps?: number | null;

		/**
		 * [Output Only] The maximum number of 10 Gbps ports supported in a link aggregation group (LAG). When linkType is 10 Gbps, requestedLinkCount cannot exceed max_lag_size_10_gbps.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxLagSize10Gbps?: number | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb). */
		peeringdbFacilityId?: string | null;

		/** [Output Only] Permitted connections. */
		permittedConnections?: Array<InterconnectRemoteLocationPermittedConnections>;

		/** [Output Only] Indicates the service provider present at the remote location. Example values: "Amazon Web Services", "Microsoft Azure". */
		remoteService?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of this InterconnectRemoteLocation, which can take one of the following values: - CLOSED: The InterconnectRemoteLocation is closed and is unavailable for provisioning new Cross-Cloud Interconnects. - AVAILABLE: The InterconnectRemoteLocation is available for provisioning new Cross-Cloud Interconnects. */
		status?: InterconnectLocationStatus | null;
	}

	/** Represents a Cross-Cloud Interconnect Remote Location resource. You can use this resource to find remote location details about an Interconnect attachment (VLAN). */
	export interface InterconnectRemoteLocationFormProperties {

		/** [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character. */
		address: FormControl<string | null | undefined>,

		/** [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands". */
		city: FormControl<string | null | undefined>,

		/** [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA */
		continent: FormControl<InterconnectRemoteLocationContinent | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] An optional description of the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The name of the provider for this facility (e.g., EQUINIX). */
		facilityProvider: FormControl<string | null | undefined>,

		/** [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1). */
		facilityProviderFacilityId: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#interconnectRemoteLocation for interconnect remote locations. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Link Aggregation Control Protocol (LACP) constraints, which can take one of the following values: LACP_SUPPORTED, LACP_UNSUPPORTED */
		lacp: FormControl<InterconnectRemoteLocationLacp | null | undefined>,

		/**
		 * [Output Only] The maximum number of 100 Gbps ports supported in a link aggregation group (LAG). When linkType is 100 Gbps, requestedLinkCount cannot exceed max_lag_size_100_gbps.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxLagSize100Gbps: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The maximum number of 10 Gbps ports supported in a link aggregation group (LAG). When linkType is 10 Gbps, requestedLinkCount cannot exceed max_lag_size_10_gbps.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxLagSize10Gbps: FormControl<number | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb). */
		peeringdbFacilityId: FormControl<string | null | undefined>,

		/** [Output Only] Indicates the service provider present at the remote location. Example values: "Amazon Web Services", "Microsoft Azure". */
		remoteService: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of this InterconnectRemoteLocation, which can take one of the following values: - CLOSED: The InterconnectRemoteLocation is closed and is unavailable for provisioning new Cross-Cloud Interconnects. - AVAILABLE: The InterconnectRemoteLocation is available for provisioning new Cross-Cloud Interconnects. */
		status: FormControl<InterconnectLocationStatus | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationFormGroup() {
		return new FormGroup<InterconnectRemoteLocationFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			continent: new FormControl<InterconnectRemoteLocationContinent | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			facilityProvider: new FormControl<string | null | undefined>(undefined),
			facilityProviderFacilityId: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			lacp: new FormControl<InterconnectRemoteLocationLacp | null | undefined>(undefined),
			maxLagSize100Gbps: new FormControl<number | null | undefined>(undefined),
			maxLagSize10Gbps: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			peeringdbFacilityId: new FormControl<string | null | undefined>(undefined),
			remoteService: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<InterconnectLocationStatus | null | undefined>(undefined),
		});

	}

	export interface InterconnectRemoteLocationConstraints {

		/** [Output Only] Port pair remote location constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, PORT_PAIR_MATCHING_REMOTE_LOCATION. GCP's API refers only to individual ports, but the UI uses this field when ordering a pair of ports, to prevent users from accidentally ordering something that is incompatible with their cloud provider. Specifically, when ordering a redundant pair of Cross-Cloud Interconnect ports, and one of them uses a remote location with portPairMatchingRemoteLocation set to matching, the UI requires that both ports use the same remote location. */
		portPairRemoteLocation?: InterconnectRemoteLocationConstraintsPortPairRemoteLocation | null;

		/** [Output Only] Port pair VLAN constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_VLAN, PORT_PAIR_MATCHING_VLAN */
		portPairVlan?: InterconnectRemoteLocationConstraintsPortPairVlan | null;
		subnetLengthRange?: InterconnectRemoteLocationConstraintsSubnetLengthRange;
	}
	export interface InterconnectRemoteLocationConstraintsFormProperties {

		/** [Output Only] Port pair remote location constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, PORT_PAIR_MATCHING_REMOTE_LOCATION. GCP's API refers only to individual ports, but the UI uses this field when ordering a pair of ports, to prevent users from accidentally ordering something that is incompatible with their cloud provider. Specifically, when ordering a redundant pair of Cross-Cloud Interconnect ports, and one of them uses a remote location with portPairMatchingRemoteLocation set to matching, the UI requires that both ports use the same remote location. */
		portPairRemoteLocation: FormControl<InterconnectRemoteLocationConstraintsPortPairRemoteLocation | null | undefined>,

		/** [Output Only] Port pair VLAN constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_VLAN, PORT_PAIR_MATCHING_VLAN */
		portPairVlan: FormControl<InterconnectRemoteLocationConstraintsPortPairVlan | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationConstraintsFormGroup() {
		return new FormGroup<InterconnectRemoteLocationConstraintsFormProperties>({
			portPairRemoteLocation: new FormControl<InterconnectRemoteLocationConstraintsPortPairRemoteLocation | null | undefined>(undefined),
			portPairVlan: new FormControl<InterconnectRemoteLocationConstraintsPortPairVlan | null | undefined>(undefined),
		});

	}

	export enum InterconnectRemoteLocationConstraintsPortPairRemoteLocation { PORT_PAIR_MATCHING_REMOTE_LOCATION = 'PORT_PAIR_MATCHING_REMOTE_LOCATION', PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION = 'PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION' }

	export enum InterconnectRemoteLocationConstraintsPortPairVlan { PORT_PAIR_MATCHING_VLAN = 'PORT_PAIR_MATCHING_VLAN', PORT_PAIR_UNCONSTRAINED_VLAN = 'PORT_PAIR_UNCONSTRAINED_VLAN' }

	export interface InterconnectRemoteLocationConstraintsSubnetLengthRange {

		/** Type: int, -2,147,483,648 to 2,147,483,647 */
		max?: number | null;

		/** Type: int, -2,147,483,648 to 2,147,483,647 */
		min?: number | null;
	}
	export interface InterconnectRemoteLocationConstraintsSubnetLengthRangeFormProperties {

		/** Type: int, -2,147,483,648 to 2,147,483,647 */
		max: FormControl<number | null | undefined>,

		/** Type: int, -2,147,483,648 to 2,147,483,647 */
		min: FormControl<number | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationConstraintsSubnetLengthRangeFormGroup() {
		return new FormGroup<InterconnectRemoteLocationConstraintsSubnetLengthRangeFormProperties>({
			max: new FormControl<number | null | undefined>(undefined),
			min: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum InterconnectRemoteLocationContinent { AFRICA = 'AFRICA', ASIA_PAC = 'ASIA_PAC', EUROPE = 'EUROPE', NORTH_AMERICA = 'NORTH_AMERICA', SOUTH_AMERICA = 'SOUTH_AMERICA' }

	export enum InterconnectRemoteLocationLacp { LACP_SUPPORTED = 'LACP_SUPPORTED', LACP_UNSUPPORTED = 'LACP_UNSUPPORTED' }

	export interface InterconnectRemoteLocationPermittedConnections {

		/** [Output Only] URL of an Interconnect location that is permitted to connect to this Interconnect remote location. */
		interconnectLocation?: string | null;
	}
	export interface InterconnectRemoteLocationPermittedConnectionsFormProperties {

		/** [Output Only] URL of an Interconnect location that is permitted to connect to this Interconnect remote location. */
		interconnectLocation: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationPermittedConnectionsFormGroup() {
		return new FormGroup<InterconnectRemoteLocationPermittedConnectionsFormProperties>({
			interconnectLocation: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response to the list request, and contains a list of interconnect remote locations. */
	export interface InterconnectRemoteLocationList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InterconnectRemoteLocation resources. */
		items?: Array<InterconnectRemoteLocation>;

		/** [Output Only] Type of resource. Always compute#interconnectRemoteLocationList for lists of interconnect remote locations. */
		kind?: string | null;

		/** [Output Only] This token lets you get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: InterconnectRemoteLocationListWarning;
	}

	/** Response to the list request, and contains a list of interconnect remote locations. */
	export interface InterconnectRemoteLocationListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#interconnectRemoteLocationList for lists of interconnect remote locations. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token lets you get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationListFormGroup() {
		return new FormGroup<InterconnectRemoteLocationListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectRemoteLocationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		InterconnectRemoteLocationListWarningData?: Array<InterconnectRemoteLocationListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface InterconnectRemoteLocationListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationListWarningFormGroup() {
		return new FormGroup<InterconnectRemoteLocationListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface InterconnectRemoteLocationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface InterconnectRemoteLocationListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectRemoteLocationListWarningDataFormGroup() {
		return new FormGroup<InterconnectRemoteLocationListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response for the InterconnectsGetDiagnosticsRequest. */
	export interface InterconnectsGetDiagnosticsResponse {

		/** Diagnostics information about the Interconnect connection, which contains detailed and current technical information about Google's side of the connection. */
		result?: InterconnectDiagnostics;
	}

	/** Response for the InterconnectsGetDiagnosticsRequest. */
	export interface InterconnectsGetDiagnosticsResponseFormProperties {
	}
	export function CreateInterconnectsGetDiagnosticsResponseFormGroup() {
		return new FormGroup<InterconnectsGetDiagnosticsResponseFormProperties>({
		});

	}


	/** Response for the InterconnectsGetMacsecConfigRequest. */
	export interface InterconnectsGetMacsecConfigResponse {

		/** end_interface: MixerGetResponseWithEtagBuilder */
		etag?: string | null;

		/** MACsec configuration information for the Interconnect connection. Contains the generated Connectivity Association Key Name (CKN) and the key (CAK) for this Interconnect connection. */
		result?: InterconnectMacsecConfig;
	}

	/** Response for the InterconnectsGetMacsecConfigRequest. */
	export interface InterconnectsGetMacsecConfigResponseFormProperties {

		/** end_interface: MixerGetResponseWithEtagBuilder */
		etag: FormControl<string | null | undefined>,
	}
	export function CreateInterconnectsGetMacsecConfigResponseFormGroup() {
		return new FormGroup<InterconnectsGetMacsecConfigResponseFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a License resource. A License represents billing and aggregate usage data for public and marketplace images. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.  */
	export interface License {

		/** [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee. */
		chargesUseFee?: boolean | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional textual description of the resource; provided by the client when the resource is created. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#license for licenses. */
		kind?: string | null;

		/** [Output Only] The unique code used to attach this license to images, snapshots, and disks. */
		licenseCode?: string | null;

		/** Name of the resource. The name must be 1-63 characters long and comply with RFC1035. */
		name?: string | null;
		resourceRequirements?: LicenseResourceRequirements;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk. */
		transferable?: boolean | null;
	}

	/** Represents a License resource. A License represents billing and aggregate usage data for public and marketplace images. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.  */
	export interface LicenseFormProperties {

		/** [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee. */
		chargesUseFee: FormControl<boolean | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional textual description of the resource; provided by the client when the resource is created. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#license for licenses. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] The unique code used to attach this license to images, snapshots, and disks. */
		licenseCode: FormControl<string | null | undefined>,

		/** Name of the resource. The name must be 1-63 characters long and comply with RFC1035. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk. */
		transferable: FormControl<boolean | null | undefined>,
	}
	export function CreateLicenseFormGroup() {
		return new FormGroup<LicenseFormProperties>({
			chargesUseFee: new FormControl<boolean | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			licenseCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
			transferable: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface LicenseResourceRequirements {

		/**
		 * Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minGuestCpuCount?: number | null;

		/**
		 * Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minMemoryMb?: number | null;
	}
	export interface LicenseResourceRequirementsFormProperties {

		/**
		 * Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minGuestCpuCount: FormControl<number | null | undefined>,

		/**
		 * Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minMemoryMb: FormControl<number | null | undefined>,
	}
	export function CreateLicenseResourceRequirementsFormGroup() {
		return new FormGroup<LicenseResourceRequirementsFormProperties>({
			minGuestCpuCount: new FormControl<number | null | undefined>(undefined),
			minMemoryMb: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a License Code resource. A License Code is a unique identifier used to represent a license resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.  */
	export interface LicenseCode {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** [Output Only] Description of this License Code. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#licenseCode for licenses. */
		kind?: string | null;

		/** [Output Only] URL and description aliases of Licenses with the same License Code. */
		licenseAlias?: Array<LicenseCodeLicenseAlias>;

		/** [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer. */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Current state of this License Code. */
		state?: LicenseCodeState | null;

		/** [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred. */
		transferable?: boolean | null;
	}

	/** Represents a License Code resource. A License Code is a unique identifier used to represent a license resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.  */
	export interface LicenseCodeFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Description of this License Code. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#licenseCode for licenses. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Current state of this License Code. */
		state: FormControl<LicenseCodeState | null | undefined>,

		/** [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred. */
		transferable: FormControl<boolean | null | undefined>,
	}
	export function CreateLicenseCodeFormGroup() {
		return new FormGroup<LicenseCodeFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[0-9]{0,20}?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<LicenseCodeState | null | undefined>(undefined),
			transferable: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface LicenseCodeLicenseAlias {

		/** [Output Only] Description of this License Code. */
		description?: string | null;

		/** [Output Only] URL of license corresponding to this License Code. */
		selfLink?: string | null;
	}
	export interface LicenseCodeLicenseAliasFormProperties {

		/** [Output Only] Description of this License Code. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] URL of license corresponding to this License Code. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateLicenseCodeLicenseAliasFormGroup() {
		return new FormGroup<LicenseCodeLicenseAliasFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum LicenseCodeState { DISABLED = 'DISABLED', ENABLED = 'ENABLED', RESTRICTED = 'RESTRICTED', STATE_UNSPECIFIED = 'STATE_UNSPECIFIED', TERMINATED = 'TERMINATED' }

	export interface LicensesListResponse {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of License resources. */
		items?: Array<License>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: LicensesListResponseWarning;
	}
	export interface LicensesListResponseFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateLicensesListResponseFormGroup() {
		return new FormGroup<LicensesListResponseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface LicensesListResponseWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		LicensesListResponseWarningData?: Array<LicensesListResponseWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface LicensesListResponseWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateLicensesListResponseWarningFormGroup() {
		return new FormGroup<LicensesListResponseWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface LicensesListResponseWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface LicensesListResponseWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateLicensesListResponseWarningDataFormGroup() {
		return new FormGroup<LicensesListResponseWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface LocalDisk {

		/**
		 * Specifies the number of such disks.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		diskCount?: number | null;

		/**
		 * Specifies the size of the disk in base-2 GB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		diskSizeGb?: number | null;

		/** Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL. */
		diskType?: string | null;
	}
	export interface LocalDiskFormProperties {

		/**
		 * Specifies the number of such disks.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		diskCount: FormControl<number | null | undefined>,

		/**
		 * Specifies the size of the disk in base-2 GB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		diskSizeGb: FormControl<number | null | undefined>,

		/** Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL. */
		diskType: FormControl<string | null | undefined>,
	}
	export function CreateLocalDiskFormGroup() {
		return new FormGroup<LocalDiskFormProperties>({
			diskCount: new FormControl<number | null | undefined>(undefined),
			diskSizeGb: new FormControl<number | null | undefined>(undefined),
			diskType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a machine image resource. A machine image is a Compute Engine resource that stores all the configuration, metadata, permissions, and data from one or more disks required to create a Virtual machine (VM) instance. For more information, see Machine images. */
	export interface MachineImage {

		/** [Output Only] The creation timestamp for this machine image in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Input Only] Whether to attempt an application consistent machine image by informing the OS to prepare for the snapshot process. */
		guestFlush?: boolean | null;

		/** [Output Only] A unique identifier for this machine image. The server defines this identifier. */
		id?: string | null;
		instanceProperties?: InstanceProperties;

		/** [Output Only] The resource type, which is always compute#machineImage for machine image. */
		kind?: string | null;
		machineImageEncryptionKey?: CustomerEncryptionKey;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Output only. Reserved for future use. */
		satisfiesPzi?: boolean | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** An array of Machine Image specific properties for disks attached to the source instance */
		savedDisks?: Array<SavedDisk>;

		/** [Output Only] The URL for this machine image. The server defines this URL. */
		selfLink?: string | null;

		/** [Input Only] The customer-supplied encryption key of the disks attached to the source instance. Required if the source disk is protected by a customer-supplied encryption key. */
		sourceDiskEncryptionKeys?: Array<SourceDiskEncryptionKey>;

		/** The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance */
		sourceInstance?: string | null;

		/** DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field. */
		sourceInstanceProperties?: SourceInstanceProperties;

		/** [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING. */
		status?: MachineImageStatus | null;

		/** The regional or multi-regional Cloud Storage bucket location where the machine image is stored. */
		storageLocations?: Array<string>;

		/** [Output Only] Total size of the storage used by the machine image. */
		totalStorageBytes?: string | null;
	}

	/** Represents a machine image resource. A machine image is a Compute Engine resource that stores all the configuration, metadata, permissions, and data from one or more disks required to create a Virtual machine (VM) instance. For more information, see Machine images. */
	export interface MachineImageFormProperties {

		/** [Output Only] The creation timestamp for this machine image in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Input Only] Whether to attempt an application consistent machine image by informing the OS to prepare for the snapshot process. */
		guestFlush: FormControl<boolean | null | undefined>,

		/** [Output Only] A unique identifier for this machine image. The server defines this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#machineImage for machine image. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Output only. Reserved for future use. */
		satisfiesPzi: FormControl<boolean | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] The URL for this machine image. The server defines this URL. */
		selfLink: FormControl<string | null | undefined>,

		/** The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance */
		sourceInstance: FormControl<string | null | undefined>,

		/** [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING. */
		status: FormControl<MachineImageStatus | null | undefined>,

		/** [Output Only] Total size of the storage used by the machine image. */
		totalStorageBytes: FormControl<string | null | undefined>,
	}
	export function CreateMachineImageFormGroup() {
		return new FormGroup<MachineImageFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			guestFlush: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			satisfiesPzi: new FormControl<boolean | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sourceInstance: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<MachineImageStatus | null | undefined>(undefined),
			totalStorageBytes: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An instance-attached disk resource. */
	export interface SavedDisk {

		/** [Output Only] The architecture of the attached disk. */
		architecture?: AttachedDiskArchitecture | null;

		/** [Output Only] Type of the resource. Always compute#savedDisk for attached disks. */
		kind?: string | null;

		/** Specifies a URL of the disk attached to the source instance. */
		sourceDisk?: string | null;

		/** [Output Only] Size of the individual disk snapshot used by this machine image. */
		storageBytes?: string | null;

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus?: SavedDiskStorageBytesStatus | null;
	}

	/** An instance-attached disk resource. */
	export interface SavedDiskFormProperties {

		/** [Output Only] The architecture of the attached disk. */
		architecture: FormControl<AttachedDiskArchitecture | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#savedDisk for attached disks. */
		kind: FormControl<string | null | undefined>,

		/** Specifies a URL of the disk attached to the source instance. */
		sourceDisk: FormControl<string | null | undefined>,

		/** [Output Only] Size of the individual disk snapshot used by this machine image. */
		storageBytes: FormControl<string | null | undefined>,

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus: FormControl<SavedDiskStorageBytesStatus | null | undefined>,
	}
	export function CreateSavedDiskFormGroup() {
		return new FormGroup<SavedDiskFormProperties>({
			architecture: new FormControl<AttachedDiskArchitecture | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			sourceDisk: new FormControl<string | null | undefined>(undefined),
			storageBytes: new FormControl<string | null | undefined>(undefined),
			storageBytesStatus: new FormControl<SavedDiskStorageBytesStatus | null | undefined>(undefined),
		});

	}

	export enum SavedDiskStorageBytesStatus { UPDATING = 'UPDATING', UP_TO_DATE = 'UP_TO_DATE' }

	export interface SourceDiskEncryptionKey {
		diskEncryptionKey?: CustomerEncryptionKey;

		/** URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk */
		sourceDisk?: string | null;
	}
	export interface SourceDiskEncryptionKeyFormProperties {

		/** URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk */
		sourceDisk: FormControl<string | null | undefined>,
	}
	export function CreateSourceDiskEncryptionKeyFormGroup() {
		return new FormGroup<SourceDiskEncryptionKeyFormProperties>({
			sourceDisk: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field. */
	export interface SourceInstanceProperties {

		/** Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information. */
		canIpForward?: boolean | null;

		/** Whether the instance created from this machine image should be protected against deletion. */
		deletionProtection?: boolean | null;

		/** An optional text description for the instances that are created from this machine image. */
		description?: string | null;

		/** An array of disks that are associated with the instances that are created from this machine image. */
		disks?: Array<SavedAttachedDisk>;

		/** A list of guest accelerator cards' type and count to use for instances created from this machine image. */
		guestAccelerators?: Array<AcceleratorConfig>;

		/** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
		keyRevocationActionType?: InstancePropertiesKeyRevocationActionType | null;

		/** Labels to apply to instances that are created from this machine image. */
		labels?: {[id: string]: string };

		/** The machine type to use for instances that are created from this machine image. */
		machineType?: string | null;

		/** A metadata key/value entry. */
		metadata?: Metadata;

		/** Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform. */
		minCpuPlatform?: string | null;

		/** An array of network access configurations for this interface. */
		networkInterfaces?: Array<NetworkInterface>;

		/** Sets the scheduling options for an Instance. */
		scheduling?: Scheduling;

		/** A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances. */
		serviceAccounts?: Array<ServiceAccount>;

		/** A set of instance tags. */
		tags?: Tags;
	}

	/** DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field. */
	export interface SourceInstancePropertiesFormProperties {

		/** Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information. */
		canIpForward: FormControl<boolean | null | undefined>,

		/** Whether the instance created from this machine image should be protected against deletion. */
		deletionProtection: FormControl<boolean | null | undefined>,

		/** An optional text description for the instances that are created from this machine image. */
		description: FormControl<string | null | undefined>,

		/** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
		keyRevocationActionType: FormControl<InstancePropertiesKeyRevocationActionType | null | undefined>,

		/** Labels to apply to instances that are created from this machine image. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The machine type to use for instances that are created from this machine image. */
		machineType: FormControl<string | null | undefined>,

		/** Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform. */
		minCpuPlatform: FormControl<string | null | undefined>,
	}
	export function CreateSourceInstancePropertiesFormGroup() {
		return new FormGroup<SourceInstancePropertiesFormProperties>({
			canIpForward: new FormControl<boolean | null | undefined>(undefined),
			deletionProtection: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			keyRevocationActionType: new FormControl<InstancePropertiesKeyRevocationActionType | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			machineType: new FormControl<string | null | undefined>(undefined),
			minCpuPlatform: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DEPRECATED: Please use compute#savedDisk instead. An instance-attached disk resource. */
	export interface SavedAttachedDisk {

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete?: boolean | null;

		/** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
		boot?: boolean | null;

		/** Specifies the name of the disk attached to the source instance. */
		deviceName?: string | null;
		diskEncryptionKey?: CustomerEncryptionKey;

		/** The size of the disk in base-2 GB. */
		diskSizeGb?: string | null;

		/** [Output Only] URL of the disk type resource. For example: projects/project /zones/zone/diskTypes/pd-standard or pd-ssd */
		diskType?: string | null;

		/** A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature>;

		/**
		 * Specifies zero-based index of the disk that is attached to the source instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		index?: number | null;

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. */
		interface?: AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null;

		/** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
		kind?: string | null;

		/** [Output Only] Any valid publicly visible licenses. */
		licenses?: Array<string>;

		/** The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY. */
		mode?: AttachedDiskMode | null;

		/** Specifies a URL of the disk attached to the source instance. */
		source?: string | null;

		/** [Output Only] A size of the storage used by the disk's snapshot by this machine image. */
		storageBytes?: string | null;

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus?: SavedDiskStorageBytesStatus | null;

		/** Specifies the type of the attached disk, either SCRATCH or PERSISTENT. */
		type?: AttachedDiskType | null;
	}

	/** DEPRECATED: Please use compute#savedDisk instead. An instance-attached disk resource. */
	export interface SavedAttachedDiskFormProperties {

		/** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
		autoDelete: FormControl<boolean | null | undefined>,

		/** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
		boot: FormControl<boolean | null | undefined>,

		/** Specifies the name of the disk attached to the source instance. */
		deviceName: FormControl<string | null | undefined>,

		/** The size of the disk in base-2 GB. */
		diskSizeGb: FormControl<string | null | undefined>,

		/** [Output Only] URL of the disk type resource. For example: projects/project /zones/zone/diskTypes/pd-standard or pd-ssd */
		diskType: FormControl<string | null | undefined>,

		/**
		 * Specifies zero-based index of the disk that is attached to the source instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		index: FormControl<number | null | undefined>,

		/** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. */
		interface: FormControl<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
		kind: FormControl<string | null | undefined>,

		/** The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY. */
		mode: FormControl<AttachedDiskMode | null | undefined>,

		/** Specifies a URL of the disk attached to the source instance. */
		source: FormControl<string | null | undefined>,

		/** [Output Only] A size of the storage used by the disk's snapshot by this machine image. */
		storageBytes: FormControl<string | null | undefined>,

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus: FormControl<SavedDiskStorageBytesStatus | null | undefined>,

		/** Specifies the type of the attached disk, either SCRATCH or PERSISTENT. */
		type: FormControl<AttachedDiskType | null | undefined>,
	}
	export function CreateSavedAttachedDiskFormGroup() {
		return new FormGroup<SavedAttachedDiskFormProperties>({
			autoDelete: new FormControl<boolean | null | undefined>(undefined),
			boot: new FormControl<boolean | null | undefined>(undefined),
			deviceName: new FormControl<string | null | undefined>(undefined),
			diskSizeGb: new FormControl<string | null | undefined>(undefined),
			diskType: new FormControl<string | null | undefined>(undefined),
			index: new FormControl<number | null | undefined>(undefined),
			interface: new FormControl<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			mode: new FormControl<AttachedDiskMode | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			storageBytes: new FormControl<string | null | undefined>(undefined),
			storageBytesStatus: new FormControl<SavedDiskStorageBytesStatus | null | undefined>(undefined),
			type: new FormControl<AttachedDiskType | null | undefined>(undefined),
		});

	}

	export enum MachineImageStatus { CREATING = 'CREATING', DELETING = 'DELETING', INVALID = 'INVALID', READY = 'READY', UPLOADING = 'UPLOADING' }


	/** A list of machine images. */
	export interface MachineImageList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of MachineImage resources. */
		items?: Array<MachineImage>;

		/** [Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: MachineImageListWarning;
	}

	/** A list of machine images. */
	export interface MachineImageListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateMachineImageListFormGroup() {
		return new FormGroup<MachineImageListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineImageListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		MachineImageListWarningData?: Array<MachineImageListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface MachineImageListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateMachineImageListWarningFormGroup() {
		return new FormGroup<MachineImageListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineImageListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface MachineImageListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateMachineImageListWarningDataFormGroup() {
		return new FormGroup<MachineImageListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Machine Type resource. You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types. */
	export interface MachineType {

		/** [Output Only] A list of accelerator configurations assigned to this machine type. */
		MachineTypeAccelerators?: Array<MachineTypeAccelerators>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** [Output Only] An optional textual description of the resource. */
		description?: string | null;

		/**
		 * [Output Only] The number of virtual CPUs that are available to the instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestCpus?: number | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/**
		 * [Deprecated] This property is deprecated and will never be populated with any relevant values.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		imageSpaceGb?: number | null;

		/** [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information. */
		isSharedCpu?: boolean | null;

		/** [Output Only] The type of the resource. Always compute#machineType for machine types. */
		kind?: string | null;

		/**
		 * [Output Only] Maximum persistent disks allowed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maximumPersistentDisks?: number | null;

		/** [Output Only] Maximum total persistent disks size (GB) allowed. */
		maximumPersistentDisksSizeGb?: string | null;

		/**
		 * [Output Only] The amount of physical memory available to the instance, defined in MB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		memoryMb?: number | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] A list of extended scratch disks assigned to the instance. */
		MachineTypeScratchDisks?: Array<MachineTypeScratchDisks>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The name of the zone where the machine type resides, such as us-central1-a. */
		zone?: string | null;
	}

	/** Represents a Machine Type resource. You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types. */
	export interface MachineTypeFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] An optional textual description of the resource. */
		description: FormControl<string | null | undefined>,

		/**
		 * [Output Only] The number of virtual CPUs that are available to the instance.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestCpus: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/**
		 * [Deprecated] This property is deprecated and will never be populated with any relevant values.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		imageSpaceGb: FormControl<number | null | undefined>,

		/** [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information. */
		isSharedCpu: FormControl<boolean | null | undefined>,

		/** [Output Only] The type of the resource. Always compute#machineType for machine types. */
		kind: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Maximum persistent disks allowed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maximumPersistentDisks: FormControl<number | null | undefined>,

		/** [Output Only] Maximum total persistent disks size (GB) allowed. */
		maximumPersistentDisksSizeGb: FormControl<string | null | undefined>,

		/**
		 * [Output Only] The amount of physical memory available to the instance, defined in MB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		memoryMb: FormControl<number | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The name of the zone where the machine type resides, such as us-central1-a. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeFormGroup() {
		return new FormGroup<MachineTypeFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			guestCpus: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			imageSpaceGb: new FormControl<number | null | undefined>(undefined),
			isSharedCpu: new FormControl<boolean | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			maximumPersistentDisks: new FormControl<number | null | undefined>(undefined),
			maximumPersistentDisksSizeGb: new FormControl<string | null | undefined>(undefined),
			memoryMb: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypeAccelerators {

		/**
		 * Number of accelerator cards exposed to the guest.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestAcceleratorCount?: number | null;

		/** The accelerator type resource name, not a full URL, e.g. nvidia-tesla-t4. */
		guestAcceleratorType?: string | null;
	}
	export interface MachineTypeAcceleratorsFormProperties {

		/**
		 * Number of accelerator cards exposed to the guest.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestAcceleratorCount: FormControl<number | null | undefined>,

		/** The accelerator type resource name, not a full URL, e.g. nvidia-tesla-t4. */
		guestAcceleratorType: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeAcceleratorsFormGroup() {
		return new FormGroup<MachineTypeAcceleratorsFormProperties>({
			guestAcceleratorCount: new FormControl<number | null | undefined>(undefined),
			guestAcceleratorType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypeScratchDisks {

		/**
		 * Size of the scratch disk, defined in GB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		diskGb?: number | null;
	}
	export interface MachineTypeScratchDisksFormProperties {

		/**
		 * Size of the scratch disk, defined in GB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		diskGb: FormControl<number | null | undefined>,
	}
	export function CreateMachineTypeScratchDisksFormGroup() {
		return new FormGroup<MachineTypeScratchDisksFormProperties>({
			diskGb: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface MachineTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of MachineTypesScopedList resources. */
		items?: {[id: string]: MachineTypesScopedList };

		/** [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: MachineTypeAggregatedListWarning;
	}
	export interface MachineTypeAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of MachineTypesScopedList resources. */
		items: FormControl<{[id: string]: MachineTypesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeAggregatedListFormGroup() {
		return new FormGroup<MachineTypeAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: MachineTypesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypesScopedList {

		/** [Output Only] A list of machine types contained in this scope. */
		machineTypes?: Array<MachineType>;

		/** [Output Only] An informational warning that appears when the machine types list is empty. */
		warning?: MachineTypesScopedListWarning;
	}
	export interface MachineTypesScopedListFormProperties {
	}
	export function CreateMachineTypesScopedListFormGroup() {
		return new FormGroup<MachineTypesScopedListFormProperties>({
		});

	}

	export interface MachineTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		MachineTypesScopedListWarningData?: Array<MachineTypesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface MachineTypesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypesScopedListWarningFormGroup() {
		return new FormGroup<MachineTypesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface MachineTypesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypesScopedListWarningDataFormGroup() {
		return new FormGroup<MachineTypesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		MachineTypeAggregatedListWarningData?: Array<MachineTypeAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface MachineTypeAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeAggregatedListWarningFormGroup() {
		return new FormGroup<MachineTypeAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface MachineTypeAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeAggregatedListWarningDataFormGroup() {
		return new FormGroup<MachineTypeAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of machine types. */
	export interface MachineTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of MachineType resources. */
		items?: Array<MachineType>;

		/** [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: MachineTypeListWarning;
	}

	/** Contains a list of machine types. */
	export interface MachineTypeListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeListFormGroup() {
		return new FormGroup<MachineTypeListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		MachineTypeListWarningData?: Array<MachineTypeListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface MachineTypeListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeListWarningFormGroup() {
		return new FormGroup<MachineTypeListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MachineTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface MachineTypeListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateMachineTypeListWarningDataFormGroup() {
		return new FormGroup<MachineTypeListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains NAT IP information of a NAT config (i.e. usage status, mode). */
	export interface NatIpInfo {

		/** A list of all NAT IPs assigned to this NAT config. */
		natIpInfoMappings?: Array<NatIpInfoNatIpInfoMapping>;

		/** Name of the NAT config which the NAT IP belongs to. */
		natName?: string | null;
	}

	/** Contains NAT IP information of a NAT config (i.e. usage status, mode). */
	export interface NatIpInfoFormProperties {

		/** Name of the NAT config which the NAT IP belongs to. */
		natName: FormControl<string | null | undefined>,
	}
	export function CreateNatIpInfoFormGroup() {
		return new FormGroup<NatIpInfoFormProperties>({
			natName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information of a NAT IP. */
	export interface NatIpInfoNatIpInfoMapping {

		/** Specifies whether NAT IP is auto or manual. */
		mode?: NatIpInfoNatIpInfoMappingMode | null;

		/** NAT IP address. For example: 203.0.113.11. */
		natIp?: string | null;

		/** Specifies whether NAT IP is currently serving at least one endpoint or not. */
		usage?: NatIpInfoNatIpInfoMappingUsage | null;
	}

	/** Contains information of a NAT IP. */
	export interface NatIpInfoNatIpInfoMappingFormProperties {

		/** Specifies whether NAT IP is auto or manual. */
		mode: FormControl<NatIpInfoNatIpInfoMappingMode | null | undefined>,

		/** NAT IP address. For example: 203.0.113.11. */
		natIp: FormControl<string | null | undefined>,

		/** Specifies whether NAT IP is currently serving at least one endpoint or not. */
		usage: FormControl<NatIpInfoNatIpInfoMappingUsage | null | undefined>,
	}
	export function CreateNatIpInfoNatIpInfoMappingFormGroup() {
		return new FormGroup<NatIpInfoNatIpInfoMappingFormProperties>({
			mode: new FormControl<NatIpInfoNatIpInfoMappingMode | null | undefined>(undefined),
			natIp: new FormControl<string | null | undefined>(undefined),
			usage: new FormControl<NatIpInfoNatIpInfoMappingUsage | null | undefined>(undefined),
		});

	}

	export enum NatIpInfoNatIpInfoMappingMode { AUTO = 'AUTO', MANUAL = 'MANUAL' }

	export enum NatIpInfoNatIpInfoMappingUsage { IN_USE = 'IN_USE', UNUSED = 'UNUSED' }

	export interface NatIpInfoResponse {

		/** [Output Only] A list of NAT IP information. */
		result?: Array<NatIpInfo>;
	}
	export interface NatIpInfoResponseFormProperties {
	}
	export function CreateNatIpInfoResponseFormGroup() {
		return new FormGroup<NatIpInfoResponseFormProperties>({
		});

	}


	/** Represents a VPC Network resource. Networks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network. */
	export interface Network {

		/** Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created. */
		IPv4Range?: string | null;

		/** Must be set to create a VPC network. If not set, a legacy network is created. When set to true, the VPC network is created in auto mode. When set to false, the VPC network is created in custom mode. An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges. For custom mode VPC networks, you can add subnets using the subnetworks insert method. */
		autoCreateSubnetworks?: boolean | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** Enable ULA internal ipv6 on this network. Enabling this feature will assign a /48 from google defined ULA prefix fd20::/20. . */
		enableUlaInternalIpv6?: boolean | null;

		/** [Output Only] URL of the firewall policy the network is associated with. */
		firewallPolicy?: string | null;

		/** [Output Only] The gateway address for default routing out of the network, selected by Google Cloud. */
		gatewayIPv4?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** When enabling ula internal ipv6, caller optionally can specify the /48 range they want from the google defined ULA prefix fd20::/20. The input must be a valid /48 ULA IPv6 address and must be within the fd20::/20. Operation will fail if the speficied /48 is already in used by another resource. If the field is not speficied, then a /48 range will be randomly allocated from fd20::/20 and returned via this field. . */
		internalIpv6Range?: string | null;

		/** [Output Only] Type of the resource. Always compute#network for networks. */
		kind?: string | null;

		/**
		 * Maximum Transmission Unit in bytes. The minimum value for this field is 1300 and the maximum value is 8896. The suggested value is 1500, which is the default MTU used on the Internet, or 8896 if you want to use Jumbo frames. If unspecified, the value defaults to 1460.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		mtu?: number | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name?: string | null;

		/** The network firewall policy enforcement order. Can be either AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to AFTER_CLASSIC_FIREWALL if the field is not specified. */
		networkFirewallPolicyEnforcementOrder?: NetworkNetworkFirewallPolicyEnforcementOrder | null;

		/** [Output Only] A list of network peerings for the resource. */
		peerings?: Array<NetworkPeering>;

		/** A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide. */
		routingConfig?: NetworkRoutingConfig;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Server-defined URL for this resource with the resource id. */
		selfLinkWithId?: string | null;

		/** [Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network. */
		subnetworks?: Array<string>;
	}

	/** Represents a VPC Network resource. Networks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network. */
	export interface NetworkFormProperties {

		/** Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created. */
		IPv4Range: FormControl<string | null | undefined>,

		/** Must be set to create a VPC network. If not set, a legacy network is created. When set to true, the VPC network is created in auto mode. When set to false, the VPC network is created in custom mode. An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges. For custom mode VPC networks, you can add subnets using the subnetworks insert method. */
		autoCreateSubnetworks: FormControl<boolean | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this field when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Enable ULA internal ipv6 on this network. Enabling this feature will assign a /48 from google defined ULA prefix fd20::/20. . */
		enableUlaInternalIpv6: FormControl<boolean | null | undefined>,

		/** [Output Only] URL of the firewall policy the network is associated with. */
		firewallPolicy: FormControl<string | null | undefined>,

		/** [Output Only] The gateway address for default routing out of the network, selected by Google Cloud. */
		gatewayIPv4: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** When enabling ula internal ipv6, caller optionally can specify the /48 range they want from the google defined ULA prefix fd20::/20. The input must be a valid /48 ULA IPv6 address and must be within the fd20::/20. Operation will fail if the speficied /48 is already in used by another resource. If the field is not speficied, then a /48 range will be randomly allocated from fd20::/20 and returned via this field. . */
		internalIpv6Range: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#network for networks. */
		kind: FormControl<string | null | undefined>,

		/**
		 * Maximum Transmission Unit in bytes. The minimum value for this field is 1300 and the maximum value is 8896. The suggested value is 1500, which is the default MTU used on the Internet, or 8896 if you want to use Jumbo frames. If unspecified, the value defaults to 1460.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		mtu: FormControl<number | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name: FormControl<string | null | undefined>,

		/** The network firewall policy enforcement order. Can be either AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to AFTER_CLASSIC_FIREWALL if the field is not specified. */
		networkFirewallPolicyEnforcementOrder: FormControl<NetworkNetworkFirewallPolicyEnforcementOrder | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource with the resource id. */
		selfLinkWithId: FormControl<string | null | undefined>,
	}
	export function CreateNetworkFormGroup() {
		return new FormGroup<NetworkFormProperties>({
			IPv4Range: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[0-9]{1,3}(?:\.[0-9]{1,3}){3}/[0-9]{1,2}')]),
			autoCreateSubnetworks: new FormControl<boolean | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enableUlaInternalIpv6: new FormControl<boolean | null | undefined>(undefined),
			firewallPolicy: new FormControl<string | null | undefined>(undefined),
			gatewayIPv4: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[0-9]{1,3}(?:\.[0-9]{1,3}){3}')]),
			id: new FormControl<string | null | undefined>(undefined),
			internalIpv6Range: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			mtu: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			networkFirewallPolicyEnforcementOrder: new FormControl<NetworkNetworkFirewallPolicyEnforcementOrder | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			selfLinkWithId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NetworkNetworkFirewallPolicyEnforcementOrder { AFTER_CLASSIC_FIREWALL = 'AFTER_CLASSIC_FIREWALL', BEFORE_CLASSIC_FIREWALL = 'BEFORE_CLASSIC_FIREWALL' }


	/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
	export interface NetworkPeering {

		/** This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		autoCreateRoutes?: boolean | null;

		/** Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		exchangeSubnetRoutes?: boolean | null;

		/** Whether to export the custom routes to peer network. The default value is false. */
		exportCustomRoutes?: boolean | null;

		/** Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field. */
		exportSubnetRoutesWithPublicIp?: boolean | null;

		/** Whether to import the custom routes from peer network. The default value is false. */
		importCustomRoutes?: boolean | null;

		/** Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field. */
		importSubnetRoutesWithPublicIp?: boolean | null;

		/** Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network. */
		network?: string | null;

		/**
		 * Maximum Transmission Unit in bytes.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		peerMtu?: number | null;

		/** Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. */
		stackType?: NetworkInterfaceStackType | null;

		/** [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network. */
		state?: NetworkPeeringState | null;

		/** [Output Only] Details about the current state of the peering. */
		stateDetails?: string | null;
	}

	/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
	export interface NetworkPeeringFormProperties {

		/** This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		autoCreateRoutes: FormControl<boolean | null | undefined>,

		/** Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		exchangeSubnetRoutes: FormControl<boolean | null | undefined>,

		/** Whether to export the custom routes to peer network. The default value is false. */
		exportCustomRoutes: FormControl<boolean | null | undefined>,

		/** Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field. */
		exportSubnetRoutesWithPublicIp: FormControl<boolean | null | undefined>,

		/** Whether to import the custom routes from peer network. The default value is false. */
		importCustomRoutes: FormControl<boolean | null | undefined>,

		/** Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field. */
		importSubnetRoutesWithPublicIp: FormControl<boolean | null | undefined>,

		/** Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network. */
		network: FormControl<string | null | undefined>,

		/**
		 * Maximum Transmission Unit in bytes.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		peerMtu: FormControl<number | null | undefined>,

		/** Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. */
		stackType: FormControl<NetworkInterfaceStackType | null | undefined>,

		/** [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network. */
		state: FormControl<NetworkPeeringState | null | undefined>,

		/** [Output Only] Details about the current state of the peering. */
		stateDetails: FormControl<string | null | undefined>,
	}
	export function CreateNetworkPeeringFormGroup() {
		return new FormGroup<NetworkPeeringFormProperties>({
			autoCreateRoutes: new FormControl<boolean | null | undefined>(undefined),
			exchangeSubnetRoutes: new FormControl<boolean | null | undefined>(undefined),
			exportCustomRoutes: new FormControl<boolean | null | undefined>(undefined),
			exportSubnetRoutesWithPublicIp: new FormControl<boolean | null | undefined>(undefined),
			importCustomRoutes: new FormControl<boolean | null | undefined>(undefined),
			importSubnetRoutesWithPublicIp: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			network: new FormControl<string | null | undefined>(undefined),
			peerMtu: new FormControl<number | null | undefined>(undefined),
			stackType: new FormControl<NetworkInterfaceStackType | null | undefined>(undefined),
			state: new FormControl<NetworkPeeringState | null | undefined>(undefined),
			stateDetails: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NetworkPeeringState { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }


	/** A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide. */
	export interface NetworkRoutingConfig {

		/** The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions. */
		routingMode?: NetworkRoutingConfigRoutingMode | null;
	}

	/** A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide. */
	export interface NetworkRoutingConfigFormProperties {

		/** The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions. */
		routingMode: FormControl<NetworkRoutingConfigRoutingMode | null | undefined>,
	}
	export function CreateNetworkRoutingConfigFormGroup() {
		return new FormGroup<NetworkRoutingConfigFormProperties>({
			routingMode: new FormControl<NetworkRoutingConfigRoutingMode | null | undefined>(undefined),
		});

	}

	export enum NetworkRoutingConfigRoutingMode { GLOBAL = 'GLOBAL', REGIONAL = 'REGIONAL' }


	/** NetworkAttachments A network attachment resource ... */
	export interface NetworkAttachment {

		/** [Output Only] An array of connections for all the producers connected to this network attachment. */
		connectionEndpoints?: Array<NetworkAttachmentConnectedEndpoint>;
		connectionPreference?: NetworkAttachmentConnectionPreference | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id?: string | null;

		/** [Output Only] Type of the resource. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated. Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks. */
		network?: string | null;

		/** Projects that are allowed to connect to this network attachment. The project can be specified using its id or number. */
		producerAcceptLists?: Array<string>;

		/** Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number. */
		producerRejectLists?: Array<string>;

		/** [Output Only] URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Server-defined URL for this resource's resource id. */
		selfLinkWithId?: string | null;

		/** An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment. */
		subnetworks?: Array<string>;
	}

	/** NetworkAttachments A network attachment resource ... */
	export interface NetworkAttachmentFormProperties {
		connectionPreference: FormControl<NetworkAttachmentConnectionPreference | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated. Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks. */
		network: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource's resource id. */
		selfLinkWithId: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentFormGroup() {
		return new FormGroup<NetworkAttachmentFormProperties>({
			connectionPreference: new FormControl<NetworkAttachmentConnectionPreference | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			selfLinkWithId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** [Output Only] A connection connected to this network attachment. */
	export interface NetworkAttachmentConnectedEndpoint {

		/** The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless. */
		ipAddress?: string | null;

		/** The IPv6 address assigned to the producer instance network interface. This is only assigned when the stack types of both the instance network interface and the consumer subnet are IPv4_IPv6. */
		ipv6Address?: string | null;

		/** The project id or number of the interface to which the IP was assigned. */
		projectIdOrNum?: string | null;

		/** Alias IP ranges from the same subnetwork. */
		secondaryIpCidrRanges?: Array<string>;

		/** The status of a connected endpoint to this network attachment. */
		status?: ForwardingRulePscConnectionStatus | null;

		/** The subnetwork used to assign the IP to the producer instance network interface. */
		subnetwork?: string | null;

		/** [Output Only] The CIDR range of the subnet from which the IPv4 internal IP was allocated from. */
		subnetworkCidrRange?: string | null;
	}

	/** [Output Only] A connection connected to this network attachment. */
	export interface NetworkAttachmentConnectedEndpointFormProperties {

		/** The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless. */
		ipAddress: FormControl<string | null | undefined>,

		/** The IPv6 address assigned to the producer instance network interface. This is only assigned when the stack types of both the instance network interface and the consumer subnet are IPv4_IPv6. */
		ipv6Address: FormControl<string | null | undefined>,

		/** The project id or number of the interface to which the IP was assigned. */
		projectIdOrNum: FormControl<string | null | undefined>,

		/** The status of a connected endpoint to this network attachment. */
		status: FormControl<ForwardingRulePscConnectionStatus | null | undefined>,

		/** The subnetwork used to assign the IP to the producer instance network interface. */
		subnetwork: FormControl<string | null | undefined>,

		/** [Output Only] The CIDR range of the subnet from which the IPv4 internal IP was allocated from. */
		subnetworkCidrRange: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentConnectedEndpointFormGroup() {
		return new FormGroup<NetworkAttachmentConnectedEndpointFormProperties>({
			ipAddress: new FormControl<string | null | undefined>(undefined),
			ipv6Address: new FormControl<string | null | undefined>(undefined),
			projectIdOrNum: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<ForwardingRulePscConnectionStatus | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
			subnetworkCidrRange: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NetworkAttachmentConnectionPreference { ACCEPT_AUTOMATIC = 'ACCEPT_AUTOMATIC', ACCEPT_MANUAL = 'ACCEPT_MANUAL', INVALID = 'INVALID' }


	/** Contains a list of NetworkAttachmentsScopedList. */
	export interface NetworkAttachmentAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkAttachmentsScopedList resources. */
		items?: {[id: string]: NetworkAttachmentsScopedList };
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkAttachmentAggregatedListWarning;
	}

	/** Contains a list of NetworkAttachmentsScopedList. */
	export interface NetworkAttachmentAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of NetworkAttachmentsScopedList resources. */
		items: FormControl<{[id: string]: NetworkAttachmentsScopedList } | null | undefined>,
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentAggregatedListFormGroup() {
		return new FormGroup<NetworkAttachmentAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: NetworkAttachmentsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentsScopedList {

		/** A list of NetworkAttachments contained in this scope. */
		networkAttachments?: Array<NetworkAttachment>;

		/** Informational warning which replaces the list of network attachments when the list is empty. */
		warning?: NetworkAttachmentsScopedListWarning;
	}
	export interface NetworkAttachmentsScopedListFormProperties {
	}
	export function CreateNetworkAttachmentsScopedListFormGroup() {
		return new FormGroup<NetworkAttachmentsScopedListFormProperties>({
		});

	}

	export interface NetworkAttachmentsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkAttachmentsScopedListWarningData?: Array<NetworkAttachmentsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkAttachmentsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentsScopedListWarningFormGroup() {
		return new FormGroup<NetworkAttachmentsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkAttachmentsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentsScopedListWarningDataFormGroup() {
		return new FormGroup<NetworkAttachmentsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkAttachmentAggregatedListWarningData?: Array<NetworkAttachmentAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkAttachmentAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentAggregatedListWarningFormGroup() {
		return new FormGroup<NetworkAttachmentAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkAttachmentAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentAggregatedListWarningDataFormGroup() {
		return new FormGroup<NetworkAttachmentAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkAttachment resources. */
		items?: Array<NetworkAttachment>;
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkAttachmentListWarning;
	}
	export interface NetworkAttachmentListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentListFormGroup() {
		return new FormGroup<NetworkAttachmentListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkAttachmentListWarningData?: Array<NetworkAttachmentListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkAttachmentListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentListWarningFormGroup() {
		return new FormGroup<NetworkAttachmentListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkAttachmentListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkAttachmentListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkAttachmentListWarningDataFormGroup() {
		return new FormGroup<NetworkAttachmentListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Google Cloud Armor network edge security service resource. */
	export interface NetworkEdgeSecurityService {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a NetworkEdgeSecurityService. An up-to-date fingerprint must be provided in order to update the NetworkEdgeSecurityService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a NetworkEdgeSecurityService. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#networkEdgeSecurityService for NetworkEdgeSecurityServices */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] URL of the region where the resource resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** The resource URL for the network edge security service associated with this network edge security service. */
		securityPolicy?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Server-defined URL for this resource with the resource id. */
		selfLinkWithId?: string | null;
	}

	/** Represents a Google Cloud Armor network edge security service resource. */
	export interface NetworkEdgeSecurityServiceFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a NetworkEdgeSecurityService. An up-to-date fingerprint must be provided in order to update the NetworkEdgeSecurityService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a NetworkEdgeSecurityService. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output only] Type of the resource. Always compute#networkEdgeSecurityService for NetworkEdgeSecurityServices */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the resource resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** The resource URL for the network edge security service associated with this network edge security service. */
		securityPolicy: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource with the resource id. */
		selfLinkWithId: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEdgeSecurityServiceFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServiceFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			securityPolicy: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			selfLinkWithId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEdgeSecurityServiceAggregatedList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEdgeSecurityServicesScopedList resources. */
		items?: {[id: string]: NetworkEdgeSecurityServicesScopedList };

		/** [Output Only] Type of resource. Always compute#networkEdgeSecurityServiceAggregatedList for lists of Network Edge Security Services. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEdgeSecurityServiceAggregatedListWarning;
	}
	export interface NetworkEdgeSecurityServiceAggregatedListFormProperties {
		etag: FormControl<string | null | undefined>,

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of NetworkEdgeSecurityServicesScopedList resources. */
		items: FormControl<{[id: string]: NetworkEdgeSecurityServicesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#networkEdgeSecurityServiceAggregatedList for lists of Network Edge Security Services. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEdgeSecurityServiceAggregatedListFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServiceAggregatedListFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: NetworkEdgeSecurityServicesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEdgeSecurityServicesScopedList {

		/** A list of NetworkEdgeSecurityServices contained in this scope. */
		networkEdgeSecurityServices?: Array<NetworkEdgeSecurityService>;

		/** Informational warning which replaces the list of security policies when the list is empty. */
		warning?: NetworkEdgeSecurityServicesScopedListWarning;
	}
	export interface NetworkEdgeSecurityServicesScopedListFormProperties {
	}
	export function CreateNetworkEdgeSecurityServicesScopedListFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServicesScopedListFormProperties>({
		});

	}

	export interface NetworkEdgeSecurityServicesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkEdgeSecurityServicesScopedListWarningData?: Array<NetworkEdgeSecurityServicesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkEdgeSecurityServicesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEdgeSecurityServicesScopedListWarningFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServicesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEdgeSecurityServicesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkEdgeSecurityServicesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEdgeSecurityServicesScopedListWarningDataFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServicesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEdgeSecurityServiceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkEdgeSecurityServiceAggregatedListWarningData?: Array<NetworkEdgeSecurityServiceAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkEdgeSecurityServiceAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEdgeSecurityServiceAggregatedListWarningFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServiceAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEdgeSecurityServiceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkEdgeSecurityServiceAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEdgeSecurityServiceAggregatedListWarningDataFormGroup() {
		return new FormGroup<NetworkEdgeSecurityServiceAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a collection of network endpoints. A network endpoint group (NEG) defines how a set of endpoints should be reached, whether they are reachable, and where they are located. For more information about using NEGs for different use cases, see Network endpoint groups overview. */
	export interface NetworkEndpointGroup {

		/** Metadata defined as annotations on the network endpoint group. */
		annotations?: {[id: string]: string };

		/** Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG. */
		appEngine?: NetworkEndpointGroupAppEngine;

		/** Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG. */
		cloudFunction?: NetworkEndpointGroupCloudFunction;

		/** Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG. */
		cloudRun?: NetworkEndpointGroupCloudRun;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/**
		 * The default port used if the port number is not specified in the network endpoint.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		defaultPort?: number | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group. */
		kind?: string | null;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified. */
		network?: string | null;

		/** Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT. */
		networkEndpointType?: NetworkEndpointGroupNetworkEndpointType | null;

		/** All data that is specifically relevant to only network endpoint groups of type PRIVATE_SERVICE_CONNECT. */
		pscData?: NetworkEndpointGroupPscData;

		/** The target service url used to set up private service connection to a Google API or a PSC Producer Service Attachment. An example value is: "asia-northeast3-cloudkms.googleapis.com" */
		pscTargetService?: string | null;

		/** [Output Only] The URL of the region where the network endpoint group is located. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/**
		 * [Output only] Number of network endpoints in the network endpoint group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size?: number | null;

		/** Optional URL of the subnetwork to which all network endpoints in the NEG belong. */
		subnetwork?: string | null;

		/** [Output Only] The URL of the zone where the network endpoint group is located. */
		zone?: string | null;
	}

	/** Represents a collection of network endpoints. A network endpoint group (NEG) defines how a set of endpoints should be reached, whether they are reachable, and where they are located. For more information about using NEGs for different use cases, see Network endpoint groups overview. */
	export interface NetworkEndpointGroupFormProperties {

		/** Metadata defined as annotations on the network endpoint group. */
		annotations: FormControl<{[id: string]: string } | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/**
		 * The default port used if the port number is not specified in the network endpoint.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		defaultPort: FormControl<number | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified. */
		network: FormControl<string | null | undefined>,

		/** Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT. */
		networkEndpointType: FormControl<NetworkEndpointGroupNetworkEndpointType | null | undefined>,

		/** The target service url used to set up private service connection to a Google API or a PSC Producer Service Attachment. An example value is: "asia-northeast3-cloudkms.googleapis.com" */
		pscTargetService: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the region where the network endpoint group is located. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * [Output only] Number of network endpoints in the network endpoint group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size: FormControl<number | null | undefined>,

		/** Optional URL of the subnetwork to which all network endpoints in the NEG belong. */
		subnetwork: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the zone where the network endpoint group is located. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupFormGroup() {
		return new FormGroup<NetworkEndpointGroupFormProperties>({
			annotations: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			defaultPort: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			network: new FormControl<string | null | undefined>(undefined),
			networkEndpointType: new FormControl<NetworkEndpointGroupNetworkEndpointType | null | undefined>(undefined),
			pscTargetService: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG. */
	export interface NetworkEndpointGroupAppEngine {

		/** Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service". */
		service?: string | null;

		/** A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "<service>-dot-appname.appspot.com/<version>". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively. */
		urlMask?: string | null;

		/** Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2". */
		version?: string | null;
	}

	/** Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG. */
	export interface NetworkEndpointGroupAppEngineFormProperties {

		/** Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service". */
		service: FormControl<string | null | undefined>,

		/** A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "<service>-dot-appname.appspot.com/<version>". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively. */
		urlMask: FormControl<string | null | undefined>,

		/** Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2". */
		version: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupAppEngineFormGroup() {
		return new FormGroup<NetworkEndpointGroupAppEngineFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
			urlMask: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG. */
	export interface NetworkEndpointGroupCloudFunction {

		/** A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1". */
		function?: string | null;

		/** A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/<function>". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively. */
		urlMask?: string | null;
	}

	/** Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG. */
	export interface NetworkEndpointGroupCloudFunctionFormProperties {

		/** A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1". */
		function: FormControl<string | null | undefined>,

		/** A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/<function>". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively. */
		urlMask: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupCloudFunctionFormGroup() {
		return new FormGroup<NetworkEndpointGroupCloudFunctionFormProperties>({
			function: new FormControl<string | null | undefined>(undefined),
			urlMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG. */
	export interface NetworkEndpointGroupCloudRun {

		/** Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service". */
		service?: string | null;

		/** Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010". */
		tag?: string | null;

		/** A template to parse <service> and <tag> fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask "<tag>.domain.com/<service>". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively. */
		urlMask?: string | null;
	}

	/** Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG. */
	export interface NetworkEndpointGroupCloudRunFormProperties {

		/** Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service". */
		service: FormControl<string | null | undefined>,

		/** Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010". */
		tag: FormControl<string | null | undefined>,

		/** A template to parse <service> and <tag> fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask "<tag>.domain.com/<service>". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively. */
		urlMask: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupCloudRunFormGroup() {
		return new FormGroup<NetworkEndpointGroupCloudRunFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			urlMask: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NetworkEndpointGroupNetworkEndpointType { GCE_VM_IP = 'GCE_VM_IP', GCE_VM_IP_PORT = 'GCE_VM_IP_PORT', INTERNET_FQDN_PORT = 'INTERNET_FQDN_PORT', INTERNET_IP_PORT = 'INTERNET_IP_PORT', NON_GCP_PRIVATE_IP_PORT = 'NON_GCP_PRIVATE_IP_PORT', PRIVATE_SERVICE_CONNECT = 'PRIVATE_SERVICE_CONNECT', SERVERLESS = 'SERVERLESS' }


	/** All data that is specifically relevant to only network endpoint groups of type PRIVATE_SERVICE_CONNECT. */
	export interface NetworkEndpointGroupPscData {

		/** [Output Only] Address allocated from given subnetwork for PSC. This IP address acts as a VIP for a PSC NEG, allowing it to act as an endpoint in L7 PSC-XLB. */
		consumerPscAddress?: string | null;

		/** [Output Only] The PSC connection id of the PSC Network Endpoint Group Consumer. */
		pscConnectionId?: string | null;

		/** [Output Only] The connection status of the PSC Forwarding Rule. */
		pscConnectionStatus?: ForwardingRulePscConnectionStatus | null;
	}

	/** All data that is specifically relevant to only network endpoint groups of type PRIVATE_SERVICE_CONNECT. */
	export interface NetworkEndpointGroupPscDataFormProperties {

		/** [Output Only] Address allocated from given subnetwork for PSC. This IP address acts as a VIP for a PSC NEG, allowing it to act as an endpoint in L7 PSC-XLB. */
		consumerPscAddress: FormControl<string | null | undefined>,

		/** [Output Only] The PSC connection id of the PSC Network Endpoint Group Consumer. */
		pscConnectionId: FormControl<string | null | undefined>,

		/** [Output Only] The connection status of the PSC Forwarding Rule. */
		pscConnectionStatus: FormControl<ForwardingRulePscConnectionStatus | null | undefined>,
	}
	export function CreateNetworkEndpointGroupPscDataFormGroup() {
		return new FormGroup<NetworkEndpointGroupPscDataFormProperties>({
			consumerPscAddress: new FormControl<string | null | undefined>(undefined),
			pscConnectionId: new FormControl<string | null | undefined>(undefined),
			pscConnectionStatus: new FormControl<ForwardingRulePscConnectionStatus | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEndpointGroupsScopedList resources. */
		items?: {[id: string]: NetworkEndpointGroupsScopedList };

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEndpointGroupAggregatedListWarning;
	}
	export interface NetworkEndpointGroupAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of NetworkEndpointGroupsScopedList resources. */
		items: FormControl<{[id: string]: NetworkEndpointGroupsScopedList } | null | undefined>,

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupAggregatedListFormGroup() {
		return new FormGroup<NetworkEndpointGroupAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: NetworkEndpointGroupsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupsScopedList {

		/** [Output Only] The list of network endpoint groups that are contained in this scope. */
		networkEndpointGroups?: Array<NetworkEndpointGroup>;

		/** [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty. */
		warning?: NetworkEndpointGroupsScopedListWarning;
	}
	export interface NetworkEndpointGroupsScopedListFormProperties {
	}
	export function CreateNetworkEndpointGroupsScopedListFormGroup() {
		return new FormGroup<NetworkEndpointGroupsScopedListFormProperties>({
		});

	}

	export interface NetworkEndpointGroupsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkEndpointGroupsScopedListWarningData?: Array<NetworkEndpointGroupsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkEndpointGroupsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupsScopedListWarningFormGroup() {
		return new FormGroup<NetworkEndpointGroupsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkEndpointGroupsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupsScopedListWarningDataFormGroup() {
		return new FormGroup<NetworkEndpointGroupsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkEndpointGroupAggregatedListWarningData?: Array<NetworkEndpointGroupAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkEndpointGroupAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupAggregatedListWarningFormGroup() {
		return new FormGroup<NetworkEndpointGroupAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkEndpointGroupAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupAggregatedListWarningDataFormGroup() {
		return new FormGroup<NetworkEndpointGroupAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEndpointGroup resources. */
		items?: Array<NetworkEndpointGroup>;

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEndpointGroupListWarning;
	}
	export interface NetworkEndpointGroupListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupListFormGroup() {
		return new FormGroup<NetworkEndpointGroupListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkEndpointGroupListWarningData?: Array<NetworkEndpointGroupListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkEndpointGroupListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupListWarningFormGroup() {
		return new FormGroup<NetworkEndpointGroupListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkEndpointGroupListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupListWarningDataFormGroup() {
		return new FormGroup<NetworkEndpointGroupListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupsAttachEndpointsRequest {

		/** The list of network endpoints to be attached. */
		networkEndpoints?: Array<NetworkEndpoint>;
	}
	export interface NetworkEndpointGroupsAttachEndpointsRequestFormProperties {
	}
	export function CreateNetworkEndpointGroupsAttachEndpointsRequestFormGroup() {
		return new FormGroup<NetworkEndpointGroupsAttachEndpointsRequestFormProperties>({
		});

	}

	export interface NetworkEndpointGroupsDetachEndpointsRequest {

		/** The list of network endpoints to be detached. */
		networkEndpoints?: Array<NetworkEndpoint>;
	}
	export interface NetworkEndpointGroupsDetachEndpointsRequestFormProperties {
	}
	export function CreateNetworkEndpointGroupsDetachEndpointsRequestFormGroup() {
		return new FormGroup<NetworkEndpointGroupsDetachEndpointsRequestFormProperties>({
		});

	}

	export interface NetworkEndpointGroupsListEndpointsRequest {

		/** Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network endpoints will not be provided. */
		healthStatus?: NetworkEndpointGroupsListEndpointsRequestHealthStatus | null;
	}
	export interface NetworkEndpointGroupsListEndpointsRequestFormProperties {

		/** Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network endpoints will not be provided. */
		healthStatus: FormControl<NetworkEndpointGroupsListEndpointsRequestHealthStatus | null | undefined>,
	}
	export function CreateNetworkEndpointGroupsListEndpointsRequestFormGroup() {
		return new FormGroup<NetworkEndpointGroupsListEndpointsRequestFormProperties>({
			healthStatus: new FormControl<NetworkEndpointGroupsListEndpointsRequestHealthStatus | null | undefined>(undefined),
		});

	}

	export enum NetworkEndpointGroupsListEndpointsRequestHealthStatus { SHOW = 'SHOW', SKIP = 'SKIP' }

	export interface NetworkEndpointGroupsListNetworkEndpoints {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NetworkEndpointWithHealthStatus resources. */
		items?: Array<NetworkEndpointWithHealthStatus>;

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkEndpointGroupsListNetworkEndpointsWarning;
	}
	export interface NetworkEndpointGroupsListNetworkEndpointsFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupsListNetworkEndpointsFormGroup() {
		return new FormGroup<NetworkEndpointGroupsListNetworkEndpointsFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointWithHealthStatus {

		/** [Output only] The health status of network endpoint; */
		healths?: Array<HealthStatusForNetworkEndpoint>;

		/** The network endpoint. */
		networkEndpoint?: NetworkEndpoint;
	}
	export interface NetworkEndpointWithHealthStatusFormProperties {
	}
	export function CreateNetworkEndpointWithHealthStatusFormGroup() {
		return new FormGroup<NetworkEndpointWithHealthStatusFormProperties>({
		});

	}

	export interface NetworkEndpointGroupsListNetworkEndpointsWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkEndpointGroupsListNetworkEndpointsWarningData?: Array<NetworkEndpointGroupsListNetworkEndpointsWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkEndpointGroupsListNetworkEndpointsWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupsListNetworkEndpointsWarningFormGroup() {
		return new FormGroup<NetworkEndpointGroupsListNetworkEndpointsWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkEndpointGroupsListNetworkEndpointsWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkEndpointGroupsListNetworkEndpointsWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkEndpointGroupsListNetworkEndpointsWarningDataFormGroup() {
		return new FormGroup<NetworkEndpointGroupsListNetworkEndpointsWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of networks. */
	export interface NetworkList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Network resources. */
		items?: Array<Network>;

		/** [Output Only] Type of resource. Always compute#networkList for lists of networks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NetworkListWarning;
	}

	/** Contains a list of networks. */
	export interface NetworkListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#networkList for lists of networks. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNetworkListFormGroup() {
		return new FormGroup<NetworkListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NetworkListWarningData?: Array<NetworkListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NetworkListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNetworkListWarningFormGroup() {
		return new FormGroup<NetworkListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworkListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NetworkListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNetworkListWarningDataFormGroup() {
		return new FormGroup<NetworkListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworksAddPeeringRequest {

		/** This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		autoCreateRoutes?: boolean | null;

		/** Name of the peering, which should conform to RFC1035. */
		name?: string | null;

		/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
		networkPeering?: NetworkPeering;

		/** URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network. */
		peerNetwork?: string | null;
	}
	export interface NetworksAddPeeringRequestFormProperties {

		/** This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE. */
		autoCreateRoutes: FormControl<boolean | null | undefined>,

		/** Name of the peering, which should conform to RFC1035. */
		name: FormControl<string | null | undefined>,

		/** URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network. */
		peerNetwork: FormControl<string | null | undefined>,
	}
	export function CreateNetworksAddPeeringRequestFormGroup() {
		return new FormGroup<NetworksAddPeeringRequestFormProperties>({
			autoCreateRoutes: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			peerNetwork: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworksGetEffectiveFirewallsResponse {

		/** Effective firewalls from firewall policy. */
		firewallPolicys?: Array<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy>;

		/** Effective firewalls on the network. */
		firewalls?: Array<Firewall>;
	}
	export interface NetworksGetEffectiveFirewallsResponseFormProperties {
	}
	export function CreateNetworksGetEffectiveFirewallsResponseFormGroup() {
		return new FormGroup<NetworksGetEffectiveFirewallsResponseFormProperties>({
		});

	}

	export interface NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {

		/** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy. */
		displayName?: string | null;

		/** [Output Only] The name of the firewall policy. */
		name?: string | null;

		/** The rules that apply to the network. */
		rules?: Array<FirewallPolicyRule>;

		/** [Output Only] The short name of the firewall policy. */
		shortName?: string | null;

		/** [Output Only] The type of the firewall policy. */
		type?: NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null;
	}
	export interface NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormProperties {

		/** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy. */
		displayName: FormControl<string | null | undefined>,

		/** [Output Only] The name of the firewall policy. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The short name of the firewall policy. */
		shortName: FormControl<string | null | undefined>,

		/** [Output Only] The type of the firewall policy. */
		type: FormControl<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null | undefined>,
	}
	export function CreateNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormGroup() {
		return new FormGroup<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			shortName: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null | undefined>(undefined),
		});

	}

	export enum NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyType { HIERARCHY = 'HIERARCHY', NETWORK = 'NETWORK', UNSPECIFIED = 'UNSPECIFIED' }

	export interface NetworksRemovePeeringRequest {

		/** Name of the peering, which should conform to RFC1035. */
		name?: string | null;
	}
	export interface NetworksRemovePeeringRequestFormProperties {

		/** Name of the peering, which should conform to RFC1035. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateNetworksRemovePeeringRequestFormGroup() {
		return new FormGroup<NetworksRemovePeeringRequestFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NetworksUpdatePeeringRequest {

		/** A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering. */
		networkPeering?: NetworkPeering;
	}
	export interface NetworksUpdatePeeringRequestFormProperties {
	}
	export function CreateNetworksUpdatePeeringRequestFormGroup() {
		return new FormGroup<NetworksUpdatePeeringRequestFormProperties>({
		});

	}


	/** Represents a sole-tenant Node Group resource. A sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes. */
	export interface NodeGroup {
		autoscalingPolicy?: NodeGroupAutoscalingPolicy;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#nodeGroup for node group. */
		kind?: string | null;

		/** An opaque location hint used to place the Node close to other resources. This field is for use by internal tools that use the public API. The location hint here on the NodeGroup overrides any location_hint present in the NodeTemplate. */
		locationHint?: string | null;

		/** Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see Maintenance policies. */
		maintenancePolicy?: NodeGroupMaintenancePolicy | null;

		/** Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window. */
		maintenanceWindow?: NodeGroupMaintenanceWindow;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** URL of the node template to create the node group from. */
		nodeTemplate?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The share setting for reservations and sole tenancy node groups. */
		shareSettings?: ShareSettings;

		/**
		 * [Output Only] The total number of nodes in the node group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size?: number | null;
		status?: NodeGroupStatus | null;

		/** [Output Only] The name of the zone where the node group resides, such as us-central1-a. */
		zone?: string | null;
	}

	/** Represents a sole-tenant Node Group resource. A sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes. */
	export interface NodeGroupFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The type of the resource. Always compute#nodeGroup for node group. */
		kind: FormControl<string | null | undefined>,

		/** An opaque location hint used to place the Node close to other resources. This field is for use by internal tools that use the public API. The location hint here on the NodeGroup overrides any location_hint present in the NodeTemplate. */
		locationHint: FormControl<string | null | undefined>,

		/** Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see Maintenance policies. */
		maintenancePolicy: FormControl<NodeGroupMaintenancePolicy | null | undefined>,

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** URL of the node template to create the node group from. */
		nodeTemplate: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/**
		 * [Output Only] The total number of nodes in the node group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size: FormControl<number | null | undefined>,
		status: FormControl<NodeGroupStatus | null | undefined>,

		/** [Output Only] The name of the zone where the node group resides, such as us-central1-a. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupFormGroup() {
		return new FormGroup<NodeGroupFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			locationHint: new FormControl<string | null | undefined>(undefined),
			maintenancePolicy: new FormControl<NodeGroupMaintenancePolicy | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			nodeTemplate: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			status: new FormControl<NodeGroupStatus | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupAutoscalingPolicy {

		/**
		 * The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxNodes?: number | null;

		/**
		 * The minimum number of nodes that the group should have.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNodes?: number | null;

		/** The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes. */
		mode?: NodeGroupAutoscalingPolicyMode | null;
	}
	export interface NodeGroupAutoscalingPolicyFormProperties {

		/**
		 * The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxNodes: FormControl<number | null | undefined>,

		/**
		 * The minimum number of nodes that the group should have.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minNodes: FormControl<number | null | undefined>,

		/** The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes. */
		mode: FormControl<NodeGroupAutoscalingPolicyMode | null | undefined>,
	}
	export function CreateNodeGroupAutoscalingPolicyFormGroup() {
		return new FormGroup<NodeGroupAutoscalingPolicyFormProperties>({
			maxNodes: new FormControl<number | null | undefined>(undefined),
			minNodes: new FormControl<number | null | undefined>(undefined),
			mode: new FormControl<NodeGroupAutoscalingPolicyMode | null | undefined>(undefined),
		});

	}

	export enum NodeGroupAutoscalingPolicyMode { MODE_UNSPECIFIED = 'MODE_UNSPECIFIED', OFF = 'OFF', ON = 'ON', ONLY_SCALE_OUT = 'ONLY_SCALE_OUT' }

	export enum NodeGroupMaintenancePolicy { DEFAULT = 'DEFAULT', MAINTENANCE_POLICY_UNSPECIFIED = 'MAINTENANCE_POLICY_UNSPECIFIED', MIGRATE_WITHIN_NODE_GROUP = 'MIGRATE_WITHIN_NODE_GROUP', RESTART_IN_PLACE = 'RESTART_IN_PLACE' }


	/** Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window. */
	export interface NodeGroupMaintenanceWindow {

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		maintenanceDuration?: Duration;

		/** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
		startTime?: string | null;
	}

	/** Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window. */
	export interface NodeGroupMaintenanceWindowFormProperties {

		/** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupMaintenanceWindowFormGroup() {
		return new FormGroup<NodeGroupMaintenanceWindowFormProperties>({
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NodeGroupStatus { CREATING = 'CREATING', DELETING = 'DELETING', INVALID = 'INVALID', READY = 'READY' }

	export interface NodeGroupAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeGroupsScopedList resources. */
		items?: {[id: string]: NodeGroupsScopedList };

		/** [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: NodeGroupAggregatedListWarning;
	}
	export interface NodeGroupAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of NodeGroupsScopedList resources. */
		items: FormControl<{[id: string]: NodeGroupsScopedList } | null | undefined>,

		/** [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupAggregatedListFormGroup() {
		return new FormGroup<NodeGroupAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: NodeGroupsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsScopedList {

		/** [Output Only] A list of node groups contained in this scope. */
		nodeGroups?: Array<NodeGroup>;

		/** [Output Only] An informational warning that appears when the nodeGroup list is empty. */
		warning?: NodeGroupsScopedListWarning;
	}
	export interface NodeGroupsScopedListFormProperties {
	}
	export function CreateNodeGroupsScopedListFormGroup() {
		return new FormGroup<NodeGroupsScopedListFormProperties>({
		});

	}

	export interface NodeGroupsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeGroupsScopedListWarningData?: Array<NodeGroupsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeGroupsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupsScopedListWarningFormGroup() {
		return new FormGroup<NodeGroupsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeGroupsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupsScopedListWarningDataFormGroup() {
		return new FormGroup<NodeGroupsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeGroupAggregatedListWarningData?: Array<NodeGroupAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeGroupAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupAggregatedListWarningFormGroup() {
		return new FormGroup<NodeGroupAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeGroupAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupAggregatedListWarningDataFormGroup() {
		return new FormGroup<NodeGroupAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of nodeGroups. */
	export interface NodeGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeGroup resources. */
		items?: Array<NodeGroup>;

		/** [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeGroupListWarning;
	}

	/** Contains a list of nodeGroups. */
	export interface NodeGroupListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupListFormGroup() {
		return new FormGroup<NodeGroupListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeGroupListWarningData?: Array<NodeGroupListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeGroupListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupListWarningFormGroup() {
		return new FormGroup<NodeGroupListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeGroupListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupListWarningDataFormGroup() {
		return new FormGroup<NodeGroupListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupNode {

		/** Accelerators for this node. */
		accelerators?: Array<AcceleratorConfig>;
		consumedResources?: InstanceConsumptionInfo;

		/** CPU overcommit. */
		cpuOvercommitType?: NodeGroupNodeCpuOvercommitType | null;

		/** Local disk configurations. */
		disks?: Array<LocalDisk>;

		/** Instance data that shows consumed resources on the node. */
		instanceConsumptionData?: Array<InstanceConsumptionData>;

		/** Instances scheduled on this node. */
		instances?: Array<string>;

		/** The name of the node. */
		name?: string | null;

		/** The type of this node. */
		nodeType?: string | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;
		serverBinding?: ServerBinding;

		/** Server ID associated with this node. */
		serverId?: string | null;
		status?: NodeGroupNodeStatus | null;
		totalResources?: InstanceConsumptionInfo;
	}
	export interface NodeGroupNodeFormProperties {

		/** CPU overcommit. */
		cpuOvercommitType: FormControl<NodeGroupNodeCpuOvercommitType | null | undefined>,

		/** The name of the node. */
		name: FormControl<string | null | undefined>,

		/** The type of this node. */
		nodeType: FormControl<string | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** Server ID associated with this node. */
		serverId: FormControl<string | null | undefined>,
		status: FormControl<NodeGroupNodeStatus | null | undefined>,
	}
	export function CreateNodeGroupNodeFormGroup() {
		return new FormGroup<NodeGroupNodeFormProperties>({
			cpuOvercommitType: new FormControl<NodeGroupNodeCpuOvercommitType | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			nodeType: new FormControl<string | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			serverId: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<NodeGroupNodeStatus | null | undefined>(undefined),
		});

	}

	export enum NodeGroupNodeCpuOvercommitType { CPU_OVERCOMMIT_TYPE_UNSPECIFIED = 'CPU_OVERCOMMIT_TYPE_UNSPECIFIED', ENABLED = 'ENABLED', NONE = 'NONE' }

	export interface ServerBinding {
		type?: ServerBindingType | null;
	}
	export interface ServerBindingFormProperties {
		type: FormControl<ServerBindingType | null | undefined>,
	}
	export function CreateServerBindingFormGroup() {
		return new FormGroup<ServerBindingFormProperties>({
			type: new FormControl<ServerBindingType | null | undefined>(undefined),
		});

	}

	export enum ServerBindingType { RESTART_NODE_ON_ANY_SERVER = 'RESTART_NODE_ON_ANY_SERVER', RESTART_NODE_ON_MINIMAL_SERVERS = 'RESTART_NODE_ON_MINIMAL_SERVERS', SERVER_BINDING_TYPE_UNSPECIFIED = 'SERVER_BINDING_TYPE_UNSPECIFIED' }

	export enum NodeGroupNodeStatus { CREATING = 'CREATING', DELETING = 'DELETING', INVALID = 'INVALID', READY = 'READY', REPAIRING = 'REPAIRING' }

	export interface NodeGroupsAddNodesRequest {

		/**
		 * Count of additional nodes to be added to the node group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		additionalNodeCount?: number | null;
	}
	export interface NodeGroupsAddNodesRequestFormProperties {

		/**
		 * Count of additional nodes to be added to the node group.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		additionalNodeCount: FormControl<number | null | undefined>,
	}
	export function CreateNodeGroupsAddNodesRequestFormGroup() {
		return new FormGroup<NodeGroupsAddNodesRequestFormProperties>({
			additionalNodeCount: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsDeleteNodesRequest {

		/** Names of the nodes to delete. */
		nodes?: Array<string>;
	}
	export interface NodeGroupsDeleteNodesRequestFormProperties {
	}
	export function CreateNodeGroupsDeleteNodesRequestFormGroup() {
		return new FormGroup<NodeGroupsDeleteNodesRequestFormProperties>({
		});

	}

	export interface NodeGroupsListNodes {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Node resources. */
		items?: Array<NodeGroupNode>;

		/** [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeGroupsListNodesWarning;
	}
	export interface NodeGroupsListNodesFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupsListNodesFormGroup() {
		return new FormGroup<NodeGroupsListNodesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsListNodesWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeGroupsListNodesWarningData?: Array<NodeGroupsListNodesWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeGroupsListNodesWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupsListNodesWarningFormGroup() {
		return new FormGroup<NodeGroupsListNodesWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsListNodesWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeGroupsListNodesWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupsListNodesWarningDataFormGroup() {
		return new FormGroup<NodeGroupsListNodesWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsSetNodeTemplateRequest {

		/** Full or partial URL of the node template resource to be updated for this node group. */
		nodeTemplate?: string | null;
	}
	export interface NodeGroupsSetNodeTemplateRequestFormProperties {

		/** Full or partial URL of the node template resource to be updated for this node group. */
		nodeTemplate: FormControl<string | null | undefined>,
	}
	export function CreateNodeGroupsSetNodeTemplateRequestFormGroup() {
		return new FormGroup<NodeGroupsSetNodeTemplateRequestFormProperties>({
			nodeTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeGroupsSimulateMaintenanceEventRequest {

		/** Names of the nodes to go under maintenance simulation. */
		nodes?: Array<string>;
	}
	export interface NodeGroupsSimulateMaintenanceEventRequestFormProperties {
	}
	export function CreateNodeGroupsSimulateMaintenanceEventRequestFormGroup() {
		return new FormGroup<NodeGroupsSimulateMaintenanceEventRequestFormProperties>({
		});

	}


	/** Represent a sole-tenant Node Template resource. You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances. */
	export interface NodeTemplate {
		accelerators?: Array<AcceleratorConfig>;

		/** CPU overcommit. */
		cpuOvercommitType?: NodeGroupNodeCpuOvercommitType | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		disks?: Array<LocalDisk>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#nodeTemplate for node templates. */
		kind?: string | null;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Labels to use for node affinity, which will be used in instance scheduling. */
		nodeAffinityLabels?: {[id: string]: string };

		/** The node type to use for nodes group that are created from this template. */
		nodeType?: string | null;
		nodeTypeFlexibility?: NodeTemplateNodeTypeFlexibility;

		/** [Output Only] The name of the region where the node template resides, such as us-central1. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
		serverBinding?: ServerBinding;

		/** [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING. */
		status?: NodeGroupStatus | null;

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage?: string | null;
	}

	/** Represent a sole-tenant Node Template resource. You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances. */
	export interface NodeTemplateFormProperties {

		/** CPU overcommit. */
		cpuOvercommitType: FormControl<NodeGroupNodeCpuOvercommitType | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The type of the resource. Always compute#nodeTemplate for node templates. */
		kind: FormControl<string | null | undefined>,

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Labels to use for node affinity, which will be used in instance scheduling. */
		nodeAffinityLabels: FormControl<{[id: string]: string } | null | undefined>,

		/** The node type to use for nodes group that are created from this template. */
		nodeType: FormControl<string | null | undefined>,

		/** [Output Only] The name of the region where the node template resides, such as us-central1. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING. */
		status: FormControl<NodeGroupStatus | null | undefined>,

		/** [Output Only] An optional, human-readable explanation of the status. */
		statusMessage: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateFormGroup() {
		return new FormGroup<NodeTemplateFormProperties>({
			cpuOvercommitType: new FormControl<NodeGroupNodeCpuOvercommitType | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			nodeAffinityLabels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			nodeType: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<NodeGroupStatus | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplateNodeTypeFlexibility {
		cpus?: string | null;
		localSsd?: string | null;
		memory?: string | null;
	}
	export interface NodeTemplateNodeTypeFlexibilityFormProperties {
		cpus: FormControl<string | null | undefined>,
		localSsd: FormControl<string | null | undefined>,
		memory: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateNodeTypeFlexibilityFormGroup() {
		return new FormGroup<NodeTemplateNodeTypeFlexibilityFormProperties>({
			cpus: new FormControl<string | null | undefined>(undefined),
			localSsd: new FormControl<string | null | undefined>(undefined),
			memory: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplateAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeTemplatesScopedList resources. */
		items?: {[id: string]: NodeTemplatesScopedList };

		/** [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: NodeTemplateAggregatedListWarning;
	}
	export interface NodeTemplateAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of NodeTemplatesScopedList resources. */
		items: FormControl<{[id: string]: NodeTemplatesScopedList } | null | undefined>,

		/** [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateAggregatedListFormGroup() {
		return new FormGroup<NodeTemplateAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: NodeTemplatesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplatesScopedList {

		/** [Output Only] A list of node templates contained in this scope. */
		nodeTemplates?: Array<NodeTemplate>;

		/** [Output Only] An informational warning that appears when the node templates list is empty. */
		warning?: NodeTemplatesScopedListWarning;
	}
	export interface NodeTemplatesScopedListFormProperties {
	}
	export function CreateNodeTemplatesScopedListFormGroup() {
		return new FormGroup<NodeTemplatesScopedListFormProperties>({
		});

	}

	export interface NodeTemplatesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeTemplatesScopedListWarningData?: Array<NodeTemplatesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeTemplatesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplatesScopedListWarningFormGroup() {
		return new FormGroup<NodeTemplatesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplatesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeTemplatesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplatesScopedListWarningDataFormGroup() {
		return new FormGroup<NodeTemplatesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplateAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeTemplateAggregatedListWarningData?: Array<NodeTemplateAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeTemplateAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateAggregatedListWarningFormGroup() {
		return new FormGroup<NodeTemplateAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplateAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeTemplateAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateAggregatedListWarningDataFormGroup() {
		return new FormGroup<NodeTemplateAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of node templates. */
	export interface NodeTemplateList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeTemplate resources. */
		items?: Array<NodeTemplate>;

		/** [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeTemplateListWarning;
	}

	/** Contains a list of node templates. */
	export interface NodeTemplateListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateListFormGroup() {
		return new FormGroup<NodeTemplateListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplateListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeTemplateListWarningData?: Array<NodeTemplateListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeTemplateListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateListWarningFormGroup() {
		return new FormGroup<NodeTemplateListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTemplateListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeTemplateListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeTemplateListWarningDataFormGroup() {
		return new FormGroup<NodeTemplateListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represent a sole-tenant Node Type resource. Each node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types. */
	export interface NodeType {

		/** [Output Only] The CPU platform used by this node type. */
		cpuPlatform?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** [Output Only] An optional textual description of the resource. */
		description?: string | null;

		/**
		 * [Output Only] The number of virtual CPUs that are available to the node type.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestCpus?: number | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The type of the resource. Always compute#nodeType for node types. */
		kind?: string | null;

		/**
		 * [Output Only] Local SSD available to the node type, defined in GB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		localSsdGb?: number | null;

		/**
		 * [Output Only] The amount of physical memory available to the node type, defined in MB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		memoryMb?: number | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The name of the zone where the node type resides, such as us-central1-a. */
		zone?: string | null;
	}

	/** Represent a sole-tenant Node Type resource. Each node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types. */
	export interface NodeTypeFormProperties {

		/** [Output Only] The CPU platform used by this node type. */
		cpuPlatform: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] An optional textual description of the resource. */
		description: FormControl<string | null | undefined>,

		/**
		 * [Output Only] The number of virtual CPUs that are available to the node type.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		guestCpus: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The type of the resource. Always compute#nodeType for node types. */
		kind: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Local SSD available to the node type, defined in GB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		localSsdGb: FormControl<number | null | undefined>,

		/**
		 * [Output Only] The amount of physical memory available to the node type, defined in MB.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		memoryMb: FormControl<number | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The name of the zone where the node type resides, such as us-central1-a. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeFormGroup() {
		return new FormGroup<NodeTypeFormProperties>({
			cpuPlatform: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			guestCpus: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			localSsdGb: new FormControl<number | null | undefined>(undefined),
			memoryMb: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypeAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeTypesScopedList resources. */
		items?: {[id: string]: NodeTypesScopedList };

		/** [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: NodeTypeAggregatedListWarning;
	}
	export interface NodeTypeAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of NodeTypesScopedList resources. */
		items: FormControl<{[id: string]: NodeTypesScopedList } | null | undefined>,

		/** [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeAggregatedListFormGroup() {
		return new FormGroup<NodeTypeAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: NodeTypesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypesScopedList {

		/** [Output Only] A list of node types contained in this scope. */
		nodeTypes?: Array<NodeType>;

		/** [Output Only] An informational warning that appears when the node types list is empty. */
		warning?: NodeTypesScopedListWarning;
	}
	export interface NodeTypesScopedListFormProperties {
	}
	export function CreateNodeTypesScopedListFormGroup() {
		return new FormGroup<NodeTypesScopedListFormProperties>({
		});

	}

	export interface NodeTypesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeTypesScopedListWarningData?: Array<NodeTypesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeTypesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypesScopedListWarningFormGroup() {
		return new FormGroup<NodeTypesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeTypesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypesScopedListWarningDataFormGroup() {
		return new FormGroup<NodeTypesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypeAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeTypeAggregatedListWarningData?: Array<NodeTypeAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeTypeAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeAggregatedListWarningFormGroup() {
		return new FormGroup<NodeTypeAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypeAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeTypeAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeAggregatedListWarningDataFormGroup() {
		return new FormGroup<NodeTypeAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of node types. */
	export interface NodeTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NodeType resources. */
		items?: Array<NodeType>;

		/** [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NodeTypeListWarning;
	}

	/** Contains a list of node types. */
	export interface NodeTypeListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeListFormGroup() {
		return new FormGroup<NodeTypeListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NodeTypeListWarningData?: Array<NodeTypeListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NodeTypeListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeListWarningFormGroup() {
		return new FormGroup<NodeTypeListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NodeTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NodeTypeListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNodeTypeListWarningDataFormGroup() {
		return new FormGroup<NodeTypeListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a notification endpoint. A notification endpoint resource defines an endpoint to receive notifications when there are status changes detected by the associated health check service. For more information, see Health checks overview. */
	export interface NotificationEndpoint {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint. */
		grpcSettings?: NotificationEndpointGrpcSettings;

		/** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	/** Represents a notification endpoint. A notification endpoint resource defines an endpoint to receive notifications when there are status changes detected by the associated health check service. For more information, see Health checks overview. */
	export interface NotificationEndpointFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNotificationEndpointFormGroup() {
		return new FormGroup<NotificationEndpointFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint. */
	export interface NotificationEndpointGrpcSettings {

		/** Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3 */
		authority?: string | null;

		/** Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name. */
		endpoint?: string | null;

		/** Optional. If specified, this field is used to populate the "name" field in gRPC requests. */
		payloadName?: string | null;

		/** A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years. */
		resendInterval?: Duration;

		/**
		 * How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
		 * Type: uint, 0 to 4,294,967,295
		 */
		retryDurationSec?: number | null;
	}

	/** Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint. */
	export interface NotificationEndpointGrpcSettingsFormProperties {

		/** Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3 */
		authority: FormControl<string | null | undefined>,

		/** Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name. */
		endpoint: FormControl<string | null | undefined>,

		/** Optional. If specified, this field is used to populate the "name" field in gRPC requests. */
		payloadName: FormControl<string | null | undefined>,

		/**
		 * How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
		 * Type: uint, 0 to 4,294,967,295
		 */
		retryDurationSec: FormControl<number | null | undefined>,
	}
	export function CreateNotificationEndpointGrpcSettingsFormGroup() {
		return new FormGroup<NotificationEndpointGrpcSettingsFormProperties>({
			authority: new FormControl<string | null | undefined>(undefined),
			endpoint: new FormControl<string | null | undefined>(undefined),
			payloadName: new FormControl<string | null | undefined>(undefined),
			retryDurationSec: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface NotificationEndpointList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of NotificationEndpoint resources. */
		items?: Array<NotificationEndpoint>;

		/** [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: NotificationEndpointListWarning;
	}
	export interface NotificationEndpointListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateNotificationEndpointListFormGroup() {
		return new FormGroup<NotificationEndpointListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NotificationEndpointListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		NotificationEndpointListWarningData?: Array<NotificationEndpointListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface NotificationEndpointListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateNotificationEndpointListWarningFormGroup() {
		return new FormGroup<NotificationEndpointListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface NotificationEndpointListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface NotificationEndpointListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateNotificationEndpointListWarningDataFormGroup() {
		return new FormGroup<NotificationEndpointListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/v1/globalOperations) * [Regional](/compute/docs/reference/rest/v1/regionOperations) * [Zonal](/compute/docs/reference/rest/v1/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period. */
	export interface Operation {

		/** [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise. */
		clientOperationId?: string | null;

		/** [Deprecated] This field is deprecated. */
		creationTimestamp?: string | null;

		/** [Output Only] A textual description of the operation, which is set when the operation is created. */
		description?: string | null;

		/** [Output Only] The time that this operation was completed. This value is in RFC3339 text format. */
		endTime?: string | null;

		/** [Output Only] If errors are generated during processing of the operation, this field will be populated. */
		error?: OperationError;

		/** [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`. */
		httpErrorMessage?: string | null;

		/**
		 * [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		httpErrorStatusCode?: number | null;

		/** [Output Only] The unique identifier for the operation. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The time that this operation was requested. This value is in RFC3339 text format. */
		insertTime?: string | null;
		instancesBulkInsertOperationMetadata?: InstancesBulkInsertOperationMetadata;

		/** [Output Only] Type of the resource. Always `compute#operation` for Operation resources. */
		kind?: string | null;

		/** [Output Only] Name of the operation. */
		name?: string | null;

		/** [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request. */
		operationGroupId?: string | null;

		/** [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on. */
		operationType?: string | null;

		/**
		 * [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		progress?: number | null;

		/** [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
		setCommonInstanceMetadataOperationMetadata?: SetCommonInstanceMetadataOperationMetadata;

		/** [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format. */
		startTime?: string | null;

		/** [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`. */
		status?: OperationStatus | null;

		/** [Output Only] An optional textual description of the current status of the operation. */
		statusMessage?: string | null;

		/** [Output Only] The unique target ID, which identifies a specific incarnation of the target resource. */
		targetId?: string | null;

		/** [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from. */
		targetLink?: string | null;

		/** [Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`. */
		user?: string | null;

		/** [Output Only] If warning messages are generated during processing of the operation, this field will be populated. */
		OperationWarnings?: Array<OperationWarnings>;

		/** [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations. */
		zone?: string | null;
	}

	/** Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/v1/globalOperations) * [Regional](/compute/docs/reference/rest/v1/regionOperations) * [Zonal](/compute/docs/reference/rest/v1/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period. */
	export interface OperationFormProperties {

		/** [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise. */
		clientOperationId: FormControl<string | null | undefined>,

		/** [Deprecated] This field is deprecated. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] A textual description of the operation, which is set when the operation is created. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The time that this operation was completed. This value is in RFC3339 text format. */
		endTime: FormControl<string | null | undefined>,

		/** [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`. */
		httpErrorMessage: FormControl<string | null | undefined>,

		/**
		 * [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		httpErrorStatusCode: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the operation. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The time that this operation was requested. This value is in RFC3339 text format. */
		insertTime: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always `compute#operation` for Operation resources. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Name of the operation. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request. */
		operationGroupId: FormControl<string | null | undefined>,

		/** [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on. */
		operationType: FormControl<string | null | undefined>,

		/**
		 * [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		progress: FormControl<number | null | undefined>,

		/** [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format. */
		startTime: FormControl<string | null | undefined>,

		/** [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`. */
		status: FormControl<OperationStatus | null | undefined>,

		/** [Output Only] An optional textual description of the current status of the operation. */
		statusMessage: FormControl<string | null | undefined>,

		/** [Output Only] The unique target ID, which identifies a specific incarnation of the target resource. */
		targetId: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from. */
		targetLink: FormControl<string | null | undefined>,

		/** [Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`. */
		user: FormControl<string | null | undefined>,

		/** [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateOperationFormGroup() {
		return new FormGroup<OperationFormProperties>({
			clientOperationId: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			httpErrorMessage: new FormControl<string | null | undefined>(undefined),
			httpErrorStatusCode: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			insertTime: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			operationGroupId: new FormControl<string | null | undefined>(undefined),
			operationType: new FormControl<string | null | undefined>(undefined),
			progress: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<OperationStatus | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			targetId: new FormControl<string | null | undefined>(undefined),
			targetLink: new FormControl<string | null | undefined>(undefined),
			user: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationError {

		/** [Output Only] The array of errors encountered while processing this operation. */
		OperationErrorErrors?: Array<OperationErrorErrors>;
	}
	export interface OperationErrorFormProperties {
	}
	export function CreateOperationErrorFormGroup() {
		return new FormGroup<OperationErrorFormProperties>({
		});

	}

	export interface OperationErrorErrors {

		/** [Output Only] The error type identifier for this error. */
		code?: string | null;

		/** [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED. */
		OperationErrorErrorsErrorDetails?: Array<OperationErrorErrorsErrorDetails>;

		/** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
		location?: string | null;

		/** [Output Only] An optional, human-readable error message. */
		message?: string | null;
	}
	export interface OperationErrorErrorsFormProperties {

		/** [Output Only] The error type identifier for this error. */
		code: FormControl<string | null | undefined>,

		/** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
		location: FormControl<string | null | undefined>,

		/** [Output Only] An optional, human-readable error message. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateOperationErrorErrorsFormGroup() {
		return new FormGroup<OperationErrorErrorsFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationErrorErrorsErrorDetails {

		/** Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } } */
		errorInfo?: ErrorInfo;

		/** Provides links to documentation or for performing an out of band action. For example, if a quota check failed with an error indicating the calling project hasn't enabled the accessed service, this can contain a URL pointing directly to the right place in the developer console to flip the bit. */
		help?: Help;

		/** Provides a localized error message that is safe to return to the user which can be attached to an RPC error. */
		localizedMessage?: LocalizedMessage;

		/** Additional details for quota exceeded error for resource quota. */
		quotaInfo?: QuotaExceededInfo;
	}
	export interface OperationErrorErrorsErrorDetailsFormProperties {
	}
	export function CreateOperationErrorErrorsErrorDetailsFormGroup() {
		return new FormGroup<OperationErrorErrorsErrorDetailsFormProperties>({
		});

	}

	export interface SetCommonInstanceMetadataOperationMetadata {

		/** [Output Only] The client operation id. */
		clientOperationId?: string | null;

		/** [Output Only] Status information per location (location name is key). Example key: zones/us-central1-a */
		perLocationOperations?: {[id: string]: SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo };
	}
	export interface SetCommonInstanceMetadataOperationMetadataFormProperties {

		/** [Output Only] The client operation id. */
		clientOperationId: FormControl<string | null | undefined>,

		/** [Output Only] Status information per location (location name is key). Example key: zones/us-central1-a */
		perLocationOperations: FormControl<{[id: string]: SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo } | null | undefined>,
	}
	export function CreateSetCommonInstanceMetadataOperationMetadataFormGroup() {
		return new FormGroup<SetCommonInstanceMetadataOperationMetadataFormProperties>({
			clientOperationId: new FormControl<string | null | undefined>(undefined),
			perLocationOperations: new FormControl<{[id: string]: SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo } | null | undefined>(undefined),
		});

	}

	export interface SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		error?: Status;

		/** [Output Only] Status of the action, which can be one of the following: `PROPAGATING`, `PROPAGATED`, `ABANDONED`, `FAILED`, or `DONE`. */
		state?: SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoState | null;
	}
	export interface SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoFormProperties {

		/** [Output Only] Status of the action, which can be one of the following: `PROPAGATING`, `PROPAGATED`, `ABANDONED`, `FAILED`, or `DONE`. */
		state: FormControl<SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoState | null | undefined>,
	}
	export function CreateSetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoFormGroup() {
		return new FormGroup<SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoFormProperties>({
			state: new FormControl<SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoState | null | undefined>(undefined),
		});

	}


	/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
	export interface Status {

		/**
		 * The status code, which should be an enum value of google.rpc.Code.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		code?: number | null;

		/** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details?: Array<string>;

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message?: string | null;
	}

	/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
	export interface StatusFormProperties {

		/**
		 * The status code, which should be an enum value of google.rpc.Code.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		code: FormControl<number | null | undefined>,

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateStatusFormGroup() {
		return new FormGroup<StatusFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoState { ABANDONED = 'ABANDONED', DONE = 'DONE', FAILED = 'FAILED', PROPAGATED = 'PROPAGATED', PROPAGATING = 'PROPAGATING', UNSPECIFIED = 'UNSPECIFIED' }

	export enum OperationStatus { DONE = 'DONE', PENDING = 'PENDING', RUNNING = 'RUNNING' }

	export interface OperationWarnings {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		OperationWarningsData?: Array<OperationWarningsData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface OperationWarningsFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateOperationWarningsFormGroup() {
		return new FormGroup<OperationWarningsFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationWarningsData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface OperationWarningsDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateOperationWarningsDataFormGroup() {
		return new FormGroup<OperationWarningsDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationAggregatedList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A map of scoped operation lists. */
		items?: {[id: string]: OperationsScopedList };

		/** [Output Only] Type of resource. Always `compute#operationAggregatedList` for aggregated lists of operations. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: OperationAggregatedListWarning;
	}
	export interface OperationAggregatedListFormProperties {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] A map of scoped operation lists. */
		items: FormControl<{[id: string]: OperationsScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always `compute#operationAggregatedList` for aggregated lists of operations. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateOperationAggregatedListFormGroup() {
		return new FormGroup<OperationAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: OperationsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationsScopedList {

		/** [Output Only] A list of operations contained in this scope. */
		operations?: Array<Operation>;

		/** [Output Only] Informational warning which replaces the list of operations when the list is empty. */
		warning?: OperationsScopedListWarning;
	}
	export interface OperationsScopedListFormProperties {
	}
	export function CreateOperationsScopedListFormGroup() {
		return new FormGroup<OperationsScopedListFormProperties>({
		});

	}

	export interface OperationsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		OperationsScopedListWarningData?: Array<OperationsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface OperationsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateOperationsScopedListWarningFormGroup() {
		return new FormGroup<OperationsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface OperationsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateOperationsScopedListWarningDataFormGroup() {
		return new FormGroup<OperationsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		OperationAggregatedListWarningData?: Array<OperationAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface OperationAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateOperationAggregatedListWarningFormGroup() {
		return new FormGroup<OperationAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface OperationAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateOperationAggregatedListWarningDataFormGroup() {
		return new FormGroup<OperationAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of Operation resources. */
	export interface OperationList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of Operation resources. */
		items?: Array<Operation>;

		/** [Output Only] Type of resource. Always `compute#operations` for Operations resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: OperationListWarning;
	}

	/** Contains a list of Operation resources. */
	export interface OperationListFormProperties {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always `compute#operations` for Operations resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateOperationListFormGroup() {
		return new FormGroup<OperationListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		OperationListWarningData?: Array<OperationListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface OperationListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateOperationListWarningFormGroup() {
		return new FormGroup<OperationListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OperationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface OperationListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateOperationListWarningDataFormGroup() {
		return new FormGroup<OperationListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Packet Mirroring resource. Packet Mirroring clones the traffic of specified instances in your Virtual Private Cloud (VPC) network and forwards it to a collector destination, such as an instance group of an internal TCP/UDP load balancer, for analysis or examination. For more information about setting up Packet Mirroring, see Using Packet Mirroring. */
	export interface PacketMirroring {
		collectorIlb?: PacketMirroringForwardingRuleInfo;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE. */
		enable?: PacketMirroringEnable | null;
		filter?: PacketMirroringFilter;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings. */
		kind?: string | null;
		mirroredResources?: PacketMirroringMirroredResourceInfo;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;
		network?: PacketMirroringNetworkInfo;

		/**
		 * The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
		 * Type: uint, 0 to 4,294,967,295
		 */
		priority?: number | null;

		/** [Output Only] URI of the region where the packetMirroring resides. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	/** Represents a Packet Mirroring resource. Packet Mirroring clones the traffic of specified instances in your Virtual Private Cloud (VPC) network and forwards it to a collector destination, such as an instance group of an internal TCP/UDP load balancer, for analysis or examination. For more information about setting up Packet Mirroring, see Using Packet Mirroring. */
	export interface PacketMirroringFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE. */
		enable: FormControl<PacketMirroringEnable | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/**
		 * The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
		 * Type: uint, 0 to 4,294,967,295
		 */
		priority: FormControl<number | null | undefined>,

		/** [Output Only] URI of the region where the packetMirroring resides. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringFormGroup() {
		return new FormGroup<PacketMirroringFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enable: new FormControl<PacketMirroringEnable | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			priority: new FormControl<number | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringForwardingRuleInfo {

		/** [Output Only] Unique identifier for the forwarding rule; defined by the server. */
		canonicalUrl?: string | null;

		/** Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic. */
		url?: string | null;
	}
	export interface PacketMirroringForwardingRuleInfoFormProperties {

		/** [Output Only] Unique identifier for the forwarding rule; defined by the server. */
		canonicalUrl: FormControl<string | null | undefined>,

		/** Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringForwardingRuleInfoFormGroup() {
		return new FormGroup<PacketMirroringForwardingRuleInfoFormProperties>({
			canonicalUrl: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PacketMirroringEnable { FALSE = 'FALSE', TRUE = 'TRUE' }

	export interface PacketMirroringFilter {

		/** Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all IPv4 traffic is mirrored. */
		IPProtocols?: Array<string>;

		/** One or more IPv4 or IPv6 CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. If no ranges are specified, all IPv4 traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all IPv4 traffic is mirrored. To mirror all IPv4 and IPv6 traffic, use "0.0.0.0/0,::/0". Note: Support for IPv6 traffic is in preview. */
		cidrRanges?: Array<string>;

		/** Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH. */
		direction?: PacketMirroringFilterDirection | null;
	}
	export interface PacketMirroringFilterFormProperties {

		/** Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH. */
		direction: FormControl<PacketMirroringFilterDirection | null | undefined>,
	}
	export function CreatePacketMirroringFilterFormGroup() {
		return new FormGroup<PacketMirroringFilterFormProperties>({
			direction: new FormControl<PacketMirroringFilterDirection | null | undefined>(undefined),
		});

	}

	export enum PacketMirroringFilterDirection { BOTH = 'BOTH', EGRESS = 'EGRESS', INGRESS = 'INGRESS' }

	export interface PacketMirroringMirroredResourceInfo {

		/** A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances. */
		instances?: Array<PacketMirroringMirroredResourceInfoInstanceInfo>;

		/** A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks. */
		subnetworks?: Array<PacketMirroringMirroredResourceInfoSubnetInfo>;

		/** A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored. */
		tags?: Array<string>;
	}
	export interface PacketMirroringMirroredResourceInfoFormProperties {
	}
	export function CreatePacketMirroringMirroredResourceInfoFormGroup() {
		return new FormGroup<PacketMirroringMirroredResourceInfoFormProperties>({
		});

	}

	export interface PacketMirroringMirroredResourceInfoInstanceInfo {

		/** [Output Only] Unique identifier for the instance; defined by the server. */
		canonicalUrl?: string | null;

		/** Resource URL to the virtual machine instance which is being mirrored. */
		url?: string | null;
	}
	export interface PacketMirroringMirroredResourceInfoInstanceInfoFormProperties {

		/** [Output Only] Unique identifier for the instance; defined by the server. */
		canonicalUrl: FormControl<string | null | undefined>,

		/** Resource URL to the virtual machine instance which is being mirrored. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringMirroredResourceInfoInstanceInfoFormGroup() {
		return new FormGroup<PacketMirroringMirroredResourceInfoInstanceInfoFormProperties>({
			canonicalUrl: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringMirroredResourceInfoSubnetInfo {

		/** [Output Only] Unique identifier for the subnetwork; defined by the server. */
		canonicalUrl?: string | null;

		/** Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored. */
		url?: string | null;
	}
	export interface PacketMirroringMirroredResourceInfoSubnetInfoFormProperties {

		/** [Output Only] Unique identifier for the subnetwork; defined by the server. */
		canonicalUrl: FormControl<string | null | undefined>,

		/** Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringMirroredResourceInfoSubnetInfoFormGroup() {
		return new FormGroup<PacketMirroringMirroredResourceInfoSubnetInfoFormProperties>({
			canonicalUrl: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringNetworkInfo {

		/** [Output Only] Unique identifier for the network; defined by the server. */
		canonicalUrl?: string | null;

		/** URL of the network resource. */
		url?: string | null;
	}
	export interface PacketMirroringNetworkInfoFormProperties {

		/** [Output Only] Unique identifier for the network; defined by the server. */
		canonicalUrl: FormControl<string | null | undefined>,

		/** URL of the network resource. */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringNetworkInfoFormGroup() {
		return new FormGroup<PacketMirroringNetworkInfoFormProperties>({
			canonicalUrl: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of packetMirrorings. */
	export interface PacketMirroringAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PacketMirroring resources. */
		items?: {[id: string]: PacketMirroringsScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: PacketMirroringAggregatedListWarning;
	}

	/** Contains a list of packetMirrorings. */
	export interface PacketMirroringAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of PacketMirroring resources. */
		items: FormControl<{[id: string]: PacketMirroringsScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringAggregatedListFormGroup() {
		return new FormGroup<PacketMirroringAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: PacketMirroringsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringsScopedList {

		/** A list of packetMirrorings contained in this scope. */
		packetMirrorings?: Array<PacketMirroring>;

		/** Informational warning which replaces the list of packetMirrorings when the list is empty. */
		warning?: PacketMirroringsScopedListWarning;
	}
	export interface PacketMirroringsScopedListFormProperties {
	}
	export function CreatePacketMirroringsScopedListFormGroup() {
		return new FormGroup<PacketMirroringsScopedListFormProperties>({
		});

	}

	export interface PacketMirroringsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PacketMirroringsScopedListWarningData?: Array<PacketMirroringsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PacketMirroringsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringsScopedListWarningFormGroup() {
		return new FormGroup<PacketMirroringsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PacketMirroringsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringsScopedListWarningDataFormGroup() {
		return new FormGroup<PacketMirroringsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PacketMirroringAggregatedListWarningData?: Array<PacketMirroringAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PacketMirroringAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringAggregatedListWarningFormGroup() {
		return new FormGroup<PacketMirroringAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PacketMirroringAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringAggregatedListWarningDataFormGroup() {
		return new FormGroup<PacketMirroringAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of PacketMirroring resources. */
	export interface PacketMirroringList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PacketMirroring resources. */
		items?: Array<PacketMirroring>;

		/** [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: PacketMirroringListWarning;
	}

	/** Contains a list of PacketMirroring resources. */
	export interface PacketMirroringListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringListFormGroup() {
		return new FormGroup<PacketMirroringListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PacketMirroringListWarningData?: Array<PacketMirroringListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PacketMirroringListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringListWarningFormGroup() {
		return new FormGroup<PacketMirroringListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PacketMirroringListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PacketMirroringListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePacketMirroringListWarningDataFormGroup() {
		return new FormGroup<PacketMirroringListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service is used. */
	export interface PathMatcher {
		defaultRouteAction?: HttpRouteAction;

		/** The full or partial URL to the BackendService resource. This URL is used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use */
		defaultService?: string | null;

		/** Specifies settings for an HTTP redirect. */
		defaultUrlRedirect?: HttpRedirectAction;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction;

		/** The name to which this PathMatcher is referred by the HostRule. */
		name?: string | null;

		/** The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set. */
		pathRules?: Array<PathRule>;

		/** The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules. */
		routeRules?: Array<HttpRouteRule>;
	}

	/** A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service is used. */
	export interface PathMatcherFormProperties {

		/** The full or partial URL to the BackendService resource. This URL is used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use */
		defaultService: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** The name to which this PathMatcher is referred by the HostRule. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePathMatcherFormGroup() {
		return new FormGroup<PathMatcherFormProperties>({
			defaultService: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL. */
	export interface PathRule {

		/** The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here. */
		paths?: Array<string>;
		routeAction?: HttpRouteAction;

		/** The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. */
		service?: string | null;

		/** Specifies settings for an HTTP redirect. */
		urlRedirect?: HttpRedirectAction;
	}

	/** A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL. */
	export interface PathRuleFormProperties {

		/** The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. */
		service: FormControl<string | null | undefined>,
	}
	export function CreatePathRuleFormGroup() {
		return new FormGroup<PathRuleFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PreconfiguredWafSet {

		/** List of entities that are currently supported for WAF rules. */
		expressionSets?: Array<WafExpressionSet>;
	}
	export interface PreconfiguredWafSetFormProperties {
	}
	export function CreatePreconfiguredWafSetFormGroup() {
		return new FormGroup<PreconfiguredWafSetFormProperties>({
		});

	}

	export interface WafExpressionSet {

		/** A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like "stable" is particularly useful if a policy likes to avail newer set of expressions without having to change the policy. A given alias name can't be used for more than one entity set. */
		aliases?: Array<string>;

		/** List of available expressions. */
		expressions?: Array<WafExpressionSetExpression>;

		/** Google specified expression set ID. The format should be: - E.g. XSS-20170329 required */
		id?: string | null;
	}
	export interface WafExpressionSetFormProperties {

		/** Google specified expression set ID. The format should be: - E.g. XSS-20170329 required */
		id: FormControl<string | null | undefined>,
	}
	export function CreateWafExpressionSetFormGroup() {
		return new FormGroup<WafExpressionSetFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface WafExpressionSetExpression {

		/** Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive. required */
		id?: string | null;

		/**
		 * The sensitivity value associated with the WAF rule ID. This corresponds to the ModSecurity paranoia level, ranging from 1 to 4. 0 is reserved for opt-in only rules.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		sensitivity?: number | null;
	}
	export interface WafExpressionSetExpressionFormProperties {

		/** Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive. required */
		id: FormControl<string | null | undefined>,

		/**
		 * The sensitivity value associated with the WAF rule ID. This corresponds to the ModSecurity paranoia level, ranging from 1 to 4. 0 is reserved for opt-in only rules.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		sensitivity: FormControl<number | null | undefined>,
	}
	export function CreateWafExpressionSetExpressionFormGroup() {
		return new FormGroup<WafExpressionSetExpressionFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			sensitivity: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a Project resource. A project is used to organize resources in a Google Cloud Platform environment. For more information, read about the Resource Hierarchy. */
	export interface Project {

		/** A metadata key/value entry. */
		commonInstanceMetadata?: Metadata;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM. */
		defaultNetworkTier?: AccessConfigNetworkTier | null;

		/** [Output Only] Default service account used by VMs running in this project. */
		defaultServiceAccount?: string | null;

		/** An optional textual description of the resource. */
		description?: string | null;

		/** Restricted features enabled for use on this project. */
		enabledFeatures?: Array<string>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is *not* the project ID, and is just a unique ID used by Compute Engine to identify resources. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#project for projects. */
		kind?: string | null;

		/** The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine. */
		name?: string | null;

		/** [Output Only] Quotas assigned to this project. */
		quotas?: Array<Quota>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix. */
		usageExportLocation?: UsageExportLocation;

		/** [Output Only] Default internal DNS setting used by VMs running in this project. */
		vmDnsSetting?: ProjectVmDnsSetting | null;

		/** [Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated. */
		xpnProjectStatus?: ProjectXpnProjectStatus | null;
	}

	/** Represents a Project resource. A project is used to organize resources in a Google Cloud Platform environment. For more information, read about the Resource Hierarchy. */
	export interface ProjectFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM. */
		defaultNetworkTier: FormControl<AccessConfigNetworkTier | null | undefined>,

		/** [Output Only] Default service account used by VMs running in this project. */
		defaultServiceAccount: FormControl<string | null | undefined>,

		/** An optional textual description of the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is *not* the project ID, and is just a unique ID used by Compute Engine to identify resources. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#project for projects. */
		kind: FormControl<string | null | undefined>,

		/** The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Default internal DNS setting used by VMs running in this project. */
		vmDnsSetting: FormControl<ProjectVmDnsSetting | null | undefined>,

		/** [Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated. */
		xpnProjectStatus: FormControl<ProjectXpnProjectStatus | null | undefined>,
	}
	export function CreateProjectFormGroup() {
		return new FormGroup<ProjectFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			defaultNetworkTier: new FormControl<AccessConfigNetworkTier | null | undefined>(undefined),
			defaultServiceAccount: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			vmDnsSetting: new FormControl<ProjectVmDnsSetting | null | undefined>(undefined),
			xpnProjectStatus: new FormControl<ProjectXpnProjectStatus | null | undefined>(undefined),
		});

	}


	/** A quotas entry. */
	export interface Quota {

		/**
		 * [Output Only] Quota limit for this metric.
		 * Type: double
		 */
		limit?: number | null;

		/** [Output Only] Name of the quota metric. */
		metric?: QuotaMetric | null;

		/** [Output Only] Owning resource. This is the resource on which this quota is applied. */
		owner?: string | null;

		/**
		 * [Output Only] Current usage of this metric.
		 * Type: double
		 */
		usage?: number | null;
	}

	/** A quotas entry. */
	export interface QuotaFormProperties {

		/**
		 * [Output Only] Quota limit for this metric.
		 * Type: double
		 */
		limit: FormControl<number | null | undefined>,

		/** [Output Only] Name of the quota metric. */
		metric: FormControl<QuotaMetric | null | undefined>,

		/** [Output Only] Owning resource. This is the resource on which this quota is applied. */
		owner: FormControl<string | null | undefined>,

		/**
		 * [Output Only] Current usage of this metric.
		 * Type: double
		 */
		usage: FormControl<number | null | undefined>,
	}
	export function CreateQuotaFormGroup() {
		return new FormGroup<QuotaFormProperties>({
			limit: new FormControl<number | null | undefined>(undefined),
			metric: new FormControl<QuotaMetric | null | undefined>(undefined),
			owner: new FormControl<string | null | undefined>(undefined),
			usage: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum QuotaMetric { A2_CPUS = 'A2_CPUS', AFFINITY_GROUPS = 'AFFINITY_GROUPS', AUTOSCALERS = 'AUTOSCALERS', BACKEND_BUCKETS = 'BACKEND_BUCKETS', BACKEND_SERVICES = 'BACKEND_SERVICES', C2D_CPUS = 'C2D_CPUS', C2_CPUS = 'C2_CPUS', C3_CPUS = 'C3_CPUS', COMMITMENTS = 'COMMITMENTS', COMMITTED_A2_CPUS = 'COMMITTED_A2_CPUS', COMMITTED_C2D_CPUS = 'COMMITTED_C2D_CPUS', COMMITTED_C2_CPUS = 'COMMITTED_C2_CPUS', COMMITTED_C3_CPUS = 'COMMITTED_C3_CPUS', COMMITTED_CPUS = 'COMMITTED_CPUS', COMMITTED_E2_CPUS = 'COMMITTED_E2_CPUS', COMMITTED_LICENSES = 'COMMITTED_LICENSES', COMMITTED_LOCAL_SSD_TOTAL_GB = 'COMMITTED_LOCAL_SSD_TOTAL_GB', COMMITTED_M3_CPUS = 'COMMITTED_M3_CPUS', COMMITTED_MEMORY_OPTIMIZED_CPUS = 'COMMITTED_MEMORY_OPTIMIZED_CPUS', COMMITTED_N2A_CPUS = 'COMMITTED_N2A_CPUS', COMMITTED_N2D_CPUS = 'COMMITTED_N2D_CPUS', COMMITTED_N2_CPUS = 'COMMITTED_N2_CPUS', COMMITTED_NVIDIA_A100_80GB_GPUS = 'COMMITTED_NVIDIA_A100_80GB_GPUS', COMMITTED_NVIDIA_A100_GPUS = 'COMMITTED_NVIDIA_A100_GPUS', COMMITTED_NVIDIA_H100_GPUS = 'COMMITTED_NVIDIA_H100_GPUS', COMMITTED_NVIDIA_K80_GPUS = 'COMMITTED_NVIDIA_K80_GPUS', COMMITTED_NVIDIA_L4_GPUS = 'COMMITTED_NVIDIA_L4_GPUS', COMMITTED_NVIDIA_P100_GPUS = 'COMMITTED_NVIDIA_P100_GPUS', COMMITTED_NVIDIA_P4_GPUS = 'COMMITTED_NVIDIA_P4_GPUS', COMMITTED_NVIDIA_T4_GPUS = 'COMMITTED_NVIDIA_T4_GPUS', COMMITTED_NVIDIA_V100_GPUS = 'COMMITTED_NVIDIA_V100_GPUS', COMMITTED_T2A_CPUS = 'COMMITTED_T2A_CPUS', COMMITTED_T2D_CPUS = 'COMMITTED_T2D_CPUS', CPUS = 'CPUS', CPUS_ALL_REGIONS = 'CPUS_ALL_REGIONS', DISKS_TOTAL_GB = 'DISKS_TOTAL_GB', E2_CPUS = 'E2_CPUS', EXTERNAL_MANAGED_FORWARDING_RULES = 'EXTERNAL_MANAGED_FORWARDING_RULES', EXTERNAL_NETWORK_LB_FORWARDING_RULES = 'EXTERNAL_NETWORK_LB_FORWARDING_RULES', EXTERNAL_PROTOCOL_FORWARDING_RULES = 'EXTERNAL_PROTOCOL_FORWARDING_RULES', EXTERNAL_VPN_GATEWAYS = 'EXTERNAL_VPN_GATEWAYS', FIREWALLS = 'FIREWALLS', FORWARDING_RULES = 'FORWARDING_RULES', GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES = 'GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES', GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES = 'GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES', GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES = 'GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES', GLOBAL_INTERNAL_ADDRESSES = 'GLOBAL_INTERNAL_ADDRESSES', GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES = 'GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES', GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES = 'GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES', GPUS_ALL_REGIONS = 'GPUS_ALL_REGIONS', HEALTH_CHECKS = 'HEALTH_CHECKS', IMAGES = 'IMAGES', INSTANCES = 'INSTANCES', INSTANCE_GROUPS = 'INSTANCE_GROUPS', INSTANCE_GROUP_MANAGERS = 'INSTANCE_GROUP_MANAGERS', INSTANCE_TEMPLATES = 'INSTANCE_TEMPLATES', INTERCONNECTS = 'INTERCONNECTS', INTERCONNECT_ATTACHMENTS_PER_REGION = 'INTERCONNECT_ATTACHMENTS_PER_REGION', INTERCONNECT_ATTACHMENTS_TOTAL_MBPS = 'INTERCONNECT_ATTACHMENTS_TOTAL_MBPS', INTERCONNECT_TOTAL_GBPS = 'INTERCONNECT_TOTAL_GBPS', INTERNAL_ADDRESSES = 'INTERNAL_ADDRESSES', INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES = 'INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES', IN_PLACE_SNAPSHOTS = 'IN_PLACE_SNAPSHOTS', IN_USE_ADDRESSES = 'IN_USE_ADDRESSES', IN_USE_BACKUP_SCHEDULES = 'IN_USE_BACKUP_SCHEDULES', IN_USE_SNAPSHOT_SCHEDULES = 'IN_USE_SNAPSHOT_SCHEDULES', LOCAL_SSD_TOTAL_GB = 'LOCAL_SSD_TOTAL_GB', M1_CPUS = 'M1_CPUS', M2_CPUS = 'M2_CPUS', M3_CPUS = 'M3_CPUS', MACHINE_IMAGES = 'MACHINE_IMAGES', N2A_CPUS = 'N2A_CPUS', N2D_CPUS = 'N2D_CPUS', N2_CPUS = 'N2_CPUS', NETWORKS = 'NETWORKS', NETWORK_ATTACHMENTS = 'NETWORK_ATTACHMENTS', NETWORK_ENDPOINT_GROUPS = 'NETWORK_ENDPOINT_GROUPS', NETWORK_FIREWALL_POLICIES = 'NETWORK_FIREWALL_POLICIES', NET_LB_SECURITY_POLICIES_PER_REGION = 'NET_LB_SECURITY_POLICIES_PER_REGION', NET_LB_SECURITY_POLICY_RULES_PER_REGION = 'NET_LB_SECURITY_POLICY_RULES_PER_REGION', NET_LB_SECURITY_POLICY_RULE_ATTRIBUTES_PER_REGION = 'NET_LB_SECURITY_POLICY_RULE_ATTRIBUTES_PER_REGION', NODE_GROUPS = 'NODE_GROUPS', NODE_TEMPLATES = 'NODE_TEMPLATES', NVIDIA_A100_80GB_GPUS = 'NVIDIA_A100_80GB_GPUS', NVIDIA_A100_GPUS = 'NVIDIA_A100_GPUS', NVIDIA_K80_GPUS = 'NVIDIA_K80_GPUS', NVIDIA_L4_GPUS = 'NVIDIA_L4_GPUS', NVIDIA_P100_GPUS = 'NVIDIA_P100_GPUS', NVIDIA_P100_VWS_GPUS = 'NVIDIA_P100_VWS_GPUS', NVIDIA_P4_GPUS = 'NVIDIA_P4_GPUS', NVIDIA_P4_VWS_GPUS = 'NVIDIA_P4_VWS_GPUS', NVIDIA_T4_GPUS = 'NVIDIA_T4_GPUS', NVIDIA_T4_VWS_GPUS = 'NVIDIA_T4_VWS_GPUS', NVIDIA_V100_GPUS = 'NVIDIA_V100_GPUS', PACKET_MIRRORINGS = 'PACKET_MIRRORINGS', PD_EXTREME_TOTAL_PROVISIONED_IOPS = 'PD_EXTREME_TOTAL_PROVISIONED_IOPS', PREEMPTIBLE_CPUS = 'PREEMPTIBLE_CPUS', PREEMPTIBLE_LOCAL_SSD_GB = 'PREEMPTIBLE_LOCAL_SSD_GB', PREEMPTIBLE_NVIDIA_A100_80GB_GPUS = 'PREEMPTIBLE_NVIDIA_A100_80GB_GPUS', PREEMPTIBLE_NVIDIA_A100_GPUS = 'PREEMPTIBLE_NVIDIA_A100_GPUS', PREEMPTIBLE_NVIDIA_H100_GPUS = 'PREEMPTIBLE_NVIDIA_H100_GPUS', PREEMPTIBLE_NVIDIA_K80_GPUS = 'PREEMPTIBLE_NVIDIA_K80_GPUS', PREEMPTIBLE_NVIDIA_L4_GPUS = 'PREEMPTIBLE_NVIDIA_L4_GPUS', PREEMPTIBLE_NVIDIA_P100_GPUS = 'PREEMPTIBLE_NVIDIA_P100_GPUS', PREEMPTIBLE_NVIDIA_P100_VWS_GPUS = 'PREEMPTIBLE_NVIDIA_P100_VWS_GPUS', PREEMPTIBLE_NVIDIA_P4_GPUS = 'PREEMPTIBLE_NVIDIA_P4_GPUS', PREEMPTIBLE_NVIDIA_P4_VWS_GPUS = 'PREEMPTIBLE_NVIDIA_P4_VWS_GPUS', PREEMPTIBLE_NVIDIA_T4_GPUS = 'PREEMPTIBLE_NVIDIA_T4_GPUS', PREEMPTIBLE_NVIDIA_T4_VWS_GPUS = 'PREEMPTIBLE_NVIDIA_T4_VWS_GPUS', PREEMPTIBLE_NVIDIA_V100_GPUS = 'PREEMPTIBLE_NVIDIA_V100_GPUS', PREEMPTIBLE_TPU_LITE_DEVICE_V5 = 'PREEMPTIBLE_TPU_LITE_DEVICE_V5', PREEMPTIBLE_TPU_LITE_PODSLICE_V5 = 'PREEMPTIBLE_TPU_LITE_PODSLICE_V5', PREEMPTIBLE_TPU_PODSLICE_V4 = 'PREEMPTIBLE_TPU_PODSLICE_V4', PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK = 'PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK', PSC_INTERNAL_LB_FORWARDING_RULES = 'PSC_INTERNAL_LB_FORWARDING_RULES', PUBLIC_ADVERTISED_PREFIXES = 'PUBLIC_ADVERTISED_PREFIXES', PUBLIC_DELEGATED_PREFIXES = 'PUBLIC_DELEGATED_PREFIXES', REGIONAL_AUTOSCALERS = 'REGIONAL_AUTOSCALERS', REGIONAL_EXTERNAL_MANAGED_BACKEND_SERVICES = 'REGIONAL_EXTERNAL_MANAGED_BACKEND_SERVICES', REGIONAL_EXTERNAL_NETWORK_LB_BACKEND_SERVICES = 'REGIONAL_EXTERNAL_NETWORK_LB_BACKEND_SERVICES', REGIONAL_INSTANCE_GROUP_MANAGERS = 'REGIONAL_INSTANCE_GROUP_MANAGERS', REGIONAL_INTERNAL_LB_BACKEND_SERVICES = 'REGIONAL_INTERNAL_LB_BACKEND_SERVICES', REGIONAL_INTERNAL_MANAGED_BACKEND_SERVICES = 'REGIONAL_INTERNAL_MANAGED_BACKEND_SERVICES', RESERVATIONS = 'RESERVATIONS', RESOURCE_POLICIES = 'RESOURCE_POLICIES', ROUTERS = 'ROUTERS', ROUTES = 'ROUTES', SECURITY_POLICIES = 'SECURITY_POLICIES', SECURITY_POLICIES_PER_REGION = 'SECURITY_POLICIES_PER_REGION', SECURITY_POLICY_ADVANCED_RULES_PER_REGION = 'SECURITY_POLICY_ADVANCED_RULES_PER_REGION', SECURITY_POLICY_CEVAL_RULES = 'SECURITY_POLICY_CEVAL_RULES', SECURITY_POLICY_RULES = 'SECURITY_POLICY_RULES', SECURITY_POLICY_RULES_PER_REGION = 'SECURITY_POLICY_RULES_PER_REGION', SERVICE_ATTACHMENTS = 'SERVICE_ATTACHMENTS', SNAPSHOTS = 'SNAPSHOTS', SSD_TOTAL_GB = 'SSD_TOTAL_GB', SSL_CERTIFICATES = 'SSL_CERTIFICATES', STATIC_ADDRESSES = 'STATIC_ADDRESSES', STATIC_BYOIP_ADDRESSES = 'STATIC_BYOIP_ADDRESSES', STATIC_EXTERNAL_IPV6_ADDRESS_RANGES = 'STATIC_EXTERNAL_IPV6_ADDRESS_RANGES', SUBNETWORKS = 'SUBNETWORKS', T2A_CPUS = 'T2A_CPUS', T2D_CPUS = 'T2D_CPUS', TARGET_HTTPS_PROXIES = 'TARGET_HTTPS_PROXIES', TARGET_HTTP_PROXIES = 'TARGET_HTTP_PROXIES', TARGET_INSTANCES = 'TARGET_INSTANCES', TARGET_POOLS = 'TARGET_POOLS', TARGET_SSL_PROXIES = 'TARGET_SSL_PROXIES', TARGET_TCP_PROXIES = 'TARGET_TCP_PROXIES', TARGET_VPN_GATEWAYS = 'TARGET_VPN_GATEWAYS', TPU_LITE_DEVICE_V5 = 'TPU_LITE_DEVICE_V5', TPU_LITE_PODSLICE_V5 = 'TPU_LITE_PODSLICE_V5', TPU_PODSLICE_V4 = 'TPU_PODSLICE_V4', URL_MAPS = 'URL_MAPS', VPN_GATEWAYS = 'VPN_GATEWAYS', VPN_TUNNELS = 'VPN_TUNNELS', XPN_SERVICE_PROJECTS = 'XPN_SERVICE_PROJECTS' }


	/** The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix. */
	export interface UsageExportLocation {

		/** The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket. */
		bucketName?: string | null;

		/** An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage_gce. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions. */
		reportNamePrefix?: string | null;
	}

	/** The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix. */
	export interface UsageExportLocationFormProperties {

		/** The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket. */
		bucketName: FormControl<string | null | undefined>,

		/** An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage_gce. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions. */
		reportNamePrefix: FormControl<string | null | undefined>,
	}
	export function CreateUsageExportLocationFormGroup() {
		return new FormGroup<UsageExportLocationFormProperties>({
			bucketName: new FormControl<string | null | undefined>(undefined),
			reportNamePrefix: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProjectVmDnsSetting { GLOBAL_DEFAULT = 'GLOBAL_DEFAULT', UNSPECIFIED_VM_DNS_SETTING = 'UNSPECIFIED_VM_DNS_SETTING', ZONAL_DEFAULT = 'ZONAL_DEFAULT', ZONAL_ONLY = 'ZONAL_ONLY' }

	export enum ProjectXpnProjectStatus { HOST = 'HOST', UNSPECIFIED_XPN_PROJECT_STATUS = 'UNSPECIFIED_XPN_PROJECT_STATUS' }

	export interface ProjectsDisableXpnResourceRequest {

		/** Service resource (a.k.a service project) ID. */
		xpnResource?: XpnResourceId;
	}
	export interface ProjectsDisableXpnResourceRequestFormProperties {
	}
	export function CreateProjectsDisableXpnResourceRequestFormGroup() {
		return new FormGroup<ProjectsDisableXpnResourceRequestFormProperties>({
		});

	}


	/** Service resource (a.k.a service project) ID. */
	export interface XpnResourceId {

		/** The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678). */
		id?: string | null;

		/** The type of the service resource. */
		type?: XpnResourceIdType | null;
	}

	/** Service resource (a.k.a service project) ID. */
	export interface XpnResourceIdFormProperties {

		/** The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678). */
		id: FormControl<string | null | undefined>,

		/** The type of the service resource. */
		type: FormControl<XpnResourceIdType | null | undefined>,
	}
	export function CreateXpnResourceIdFormGroup() {
		return new FormGroup<XpnResourceIdFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<XpnResourceIdType | null | undefined>(undefined),
		});

	}

	export enum XpnResourceIdType { PROJECT = 'PROJECT', XPN_RESOURCE_TYPE_UNSPECIFIED = 'XPN_RESOURCE_TYPE_UNSPECIFIED' }

	export interface ProjectsEnableXpnResourceRequest {

		/** Service resource (a.k.a service project) ID. */
		xpnResource?: XpnResourceId;
	}
	export interface ProjectsEnableXpnResourceRequestFormProperties {
	}
	export function CreateProjectsEnableXpnResourceRequestFormGroup() {
		return new FormGroup<ProjectsEnableXpnResourceRequestFormProperties>({
		});

	}

	export interface ProjectsGetXpnResources {

		/** [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects) */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** Service resources (a.k.a service projects) attached to this project as their shared VPC host. */
		resources?: Array<XpnResourceId>;
	}
	export interface ProjectsGetXpnResourcesFormProperties {

		/** [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects) */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateProjectsGetXpnResourcesFormGroup() {
		return new FormGroup<ProjectsGetXpnResourcesFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ProjectsListXpnHostsRequest {

		/** Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project. */
		organization?: string | null;
	}
	export interface ProjectsListXpnHostsRequestFormProperties {

		/** Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project. */
		organization: FormControl<string | null | undefined>,
	}
	export function CreateProjectsListXpnHostsRequestFormGroup() {
		return new FormGroup<ProjectsListXpnHostsRequestFormProperties>({
			organization: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ProjectsSetDefaultNetworkTierRequest {

		/** Default network tier to be set. */
		networkTier?: AccessConfigNetworkTier | null;
	}
	export interface ProjectsSetDefaultNetworkTierRequestFormProperties {

		/** Default network tier to be set. */
		networkTier: FormControl<AccessConfigNetworkTier | null | undefined>,
	}
	export function CreateProjectsSetDefaultNetworkTierRequestFormGroup() {
		return new FormGroup<ProjectsSetDefaultNetworkTierRequestFormProperties>({
			networkTier: new FormControl<AccessConfigNetworkTier | null | undefined>(undefined),
		});

	}


	/** A public advertised prefix represents an aggregated IP prefix or netblock which customers bring to cloud. The IP prefix is a single unit of route advertisement and is announced globally to the internet. */
	export interface PublicAdvertisedPrefix {

		/** [Output Only] The version of BYOIP API. */
		byoipApiVersion?: PublicAdvertisedPrefixByoipApiVersion | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** The address to be used for reverse DNS verification. */
		dnsVerificationIp?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id?: string | null;

		/** The address range, in CIDR format, represented by this public advertised prefix. */
		ipCidrRange?: string | null;

		/** [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Specifies how child public delegated prefix will be scoped. It could be one of following values: - `REGIONAL`: The public delegated prefix is regional only. The provisioning will take a few minutes. - `GLOBAL`: The public delegated prefix is global only. The provisioning will take ~4 weeks. - `GLOBAL_AND_REGIONAL` [output only]: The public delegated prefixes is BYOIP V1 legacy prefix. This is output only value and no longer supported in BYOIP V2. */
		pdpScope?: PublicAdvertisedPrefixPdpScope | null;

		/** [Output Only] The list of public delegated prefixes that exist for this public advertised prefix. */
		publicDelegatedPrefixs?: Array<PublicAdvertisedPrefixPublicDelegatedPrefix>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The shared secret to be used for reverse DNS verification. */
		sharedSecret?: string | null;

		/** The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed. */
		status?: PublicAdvertisedPrefixStatus | null;
	}

	/** A public advertised prefix represents an aggregated IP prefix or netblock which customers bring to cloud. The IP prefix is a single unit of route advertisement and is announced globally to the internet. */
	export interface PublicAdvertisedPrefixFormProperties {

		/** [Output Only] The version of BYOIP API. */
		byoipApiVersion: FormControl<PublicAdvertisedPrefixByoipApiVersion | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** The address to be used for reverse DNS verification. */
		dnsVerificationIp: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** The address range, in CIDR format, represented by this public advertised prefix. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Specifies how child public delegated prefix will be scoped. It could be one of following values: - `REGIONAL`: The public delegated prefix is regional only. The provisioning will take a few minutes. - `GLOBAL`: The public delegated prefix is global only. The provisioning will take ~4 weeks. - `GLOBAL_AND_REGIONAL` [output only]: The public delegated prefixes is BYOIP V1 legacy prefix. This is output only value and no longer supported in BYOIP V2. */
		pdpScope: FormControl<PublicAdvertisedPrefixPdpScope | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The shared secret to be used for reverse DNS verification. */
		sharedSecret: FormControl<string | null | undefined>,

		/** The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed. */
		status: FormControl<PublicAdvertisedPrefixStatus | null | undefined>,
	}
	export function CreatePublicAdvertisedPrefixFormGroup() {
		return new FormGroup<PublicAdvertisedPrefixFormProperties>({
			byoipApiVersion: new FormControl<PublicAdvertisedPrefixByoipApiVersion | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			dnsVerificationIp: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			pdpScope: new FormControl<PublicAdvertisedPrefixPdpScope | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sharedSecret: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<PublicAdvertisedPrefixStatus | null | undefined>(undefined),
		});

	}

	export enum PublicAdvertisedPrefixByoipApiVersion { V1 = 'V1', V2 = 'V2' }

	export enum PublicAdvertisedPrefixPdpScope { GLOBAL = 'GLOBAL', GLOBAL_AND_REGIONAL = 'GLOBAL_AND_REGIONAL', REGIONAL = 'REGIONAL' }


	/** Represents a CIDR range which can be used to assign addresses. */
	export interface PublicAdvertisedPrefixPublicDelegatedPrefix {

		/** The IP address range of the public delegated prefix */
		ipRange?: string | null;

		/** The name of the public delegated prefix */
		name?: string | null;

		/** The project number of the public delegated prefix */
		project?: string | null;

		/** The region of the public delegated prefix if it is regional. If absent, the prefix is global. */
		region?: string | null;

		/** The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active. */
		status?: string | null;
	}

	/** Represents a CIDR range which can be used to assign addresses. */
	export interface PublicAdvertisedPrefixPublicDelegatedPrefixFormProperties {

		/** The IP address range of the public delegated prefix */
		ipRange: FormControl<string | null | undefined>,

		/** The name of the public delegated prefix */
		name: FormControl<string | null | undefined>,

		/** The project number of the public delegated prefix */
		project: FormControl<string | null | undefined>,

		/** The region of the public delegated prefix if it is regional. If absent, the prefix is global. */
		region: FormControl<string | null | undefined>,

		/** The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active. */
		status: FormControl<string | null | undefined>,
	}
	export function CreatePublicAdvertisedPrefixPublicDelegatedPrefixFormGroup() {
		return new FormGroup<PublicAdvertisedPrefixPublicDelegatedPrefixFormProperties>({
			ipRange: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			project: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PublicAdvertisedPrefixStatus { ANNOUNCED_TO_INTERNET = 'ANNOUNCED_TO_INTERNET', INITIAL = 'INITIAL', PREFIX_CONFIGURATION_COMPLETE = 'PREFIX_CONFIGURATION_COMPLETE', PREFIX_CONFIGURATION_IN_PROGRESS = 'PREFIX_CONFIGURATION_IN_PROGRESS', PREFIX_REMOVAL_IN_PROGRESS = 'PREFIX_REMOVAL_IN_PROGRESS', PTR_CONFIGURED = 'PTR_CONFIGURED', READY_TO_ANNOUNCE = 'READY_TO_ANNOUNCE', REVERSE_DNS_LOOKUP_FAILED = 'REVERSE_DNS_LOOKUP_FAILED', VALIDATED = 'VALIDATED' }

	export interface PublicAdvertisedPrefixList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PublicAdvertisedPrefix resources. */
		items?: Array<PublicAdvertisedPrefix>;

		/** [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: PublicAdvertisedPrefixListWarning;
	}
	export interface PublicAdvertisedPrefixListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreatePublicAdvertisedPrefixListFormGroup() {
		return new FormGroup<PublicAdvertisedPrefixListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicAdvertisedPrefixListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PublicAdvertisedPrefixListWarningData?: Array<PublicAdvertisedPrefixListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PublicAdvertisedPrefixListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePublicAdvertisedPrefixListWarningFormGroup() {
		return new FormGroup<PublicAdvertisedPrefixListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicAdvertisedPrefixListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PublicAdvertisedPrefixListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePublicAdvertisedPrefixListWarningDataFormGroup() {
		return new FormGroup<PublicAdvertisedPrefixListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A PublicDelegatedPrefix resource represents an IP block within a PublicAdvertisedPrefix that is configured within a single cloud scope (global or region). IPs in the block can be allocated to resources within that scope. Public delegated prefixes may be further broken up into smaller IP blocks in the same scope as the parent block. */
	export interface PublicDelegatedPrefix {

		/** [Output Only] The version of BYOIP API. */
		byoipApiVersion?: PublicAdvertisedPrefixByoipApiVersion | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicDelegatedPrefix. An up-to-date fingerprint must be provided in order to update the PublicDelegatedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicDelegatedPrefix. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id?: string | null;

		/** The IP address range, in CIDR format, represented by this public delegated prefix. */
		ipCidrRange?: string | null;

		/** If true, the prefix will be live migrated. */
		isLiveMigration?: boolean | null;

		/** [Output Only] Type of the resource. Always compute#publicDelegatedPrefix for public delegated prefixes. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of parent prefix. Either PublicAdvertisedPrefix or PublicDelegatedPrefix. */
		parentPrefix?: string | null;

		/** The list of sub public delegated prefixes that exist for this public delegated prefix. */
		publicDelegatedSubPrefixs?: Array<PublicDelegatedPrefixPublicDelegatedSubPrefix>;

		/** [Output Only] URL of the region where the public delegated prefix resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of the public delegated prefix, which can be one of following values: - `INITIALIZING` The public delegated prefix is being initialized and addresses cannot be created yet. - `READY_TO_ANNOUNCE` The public delegated prefix is a live migration prefix and is active. - `ANNOUNCED` The public delegated prefix is active. - `DELETING` The public delegated prefix is being deprovsioned. */
		status?: PublicDelegatedPrefixStatus | null;
	}

	/** A PublicDelegatedPrefix resource represents an IP block within a PublicAdvertisedPrefix that is configured within a single cloud scope (global or region). IPs in the block can be allocated to resources within that scope. Public delegated prefixes may be further broken up into smaller IP blocks in the same scope as the parent block. */
	export interface PublicDelegatedPrefixFormProperties {

		/** [Output Only] The version of BYOIP API. */
		byoipApiVersion: FormControl<PublicAdvertisedPrefixByoipApiVersion | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicDelegatedPrefix. An up-to-date fingerprint must be provided in order to update the PublicDelegatedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicDelegatedPrefix. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** The IP address range, in CIDR format, represented by this public delegated prefix. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** If true, the prefix will be live migrated. */
		isLiveMigration: FormControl<boolean | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#publicDelegatedPrefix for public delegated prefixes. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The URL of parent prefix. Either PublicAdvertisedPrefix or PublicDelegatedPrefix. */
		parentPrefix: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the public delegated prefix resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of the public delegated prefix, which can be one of following values: - `INITIALIZING` The public delegated prefix is being initialized and addresses cannot be created yet. - `READY_TO_ANNOUNCE` The public delegated prefix is a live migration prefix and is active. - `ANNOUNCED` The public delegated prefix is active. - `DELETING` The public delegated prefix is being deprovsioned. */
		status: FormControl<PublicDelegatedPrefixStatus | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixFormGroup() {
		return new FormGroup<PublicDelegatedPrefixFormProperties>({
			byoipApiVersion: new FormControl<PublicAdvertisedPrefixByoipApiVersion | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			isLiveMigration: new FormControl<boolean | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			parentPrefix: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<PublicDelegatedPrefixStatus | null | undefined>(undefined),
		});

	}


	/** Represents a sub PublicDelegatedPrefix. */
	export interface PublicDelegatedPrefixPublicDelegatedSubPrefix {

		/** Name of the project scoping this PublicDelegatedSubPrefix. */
		delegateeProject?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** The IP address range, in CIDR format, represented by this sub public delegated prefix. */
		ipCidrRange?: string | null;

		/** Whether the sub prefix is delegated to create Address resources in the delegatee project. */
		isAddress?: boolean | null;

		/** The name of the sub public delegated prefix. */
		name?: string | null;

		/** [Output Only] The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global. */
		region?: string | null;

		/** [Output Only] The status of the sub public delegated prefix. */
		status?: NetworkPeeringState | null;
	}

	/** Represents a sub PublicDelegatedPrefix. */
	export interface PublicDelegatedPrefixPublicDelegatedSubPrefixFormProperties {

		/** Name of the project scoping this PublicDelegatedSubPrefix. */
		delegateeProject: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** The IP address range, in CIDR format, represented by this sub public delegated prefix. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** Whether the sub prefix is delegated to create Address resources in the delegatee project. */
		isAddress: FormControl<boolean | null | undefined>,

		/** The name of the sub public delegated prefix. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] The status of the sub public delegated prefix. */
		status: FormControl<NetworkPeeringState | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixPublicDelegatedSubPrefixFormGroup() {
		return new FormGroup<PublicDelegatedPrefixPublicDelegatedSubPrefixFormProperties>({
			delegateeProject: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			isAddress: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<NetworkPeeringState | null | undefined>(undefined),
		});

	}

	export enum PublicDelegatedPrefixStatus { ANNOUNCED = 'ANNOUNCED', ANNOUNCED_TO_GOOGLE = 'ANNOUNCED_TO_GOOGLE', ANNOUNCED_TO_INTERNET = 'ANNOUNCED_TO_INTERNET', DELETING = 'DELETING', INITIALIZING = 'INITIALIZING', READY_TO_ANNOUNCE = 'READY_TO_ANNOUNCE' }

	export interface PublicDelegatedPrefixAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PublicDelegatedPrefixesScopedList resources. */
		items?: {[id: string]: PublicDelegatedPrefixesScopedList };

		/** [Output Only] Type of the resource. Always compute#publicDelegatedPrefixAggregatedList for aggregated lists of public delegated prefixes. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: PublicDelegatedPrefixAggregatedListWarning;
	}
	export interface PublicDelegatedPrefixAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of PublicDelegatedPrefixesScopedList resources. */
		items: FormControl<{[id: string]: PublicDelegatedPrefixesScopedList } | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#publicDelegatedPrefixAggregatedList for aggregated lists of public delegated prefixes. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixAggregatedListFormGroup() {
		return new FormGroup<PublicDelegatedPrefixAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: PublicDelegatedPrefixesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixesScopedList {

		/** [Output Only] A list of PublicDelegatedPrefixes contained in this scope. */
		publicDelegatedPrefixes?: Array<PublicDelegatedPrefix>;

		/** [Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty. */
		warning?: PublicDelegatedPrefixesScopedListWarning;
	}
	export interface PublicDelegatedPrefixesScopedListFormProperties {
	}
	export function CreatePublicDelegatedPrefixesScopedListFormGroup() {
		return new FormGroup<PublicDelegatedPrefixesScopedListFormProperties>({
		});

	}

	export interface PublicDelegatedPrefixesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PublicDelegatedPrefixesScopedListWarningData?: Array<PublicDelegatedPrefixesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PublicDelegatedPrefixesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixesScopedListWarningFormGroup() {
		return new FormGroup<PublicDelegatedPrefixesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PublicDelegatedPrefixesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixesScopedListWarningDataFormGroup() {
		return new FormGroup<PublicDelegatedPrefixesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PublicDelegatedPrefixAggregatedListWarningData?: Array<PublicDelegatedPrefixAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PublicDelegatedPrefixAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixAggregatedListWarningFormGroup() {
		return new FormGroup<PublicDelegatedPrefixAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PublicDelegatedPrefixAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixAggregatedListWarningDataFormGroup() {
		return new FormGroup<PublicDelegatedPrefixAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of PublicDelegatedPrefix resources. */
		items?: Array<PublicDelegatedPrefix>;

		/** [Output Only] Type of the resource. Always compute#publicDelegatedPrefixList for public delegated prefixes. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: PublicDelegatedPrefixListWarning;
	}
	export interface PublicDelegatedPrefixListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#publicDelegatedPrefixList for public delegated prefixes. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixListFormGroup() {
		return new FormGroup<PublicDelegatedPrefixListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		PublicDelegatedPrefixListWarningData?: Array<PublicDelegatedPrefixListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface PublicDelegatedPrefixListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixListWarningFormGroup() {
		return new FormGroup<PublicDelegatedPrefixListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PublicDelegatedPrefixListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface PublicDelegatedPrefixListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreatePublicDelegatedPrefixListWarningDataFormGroup() {
		return new FormGroup<PublicDelegatedPrefixListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Region resource. A region is a geographical area where a resource is located. For more information, read Regions and Zones. */
	export interface Region {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** [Output Only] Textual description of the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#region for regions. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] Quotas assigned to this region. */
		quotas?: Array<Quota>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Status of the region, either UP or DOWN. */
		status?: RegionStatus | null;

		/** [Output Only] Reserved for future use. */
		supportsPzs?: boolean | null;

		/** [Output Only] A list of zones available in this region, in the form of resource URLs. */
		zones?: Array<string>;
	}

	/** Represents a Region resource. A region is a geographical area where a resource is located. For more information, read Regions and Zones. */
	export interface RegionFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Textual description of the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#region for regions. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Status of the region, either UP or DOWN. */
		status: FormControl<RegionStatus | null | undefined>,

		/** [Output Only] Reserved for future use. */
		supportsPzs: FormControl<boolean | null | undefined>,
	}
	export function CreateRegionFormGroup() {
		return new FormGroup<RegionFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<RegionStatus | null | undefined>(undefined),
			supportsPzs: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum RegionStatus { DOWN = 'DOWN', UP = 'UP' }

	export interface RegionAddressesMoveRequest {

		/** An optional destination address description if intended to be different from the source. */
		description?: string | null;

		/** The URL of the destination address to move to. This can be a full or partial URL. For example, the following are all valid URLs to a address: - https://www.googleapis.com/compute/v1/projects/project/regions/region /addresses/address - projects/project/regions/region/addresses/address Note that destination project must be different from the source project. So /regions/region/addresses/address is not valid partial url. */
		destinationAddress?: string | null;
	}
	export interface RegionAddressesMoveRequestFormProperties {

		/** An optional destination address description if intended to be different from the source. */
		description: FormControl<string | null | undefined>,

		/** The URL of the destination address to move to. This can be a full or partial URL. For example, the following are all valid URLs to a address: - https://www.googleapis.com/compute/v1/projects/project/regions/region /addresses/address - projects/project/regions/region/addresses/address Note that destination project must be different from the source project. So /regions/region/addresses/address is not valid partial url. */
		destinationAddress: FormControl<string | null | undefined>,
	}
	export function CreateRegionAddressesMoveRequestFormGroup() {
		return new FormGroup<RegionAddressesMoveRequestFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			destinationAddress: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of autoscalers. */
	export interface RegionAutoscalerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Autoscaler resources. */
		items?: Array<Autoscaler>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionAutoscalerListWarning;
	}

	/** Contains a list of autoscalers. */
	export interface RegionAutoscalerListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRegionAutoscalerListFormGroup() {
		return new FormGroup<RegionAutoscalerListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionAutoscalerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionAutoscalerListWarningData?: Array<RegionAutoscalerListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionAutoscalerListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionAutoscalerListWarningFormGroup() {
		return new FormGroup<RegionAutoscalerListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionAutoscalerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionAutoscalerListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionAutoscalerListWarningDataFormGroup() {
		return new FormGroup<RegionAutoscalerListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionDiskTypeList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of DiskType resources. */
		items?: Array<DiskType>;

		/** [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionDiskTypeListWarning;
	}
	export interface RegionDiskTypeListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRegionDiskTypeListFormGroup() {
		return new FormGroup<RegionDiskTypeListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionDiskTypeListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionDiskTypeListWarningData?: Array<RegionDiskTypeListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionDiskTypeListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionDiskTypeListWarningFormGroup() {
		return new FormGroup<RegionDiskTypeListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionDiskTypeListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionDiskTypeListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionDiskTypeListWarningDataFormGroup() {
		return new FormGroup<RegionDiskTypeListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionDisksAddResourcePoliciesRequest {

		/** Resource policies to be added to this disk. */
		resourcePolicies?: Array<string>;
	}
	export interface RegionDisksAddResourcePoliciesRequestFormProperties {
	}
	export function CreateRegionDisksAddResourcePoliciesRequestFormGroup() {
		return new FormGroup<RegionDisksAddResourcePoliciesRequestFormProperties>({
		});

	}

	export interface RegionDisksRemoveResourcePoliciesRequest {

		/** Resource policies to be removed from this disk. */
		resourcePolicies?: Array<string>;
	}
	export interface RegionDisksRemoveResourcePoliciesRequestFormProperties {
	}
	export function CreateRegionDisksRemoveResourcePoliciesRequestFormGroup() {
		return new FormGroup<RegionDisksRemoveResourcePoliciesRequestFormProperties>({
		});

	}

	export interface RegionDisksResizeRequest {

		/** The new size of the regional persistent disk, which is specified in GB. */
		sizeGb?: string | null;
	}
	export interface RegionDisksResizeRequestFormProperties {

		/** The new size of the regional persistent disk, which is specified in GB. */
		sizeGb: FormControl<string | null | undefined>,
	}
	export function CreateRegionDisksResizeRequestFormGroup() {
		return new FormGroup<RegionDisksResizeRequestFormProperties>({
			sizeGb: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionDisksStartAsyncReplicationRequest {

		/** The secondary disk to start asynchronous replication to. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk */
		asyncSecondaryDisk?: string | null;
	}
	export interface RegionDisksStartAsyncReplicationRequestFormProperties {

		/** The secondary disk to start asynchronous replication to. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk */
		asyncSecondaryDisk: FormControl<string | null | undefined>,
	}
	export function CreateRegionDisksStartAsyncReplicationRequestFormGroup() {
		return new FormGroup<RegionDisksStartAsyncReplicationRequestFormProperties>({
			asyncSecondaryDisk: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of InstanceGroup resources. */
	export interface RegionInstanceGroupList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroup resources. */
		items?: Array<InstanceGroup>;

		/** The resource type. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupListWarning;
	}

	/** Contains a list of InstanceGroup resources. */
	export interface RegionInstanceGroupListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** The resource type. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupListFormGroup() {
		return new FormGroup<RegionInstanceGroupListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionInstanceGroupListWarningData?: Array<RegionInstanceGroupListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionInstanceGroupListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupListWarningFormGroup() {
		return new FormGroup<RegionInstanceGroupListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionInstanceGroupListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupListWarningDataFormGroup() {
		return new FormGroup<RegionInstanceGroupListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** RegionInstanceGroupManagers.deletePerInstanceConfigs */
	export interface RegionInstanceGroupManagerDeleteInstanceConfigReq {

		/** The list of instance names for which we want to delete per-instance configs on this managed instance group. */
		names?: Array<string>;
	}

	/** RegionInstanceGroupManagers.deletePerInstanceConfigs */
	export interface RegionInstanceGroupManagerDeleteInstanceConfigReqFormProperties {
	}
	export function CreateRegionInstanceGroupManagerDeleteInstanceConfigReqFormGroup() {
		return new FormGroup<RegionInstanceGroupManagerDeleteInstanceConfigReqFormProperties>({
		});

	}


	/** Contains a list of managed instance groups. */
	export interface RegionInstanceGroupManagerList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceGroupManager resources. */
		items?: Array<InstanceGroupManager>;

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupManagerListWarning;
	}

	/** Contains a list of managed instance groups. */
	export interface RegionInstanceGroupManagerListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagerListFormGroup() {
		return new FormGroup<RegionInstanceGroupManagerListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagerListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionInstanceGroupManagerListWarningData?: Array<RegionInstanceGroupManagerListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionInstanceGroupManagerListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagerListWarningFormGroup() {
		return new FormGroup<RegionInstanceGroupManagerListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagerListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionInstanceGroupManagerListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagerListWarningDataFormGroup() {
		return new FormGroup<RegionInstanceGroupManagerListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** RegionInstanceGroupManagers.patchPerInstanceConfigs */
	export interface RegionInstanceGroupManagerPatchInstanceConfigReq {

		/** The list of per-instance configurations to insert or patch on this managed instance group. */
		perInstanceConfigs?: Array<PerInstanceConfig>;
	}

	/** RegionInstanceGroupManagers.patchPerInstanceConfigs */
	export interface RegionInstanceGroupManagerPatchInstanceConfigReqFormProperties {
	}
	export function CreateRegionInstanceGroupManagerPatchInstanceConfigReqFormGroup() {
		return new FormGroup<RegionInstanceGroupManagerPatchInstanceConfigReqFormProperties>({
		});

	}


	/** RegionInstanceGroupManagers.updatePerInstanceConfigs */
	export interface RegionInstanceGroupManagerUpdateInstanceConfigReq {

		/** The list of per-instance configurations to insert or patch on this managed instance group. */
		perInstanceConfigs?: Array<PerInstanceConfig>;
	}

	/** RegionInstanceGroupManagers.updatePerInstanceConfigs */
	export interface RegionInstanceGroupManagerUpdateInstanceConfigReqFormProperties {
	}
	export function CreateRegionInstanceGroupManagerUpdateInstanceConfigReqFormGroup() {
		return new FormGroup<RegionInstanceGroupManagerUpdateInstanceConfigReqFormProperties>({
		});

	}

	export interface RegionInstanceGroupManagersAbandonInstancesRequest {

		/** The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;
	}
	export interface RegionInstanceGroupManagersAbandonInstancesRequestFormProperties {
	}
	export function CreateRegionInstanceGroupManagersAbandonInstancesRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersAbandonInstancesRequestFormProperties>({
		});

	}


	/** RegionInstanceGroupManagers.applyUpdatesToInstances */
	export interface RegionInstanceGroupManagersApplyUpdatesRequest {

		/** Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request. */
		allInstances?: boolean | null;

		/** The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;

		/** The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update. */
		minimalAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;

		/** The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail. */
		mostDisruptiveAllowedAction?: InstanceGroupManagerUpdatePolicyMinimalAction | null;
	}

	/** RegionInstanceGroupManagers.applyUpdatesToInstances */
	export interface RegionInstanceGroupManagersApplyUpdatesRequestFormProperties {

		/** Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request. */
		allInstances: FormControl<boolean | null | undefined>,

		/** The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update. */
		minimalAction: FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>,

		/** The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail. */
		mostDisruptiveAllowedAction: FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersApplyUpdatesRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersApplyUpdatesRequestFormProperties>({
			allInstances: new FormControl<boolean | null | undefined>(undefined),
			minimalAction: new FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>(undefined),
			mostDisruptiveAllowedAction: new FormControl<InstanceGroupManagerUpdatePolicyMinimalAction | null | undefined>(undefined),
		});

	}


	/** RegionInstanceGroupManagers.createInstances */
	export interface RegionInstanceGroupManagersCreateInstancesRequest {

		/** [Required] List of specifications of per-instance configs. */
		instances?: Array<PerInstanceConfig>;
	}

	/** RegionInstanceGroupManagers.createInstances */
	export interface RegionInstanceGroupManagersCreateInstancesRequestFormProperties {
	}
	export function CreateRegionInstanceGroupManagersCreateInstancesRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersCreateInstancesRequestFormProperties>({
		});

	}

	export interface RegionInstanceGroupManagersDeleteInstancesRequest {

		/** The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;

		/** Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group's zone or region. */
		skipInstancesOnValidationError?: boolean | null;
	}
	export interface RegionInstanceGroupManagersDeleteInstancesRequestFormProperties {

		/** Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group's zone or region. */
		skipInstancesOnValidationError: FormControl<boolean | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersDeleteInstancesRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersDeleteInstancesRequestFormProperties>({
			skipInstancesOnValidationError: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersListErrorsResponse {

		/** [Output Only] The list of errors of the managed instance group. */
		items?: Array<InstanceManagedByIgmError>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}
	export interface RegionInstanceGroupManagersListErrorsResponseFormProperties {

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersListErrorsResponseFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersListErrorsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersListInstanceConfigsResp {

		/** [Output Only] The list of PerInstanceConfig. */
		items?: Array<PerInstanceConfig>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupManagersListInstanceConfigsRespWarning;
	}
	export interface RegionInstanceGroupManagersListInstanceConfigsRespFormProperties {

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersListInstanceConfigsRespFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersListInstanceConfigsRespFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersListInstanceConfigsRespWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionInstanceGroupManagersListInstanceConfigsRespWarningData?: Array<RegionInstanceGroupManagersListInstanceConfigsRespWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionInstanceGroupManagersListInstanceConfigsRespWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersListInstanceConfigsRespWarningFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersListInstanceConfigsRespWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersListInstanceConfigsRespWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionInstanceGroupManagersListInstanceConfigsRespWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersListInstanceConfigsRespWarningDataFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersListInstanceConfigsRespWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersListInstancesResponse {

		/** A list of managed instances. */
		managedInstances?: Array<ManagedInstance>;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;
	}
	export interface RegionInstanceGroupManagersListInstancesResponseFormProperties {

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersListInstancesResponseFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersListInstancesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersRecreateRequest {

		/** The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
		instances?: Array<string>;
	}
	export interface RegionInstanceGroupManagersRecreateRequestFormProperties {
	}
	export function CreateRegionInstanceGroupManagersRecreateRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersRecreateRequestFormProperties>({
		});

	}

	export interface RegionInstanceGroupManagersSetTargetPoolsRequest {

		/** Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional. */
		fingerprint?: string | null;

		/** The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group. */
		targetPools?: Array<string>;
	}
	export interface RegionInstanceGroupManagersSetTargetPoolsRequestFormProperties {

		/** Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional. */
		fingerprint: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersSetTargetPoolsRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersSetTargetPoolsRequestFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupManagersSetTemplateRequest {

		/** URL of the InstanceTemplate resource from which all new instances will be created. */
		instanceTemplate?: string | null;
	}
	export interface RegionInstanceGroupManagersSetTemplateRequestFormProperties {

		/** URL of the InstanceTemplate resource from which all new instances will be created. */
		instanceTemplate: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupManagersSetTemplateRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupManagersSetTemplateRequestFormProperties>({
			instanceTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupsListInstances {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of InstanceWithNamedPorts resources. */
		items?: Array<InstanceWithNamedPorts>;

		/** The resource type. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionInstanceGroupsListInstancesWarning;
	}
	export interface RegionInstanceGroupsListInstancesFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** The resource type. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupsListInstancesFormGroup() {
		return new FormGroup<RegionInstanceGroupsListInstancesFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupsListInstancesWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionInstanceGroupsListInstancesWarningData?: Array<RegionInstanceGroupsListInstancesWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionInstanceGroupsListInstancesWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupsListInstancesWarningFormGroup() {
		return new FormGroup<RegionInstanceGroupsListInstancesWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupsListInstancesWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionInstanceGroupsListInstancesWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupsListInstancesWarningDataFormGroup() {
		return new FormGroup<RegionInstanceGroupsListInstancesWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionInstanceGroupsListInstancesRequest {

		/** Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances. */
		instanceState?: InstanceGroupsListInstancesRequestInstanceState | null;

		/** Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances. */
		portName?: string | null;
	}
	export interface RegionInstanceGroupsListInstancesRequestFormProperties {

		/** Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances. */
		instanceState: FormControl<InstanceGroupsListInstancesRequestInstanceState | null | undefined>,

		/** Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances. */
		portName: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupsListInstancesRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupsListInstancesRequestFormProperties>({
			instanceState: new FormControl<InstanceGroupsListInstancesRequestInstanceState | null | undefined>(undefined),
			portName: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
		});

	}

	export interface RegionInstanceGroupsSetNamedPortsRequest {

		/** The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. */
		fingerprint?: string | null;

		/** The list of named ports to set for this instance group. */
		namedPorts?: Array<NamedPort>;
	}
	export interface RegionInstanceGroupsSetNamedPortsRequestFormProperties {

		/** The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. */
		fingerprint: FormControl<string | null | undefined>,
	}
	export function CreateRegionInstanceGroupsSetNamedPortsRequestFormGroup() {
		return new FormGroup<RegionInstanceGroupsSetNamedPortsRequestFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of region resources. */
	export interface RegionList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Region resources. */
		items?: Array<Region>;

		/** [Output Only] Type of resource. Always compute#regionList for lists of regions. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RegionListWarning;
	}

	/** Contains a list of region resources. */
	export interface RegionListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#regionList for lists of regions. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRegionListFormGroup() {
		return new FormGroup<RegionListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RegionListWarningData?: Array<RegionListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RegionListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRegionListWarningFormGroup() {
		return new FormGroup<RegionListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RegionListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRegionListWarningDataFormGroup() {
		return new FormGroup<RegionListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionNetworkEndpointGroupsAttachEndpointsRequest {

		/** The list of network endpoints to be attached. */
		networkEndpoints?: Array<NetworkEndpoint>;
	}
	export interface RegionNetworkEndpointGroupsAttachEndpointsRequestFormProperties {
	}
	export function CreateRegionNetworkEndpointGroupsAttachEndpointsRequestFormGroup() {
		return new FormGroup<RegionNetworkEndpointGroupsAttachEndpointsRequestFormProperties>({
		});

	}

	export interface RegionNetworkEndpointGroupsDetachEndpointsRequest {

		/** The list of network endpoints to be detached. */
		networkEndpoints?: Array<NetworkEndpoint>;
	}
	export interface RegionNetworkEndpointGroupsDetachEndpointsRequestFormProperties {
	}
	export function CreateRegionNetworkEndpointGroupsDetachEndpointsRequestFormGroup() {
		return new FormGroup<RegionNetworkEndpointGroupsDetachEndpointsRequestFormProperties>({
		});

	}

	export interface RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse {

		/** Effective firewalls from firewall policy. */
		firewallPolicys?: Array<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>;

		/** Effective firewalls on the network. */
		firewalls?: Array<Firewall>;
	}
	export interface RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseFormProperties {
	}
	export function CreateRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseFormGroup() {
		return new FormGroup<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseFormProperties>({
		});

	}

	export interface RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {

		/** [Output Only] The display name of the firewall policy. */
		displayName?: string | null;

		/** [Output Only] The name of the firewall policy. */
		name?: string | null;

		/** The rules that apply to the network. */
		rules?: Array<FirewallPolicyRule>;

		/** [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL. */
		type?: InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null;
	}
	export interface RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormProperties {

		/** [Output Only] The display name of the firewall policy. */
		displayName: FormControl<string | null | undefined>,

		/** [Output Only] The name of the firewall policy. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL. */
		type: FormControl<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null | undefined>,
	}
	export function CreateRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormGroup() {
		return new FormGroup<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyType | null | undefined>(undefined),
		});

	}

	export interface RegionSetLabelsRequest {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint?: string | null;

		/** The labels to set for this resource. */
		labels?: {[id: string]: string };
	}
	export interface RegionSetLabelsRequestFormProperties {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** The labels to set for this resource. */
		labels: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateRegionSetLabelsRequestFormGroup() {
		return new FormGroup<RegionSetLabelsRequestFormProperties>({
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface RegionSetPolicyRequest {

		/** Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding>;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
		policy?: Policy;
	}
	export interface RegionSetPolicyRequestFormProperties {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag: FormControl<string | null | undefined>,
	}
	export function CreateRegionSetPolicyRequestFormGroup() {
		return new FormGroup<RegionSetPolicyRequestFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RegionTargetHttpsProxiesSetSslCertificatesRequest {

		/** New set of SslCertificate resources to associate with this TargetHttpsProxy resource. */
		sslCertificates?: Array<string>;
	}
	export interface RegionTargetHttpsProxiesSetSslCertificatesRequestFormProperties {
	}
	export function CreateRegionTargetHttpsProxiesSetSslCertificatesRequestFormGroup() {
		return new FormGroup<RegionTargetHttpsProxiesSetSslCertificatesRequestFormProperties>({
		});

	}

	export interface RegionUrlMapsValidateRequest {

		/** Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](/compute/docs/reference/rest/v1/urlMaps) * [Regional](/compute/docs/reference/rest/v1/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by global external Application Load Balancers, classic Application Load Balancers, and cross-region internal Application Load Balancers. * regionUrlMaps are used by internal Application Load Balancers, regional external Application Load Balancers and regional internal Application Load Balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts. */
		resource?: UrlMap;
	}
	export interface RegionUrlMapsValidateRequestFormProperties {
	}
	export function CreateRegionUrlMapsValidateRequestFormGroup() {
		return new FormGroup<RegionUrlMapsValidateRequestFormProperties>({
		});

	}


	/** Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](/compute/docs/reference/rest/v1/urlMaps) * [Regional](/compute/docs/reference/rest/v1/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by global external Application Load Balancers, classic Application Load Balancers, and cross-region internal Application Load Balancers. * regionUrlMaps are used by internal Application Load Balancers, regional external Application Load Balancers and regional internal Application Load Balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts. */
	export interface UrlMap {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;
		defaultRouteAction?: HttpRouteAction;

		/** The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. defaultService has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true. */
		defaultService?: string | null;

		/** Specifies settings for an HTTP redirect. */
		defaultUrlRedirect?: HttpRedirectAction;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field is ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a UrlMap. */
		fingerprint?: string | null;

		/** The request and response header transformations that take effect before the request is passed along to the selected backendService. */
		headerAction?: HttpHeaderAction;

		/** The list of host rules to use against the URL. */
		hostRules?: Array<HostRule>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#urlMaps for url maps. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The list of named PathMatchers to use against the URL. */
		pathMatchers?: Array<PathMatcher>;

		/** [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The list of expected URL mapping tests. Request to update the UrlMap succeeds only if all test cases pass. You can specify a maximum of 100 tests per UrlMap. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true. */
		tests?: Array<UrlMapTest>;
	}

	/** Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](/compute/docs/reference/rest/v1/urlMaps) * [Regional](/compute/docs/reference/rest/v1/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by global external Application Load Balancers, classic Application Load Balancers, and cross-region internal Application Load Balancers. * regionUrlMaps are used by internal Application Load Balancers, regional external Application Load Balancers and regional internal Application Load Balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts. */
	export interface UrlMapFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. defaultService has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true. */
		defaultService: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field is ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a UrlMap. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#urlMaps for url maps. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapFormGroup() {
		return new FormGroup<UrlMapFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			defaultService: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Message for the expected URL mappings. */
	export interface UrlMapTest {

		/** Description of this test case. */
		description?: string | null;

		/** The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified. */
		expectedOutputUrl?: string | null;

		/**
		 * For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		expectedRedirectResponseCode?: number | null;

		/** HTTP headers for this request. If headers contains a host header, then host must also match the header value. */
		headers?: Array<UrlMapTestHeader>;

		/** Host portion of the URL. If headers contains a host header, then host must also match the header value. */
		host?: string | null;

		/** Path portion of the URL. */
		path?: string | null;

		/** Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set. */
		service?: string | null;
	}

	/** Message for the expected URL mappings. */
	export interface UrlMapTestFormProperties {

		/** Description of this test case. */
		description: FormControl<string | null | undefined>,

		/** The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified. */
		expectedOutputUrl: FormControl<string | null | undefined>,

		/**
		 * For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		expectedRedirectResponseCode: FormControl<number | null | undefined>,

		/** Host portion of the URL. If headers contains a host header, then host must also match the header value. */
		host: FormControl<string | null | undefined>,

		/** Path portion of the URL. */
		path: FormControl<string | null | undefined>,

		/** Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapTestFormGroup() {
		return new FormGroup<UrlMapTestFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			expectedOutputUrl: new FormControl<string | null | undefined>(undefined),
			expectedRedirectResponseCode: new FormControl<number | null | undefined>(undefined),
			host: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** HTTP headers used in UrlMapTests. */
	export interface UrlMapTestHeader {

		/** Header name. */
		name?: string | null;

		/** Header value. */
		value?: string | null;
	}

	/** HTTP headers used in UrlMapTests. */
	export interface UrlMapTestHeaderFormProperties {

		/** Header name. */
		name: FormControl<string | null | undefined>,

		/** Header value. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapTestHeaderFormGroup() {
		return new FormGroup<UrlMapTestHeaderFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of reservations. */
	export interface ReservationAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Allocation resources. */
		items?: {[id: string]: ReservationsScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: ReservationAggregatedListWarning;
	}

	/** Contains a list of reservations. */
	export interface ReservationAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of Allocation resources. */
		items: FormControl<{[id: string]: ReservationsScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateReservationAggregatedListFormGroup() {
		return new FormGroup<ReservationAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: ReservationsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationsScopedList {

		/** A list of reservations contained in this scope. */
		reservations?: Array<Reservation>;

		/** Informational warning which replaces the list of reservations when the list is empty. */
		warning?: ReservationsScopedListWarning;
	}
	export interface ReservationsScopedListFormProperties {
	}
	export function CreateReservationsScopedListFormGroup() {
		return new FormGroup<ReservationsScopedListFormProperties>({
		});

	}

	export interface ReservationsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ReservationsScopedListWarningData?: Array<ReservationsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ReservationsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateReservationsScopedListWarningFormGroup() {
		return new FormGroup<ReservationsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ReservationsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateReservationsScopedListWarningDataFormGroup() {
		return new FormGroup<ReservationsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ReservationAggregatedListWarningData?: Array<ReservationAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ReservationAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateReservationAggregatedListWarningFormGroup() {
		return new FormGroup<ReservationAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ReservationAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateReservationAggregatedListWarningDataFormGroup() {
		return new FormGroup<ReservationAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of Allocation resources. */
		items?: Array<Reservation>;

		/** [Output Only] Type of resource.Always compute#reservationsList for listsof reservations */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ReservationListWarning;
	}
	export interface ReservationListFormProperties {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource.Always compute#reservationsList for listsof reservations */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateReservationListFormGroup() {
		return new FormGroup<ReservationListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ReservationListWarningData?: Array<ReservationListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ReservationListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateReservationListWarningFormGroup() {
		return new FormGroup<ReservationListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ReservationListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateReservationListWarningDataFormGroup() {
		return new FormGroup<ReservationListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReservationsResizeRequest {

		/** Number of allocated resources can be resized with minimum = 1 and maximum = 1000. */
		specificSkuCount?: string | null;
	}
	export interface ReservationsResizeRequestFormProperties {

		/** Number of allocated resources can be resized with minimum = 1 and maximum = 1000. */
		specificSkuCount: FormControl<string | null | undefined>,
	}
	export function CreateReservationsResizeRequestFormGroup() {
		return new FormGroup<ReservationsResizeRequestFormProperties>({
			specificSkuCount: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourceGroupReference {

		/** A URI referencing one of the instance groups or network endpoint groups listed in the backend service. */
		group?: string | null;
	}
	export interface ResourceGroupReferenceFormProperties {

		/** A URI referencing one of the instance groups or network endpoint groups listed in the backend service. */
		group: FormControl<string | null | undefined>,
	}
	export function CreateResourceGroupReferenceFormGroup() {
		return new FormGroup<ResourceGroupReferenceFormProperties>({
			group: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePoliciesScopedList {

		/** A list of resourcePolicies contained in this scope. */
		resourcePolicies?: Array<ResourcePolicy>;

		/** Informational warning which replaces the list of resourcePolicies when the list is empty. */
		warning?: ResourcePoliciesScopedListWarning;
	}
	export interface ResourcePoliciesScopedListFormProperties {
	}
	export function CreateResourcePoliciesScopedListFormGroup() {
		return new FormGroup<ResourcePoliciesScopedListFormProperties>({
		});

	}


	/** Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots. */
	export interface ResourcePolicy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;
		description?: string | null;

		/** Resource policy for disk consistency groups. */
		diskConsistencyGroupPolicy?: ResourcePolicyDiskConsistencyGroupPolicy;

		/** A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality */
		groupPlacementPolicy?: ResourcePolicyGroupPlacementPolicy;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance. */
		instanceSchedulePolicy?: ResourcePolicyInstanceSchedulePolicy;

		/** [Output Only] Type of the resource. Always compute#resource_policies for resource policies. */
		kind?: string | null;

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;
		region?: string | null;

		/** Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification. */
		resourceStatus?: ResourcePolicyResourceStatus;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained. */
		snapshotSchedulePolicy?: ResourcePolicySnapshotSchedulePolicy;

		/** [Output Only] The status of resource policy creation. */
		status?: ResourcePolicyStatus | null;
	}

	/** Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots. */
	export interface ResourcePolicyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#resource_policies for resource policies. */
		kind: FormControl<string | null | undefined>,

		/** The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of resource policy creation. */
		status: FormControl<ResourcePolicyStatus | null | undefined>,
	}
	export function CreateResourcePolicyFormGroup() {
		return new FormGroup<ResourcePolicyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<ResourcePolicyStatus | null | undefined>(undefined),
		});

	}


	/** Resource policy for disk consistency groups. */
	export interface ResourcePolicyDiskConsistencyGroupPolicy {
	}

	/** Resource policy for disk consistency groups. */
	export interface ResourcePolicyDiskConsistencyGroupPolicyFormProperties {
	}
	export function CreateResourcePolicyDiskConsistencyGroupPolicyFormGroup() {
		return new FormGroup<ResourcePolicyDiskConsistencyGroupPolicyFormProperties>({
		});

	}


	/** A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality */
	export interface ResourcePolicyGroupPlacementPolicy {

		/**
		 * The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		availabilityDomainCount?: number | null;

		/** Specifies network collocation */
		collocation?: ResourcePolicyGroupPlacementPolicyCollocation | null;

		/**
		 * Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this exact number of VMs.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		vmCount?: number | null;
	}

	/** A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality */
	export interface ResourcePolicyGroupPlacementPolicyFormProperties {

		/**
		 * The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		availabilityDomainCount: FormControl<number | null | undefined>,

		/** Specifies network collocation */
		collocation: FormControl<ResourcePolicyGroupPlacementPolicyCollocation | null | undefined>,

		/**
		 * Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this exact number of VMs.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		vmCount: FormControl<number | null | undefined>,
	}
	export function CreateResourcePolicyGroupPlacementPolicyFormGroup() {
		return new FormGroup<ResourcePolicyGroupPlacementPolicyFormProperties>({
			availabilityDomainCount: new FormControl<number | null | undefined>(undefined),
			collocation: new FormControl<ResourcePolicyGroupPlacementPolicyCollocation | null | undefined>(undefined),
			vmCount: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum ResourcePolicyGroupPlacementPolicyCollocation { COLLOCATED = 'COLLOCATED', UNSPECIFIED_COLLOCATION = 'UNSPECIFIED_COLLOCATION' }


	/** An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance. */
	export interface ResourcePolicyInstanceSchedulePolicy {

		/** The expiration time of the schedule. The timestamp is an RFC3339 string. */
		expirationTime?: string | null;

		/** The start time of the schedule. The timestamp is an RFC3339 string. */
		startTime?: string | null;

		/** Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: https://wikipedia.org/wiki/Tz_database. */
		timeZone?: string | null;

		/** Schedule for an instance operation. */
		vmStartSchedule?: ResourcePolicyInstanceSchedulePolicySchedule;

		/** Schedule for an instance operation. */
		vmStopSchedule?: ResourcePolicyInstanceSchedulePolicySchedule;
	}

	/** An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance. */
	export interface ResourcePolicyInstanceSchedulePolicyFormProperties {

		/** The expiration time of the schedule. The timestamp is an RFC3339 string. */
		expirationTime: FormControl<string | null | undefined>,

		/** The start time of the schedule. The timestamp is an RFC3339 string. */
		startTime: FormControl<string | null | undefined>,

		/** Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: https://wikipedia.org/wiki/Tz_database. */
		timeZone: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyInstanceSchedulePolicyFormGroup() {
		return new FormGroup<ResourcePolicyInstanceSchedulePolicyFormProperties>({
			expirationTime: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
			timeZone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Schedule for an instance operation. */
	export interface ResourcePolicyInstanceSchedulePolicySchedule {

		/** Specifies the frequency for the operation, using the unix-cron format. */
		schedule?: string | null;
	}

	/** Schedule for an instance operation. */
	export interface ResourcePolicyInstanceSchedulePolicyScheduleFormProperties {

		/** Specifies the frequency for the operation, using the unix-cron format. */
		schedule: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyInstanceSchedulePolicyScheduleFormGroup() {
		return new FormGroup<ResourcePolicyInstanceSchedulePolicyScheduleFormProperties>({
			schedule: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification. */
	export interface ResourcePolicyResourceStatus {
		instanceSchedulePolicy?: ResourcePolicyResourceStatusInstanceSchedulePolicyStatus;
	}

	/** Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification. */
	export interface ResourcePolicyResourceStatusFormProperties {
	}
	export function CreateResourcePolicyResourceStatusFormGroup() {
		return new FormGroup<ResourcePolicyResourceStatusFormProperties>({
		});

	}

	export interface ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {

		/** [Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string. */
		lastRunStartTime?: string | null;

		/** [Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string. */
		nextRunStartTime?: string | null;
	}
	export interface ResourcePolicyResourceStatusInstanceSchedulePolicyStatusFormProperties {

		/** [Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string. */
		lastRunStartTime: FormControl<string | null | undefined>,

		/** [Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string. */
		nextRunStartTime: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyResourceStatusInstanceSchedulePolicyStatusFormGroup() {
		return new FormGroup<ResourcePolicyResourceStatusInstanceSchedulePolicyStatusFormProperties>({
			lastRunStartTime: new FormControl<string | null | undefined>(undefined),
			nextRunStartTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained. */
	export interface ResourcePolicySnapshotSchedulePolicy {

		/** Policy for retention of scheduled snapshots. */
		retentionPolicy?: ResourcePolicySnapshotSchedulePolicyRetentionPolicy;

		/** A schedule for disks where the schedueled operations are performed. */
		schedule?: ResourcePolicySnapshotSchedulePolicySchedule;

		/** Specified snapshot properties for scheduled snapshots created by this policy. */
		snapshotProperties?: ResourcePolicySnapshotSchedulePolicySnapshotProperties;
	}

	/** A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained. */
	export interface ResourcePolicySnapshotSchedulePolicyFormProperties {
	}
	export function CreateResourcePolicySnapshotSchedulePolicyFormGroup() {
		return new FormGroup<ResourcePolicySnapshotSchedulePolicyFormProperties>({
		});

	}


	/** Policy for retention of scheduled snapshots. */
	export interface ResourcePolicySnapshotSchedulePolicyRetentionPolicy {

		/**
		 * Maximum age of the snapshot that is allowed to be kept.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRetentionDays?: number | null;

		/** Specifies the behavior to apply to scheduled snapshots when the source disk is deleted. */
		onSourceDiskDelete?: ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete | null;
	}

	/** Policy for retention of scheduled snapshots. */
	export interface ResourcePolicySnapshotSchedulePolicyRetentionPolicyFormProperties {

		/**
		 * Maximum age of the snapshot that is allowed to be kept.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxRetentionDays: FormControl<number | null | undefined>,

		/** Specifies the behavior to apply to scheduled snapshots when the source disk is deleted. */
		onSourceDiskDelete: FormControl<ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete | null | undefined>,
	}
	export function CreateResourcePolicySnapshotSchedulePolicyRetentionPolicyFormGroup() {
		return new FormGroup<ResourcePolicySnapshotSchedulePolicyRetentionPolicyFormProperties>({
			maxRetentionDays: new FormControl<number | null | undefined>(undefined),
			onSourceDiskDelete: new FormControl<ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete | null | undefined>(undefined),
		});

	}

	export enum ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete { APPLY_RETENTION_POLICY = 'APPLY_RETENTION_POLICY', KEEP_AUTO_SNAPSHOTS = 'KEEP_AUTO_SNAPSHOTS', UNSPECIFIED_ON_SOURCE_DISK_DELETE = 'UNSPECIFIED_ON_SOURCE_DISK_DELETE' }


	/** A schedule for disks where the schedueled operations are performed. */
	export interface ResourcePolicySnapshotSchedulePolicySchedule {

		/** Time window specified for daily operations. */
		dailySchedule?: ResourcePolicyDailyCycle;

		/** Time window specified for hourly operations. */
		hourlySchedule?: ResourcePolicyHourlyCycle;

		/** Time window specified for weekly operations. */
		weeklySchedule?: ResourcePolicyWeeklyCycle;
	}

	/** A schedule for disks where the schedueled operations are performed. */
	export interface ResourcePolicySnapshotSchedulePolicyScheduleFormProperties {
	}
	export function CreateResourcePolicySnapshotSchedulePolicyScheduleFormGroup() {
		return new FormGroup<ResourcePolicySnapshotSchedulePolicyScheduleFormProperties>({
		});

	}


	/** Time window specified for daily operations. */
	export interface ResourcePolicyDailyCycle {

		/**
		 * Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		daysInCycle?: number | null;

		/** [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario. */
		duration?: string | null;

		/** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
		startTime?: string | null;
	}

	/** Time window specified for daily operations. */
	export interface ResourcePolicyDailyCycleFormProperties {

		/**
		 * Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		daysInCycle: FormControl<number | null | undefined>,

		/** [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario. */
		duration: FormControl<string | null | undefined>,

		/** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyDailyCycleFormGroup() {
		return new FormGroup<ResourcePolicyDailyCycleFormProperties>({
			daysInCycle: new FormControl<number | null | undefined>(undefined),
			duration: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Time window specified for hourly operations. */
	export interface ResourcePolicyHourlyCycle {

		/** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
		duration?: string | null;

		/**
		 * Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		hoursInCycle?: number | null;

		/** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
		startTime?: string | null;
	}

	/** Time window specified for hourly operations. */
	export interface ResourcePolicyHourlyCycleFormProperties {

		/** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
		duration: FormControl<string | null | undefined>,

		/**
		 * Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		hoursInCycle: FormControl<number | null | undefined>,

		/** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyHourlyCycleFormGroup() {
		return new FormGroup<ResourcePolicyHourlyCycleFormProperties>({
			duration: new FormControl<string | null | undefined>(undefined),
			hoursInCycle: new FormControl<number | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Time window specified for weekly operations. */
	export interface ResourcePolicyWeeklyCycle {

		/** Up to 7 intervals/windows, one for each day of the week. */
		dayOfWeeks?: Array<ResourcePolicyWeeklyCycleDayOfWeek>;
	}

	/** Time window specified for weekly operations. */
	export interface ResourcePolicyWeeklyCycleFormProperties {
	}
	export function CreateResourcePolicyWeeklyCycleFormGroup() {
		return new FormGroup<ResourcePolicyWeeklyCycleFormProperties>({
		});

	}

	export interface ResourcePolicyWeeklyCycleDayOfWeek {

		/** Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY. */
		day?: ResourcePolicyWeeklyCycleDayOfWeekDay | null;

		/** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
		duration?: string | null;

		/** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
		startTime?: string | null;
	}
	export interface ResourcePolicyWeeklyCycleDayOfWeekFormProperties {

		/** Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY. */
		day: FormControl<ResourcePolicyWeeklyCycleDayOfWeekDay | null | undefined>,

		/** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
		duration: FormControl<string | null | undefined>,

		/** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyWeeklyCycleDayOfWeekFormGroup() {
		return new FormGroup<ResourcePolicyWeeklyCycleDayOfWeekFormProperties>({
			day: new FormControl<ResourcePolicyWeeklyCycleDayOfWeekDay | null | undefined>(undefined),
			duration: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ResourcePolicyWeeklyCycleDayOfWeekDay { FRIDAY = 'FRIDAY', INVALID = 'INVALID', MONDAY = 'MONDAY', SATURDAY = 'SATURDAY', SUNDAY = 'SUNDAY', THURSDAY = 'THURSDAY', TUESDAY = 'TUESDAY', WEDNESDAY = 'WEDNESDAY' }


	/** Specified snapshot properties for scheduled snapshots created by this policy. */
	export interface ResourcePolicySnapshotSchedulePolicySnapshotProperties {

		/** Chain name that the snapshot is created in. */
		chainName?: string | null;

		/** Indication to perform a 'guest aware' snapshot. */
		guestFlush?: boolean | null;

		/** Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional). */
		storageLocations?: Array<string>;
	}

	/** Specified snapshot properties for scheduled snapshots created by this policy. */
	export interface ResourcePolicySnapshotSchedulePolicySnapshotPropertiesFormProperties {

		/** Chain name that the snapshot is created in. */
		chainName: FormControl<string | null | undefined>,

		/** Indication to perform a 'guest aware' snapshot. */
		guestFlush: FormControl<boolean | null | undefined>,

		/** Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateResourcePolicySnapshotSchedulePolicySnapshotPropertiesFormGroup() {
		return new FormGroup<ResourcePolicySnapshotSchedulePolicySnapshotPropertiesFormProperties>({
			chainName: new FormControl<string | null | undefined>(undefined),
			guestFlush: new FormControl<boolean | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export enum ResourcePolicyStatus { CREATING = 'CREATING', DELETING = 'DELETING', EXPIRED = 'EXPIRED', INVALID = 'INVALID', READY = 'READY' }

	export interface ResourcePoliciesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ResourcePoliciesScopedListWarningData?: Array<ResourcePoliciesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ResourcePoliciesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateResourcePoliciesScopedListWarningFormGroup() {
		return new FormGroup<ResourcePoliciesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePoliciesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ResourcePoliciesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateResourcePoliciesScopedListWarningDataFormGroup() {
		return new FormGroup<ResourcePoliciesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of resourcePolicies. */
	export interface ResourcePolicyAggregatedList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ResourcePolicy resources. */
		items?: {[id: string]: ResourcePoliciesScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: ResourcePolicyAggregatedListWarning;
	}

	/** Contains a list of resourcePolicies. */
	export interface ResourcePolicyAggregatedListFormProperties {
		etag: FormControl<string | null | undefined>,

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of ResourcePolicy resources. */
		items: FormControl<{[id: string]: ResourcePoliciesScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyAggregatedListFormGroup() {
		return new FormGroup<ResourcePolicyAggregatedListFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: ResourcePoliciesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePolicyAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ResourcePolicyAggregatedListWarningData?: Array<ResourcePolicyAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ResourcePolicyAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyAggregatedListWarningFormGroup() {
		return new FormGroup<ResourcePolicyAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePolicyAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ResourcePolicyAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyAggregatedListWarningDataFormGroup() {
		return new FormGroup<ResourcePolicyAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePolicyList {
		etag?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] A list of ResourcePolicy resources. */
		items?: Array<ResourcePolicy>;

		/** [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ResourcePolicyListWarning;
	}
	export interface ResourcePolicyListFormProperties {
		etag: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyListFormGroup() {
		return new FormGroup<ResourcePolicyListFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePolicyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ResourcePolicyListWarningData?: Array<ResourcePolicyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ResourcePolicyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyListWarningFormGroup() {
		return new FormGroup<ResourcePolicyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ResourcePolicyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ResourcePolicyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateResourcePolicyListWarningDataFormGroup() {
		return new FormGroup<ResourcePolicyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Route resource. A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview. */
	export interface Route {

		/** [Output Only] AS path. */
		asPaths?: Array<RouteAsPath>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this field when you create the resource. */
		description?: string | null;

		/** The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported. Must specify an IPv4 range (e.g. 192.0.2.0/24) or an IPv6 range in RFC 4291 format (e.g. 2001:db8::/32). IPv6 range will be displayed using RFC 5952 compressed format. */
		destRange?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of this resource. Always compute#routes for Route resources. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name?: string | null;

		/** Fully-qualified URL of the network that this route applies to. */
		network?: string | null;

		/** The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL: projects/ project/global/gateways/default-internet-gateway */
		nextHopGateway?: string | null;

		/** [Output Only] The full resource name of the Network Connectivity Center hub that will handle matching packets. */
		nextHopHub?: string | null;

		/** The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all valid URLs: - 10.128.0.56 - https://www.googleapis.com/compute/v1/projects/project/regions/region /forwardingRules/forwardingRule - regions/region/forwardingRules/forwardingRule */
		nextHopIlb?: string | null;

		/** The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/ */
		nextHopInstance?: string | null;

		/** The network IP address of an instance that should handle matching packets. Both IPv6 address and IPv4 addresses are supported. Must specify an IPv4 address in dot-decimal notation (e.g. 192.0.2.99) or an IPv6 address in RFC 4291 format (e.g. 2001:db8::2d9:51:0:0 or 2001:db8:0:0:2d9:51:0:0). IPv6 addresses will be displayed using RFC 5952 compressed format (e.g. 2001:db8::2d9:51:0:0). Should never be an IPv4-mapped IPv6 address. */
		nextHopIp?: string | null;

		/** The URL of the local network if it should handle matching packets. */
		nextHopNetwork?: string | null;

		/** [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035. */
		nextHopPeering?: string | null;

		/** The URL to a VpnTunnel that should handle matching packets. */
		nextHopVpnTunnel?: string | null;

		/**
		 * The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive.
		 * Type: uint, 0 to 4,294,967,295
		 */
		priority?: number | null;

		/** [Output only] The status of the route. */
		routeStatus?: RouteRouteStatus | null;

		/** [Output Only] The type of this route, which can be one of the following values: - 'TRANSIT' for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers - 'SUBNET' for a route from a subnet of the VPC - 'BGP' for a route learned from a BGP peer of this router - 'STATIC' for a static route */
		routeType?: RouteRouteType | null;

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink?: string | null;

		/** A list of instance tags to which this route applies. */
		tags?: Array<string>;

		/** [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages. */
		RouteWarnings?: Array<RouteWarnings>;
	}

	/** Represents a Route resource. A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview. */
	export interface RouteFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this field when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported. Must specify an IPv4 range (e.g. 192.0.2.0/24) or an IPv6 range in RFC 4291 format (e.g. 2001:db8::/32). IPv6 range will be displayed using RFC 5952 compressed format. */
		destRange: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of this resource. Always compute#routes for Route resources. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit. */
		name: FormControl<string | null | undefined>,

		/** Fully-qualified URL of the network that this route applies to. */
		network: FormControl<string | null | undefined>,

		/** The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL: projects/ project/global/gateways/default-internet-gateway */
		nextHopGateway: FormControl<string | null | undefined>,

		/** [Output Only] The full resource name of the Network Connectivity Center hub that will handle matching packets. */
		nextHopHub: FormControl<string | null | undefined>,

		/** The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all valid URLs: - 10.128.0.56 - https://www.googleapis.com/compute/v1/projects/project/regions/region /forwardingRules/forwardingRule - regions/region/forwardingRules/forwardingRule */
		nextHopIlb: FormControl<string | null | undefined>,

		/** The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/ */
		nextHopInstance: FormControl<string | null | undefined>,

		/** The network IP address of an instance that should handle matching packets. Both IPv6 address and IPv4 addresses are supported. Must specify an IPv4 address in dot-decimal notation (e.g. 192.0.2.99) or an IPv6 address in RFC 4291 format (e.g. 2001:db8::2d9:51:0:0 or 2001:db8:0:0:2d9:51:0:0). IPv6 addresses will be displayed using RFC 5952 compressed format (e.g. 2001:db8::2d9:51:0:0). Should never be an IPv4-mapped IPv6 address. */
		nextHopIp: FormControl<string | null | undefined>,

		/** The URL of the local network if it should handle matching packets. */
		nextHopNetwork: FormControl<string | null | undefined>,

		/** [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035. */
		nextHopPeering: FormControl<string | null | undefined>,

		/** The URL to a VpnTunnel that should handle matching packets. */
		nextHopVpnTunnel: FormControl<string | null | undefined>,

		/**
		 * The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive.
		 * Type: uint, 0 to 4,294,967,295
		 */
		priority: FormControl<number | null | undefined>,

		/** [Output only] The status of the route. */
		routeStatus: FormControl<RouteRouteStatus | null | undefined>,

		/** [Output Only] The type of this route, which can be one of the following values: - 'TRANSIT' for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers - 'SUBNET' for a route from a subnet of the VPC - 'BGP' for a route learned from a BGP peer of this router - 'STATIC' for a static route */
		routeType: FormControl<RouteRouteType | null | undefined>,

		/** [Output Only] Server-defined fully-qualified URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRouteFormGroup() {
		return new FormGroup<RouteFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			destRange: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			nextHopGateway: new FormControl<string | null | undefined>(undefined),
			nextHopHub: new FormControl<string | null | undefined>(undefined),
			nextHopIlb: new FormControl<string | null | undefined>(undefined),
			nextHopInstance: new FormControl<string | null | undefined>(undefined),
			nextHopIp: new FormControl<string | null | undefined>(undefined),
			nextHopNetwork: new FormControl<string | null | undefined>(undefined),
			nextHopPeering: new FormControl<string | null | undefined>(undefined),
			nextHopVpnTunnel: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			routeStatus: new FormControl<RouteRouteStatus | null | undefined>(undefined),
			routeType: new FormControl<RouteRouteType | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouteAsPath {

		/** [Output Only] The AS numbers of the AS Path. */
		asLists?: Array<number>;

		/** [Output Only] The type of the AS Path, which can be one of the following values: - 'AS_SET': unordered set of autonomous systems that the route in has traversed - 'AS_SEQUENCE': ordered set of autonomous systems that the route has traversed - 'AS_CONFED_SEQUENCE': ordered set of Member Autonomous Systems in the local confederation that the route has traversed - 'AS_CONFED_SET': unordered set of Member Autonomous Systems in the local confederation that the route has traversed */
		pathSegmentType?: RouteAsPathPathSegmentType | null;
	}
	export interface RouteAsPathFormProperties {

		/** [Output Only] The type of the AS Path, which can be one of the following values: - 'AS_SET': unordered set of autonomous systems that the route in has traversed - 'AS_SEQUENCE': ordered set of autonomous systems that the route has traversed - 'AS_CONFED_SEQUENCE': ordered set of Member Autonomous Systems in the local confederation that the route has traversed - 'AS_CONFED_SET': unordered set of Member Autonomous Systems in the local confederation that the route has traversed */
		pathSegmentType: FormControl<RouteAsPathPathSegmentType | null | undefined>,
	}
	export function CreateRouteAsPathFormGroup() {
		return new FormGroup<RouteAsPathFormProperties>({
			pathSegmentType: new FormControl<RouteAsPathPathSegmentType | null | undefined>(undefined),
		});

	}

	export enum RouteAsPathPathSegmentType { AS_CONFED_SEQUENCE = 'AS_CONFED_SEQUENCE', AS_CONFED_SET = 'AS_CONFED_SET', AS_SEQUENCE = 'AS_SEQUENCE', AS_SET = 'AS_SET' }

	export enum RouteRouteStatus { ACTIVE = 'ACTIVE', DROPPED = 'DROPPED', INACTIVE = 'INACTIVE', PENDING = 'PENDING' }

	export enum RouteRouteType { BGP = 'BGP', STATIC = 'STATIC', SUBNET = 'SUBNET', TRANSIT = 'TRANSIT' }

	export interface RouteWarnings {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RouteWarningsData?: Array<RouteWarningsData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RouteWarningsFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRouteWarningsFormGroup() {
		return new FormGroup<RouteWarningsFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouteWarningsData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RouteWarningsDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRouteWarningsDataFormGroup() {
		return new FormGroup<RouteWarningsDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of Route resources. */
	export interface RouteList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Route resources. */
		items?: Array<Route>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RouteListWarning;
	}

	/** Contains a list of Route resources. */
	export interface RouteListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRouteListFormGroup() {
		return new FormGroup<RouteListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouteListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RouteListWarningData?: Array<RouteListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RouteListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRouteListWarningFormGroup() {
		return new FormGroup<RouteListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouteListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RouteListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRouteListWarningDataFormGroup() {
		return new FormGroup<RouteListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Cloud Router resource. For more information about Cloud Router, read the Cloud Router overview. */
	export interface Router {
		bgp?: RouterBgp;

		/** BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273. */
		bgpPeers?: Array<RouterBgpPeer>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Indicates if a router is dedicated for use with encrypted VLAN attachments (interconnectAttachments). */
		encryptedInterconnectRouter?: boolean | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** Router interfaces. To create a BGP peer that uses a router interface, the interface must have one of the following fields specified: - linkedVpnTunnel - linkedInterconnectAttachment - subnetwork You can create a router interface without any of these fields specified. However, you cannot create a BGP peer that uses that interface. */
		interfaces?: Array<RouterInterface>;

		/** [Output Only] Type of resource. Always compute#router for routers. */
		kind?: string | null;

		/** Keys used for MD5 authentication. */
		md5AuthenticationKeys?: Array<RouterMd5AuthenticationKey>;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** A list of NAT services created in this router. */
		nats?: Array<RouterNat>;

		/** URI of the network to which this router belongs. */
		network?: string | null;

		/** [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
	}

	/** Represents a Cloud Router resource. For more information about Cloud Router, read the Cloud Router overview. */
	export interface RouterFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Indicates if a router is dedicated for use with encrypted VLAN attachments (interconnectAttachments). */
		encryptedInterconnectRouter: FormControl<boolean | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#router for routers. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** URI of the network to which this router belongs. */
		network: FormControl<string | null | undefined>,

		/** [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRouterFormGroup() {
		return new FormGroup<RouterFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			encryptedInterconnectRouter: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterBgp {

		/** User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM. */
		advertiseMode?: RouterBgpAdvertiseMode | null;

		/** User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups. */
		advertisedGroups?: Array<string>;

		/** User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges. */
		advertisedIpRanges?: Array<RouterAdvertisedIpRange>;

		/**
		 * Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
		 * Type: uint, 0 to 4,294,967,295
		 */
		asn?: number | null;

		/**
		 * The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
		 * Type: uint, 0 to 4,294,967,295
		 */
		keepaliveInterval?: number | null;
	}
	export interface RouterBgpFormProperties {

		/** User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM. */
		advertiseMode: FormControl<RouterBgpAdvertiseMode | null | undefined>,

		/**
		 * Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
		 * Type: uint, 0 to 4,294,967,295
		 */
		asn: FormControl<number | null | undefined>,

		/**
		 * The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
		 * Type: uint, 0 to 4,294,967,295
		 */
		keepaliveInterval: FormControl<number | null | undefined>,
	}
	export function CreateRouterBgpFormGroup() {
		return new FormGroup<RouterBgpFormProperties>({
			advertiseMode: new FormControl<RouterBgpAdvertiseMode | null | undefined>(undefined),
			asn: new FormControl<number | null | undefined>(undefined),
			keepaliveInterval: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum RouterBgpAdvertiseMode { CUSTOM = 'CUSTOM', DEFAULT = 'DEFAULT' }


	/** Description-tagged IP ranges for the router to advertise. */
	export interface RouterAdvertisedIpRange {

		/** User-specified description for the IP range. */
		description?: string | null;

		/** The IP range to advertise. The value must be a CIDR-formatted string. */
		range?: string | null;
	}

	/** Description-tagged IP ranges for the router to advertise. */
	export interface RouterAdvertisedIpRangeFormProperties {

		/** User-specified description for the IP range. */
		description: FormControl<string | null | undefined>,

		/** The IP range to advertise. The value must be a CIDR-formatted string. */
		range: FormControl<string | null | undefined>,
	}
	export function CreateRouterAdvertisedIpRangeFormGroup() {
		return new FormGroup<RouterAdvertisedIpRangeFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			range: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterBgpPeer {

		/** User-specified flag to indicate which mode to use for advertisement. */
		advertiseMode?: RouterBgpAdvertiseMode | null;

		/** User-specified list of prefix groups to advertise in custom mode, which currently supports the following option: - ALL_SUBNETS: Advertises all of the router's own VPC subnets. This excludes any routes learned for subnets that use VPC Network Peering. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups. */
		advertisedGroups?: Array<string>;

		/** User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges. */
		advertisedIpRanges?: Array<RouterAdvertisedIpRange>;

		/**
		 * The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
		 * Type: uint, 0 to 4,294,967,295
		 */
		advertisedRoutePriority?: number | null;
		bfd?: RouterBgpPeerBfd;

		/** A list of user-defined custom learned route IP address ranges for a BGP session. */
		customLearnedIpRanges?: Array<RouterBgpPeerCustomLearnedIpRange>;

		/**
		 * The user-defined custom learned route priority for a BGP session. This value is applied to all custom learned route ranges for the session. You can choose a value from `0` to `65335`. If you don't provide a value, Google Cloud assigns a priority of `100` to the ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		customLearnedRoutePriority?: number | null;

		/** The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE. */
		enable?: PacketMirroringEnable | null;

		/** Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default. */
		enableIpv6?: boolean | null;

		/** Name of the interface the BGP peer is associated with. */
		interfaceName?: string | null;

		/** IP address of the interface inside Google Cloud Platform. Only IPv4 is supported. */
		ipAddress?: string | null;

		/** IPv6 address of the interface inside Google Cloud Platform. */
		ipv6NexthopAddress?: string | null;

		/** [Output Only] The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted. */
		managementType?: RouterBgpPeerManagementType | null;

		/** Present if MD5 authentication is enabled for the peering. Must be the name of one of the entries in the Router.md5_authentication_keys. The field must comply with RFC1035. */
		md5AuthenticationKeyName?: string | null;

		/** Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/**
		 * Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
		 * Type: uint, 0 to 4,294,967,295
		 */
		peerAsn?: number | null;

		/** IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported. */
		peerIpAddress?: string | null;

		/** IPv6 address of the BGP interface outside Google Cloud Platform. */
		peerIpv6NexthopAddress?: string | null;

		/** URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session. */
		routerApplianceInstance?: string | null;
	}
	export interface RouterBgpPeerFormProperties {

		/** User-specified flag to indicate which mode to use for advertisement. */
		advertiseMode: FormControl<RouterBgpAdvertiseMode | null | undefined>,

		/**
		 * The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
		 * Type: uint, 0 to 4,294,967,295
		 */
		advertisedRoutePriority: FormControl<number | null | undefined>,

		/**
		 * The user-defined custom learned route priority for a BGP session. This value is applied to all custom learned route ranges for the session. You can choose a value from `0` to `65335`. If you don't provide a value, Google Cloud assigns a priority of `100` to the ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		customLearnedRoutePriority: FormControl<number | null | undefined>,

		/** The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE. */
		enable: FormControl<PacketMirroringEnable | null | undefined>,

		/** Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default. */
		enableIpv6: FormControl<boolean | null | undefined>,

		/** Name of the interface the BGP peer is associated with. */
		interfaceName: FormControl<string | null | undefined>,

		/** IP address of the interface inside Google Cloud Platform. Only IPv4 is supported. */
		ipAddress: FormControl<string | null | undefined>,

		/** IPv6 address of the interface inside Google Cloud Platform. */
		ipv6NexthopAddress: FormControl<string | null | undefined>,

		/** [Output Only] The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted. */
		managementType: FormControl<RouterBgpPeerManagementType | null | undefined>,

		/** Present if MD5 authentication is enabled for the peering. Must be the name of one of the entries in the Router.md5_authentication_keys. The field must comply with RFC1035. */
		md5AuthenticationKeyName: FormControl<string | null | undefined>,

		/** Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/**
		 * Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
		 * Type: uint, 0 to 4,294,967,295
		 */
		peerAsn: FormControl<number | null | undefined>,

		/** IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported. */
		peerIpAddress: FormControl<string | null | undefined>,

		/** IPv6 address of the BGP interface outside Google Cloud Platform. */
		peerIpv6NexthopAddress: FormControl<string | null | undefined>,

		/** URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session. */
		routerApplianceInstance: FormControl<string | null | undefined>,
	}
	export function CreateRouterBgpPeerFormGroup() {
		return new FormGroup<RouterBgpPeerFormProperties>({
			advertiseMode: new FormControl<RouterBgpAdvertiseMode | null | undefined>(undefined),
			advertisedRoutePriority: new FormControl<number | null | undefined>(undefined),
			customLearnedRoutePriority: new FormControl<number | null | undefined>(undefined),
			enable: new FormControl<PacketMirroringEnable | null | undefined>(undefined),
			enableIpv6: new FormControl<boolean | null | undefined>(undefined),
			interfaceName: new FormControl<string | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
			ipv6NexthopAddress: new FormControl<string | null | undefined>(undefined),
			managementType: new FormControl<RouterBgpPeerManagementType | null | undefined>(undefined),
			md5AuthenticationKeyName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			peerAsn: new FormControl<number | null | undefined>(undefined),
			peerIpAddress: new FormControl<string | null | undefined>(undefined),
			peerIpv6NexthopAddress: new FormControl<string | null | undefined>(undefined),
			routerApplianceInstance: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterBgpPeerBfd {

		/**
		 * The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
		 * Type: uint, 0 to 4,294,967,295
		 */
		minReceiveInterval?: number | null;

		/**
		 * The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
		 * Type: uint, 0 to 4,294,967,295
		 */
		minTransmitInterval?: number | null;

		/**
		 * The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5.
		 * Type: uint, 0 to 4,294,967,295
		 */
		multiplier?: number | null;

		/** The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED. */
		sessionInitializationMode?: BfdStatusBfdSessionInitializationMode | null;
	}
	export interface RouterBgpPeerBfdFormProperties {

		/**
		 * The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
		 * Type: uint, 0 to 4,294,967,295
		 */
		minReceiveInterval: FormControl<number | null | undefined>,

		/**
		 * The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
		 * Type: uint, 0 to 4,294,967,295
		 */
		minTransmitInterval: FormControl<number | null | undefined>,

		/**
		 * The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5.
		 * Type: uint, 0 to 4,294,967,295
		 */
		multiplier: FormControl<number | null | undefined>,

		/** The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED. */
		sessionInitializationMode: FormControl<BfdStatusBfdSessionInitializationMode | null | undefined>,
	}
	export function CreateRouterBgpPeerBfdFormGroup() {
		return new FormGroup<RouterBgpPeerBfdFormProperties>({
			minReceiveInterval: new FormControl<number | null | undefined>(undefined),
			minTransmitInterval: new FormControl<number | null | undefined>(undefined),
			multiplier: new FormControl<number | null | undefined>(undefined),
			sessionInitializationMode: new FormControl<BfdStatusBfdSessionInitializationMode | null | undefined>(undefined),
		});

	}

	export interface RouterBgpPeerCustomLearnedIpRange {

		/** The custom learned route IP address range. Must be a valid CIDR-formatted prefix. If an IP address is provided without a subnet mask, it is interpreted as, for IPv4, a `/32` singular IP address range, and, for IPv6, `/128`. */
		range?: string | null;
	}
	export interface RouterBgpPeerCustomLearnedIpRangeFormProperties {

		/** The custom learned route IP address range. Must be a valid CIDR-formatted prefix. If an IP address is provided without a subnet mask, it is interpreted as, for IPv4, a `/32` singular IP address range, and, for IPv6, `/128`. */
		range: FormControl<string | null | undefined>,
	}
	export function CreateRouterBgpPeerCustomLearnedIpRangeFormGroup() {
		return new FormGroup<RouterBgpPeerCustomLearnedIpRangeFormProperties>({
			range: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RouterBgpPeerManagementType { MANAGED_BY_ATTACHMENT = 'MANAGED_BY_ATTACHMENT', MANAGED_BY_USER = 'MANAGED_BY_USER' }

	export interface RouterInterface {

		/** IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface. */
		ipRange?: string | null;

		/** URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a subnetwork. */
		linkedInterconnectAttachment?: string | null;

		/** URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a subnetwork. */
		linkedVpnTunnel?: string | null;

		/** [Output Only] The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted. */
		managementType?: RouterBgpPeerManagementType | null;

		/** Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM. */
		privateIpAddress?: string | null;

		/** Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		redundantInterface?: string | null;

		/** The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. */
		subnetwork?: string | null;
	}
	export interface RouterInterfaceFormProperties {

		/** IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface. */
		ipRange: FormControl<string | null | undefined>,

		/** URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a subnetwork. */
		linkedInterconnectAttachment: FormControl<string | null | undefined>,

		/** URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a subnetwork. */
		linkedVpnTunnel: FormControl<string | null | undefined>,

		/** [Output Only] The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted. */
		managementType: FormControl<RouterBgpPeerManagementType | null | undefined>,

		/** Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM. */
		privateIpAddress: FormControl<string | null | undefined>,

		/** Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		redundantInterface: FormControl<string | null | undefined>,

		/** The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. */
		subnetwork: FormControl<string | null | undefined>,
	}
	export function CreateRouterInterfaceFormGroup() {
		return new FormGroup<RouterInterfaceFormProperties>({
			ipRange: new FormControl<string | null | undefined>(undefined),
			linkedInterconnectAttachment: new FormControl<string | null | undefined>(undefined),
			linkedVpnTunnel: new FormControl<string | null | undefined>(undefined),
			managementType: new FormControl<RouterBgpPeerManagementType | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			privateIpAddress: new FormControl<string | null | undefined>(undefined),
			redundantInterface: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			subnetwork: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterMd5AuthenticationKey {

		/** [Input only] Value of the key. For patch and update calls, it can be skipped to copy the value from the previous configuration. This is allowed if the key with the same name existed before the operation. Maximum length is 80 characters. Can only contain printable ASCII characters. */
		key?: string | null;

		/** Name used to identify the key. Must be unique within a router. Must be referenced by exactly one bgpPeer. Must comply with RFC1035. */
		name?: string | null;
	}
	export interface RouterMd5AuthenticationKeyFormProperties {

		/** [Input only] Value of the key. For patch and update calls, it can be skipped to copy the value from the previous configuration. This is allowed if the key with the same name existed before the operation. Maximum length is 80 characters. Can only contain printable ASCII characters. */
		key: FormControl<string | null | undefined>,

		/** Name used to identify the key. Must be unique within a router. Must be referenced by exactly one bgpPeer. Must comply with RFC1035. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateRouterMd5AuthenticationKeyFormGroup() {
		return new FormGroup<RouterMd5AuthenticationKeyFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided. */
	export interface RouterNat {

		/** The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not specified, then the current project-level default tier is used. */
		autoNetworkTier?: AccessConfigNetworkTier | null;

		/** A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only. */
		drainNatIps?: Array<string>;

		/** Enable Dynamic Port Allocation. If not specified, it is disabled by default. If set to true, - Dynamic Port Allocation will be enabled on this NAT config. - enableEndpointIndependentMapping cannot be set to true. - If minPorts is set, minPortsPerVm must be set to a power of two greater than or equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. */
		enableDynamicPortAllocation?: boolean | null;
		enableEndpointIndependentMapping?: boolean | null;

		/** List of NAT-ted endpoint types supported by the Nat Gateway. If the list is empty, then it will be equivalent to include ENDPOINT_TYPE_VM */
		endpointTypes?: Array<string>;

		/**
		 * Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		icmpIdleTimeoutSec?: number | null;

		/** Configuration of logging on a NAT. */
		logConfig?: RouterNatLogConfig;

		/**
		 * Maximum number of ports allocated to a VM from this NAT config when Dynamic Port Allocation is enabled. If Dynamic Port Allocation is not enabled, this field has no effect. If Dynamic Port Allocation is enabled, and this field is set, it must be set to a power of two greater than minPortsPerVm, or 64 if minPortsPerVm is not set. If Dynamic Port Allocation is enabled and this field is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxPortsPerVm?: number | null;

		/**
		 * Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minPortsPerVm?: number | null;

		/** Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035. */
		name?: string | null;

		/** Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty. */
		natIpAllocateOption?: RouterNatNatIpAllocateOption | null;

		/** A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project. */
		natIps?: Array<string>;

		/** A list of rules associated with this NAT. */
		rules?: Array<RouterNatRule>;

		/** Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES then there should not be any other Router.Nat section in any Router for this network in this region. */
		sourceSubnetworkIpRangesToNat?: RouterNatSourceSubnetworkIpRangesToNat | null;

		/** A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above. */
		subnetworks?: Array<RouterNatSubnetworkToNat>;

		/**
		 * Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		tcpEstablishedIdleTimeoutSec?: number | null;

		/**
		 * Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		tcpTimeWaitTimeoutSec?: number | null;

		/**
		 * Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		tcpTransitoryIdleTimeoutSec?: number | null;

		/** Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. */
		type?: RouterNatType | null;

		/**
		 * Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		udpIdleTimeoutSec?: number | null;
	}

	/** Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided. */
	export interface RouterNatFormProperties {

		/** The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not specified, then the current project-level default tier is used. */
		autoNetworkTier: FormControl<AccessConfigNetworkTier | null | undefined>,

		/** Enable Dynamic Port Allocation. If not specified, it is disabled by default. If set to true, - Dynamic Port Allocation will be enabled on this NAT config. - enableEndpointIndependentMapping cannot be set to true. - If minPorts is set, minPortsPerVm must be set to a power of two greater than or equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. */
		enableDynamicPortAllocation: FormControl<boolean | null | undefined>,
		enableEndpointIndependentMapping: FormControl<boolean | null | undefined>,

		/**
		 * Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		icmpIdleTimeoutSec: FormControl<number | null | undefined>,

		/**
		 * Maximum number of ports allocated to a VM from this NAT config when Dynamic Port Allocation is enabled. If Dynamic Port Allocation is not enabled, this field has no effect. If Dynamic Port Allocation is enabled, and this field is set, it must be set to a power of two greater than minPortsPerVm, or 64 if minPortsPerVm is not set. If Dynamic Port Allocation is enabled and this field is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		maxPortsPerVm: FormControl<number | null | undefined>,

		/**
		 * Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minPortsPerVm: FormControl<number | null | undefined>,

		/** Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035. */
		name: FormControl<string | null | undefined>,

		/** Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty. */
		natIpAllocateOption: FormControl<RouterNatNatIpAllocateOption | null | undefined>,

		/** Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES then there should not be any other Router.Nat section in any Router for this network in this region. */
		sourceSubnetworkIpRangesToNat: FormControl<RouterNatSourceSubnetworkIpRangesToNat | null | undefined>,

		/**
		 * Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		tcpEstablishedIdleTimeoutSec: FormControl<number | null | undefined>,

		/**
		 * Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		tcpTimeWaitTimeoutSec: FormControl<number | null | undefined>,

		/**
		 * Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		tcpTransitoryIdleTimeoutSec: FormControl<number | null | undefined>,

		/** Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. */
		type: FormControl<RouterNatType | null | undefined>,

		/**
		 * Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		udpIdleTimeoutSec: FormControl<number | null | undefined>,
	}
	export function CreateRouterNatFormGroup() {
		return new FormGroup<RouterNatFormProperties>({
			autoNetworkTier: new FormControl<AccessConfigNetworkTier | null | undefined>(undefined),
			enableDynamicPortAllocation: new FormControl<boolean | null | undefined>(undefined),
			enableEndpointIndependentMapping: new FormControl<boolean | null | undefined>(undefined),
			icmpIdleTimeoutSec: new FormControl<number | null | undefined>(undefined),
			maxPortsPerVm: new FormControl<number | null | undefined>(undefined),
			minPortsPerVm: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			natIpAllocateOption: new FormControl<RouterNatNatIpAllocateOption | null | undefined>(undefined),
			sourceSubnetworkIpRangesToNat: new FormControl<RouterNatSourceSubnetworkIpRangesToNat | null | undefined>(undefined),
			tcpEstablishedIdleTimeoutSec: new FormControl<number | null | undefined>(undefined),
			tcpTimeWaitTimeoutSec: new FormControl<number | null | undefined>(undefined),
			tcpTransitoryIdleTimeoutSec: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<RouterNatType | null | undefined>(undefined),
			udpIdleTimeoutSec: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Configuration of logging on a NAT. */
	export interface RouterNatLogConfig {

		/** Indicates whether or not to export logs. This is false by default. */
		enable?: boolean | null;

		/** Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful. */
		filter?: RouterNatLogConfigFilter | null;
	}

	/** Configuration of logging on a NAT. */
	export interface RouterNatLogConfigFormProperties {

		/** Indicates whether or not to export logs. This is false by default. */
		enable: FormControl<boolean | null | undefined>,

		/** Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful. */
		filter: FormControl<RouterNatLogConfigFilter | null | undefined>,
	}
	export function CreateRouterNatLogConfigFormGroup() {
		return new FormGroup<RouterNatLogConfigFormProperties>({
			enable: new FormControl<boolean | null | undefined>(undefined),
			filter: new FormControl<RouterNatLogConfigFilter | null | undefined>(undefined),
		});

	}

	export enum RouterNatLogConfigFilter { ALL = 'ALL', ERRORS_ONLY = 'ERRORS_ONLY', TRANSLATIONS_ONLY = 'TRANSLATIONS_ONLY' }

	export enum RouterNatNatIpAllocateOption { AUTO_ONLY = 'AUTO_ONLY', MANUAL_ONLY = 'MANUAL_ONLY' }

	export interface RouterNatRule {
		action?: RouterNatRuleAction;

		/** An optional description of this rule. */
		description?: string | null;

		/** CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')" "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'" The following example is a valid match expression for private NAT: "nexthop.hub == '//networkconnectivity.googleapis.com/projects/my-project/locations/global/hubs/hub-1'" */
		match?: string | null;

		/**
		 * An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
		 * Type: uint, 0 to 4,294,967,295
		 */
		ruleNumber?: number | null;
	}
	export interface RouterNatRuleFormProperties {

		/** An optional description of this rule. */
		description: FormControl<string | null | undefined>,

		/** CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')" "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'" The following example is a valid match expression for private NAT: "nexthop.hub == '//networkconnectivity.googleapis.com/projects/my-project/locations/global/hubs/hub-1'" */
		match: FormControl<string | null | undefined>,

		/**
		 * An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
		 * Type: uint, 0 to 4,294,967,295
		 */
		ruleNumber: FormControl<number | null | undefined>,
	}
	export function CreateRouterNatRuleFormGroup() {
		return new FormGroup<RouterNatRuleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			match: new FormControl<string | null | undefined>(undefined),
			ruleNumber: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RouterNatRuleAction {

		/** A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT. */
		sourceNatActiveIps?: Array<string>;

		/** A list of URLs of the subnetworks used as source ranges for this NAT Rule. These subnetworks must have purpose set to PRIVATE_NAT. This field is used for private NAT. */
		sourceNatActiveRanges?: Array<string>;

		/** A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT. */
		sourceNatDrainIps?: Array<string>;

		/** A list of URLs of subnetworks representing source ranges to be drained. This is only supported on patch/update, and these subnetworks must have previously been used as active ranges in this NAT Rule. This field is used for private NAT. */
		sourceNatDrainRanges?: Array<string>;
	}
	export interface RouterNatRuleActionFormProperties {
	}
	export function CreateRouterNatRuleActionFormGroup() {
		return new FormGroup<RouterNatRuleActionFormProperties>({
		});

	}

	export enum RouterNatSourceSubnetworkIpRangesToNat { ALL_SUBNETWORKS_ALL_IP_RANGES = 'ALL_SUBNETWORKS_ALL_IP_RANGES', ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES = 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', LIST_OF_SUBNETWORKS = 'LIST_OF_SUBNETWORKS' }


	/** Defines the IP ranges that want to use NAT for a subnetwork. */
	export interface RouterNatSubnetworkToNat {

		/** URL for the subnetwork resource that will use NAT. */
		name?: string | null;

		/** A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat. */
		secondaryIpRangeNames?: Array<string>;

		/** Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES] */
		sourceIpRangesToNat?: Array<string>;
	}

	/** Defines the IP ranges that want to use NAT for a subnetwork. */
	export interface RouterNatSubnetworkToNatFormProperties {

		/** URL for the subnetwork resource that will use NAT. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateRouterNatSubnetworkToNatFormGroup() {
		return new FormGroup<RouterNatSubnetworkToNatFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RouterNatType { PRIVATE = 'PRIVATE', PUBLIC = 'PUBLIC' }


	/** Contains a list of routers. */
	export interface RouterAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Router resources. */
		items?: {[id: string]: RoutersScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: RouterAggregatedListWarning;
	}

	/** Contains a list of routers. */
	export interface RouterAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of Router resources. */
		items: FormControl<{[id: string]: RoutersScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRouterAggregatedListFormGroup() {
		return new FormGroup<RouterAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: RoutersScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RoutersScopedList {

		/** A list of routers contained in this scope. */
		routers?: Array<Router>;

		/** Informational warning which replaces the list of routers when the list is empty. */
		warning?: RoutersScopedListWarning;
	}
	export interface RoutersScopedListFormProperties {
	}
	export function CreateRoutersScopedListFormGroup() {
		return new FormGroup<RoutersScopedListFormProperties>({
		});

	}

	export interface RoutersScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RoutersScopedListWarningData?: Array<RoutersScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RoutersScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRoutersScopedListWarningFormGroup() {
		return new FormGroup<RoutersScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RoutersScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RoutersScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRoutersScopedListWarningDataFormGroup() {
		return new FormGroup<RoutersScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RouterAggregatedListWarningData?: Array<RouterAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RouterAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRouterAggregatedListWarningFormGroup() {
		return new FormGroup<RouterAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RouterAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRouterAggregatedListWarningDataFormGroup() {
		return new FormGroup<RouterAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of Router resources. */
	export interface RouterList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Router resources. */
		items?: Array<Router>;

		/** [Output Only] Type of resource. Always compute#router for routers. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: RouterListWarning;
	}

	/** Contains a list of Router resources. */
	export interface RouterListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#router for routers. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateRouterListFormGroup() {
		return new FormGroup<RouterListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		RouterListWarningData?: Array<RouterListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface RouterListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateRouterListWarningFormGroup() {
		return new FormGroup<RouterListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface RouterListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateRouterListWarningDataFormGroup() {
		return new FormGroup<RouterListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterStatus {

		/** Best routes for this router's network. */
		bestRoutes?: Array<Route>;

		/** Best routes learned by this router. */
		bestRoutesForRouter?: Array<Route>;
		bgpPeerStatus?: Array<RouterStatusBgpPeerStatus>;
		natStatus?: Array<RouterStatusNatStatus>;

		/** URI of the network to which this router belongs. */
		network?: string | null;
	}
	export interface RouterStatusFormProperties {

		/** URI of the network to which this router belongs. */
		network: FormControl<string | null | undefined>,
	}
	export function CreateRouterStatusFormGroup() {
		return new FormGroup<RouterStatusFormProperties>({
			network: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RouterStatusBgpPeerStatus {

		/** Routes that were advertised to the remote BGP peer */
		advertisedRoutes?: Array<Route>;

		/** Next free: 15 */
		bfdStatus?: BfdStatus;

		/** Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default. */
		enableIpv6?: boolean | null;

		/** IP address of the local BGP interface. */
		ipAddress?: string | null;

		/** IPv6 address of the local BGP interface. */
		ipv6NexthopAddress?: string | null;

		/** URL of the VPN tunnel that this BGP peer controls. */
		linkedVpnTunnel?: string | null;

		/** Informs whether MD5 authentication is enabled on this BGP peer. */
		md5AuthEnabled?: boolean | null;

		/** Name of this BGP peer. Unique within the Routers resource. */
		name?: string | null;

		/**
		 * Number of routes learned from the remote BGP Peer.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numLearnedRoutes?: number | null;

		/** IP address of the remote BGP interface. */
		peerIpAddress?: string | null;

		/** IPv6 address of the remote BGP interface. */
		peerIpv6NexthopAddress?: string | null;

		/** [Output only] URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance is the peer side of the BGP session. */
		routerApplianceInstance?: string | null;

		/** The state of the BGP session. For a list of possible values for this field, see BGP session states. */
		state?: string | null;

		/** Status of the BGP peer: {UP, DOWN} */
		status?: RouterStatusBgpPeerStatusStatus | null;

		/** Indicates why particular status was returned. */
		statusReason?: RouterStatusBgpPeerStatusStatusReason | null;

		/** Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds */
		uptime?: string | null;

		/** Time this session has been up, in seconds. Format: 145 */
		uptimeSeconds?: string | null;
	}
	export interface RouterStatusBgpPeerStatusFormProperties {

		/** Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default. */
		enableIpv6: FormControl<boolean | null | undefined>,

		/** IP address of the local BGP interface. */
		ipAddress: FormControl<string | null | undefined>,

		/** IPv6 address of the local BGP interface. */
		ipv6NexthopAddress: FormControl<string | null | undefined>,

		/** URL of the VPN tunnel that this BGP peer controls. */
		linkedVpnTunnel: FormControl<string | null | undefined>,

		/** Informs whether MD5 authentication is enabled on this BGP peer. */
		md5AuthEnabled: FormControl<boolean | null | undefined>,

		/** Name of this BGP peer. Unique within the Routers resource. */
		name: FormControl<string | null | undefined>,

		/**
		 * Number of routes learned from the remote BGP Peer.
		 * Type: uint, 0 to 4,294,967,295
		 */
		numLearnedRoutes: FormControl<number | null | undefined>,

		/** IP address of the remote BGP interface. */
		peerIpAddress: FormControl<string | null | undefined>,

		/** IPv6 address of the remote BGP interface. */
		peerIpv6NexthopAddress: FormControl<string | null | undefined>,

		/** [Output only] URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance is the peer side of the BGP session. */
		routerApplianceInstance: FormControl<string | null | undefined>,

		/** The state of the BGP session. For a list of possible values for this field, see BGP session states. */
		state: FormControl<string | null | undefined>,

		/** Status of the BGP peer: {UP, DOWN} */
		status: FormControl<RouterStatusBgpPeerStatusStatus | null | undefined>,

		/** Indicates why particular status was returned. */
		statusReason: FormControl<RouterStatusBgpPeerStatusStatusReason | null | undefined>,

		/** Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds */
		uptime: FormControl<string | null | undefined>,

		/** Time this session has been up, in seconds. Format: 145 */
		uptimeSeconds: FormControl<string | null | undefined>,
	}
	export function CreateRouterStatusBgpPeerStatusFormGroup() {
		return new FormGroup<RouterStatusBgpPeerStatusFormProperties>({
			enableIpv6: new FormControl<boolean | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
			ipv6NexthopAddress: new FormControl<string | null | undefined>(undefined),
			linkedVpnTunnel: new FormControl<string | null | undefined>(undefined),
			md5AuthEnabled: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			numLearnedRoutes: new FormControl<number | null | undefined>(undefined),
			peerIpAddress: new FormControl<string | null | undefined>(undefined),
			peerIpv6NexthopAddress: new FormControl<string | null | undefined>(undefined),
			routerApplianceInstance: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<RouterStatusBgpPeerStatusStatus | null | undefined>(undefined),
			statusReason: new FormControl<RouterStatusBgpPeerStatusStatusReason | null | undefined>(undefined),
			uptime: new FormControl<string | null | undefined>(undefined),
			uptimeSeconds: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RouterStatusBgpPeerStatusStatus { DOWN = 'DOWN', UNKNOWN = 'UNKNOWN', UP = 'UP' }

	export enum RouterStatusBgpPeerStatusStatusReason { MD5_AUTH_INTERNAL_PROBLEM = 'MD5_AUTH_INTERNAL_PROBLEM', STATUS_REASON_UNSPECIFIED = 'STATUS_REASON_UNSPECIFIED' }


	/** Status of a NAT contained in this router. */
	export interface RouterStatusNatStatus {

		/** A list of IPs auto-allocated for NAT. Example: ["1.1.1.1", "129.2.16.89"] */
		autoAllocatedNatIps?: Array<string>;

		/** A list of IPs auto-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
		drainAutoAllocatedNatIps?: Array<string>;

		/** A list of IPs user-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
		drainUserAllocatedNatIps?: Array<string>;

		/**
		 * The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is *not* used.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minExtraNatIpsNeeded?: number | null;

		/** Unique name of this NAT. */
		name?: string | null;

		/**
		 * Number of VM endpoints (i.e., Nics) that can use NAT.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numVmEndpointsWithNatMappings?: number | null;

		/** Status of rules in this NAT. */
		ruleStatus?: Array<RouterStatusNatStatusNatRuleStatus>;

		/** A list of fully qualified URLs of reserved IP address resources. */
		userAllocatedNatIpResources?: Array<string>;

		/** A list of IPs user-allocated for NAT. They will be raw IP strings like "179.12.26.133". */
		userAllocatedNatIps?: Array<string>;
	}

	/** Status of a NAT contained in this router. */
	export interface RouterStatusNatStatusFormProperties {

		/**
		 * The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is *not* used.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minExtraNatIpsNeeded: FormControl<number | null | undefined>,

		/** Unique name of this NAT. */
		name: FormControl<string | null | undefined>,

		/**
		 * Number of VM endpoints (i.e., Nics) that can use NAT.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numVmEndpointsWithNatMappings: FormControl<number | null | undefined>,
	}
	export function CreateRouterStatusNatStatusFormGroup() {
		return new FormGroup<RouterStatusNatStatusFormProperties>({
			minExtraNatIpsNeeded: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			numVmEndpointsWithNatMappings: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Status of a NAT Rule contained in this NAT. */
	export interface RouterStatusNatStatusNatRuleStatus {

		/** A list of active IPs for NAT. Example: ["1.1.1.1", "179.12.26.133"]. */
		activeNatIps?: Array<string>;

		/** A list of IPs for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
		drainNatIps?: Array<string>;

		/**
		 * The number of extra IPs to allocate. This will be greater than 0 only if the existing IPs in this NAT Rule are NOT enough to allow all configured VMs to use NAT.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minExtraIpsNeeded?: number | null;

		/**
		 * Number of VM endpoints (i.e., NICs) that have NAT Mappings from this NAT Rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numVmEndpointsWithNatMappings?: number | null;

		/**
		 * Rule number of the rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleNumber?: number | null;
	}

	/** Status of a NAT Rule contained in this NAT. */
	export interface RouterStatusNatStatusNatRuleStatusFormProperties {

		/**
		 * The number of extra IPs to allocate. This will be greater than 0 only if the existing IPs in this NAT Rule are NOT enough to allow all configured VMs to use NAT.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		minExtraIpsNeeded: FormControl<number | null | undefined>,

		/**
		 * Number of VM endpoints (i.e., NICs) that have NAT Mappings from this NAT Rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numVmEndpointsWithNatMappings: FormControl<number | null | undefined>,

		/**
		 * Rule number of the rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleNumber: FormControl<number | null | undefined>,
	}
	export function CreateRouterStatusNatStatusNatRuleStatusFormGroup() {
		return new FormGroup<RouterStatusNatStatusNatRuleStatusFormProperties>({
			minExtraIpsNeeded: new FormControl<number | null | undefined>(undefined),
			numVmEndpointsWithNatMappings: new FormControl<number | null | undefined>(undefined),
			ruleNumber: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RouterStatusResponse {

		/** Type of resource. */
		kind?: string | null;
		result?: RouterStatus;
	}
	export interface RouterStatusResponseFormProperties {

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateRouterStatusResponseFormGroup() {
		return new FormGroup<RouterStatusResponseFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RoutersPreviewResponse {

		/** Represents a Cloud Router resource. For more information about Cloud Router, read the Cloud Router overview. */
		resource?: Router;
	}
	export interface RoutersPreviewResponseFormProperties {
	}
	export function CreateRoutersPreviewResponseFormGroup() {
		return new FormGroup<RoutersPreviewResponseFormProperties>({
		});

	}


	/** An instance's screenshot. */
	export interface Screenshot {

		/** [Output Only] The Base64-encoded screenshot data. */
		contents?: string | null;

		/** [Output Only] Type of the resource. Always compute#screenshot for the screenshots. */
		kind?: string | null;
	}

	/** An instance's screenshot. */
	export interface ScreenshotFormProperties {

		/** [Output Only] The Base64-encoded screenshot data. */
		contents: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#screenshot for the screenshots. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateScreenshotFormGroup() {
		return new FormGroup<ScreenshotFormProperties>({
			contents: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPoliciesAggregatedList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SecurityPoliciesScopedList resources. */
		items?: {[id: string]: SecurityPoliciesScopedList };

		/** [Output Only] Type of resource. Always compute#securityPolicyAggregatedList for lists of Security Policies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: SecurityPoliciesAggregatedListWarning;
	}
	export interface SecurityPoliciesAggregatedListFormProperties {
		etag: FormControl<string | null | undefined>,

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of SecurityPoliciesScopedList resources. */
		items: FormControl<{[id: string]: SecurityPoliciesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#securityPolicyAggregatedList for lists of Security Policies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPoliciesAggregatedListFormGroup() {
		return new FormGroup<SecurityPoliciesAggregatedListFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: SecurityPoliciesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPoliciesScopedList {

		/** A list of SecurityPolicies contained in this scope. */
		securityPolicies?: Array<SecurityPolicy>;

		/** Informational warning which replaces the list of security policies when the list is empty. */
		warning?: SecurityPoliciesScopedListWarning;
	}
	export interface SecurityPoliciesScopedListFormProperties {
	}
	export function CreateSecurityPoliciesScopedListFormGroup() {
		return new FormGroup<SecurityPoliciesScopedListFormProperties>({
		});

	}


	/** Represents a Google Cloud Armor security policy resource. Only external backend services that use load balancers can reference a security policy. For more information, see Google Cloud Armor security policy overview. */
	export interface SecurityPolicy {

		/** Configuration options for Cloud Armor Adaptive Protection (CAAP). */
		adaptiveProtectionConfig?: SecurityPolicyAdaptiveProtectionConfig;
		advancedOptionsConfig?: SecurityPolicyAdvancedOptionsConfig;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;
		ddosProtectionConfig?: SecurityPolicyDdosProtectionConfig;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#securityPolicyfor security policies */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this security policy, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the security policy. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;
		recaptchaOptionsConfig?: SecurityPolicyRecaptchaOptionsConfig;

		/** [Output Only] URL of the region where the regional security policy resides. This field is not applicable to global security policies. */
		region?: string | null;

		/** A list of rules that belong to this policy. There must always be a default rule which is a rule with priority 2147483647 and match all condition (for the match condition this means match "*" for srcIpRanges and for the networkMatch condition every field must be either match "*" or not set). If no rules are provided when creating a security policy, a default rule with action "allow" will be added. */
		rules?: Array<SecurityPolicyRule>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time. */
		type?: SecurityPolicyType | null;

		/** Definitions of user-defined fields for CLOUD_ARMOR_NETWORK policies. A user-defined field consists of up to 4 bytes extracted from a fixed offset in the packet, relative to the IPv4, IPv6, TCP, or UDP header, with an optional mask to select certain bits. Rules may then specify matching values for these fields. Example: userDefinedFields: - name: "ipv4_fragment_offset" base: IPV4 offset: 6 size: 2 mask: "0x1fff" */
		userDefinedFields?: Array<SecurityPolicyUserDefinedField>;
	}

	/** Represents a Google Cloud Armor security policy resource. Only external backend services that use load balancers can reference a security policy. For more information, see Google Cloud Armor security policy overview. */
	export interface SecurityPolicyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output only] Type of the resource. Always compute#securityPolicyfor security policies */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this security policy, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the security policy. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the regional security policy resides. This field is not applicable to global security policies. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time. */
		type: FormControl<SecurityPolicyType | null | undefined>,
	}
	export function CreateSecurityPolicyFormGroup() {
		return new FormGroup<SecurityPolicyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<SecurityPolicyType | null | undefined>(undefined),
		});

	}


	/** Configuration options for Cloud Armor Adaptive Protection (CAAP). */
	export interface SecurityPolicyAdaptiveProtectionConfig {

		/** Configuration options for L7 DDoS detection. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		layer7DdosDefenseConfig?: SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig;
	}

	/** Configuration options for Cloud Armor Adaptive Protection (CAAP). */
	export interface SecurityPolicyAdaptiveProtectionConfigFormProperties {
	}
	export function CreateSecurityPolicyAdaptiveProtectionConfigFormGroup() {
		return new FormGroup<SecurityPolicyAdaptiveProtectionConfigFormProperties>({
		});

	}


	/** Configuration options for L7 DDoS detection. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
	export interface SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {

		/** If set to true, enables CAAP for L7 DDoS detection. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		enable?: boolean | null;

		/** Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		ruleVisibility?: SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility | null;

		/** Configuration options for layer7 adaptive protection for various customizable thresholds. */
		thresholdConfigs?: Array<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig>;
	}

	/** Configuration options for L7 DDoS detection. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
	export interface SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigFormProperties {

		/** If set to true, enables CAAP for L7 DDoS detection. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		enable: FormControl<boolean | null | undefined>,

		/** Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		ruleVisibility: FormControl<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility | null | undefined>,
	}
	export function CreateSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigFormGroup() {
		return new FormGroup<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigFormProperties>({
			enable: new FormControl<boolean | null | undefined>(undefined),
			ruleVisibility: new FormControl<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility | null | undefined>(undefined),
		});

	}

	export enum SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility { PREMIUM = 'PREMIUM', STANDARD = 'STANDARD' }

	export interface SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig {

		/** Type: float */
		autoDeployConfidenceThreshold?: number | null;

		/** Type: int, -2,147,483,648 to 2,147,483,647 */
		autoDeployExpirationSec?: number | null;

		/** Type: float */
		autoDeployImpactedBaselineThreshold?: number | null;

		/** Type: float */
		autoDeployLoadThreshold?: number | null;

		/** The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the security policy. */
		name?: string | null;
	}
	export interface SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigFormProperties {

		/** Type: float */
		autoDeployConfidenceThreshold: FormControl<number | null | undefined>,

		/** Type: int, -2,147,483,648 to 2,147,483,647 */
		autoDeployExpirationSec: FormControl<number | null | undefined>,

		/** Type: float */
		autoDeployImpactedBaselineThreshold: FormControl<number | null | undefined>,

		/** Type: float */
		autoDeployLoadThreshold: FormControl<number | null | undefined>,

		/** The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the security policy. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigFormGroup() {
		return new FormGroup<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigFormProperties>({
			autoDeployConfidenceThreshold: new FormControl<number | null | undefined>(undefined),
			autoDeployExpirationSec: new FormControl<number | null | undefined>(undefined),
			autoDeployImpactedBaselineThreshold: new FormControl<number | null | undefined>(undefined),
			autoDeployLoadThreshold: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
		});

	}

	export interface SecurityPolicyAdvancedOptionsConfig {
		jsonCustomConfig?: SecurityPolicyAdvancedOptionsConfigJsonCustomConfig;
		jsonParsing?: SecurityPolicyAdvancedOptionsConfigJsonParsing | null;
		logLevel?: SecurityPolicyAdvancedOptionsConfigLogLevel | null;

		/** An optional list of case-insensitive request header names to use for resolving the callers client IP address. */
		userIpRequestHeaders?: Array<string>;
	}
	export interface SecurityPolicyAdvancedOptionsConfigFormProperties {
		jsonParsing: FormControl<SecurityPolicyAdvancedOptionsConfigJsonParsing | null | undefined>,
		logLevel: FormControl<SecurityPolicyAdvancedOptionsConfigLogLevel | null | undefined>,
	}
	export function CreateSecurityPolicyAdvancedOptionsConfigFormGroup() {
		return new FormGroup<SecurityPolicyAdvancedOptionsConfigFormProperties>({
			jsonParsing: new FormControl<SecurityPolicyAdvancedOptionsConfigJsonParsing | null | undefined>(undefined),
			logLevel: new FormControl<SecurityPolicyAdvancedOptionsConfigLogLevel | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {

		/** A list of custom Content-Type header values to apply the JSON parsing. As per RFC 1341, a Content-Type header value has the following format: Content-Type := type "/" subtype *[";" parameter] When configuring a custom Content-Type header value, only the type/subtype needs to be specified, and the parameters should be excluded. */
		contentTypes?: Array<string>;
	}
	export interface SecurityPolicyAdvancedOptionsConfigJsonCustomConfigFormProperties {
	}
	export function CreateSecurityPolicyAdvancedOptionsConfigJsonCustomConfigFormGroup() {
		return new FormGroup<SecurityPolicyAdvancedOptionsConfigJsonCustomConfigFormProperties>({
		});

	}

	export enum SecurityPolicyAdvancedOptionsConfigJsonParsing { DISABLED = 'DISABLED', STANDARD = 'STANDARD', STANDARD_WITH_GRAPHQL = 'STANDARD_WITH_GRAPHQL' }

	export enum SecurityPolicyAdvancedOptionsConfigLogLevel { NORMAL = 'NORMAL', VERBOSE = 'VERBOSE' }

	export interface SecurityPolicyDdosProtectionConfig {
		ddosProtection?: SecurityPolicyDdosProtectionConfigDdosProtection | null;
	}
	export interface SecurityPolicyDdosProtectionConfigFormProperties {
		ddosProtection: FormControl<SecurityPolicyDdosProtectionConfigDdosProtection | null | undefined>,
	}
	export function CreateSecurityPolicyDdosProtectionConfigFormGroup() {
		return new FormGroup<SecurityPolicyDdosProtectionConfigFormProperties>({
			ddosProtection: new FormControl<SecurityPolicyDdosProtectionConfigDdosProtection | null | undefined>(undefined),
		});

	}

	export enum SecurityPolicyDdosProtectionConfigDdosProtection { ADVANCED = 'ADVANCED', STANDARD = 'STANDARD' }

	export interface SecurityPolicyRecaptchaOptionsConfig {

		/** An optional field to supply a reCAPTCHA site key to be used for all the rules using the redirect action with the type of GOOGLE_RECAPTCHA under the security policy. The specified site key needs to be created from the reCAPTCHA API. The user is responsible for the validity of the specified site key. If not specified, a Google-managed site key is used. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		redirectSiteKey?: string | null;
	}
	export interface SecurityPolicyRecaptchaOptionsConfigFormProperties {

		/** An optional field to supply a reCAPTCHA site key to be used for all the rules using the redirect action with the type of GOOGLE_RECAPTCHA under the security policy. The specified site key needs to be created from the reCAPTCHA API. The user is responsible for the validity of the specified site key. If not specified, a Google-managed site key is used. This field is only supported in Global Security Policies of type CLOUD_ARMOR. */
		redirectSiteKey: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyRecaptchaOptionsConfigFormGroup() {
		return new FormGroup<SecurityPolicyRecaptchaOptionsConfigFormProperties>({
			redirectSiteKey: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny). */
	export interface SecurityPolicyRule {

		/** The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for `STATUS` are 403, 404, and 502. - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. This action is only supported in Global Security Policies of type CLOUD_ARMOR. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this. */
		action?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;
		headerAction?: SecurityPolicyRuleHttpHeaderAction;

		/** [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules */
		kind?: string | null;

		/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
		match?: SecurityPolicyRuleMatcher;

		/** Represents a match condition that incoming network traffic is evaluated against. */
		networkMatch?: SecurityPolicyRuleNetworkMatcher;
		preconfiguredWafConfig?: SecurityPolicyRulePreconfiguredWafConfig;

		/** If set to true, the specified action is not enforced. */
		preview?: boolean | null;

		/**
		 * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority?: number | null;
		rateLimitOptions?: SecurityPolicyRuleRateLimitOptions;
		redirectOptions?: SecurityPolicyRuleRedirectOptions;
	}

	/** Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny). */
	export interface SecurityPolicyRuleFormProperties {

		/** The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for `STATUS` are 403, 404, and 502. - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. This action is only supported in Global Security Policies of type CLOUD_ARMOR. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this. */
		action: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules */
		kind: FormControl<string | null | undefined>,

		/** If set to true, the specified action is not enforced. */
		preview: FormControl<boolean | null | undefined>,

		/**
		 * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		priority: FormControl<number | null | undefined>,
	}
	export function CreateSecurityPolicyRuleFormGroup() {
		return new FormGroup<SecurityPolicyRuleFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			preview: new FormControl<boolean | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyRuleHttpHeaderAction {

		/** The list of request headers to add or overwrite if they're already present. */
		requestHeadersToAdds?: Array<SecurityPolicyRuleHttpHeaderActionHttpHeaderOption>;
	}
	export interface SecurityPolicyRuleHttpHeaderActionFormProperties {
	}
	export function CreateSecurityPolicyRuleHttpHeaderActionFormGroup() {
		return new FormGroup<SecurityPolicyRuleHttpHeaderActionFormProperties>({
		});

	}

	export interface SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {

		/** The name of the header to set. */
		headerName?: string | null;

		/** The value to set the named header to. */
		headerValue?: string | null;
	}
	export interface SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionFormProperties {

		/** The name of the header to set. */
		headerName: FormControl<string | null | undefined>,

		/** The value to set the named header to. */
		headerValue: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyRuleHttpHeaderActionHttpHeaderOptionFormGroup() {
		return new FormGroup<SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionFormProperties>({
			headerName: new FormControl<string | null | undefined>(undefined),
			headerValue: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
	export interface SecurityPolicyRuleMatcher {
		config?: SecurityPolicyRuleMatcherConfig;

		/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
		expr?: Expr;
		exprOptions?: SecurityPolicyRuleMatcherExprOptions;

		/** Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config. */
		versionedExpr?: SecurityPolicyRuleMatcherVersionedExpr | null;
	}

	/** Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified. */
	export interface SecurityPolicyRuleMatcherFormProperties {

		/** Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config. */
		versionedExpr: FormControl<SecurityPolicyRuleMatcherVersionedExpr | null | undefined>,
	}
	export function CreateSecurityPolicyRuleMatcherFormGroup() {
		return new FormGroup<SecurityPolicyRuleMatcherFormProperties>({
			versionedExpr: new FormControl<SecurityPolicyRuleMatcherVersionedExpr | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyRuleMatcherConfig {

		/** CIDR IP address range. Maximum number of src_ip_ranges allowed is 10. */
		srcIpRanges?: Array<string>;
	}
	export interface SecurityPolicyRuleMatcherConfigFormProperties {
	}
	export function CreateSecurityPolicyRuleMatcherConfigFormGroup() {
		return new FormGroup<SecurityPolicyRuleMatcherConfigFormProperties>({
		});

	}

	export interface SecurityPolicyRuleMatcherExprOptions {
		recaptchaOptions?: SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions;
	}
	export interface SecurityPolicyRuleMatcherExprOptionsFormProperties {
	}
	export function CreateSecurityPolicyRuleMatcherExprOptionsFormGroup() {
		return new FormGroup<SecurityPolicyRuleMatcherExprOptionsFormProperties>({
		});

	}

	export interface SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions {

		/** A list of site keys to be used during the validation of reCAPTCHA action-tokens. The provided site keys need to be created from reCAPTCHA API under the same project where the security policy is created. */
		actionTokenSiteKeys?: Array<string>;

		/** A list of site keys to be used during the validation of reCAPTCHA session-tokens. The provided site keys need to be created from reCAPTCHA API under the same project where the security policy is created. */
		sessionTokenSiteKeys?: Array<string>;
	}
	export interface SecurityPolicyRuleMatcherExprOptionsRecaptchaOptionsFormProperties {
	}
	export function CreateSecurityPolicyRuleMatcherExprOptionsRecaptchaOptionsFormGroup() {
		return new FormGroup<SecurityPolicyRuleMatcherExprOptionsRecaptchaOptionsFormProperties>({
		});

	}

	export enum SecurityPolicyRuleMatcherVersionedExpr { SRC_IPS_V1 = 'SRC_IPS_V1' }


	/** Represents a match condition that incoming network traffic is evaluated against. */
	export interface SecurityPolicyRuleNetworkMatcher {

		/** Destination IPv4/IPv6 addresses or CIDR prefixes, in standard text format. */
		destIpRanges?: Array<string>;

		/** Destination port numbers for TCP/UDP/SCTP. Each element can be a 16-bit unsigned decimal number (e.g. "80") or range (e.g. "0-1023"). */
		destPorts?: Array<string>;

		/** IPv4 protocol / IPv6 next header (after extension headers). Each element can be an 8-bit unsigned decimal number (e.g. "6"), range (e.g. "253-254"), or one of the following protocol names: "tcp", "udp", "icmp", "esp", "ah", "ipip", or "sctp". */
		ipProtocols?: Array<string>;

		/** BGP Autonomous System Number associated with the source IP address. */
		srcAsns?: Array<number>;

		/** Source IPv4/IPv6 addresses or CIDR prefixes, in standard text format. */
		srcIpRanges?: Array<string>;

		/** Source port numbers for TCP/UDP/SCTP. Each element can be a 16-bit unsigned decimal number (e.g. "80") or range (e.g. "0-1023"). */
		srcPorts?: Array<string>;

		/** Two-letter ISO 3166-1 alpha-2 country code associated with the source IP address. */
		srcRegionCodes?: Array<string>;

		/** User-defined fields. Each element names a defined field and lists the matching values for that field. */
		userDefinedFields?: Array<SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch>;
	}

	/** Represents a match condition that incoming network traffic is evaluated against. */
	export interface SecurityPolicyRuleNetworkMatcherFormProperties {
	}
	export function CreateSecurityPolicyRuleNetworkMatcherFormGroup() {
		return new FormGroup<SecurityPolicyRuleNetworkMatcherFormProperties>({
		});

	}

	export interface SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch {

		/** Name of the user-defined field, as given in the definition. */
		name?: string | null;

		/** Matching values of the field. Each element can be a 32-bit unsigned decimal or hexadecimal (starting with "0x") number (e.g. "64") or range (e.g. "0x400-0x7ff"). */
		values?: Array<string>;
	}
	export interface SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatchFormProperties {

		/** Name of the user-defined field, as given in the definition. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyRuleNetworkMatcherUserDefinedFieldMatchFormGroup() {
		return new FormGroup<SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatchFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyRulePreconfiguredWafConfig {

		/** A list of exclusions to apply during preconfigured WAF evaluation. */
		exclusions?: Array<SecurityPolicyRulePreconfiguredWafConfigExclusion>;
	}
	export interface SecurityPolicyRulePreconfiguredWafConfigFormProperties {
	}
	export function CreateSecurityPolicyRulePreconfiguredWafConfigFormGroup() {
		return new FormGroup<SecurityPolicyRulePreconfiguredWafConfigFormProperties>({
		});

	}

	export interface SecurityPolicyRulePreconfiguredWafConfigExclusion {

		/** A list of request cookie names whose value will be excluded from inspection during preconfigured WAF evaluation. */
		requestCookiesToExclude?: Array<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams>;

		/** A list of request header names whose value will be excluded from inspection during preconfigured WAF evaluation. */
		requestHeadersToExclude?: Array<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams>;

		/** A list of request query parameter names whose value will be excluded from inspection during preconfigured WAF evaluation. Note that the parameter can be in the query string or in the POST body. */
		requestQueryParamsToExclude?: Array<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams>;

		/** A list of request URIs from the request line to be excluded from inspection during preconfigured WAF evaluation. When specifying this field, the query or fragment part should be excluded. */
		requestUrisToExclude?: Array<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams>;

		/** A list of target rule IDs under the WAF rule set to apply the preconfigured WAF exclusion. If omitted, it refers to all the rule IDs under the WAF rule set. */
		targetRuleIds?: Array<string>;

		/** Target WAF rule set to apply the preconfigured WAF exclusion. */
		targetRuleSet?: string | null;
	}
	export interface SecurityPolicyRulePreconfiguredWafConfigExclusionFormProperties {

		/** Target WAF rule set to apply the preconfigured WAF exclusion. */
		targetRuleSet: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyRulePreconfiguredWafConfigExclusionFormGroup() {
		return new FormGroup<SecurityPolicyRulePreconfiguredWafConfigExclusionFormProperties>({
			targetRuleSet: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams {

		/** The match operator for the field. */
		op?: SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOp | null;

		/** The value of the field. */
		val?: string | null;
	}
	export interface SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsFormProperties {

		/** The match operator for the field. */
		op: FormControl<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOp | null | undefined>,

		/** The value of the field. */
		val: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsFormGroup() {
		return new FormGroup<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsFormProperties>({
			op: new FormControl<SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOp | null | undefined>(undefined),
			val: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOp { CONTAINS = 'CONTAINS', ENDS_WITH = 'ENDS_WITH', EQUALS = 'EQUALS', EQUALS_ANY = 'EQUALS_ANY', STARTS_WITH = 'STARTS_WITH' }

	export interface SecurityPolicyRuleRateLimitOptions {

		/**
		 * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		banDurationSec?: number | null;
		banThreshold?: SecurityPolicyRuleRateLimitOptionsThreshold;

		/** Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only. */
		conformAction?: string | null;

		/** Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. - TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL. - USER_IP: The IP address of the originating client, which is resolved based on "userIpRequestHeaders" configured with the security policy. If there is no "userIpRequestHeaders" configuration or an IP address cannot be resolved from it, the key type defaults to IP. */
		enforceOnKey?: SecurityPolicyRuleRateLimitOptionsEnforceOnKey | null;

		/** If specified, any combination of values of enforce_on_key_type/enforce_on_key_name is treated as the key on which ratelimit threshold/action is enforced. You can specify up to 3 enforce_on_key_configs. If enforce_on_key_configs is specified, enforce_on_key must not be specified. */
		enforceOnKeyConfigs?: Array<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig>;

		/** Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value. */
		enforceOnKeyName?: string | null;

		/** Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are `deny(STATUS)`, where valid values for `STATUS` are 403, 404, 429, and 502, and `redirect`, where the redirect parameters come from `exceedRedirectOptions` below. The `redirect` action is only supported in Global Security Policies of type CLOUD_ARMOR. */
		exceedAction?: string | null;
		exceedRedirectOptions?: SecurityPolicyRuleRedirectOptions;
		rateLimitThreshold?: SecurityPolicyRuleRateLimitOptionsThreshold;
	}
	export interface SecurityPolicyRuleRateLimitOptionsFormProperties {

		/**
		 * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		banDurationSec: FormControl<number | null | undefined>,

		/** Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only. */
		conformAction: FormControl<string | null | undefined>,

		/** Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. - TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL. - USER_IP: The IP address of the originating client, which is resolved based on "userIpRequestHeaders" configured with the security policy. If there is no "userIpRequestHeaders" configuration or an IP address cannot be resolved from it, the key type defaults to IP. */
		enforceOnKey: FormControl<SecurityPolicyRuleRateLimitOptionsEnforceOnKey | null | undefined>,

		/** Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value. */
		enforceOnKeyName: FormControl<string | null | undefined>,

		/** Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are `deny(STATUS)`, where valid values for `STATUS` are 403, 404, 429, and 502, and `redirect`, where the redirect parameters come from `exceedRedirectOptions` below. The `redirect` action is only supported in Global Security Policies of type CLOUD_ARMOR. */
		exceedAction: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyRuleRateLimitOptionsFormGroup() {
		return new FormGroup<SecurityPolicyRuleRateLimitOptionsFormProperties>({
			banDurationSec: new FormControl<number | null | undefined>(undefined),
			conformAction: new FormControl<string | null | undefined>(undefined),
			enforceOnKey: new FormControl<SecurityPolicyRuleRateLimitOptionsEnforceOnKey | null | undefined>(undefined),
			enforceOnKeyName: new FormControl<string | null | undefined>(undefined),
			exceedAction: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyRuleRateLimitOptionsThreshold {

		/**
		 * Number of HTTP(S) requests for calculating the threshold.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		count?: number | null;

		/**
		 * Interval over which the threshold is computed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		intervalSec?: number | null;
	}
	export interface SecurityPolicyRuleRateLimitOptionsThresholdFormProperties {

		/**
		 * Number of HTTP(S) requests for calculating the threshold.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Interval over which the threshold is computed.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		intervalSec: FormControl<number | null | undefined>,
	}
	export function CreateSecurityPolicyRuleRateLimitOptionsThresholdFormGroup() {
		return new FormGroup<SecurityPolicyRuleRateLimitOptionsThresholdFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			intervalSec: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum SecurityPolicyRuleRateLimitOptionsEnforceOnKey { ALL = 'ALL', HTTP_COOKIE = 'HTTP_COOKIE', HTTP_HEADER = 'HTTP_HEADER', HTTP_PATH = 'HTTP_PATH', IP = 'IP', REGION_CODE = 'REGION_CODE', SNI = 'SNI', TLS_JA3_FINGERPRINT = 'TLS_JA3_FINGERPRINT', USER_IP = 'USER_IP', XFF_IP = 'XFF_IP' }

	export interface SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig {

		/** Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value. */
		enforceOnKeyName?: string | null;

		/** Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKeyConfigs" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. - TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL. - USER_IP: The IP address of the originating client, which is resolved based on "userIpRequestHeaders" configured with the security policy. If there is no "userIpRequestHeaders" configuration or an IP address cannot be resolved from it, the key type defaults to IP. */
		enforceOnKeyType?: SecurityPolicyRuleRateLimitOptionsEnforceOnKey | null;
	}
	export interface SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigFormProperties {

		/** Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value. */
		enforceOnKeyName: FormControl<string | null | undefined>,

		/** Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKeyConfigs" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. - TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL. - USER_IP: The IP address of the originating client, which is resolved based on "userIpRequestHeaders" configured with the security policy. If there is no "userIpRequestHeaders" configuration or an IP address cannot be resolved from it, the key type defaults to IP. */
		enforceOnKeyType: FormControl<SecurityPolicyRuleRateLimitOptionsEnforceOnKey | null | undefined>,
	}
	export function CreateSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigFormGroup() {
		return new FormGroup<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigFormProperties>({
			enforceOnKeyName: new FormControl<string | null | undefined>(undefined),
			enforceOnKeyType: new FormControl<SecurityPolicyRuleRateLimitOptionsEnforceOnKey | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyRuleRedirectOptions {

		/** Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA. */
		target?: string | null;

		/** Type of the redirect action. */
		type?: SecurityPolicyRuleRedirectOptionsType | null;
	}
	export interface SecurityPolicyRuleRedirectOptionsFormProperties {

		/** Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA. */
		target: FormControl<string | null | undefined>,

		/** Type of the redirect action. */
		type: FormControl<SecurityPolicyRuleRedirectOptionsType | null | undefined>,
	}
	export function CreateSecurityPolicyRuleRedirectOptionsFormGroup() {
		return new FormGroup<SecurityPolicyRuleRedirectOptionsFormProperties>({
			target: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<SecurityPolicyRuleRedirectOptionsType | null | undefined>(undefined),
		});

	}

	export enum SecurityPolicyRuleRedirectOptionsType { EXTERNAL_302 = 'EXTERNAL_302', GOOGLE_RECAPTCHA = 'GOOGLE_RECAPTCHA' }

	export enum SecurityPolicyType { CLOUD_ARMOR = 'CLOUD_ARMOR', CLOUD_ARMOR_EDGE = 'CLOUD_ARMOR_EDGE', CLOUD_ARMOR_NETWORK = 'CLOUD_ARMOR_NETWORK' }

	export interface SecurityPolicyUserDefinedField {

		/** The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required */
		base?: SecurityPolicyUserDefinedFieldBase | null;

		/** If specified, apply this mask (bitwise AND) to the field to ignore bits before matching. Encoded as a hexadecimal number (starting with "0x"). The last byte of the field (in network byte order) corresponds to the least significant byte of the mask. */
		mask?: string | null;

		/** The name of this field. Must be unique within the policy. */
		name?: string | null;

		/**
		 * Offset of the first byte of the field (in network byte order) relative to 'base'.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		offset?: number | null;

		/**
		 * Size of the field in bytes. Valid values: 1-4.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size?: number | null;
	}
	export interface SecurityPolicyUserDefinedFieldFormProperties {

		/** The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required */
		base: FormControl<SecurityPolicyUserDefinedFieldBase | null | undefined>,

		/** If specified, apply this mask (bitwise AND) to the field to ignore bits before matching. Encoded as a hexadecimal number (starting with "0x"). The last byte of the field (in network byte order) corresponds to the least significant byte of the mask. */
		mask: FormControl<string | null | undefined>,

		/** The name of this field. Must be unique within the policy. */
		name: FormControl<string | null | undefined>,

		/**
		 * Offset of the first byte of the field (in network byte order) relative to 'base'.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		offset: FormControl<number | null | undefined>,

		/**
		 * Size of the field in bytes. Valid values: 1-4.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		size: FormControl<number | null | undefined>,
	}
	export function CreateSecurityPolicyUserDefinedFieldFormGroup() {
		return new FormGroup<SecurityPolicyUserDefinedFieldFormProperties>({
			base: new FormControl<SecurityPolicyUserDefinedFieldBase | null | undefined>(undefined),
			mask: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum SecurityPolicyUserDefinedFieldBase { IPV4 = 'IPV4', IPV6 = 'IPV6', TCP = 'TCP', UDP = 'UDP' }

	export interface SecurityPoliciesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SecurityPoliciesScopedListWarningData?: Array<SecurityPoliciesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SecurityPoliciesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPoliciesScopedListWarningFormGroup() {
		return new FormGroup<SecurityPoliciesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPoliciesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SecurityPoliciesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPoliciesScopedListWarningDataFormGroup() {
		return new FormGroup<SecurityPoliciesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPoliciesAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SecurityPoliciesAggregatedListWarningData?: Array<SecurityPoliciesAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SecurityPoliciesAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPoliciesAggregatedListWarningFormGroup() {
		return new FormGroup<SecurityPoliciesAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPoliciesAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SecurityPoliciesAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPoliciesAggregatedListWarningDataFormGroup() {
		return new FormGroup<SecurityPoliciesAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPoliciesListPreconfiguredExpressionSetsResponse {
		preconfiguredExpressionSets?: SecurityPoliciesWafConfig;
	}
	export interface SecurityPoliciesListPreconfiguredExpressionSetsResponseFormProperties {
	}
	export function CreateSecurityPoliciesListPreconfiguredExpressionSetsResponseFormGroup() {
		return new FormGroup<SecurityPoliciesListPreconfiguredExpressionSetsResponseFormProperties>({
		});

	}

	export interface SecurityPoliciesWafConfig {
		wafRules?: PreconfiguredWafSet;
	}
	export interface SecurityPoliciesWafConfigFormProperties {
	}
	export function CreateSecurityPoliciesWafConfigFormGroup() {
		return new FormGroup<SecurityPoliciesWafConfigFormProperties>({
		});

	}

	export interface SecurityPolicyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SecurityPolicy resources. */
		items?: Array<SecurityPolicy>;

		/** [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SecurityPolicyListWarning;
	}
	export interface SecurityPolicyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyListFormGroup() {
		return new FormGroup<SecurityPolicyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SecurityPolicyListWarningData?: Array<SecurityPolicyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SecurityPolicyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyListWarningFormGroup() {
		return new FormGroup<SecurityPolicyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SecurityPolicyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyListWarningDataFormGroup() {
		return new FormGroup<SecurityPolicyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SecurityPolicyReference {
		securityPolicy?: string | null;
	}
	export interface SecurityPolicyReferenceFormProperties {
		securityPolicy: FormControl<string | null | undefined>,
	}
	export function CreateSecurityPolicyReferenceFormGroup() {
		return new FormGroup<SecurityPolicyReferenceFormProperties>({
			securityPolicy: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An instance serial console output. */
	export interface SerialPortOutput {

		/** [Output Only] The contents of the console output. */
		contents?: string | null;

		/** [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output. */
		kind?: string | null;

		/** [Output Only] The position of the next byte of content, regardless of whether the content exists, following the output returned in the `contents` property. Use this value in the next request as the start parameter. */
		next?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer (1 MB), older output is overwritten by newer content. The output start value will indicate the byte position of the output that was returned, which might be different than the `start` value that was specified in the request. */
		start?: string | null;
	}

	/** An instance serial console output. */
	export interface SerialPortOutputFormProperties {

		/** [Output Only] The contents of the console output. */
		contents: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] The position of the next byte of content, regardless of whether the content exists, following the output returned in the `contents` property. Use this value in the next request as the start parameter. */
		next: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer (1 MB), older output is overwritten by newer content. The output start value will indicate the byte position of the output that was returned, which might be different than the `start` value that was specified in the request. */
		start: FormControl<string | null | undefined>,
	}
	export function CreateSerialPortOutputFormGroup() {
		return new FormGroup<SerialPortOutputFormProperties>({
			contents: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			next: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			start: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service. */
	export interface ServiceAttachment {

		/** [Output Only] An array of connections for all the consumers connected to this service attachment. */
		connectedEndpoints?: Array<ServiceAttachmentConnectedEndpoint>;

		/** The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules. */
		connectionPreference?: ServiceAttachmentConnectionPreference | null;

		/** Projects that are allowed to connect to this service attachment. */
		consumerAcceptLists?: Array<ServiceAttachmentConsumerProjectLimit>;

		/** Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number. */
		consumerRejectLists?: Array<string>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1. */
		domainNames?: Array<string>;

		/** If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers. */
		enableProxyProtocol?: boolean | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment. */
		natSubnets?: Array<string>;

		/** The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment. */
		producerForwardingRule?: string | null;
		pscServiceAttachmentId?: Uint128;

		/** This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to false. */
		reconcileConnections?: boolean | null;

		/** [Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The URL of a service serving the endpoint identified by this service attachment. */
		targetService?: string | null;
	}

	/** Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service. */
	export interface ServiceAttachmentFormProperties {

		/** The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules. */
		connectionPreference: FormControl<ServiceAttachmentConnectionPreference | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers. */
		enableProxyProtocol: FormControl<boolean | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment. */
		producerForwardingRule: FormControl<string | null | undefined>,

		/** This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to false. */
		reconcileConnections: FormControl<boolean | null | undefined>,

		/** [Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The URL of a service serving the endpoint identified by this service attachment. */
		targetService: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentFormGroup() {
		return new FormGroup<ServiceAttachmentFormProperties>({
			connectionPreference: new FormControl<ServiceAttachmentConnectionPreference | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enableProxyProtocol: new FormControl<boolean | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			producerForwardingRule: new FormControl<string | null | undefined>(undefined),
			reconcileConnections: new FormControl<boolean | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			targetService: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** [Output Only] A connection connected to this service attachment. */
	export interface ServiceAttachmentConnectedEndpoint {

		/** The url of the consumer network. */
		consumerNetwork?: string | null;

		/** The url of a connected endpoint. */
		endpoint?: string | null;

		/** The PSC connection id of the connected endpoint. */
		pscConnectionId?: string | null;

		/** The status of a connected endpoint to this service attachment. */
		status?: ForwardingRulePscConnectionStatus | null;
	}

	/** [Output Only] A connection connected to this service attachment. */
	export interface ServiceAttachmentConnectedEndpointFormProperties {

		/** The url of the consumer network. */
		consumerNetwork: FormControl<string | null | undefined>,

		/** The url of a connected endpoint. */
		endpoint: FormControl<string | null | undefined>,

		/** The PSC connection id of the connected endpoint. */
		pscConnectionId: FormControl<string | null | undefined>,

		/** The status of a connected endpoint to this service attachment. */
		status: FormControl<ForwardingRulePscConnectionStatus | null | undefined>,
	}
	export function CreateServiceAttachmentConnectedEndpointFormGroup() {
		return new FormGroup<ServiceAttachmentConnectedEndpointFormProperties>({
			consumerNetwork: new FormControl<string | null | undefined>(undefined),
			endpoint: new FormControl<string | null | undefined>(undefined),
			pscConnectionId: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<ForwardingRulePscConnectionStatus | null | undefined>(undefined),
		});

	}

	export enum ServiceAttachmentConnectionPreference { ACCEPT_AUTOMATIC = 'ACCEPT_AUTOMATIC', ACCEPT_MANUAL = 'ACCEPT_MANUAL', CONNECTION_PREFERENCE_UNSPECIFIED = 'CONNECTION_PREFERENCE_UNSPECIFIED' }

	export interface ServiceAttachmentConsumerProjectLimit {

		/**
		 * The value of the limit to set.
		 * Type: uint, 0 to 4,294,967,295
		 */
		connectionLimit?: number | null;

		/** The network URL for the network to set the limit for. */
		networkUrl?: string | null;

		/** The project id or number for the project to set the limit for. */
		projectIdOrNum?: string | null;
	}
	export interface ServiceAttachmentConsumerProjectLimitFormProperties {

		/**
		 * The value of the limit to set.
		 * Type: uint, 0 to 4,294,967,295
		 */
		connectionLimit: FormControl<number | null | undefined>,

		/** The network URL for the network to set the limit for. */
		networkUrl: FormControl<string | null | undefined>,

		/** The project id or number for the project to set the limit for. */
		projectIdOrNum: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentConsumerProjectLimitFormGroup() {
		return new FormGroup<ServiceAttachmentConsumerProjectLimitFormProperties>({
			connectionLimit: new FormControl<number | null | undefined>(undefined),
			networkUrl: new FormControl<string | null | undefined>(undefined),
			projectIdOrNum: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Uint128 {
		high?: string | null;
		low?: string | null;
	}
	export interface Uint128FormProperties {
		high: FormControl<string | null | undefined>,
		low: FormControl<string | null | undefined>,
	}
	export function CreateUint128FormGroup() {
		return new FormGroup<Uint128FormProperties>({
			high: new FormControl<string | null | undefined>(undefined),
			low: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of ServiceAttachmentsScopedList. */
	export interface ServiceAttachmentAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ServiceAttachmentsScopedList resources. */
		items?: {[id: string]: ServiceAttachmentsScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: ServiceAttachmentAggregatedListWarning;
	}

	/** Contains a list of ServiceAttachmentsScopedList. */
	export interface ServiceAttachmentAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of ServiceAttachmentsScopedList resources. */
		items: FormControl<{[id: string]: ServiceAttachmentsScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentAggregatedListFormGroup() {
		return new FormGroup<ServiceAttachmentAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: ServiceAttachmentsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentsScopedList {

		/** A list of ServiceAttachments contained in this scope. */
		serviceAttachments?: Array<ServiceAttachment>;

		/** Informational warning which replaces the list of service attachments when the list is empty. */
		warning?: ServiceAttachmentsScopedListWarning;
	}
	export interface ServiceAttachmentsScopedListFormProperties {
	}
	export function CreateServiceAttachmentsScopedListFormGroup() {
		return new FormGroup<ServiceAttachmentsScopedListFormProperties>({
		});

	}

	export interface ServiceAttachmentsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ServiceAttachmentsScopedListWarningData?: Array<ServiceAttachmentsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ServiceAttachmentsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentsScopedListWarningFormGroup() {
		return new FormGroup<ServiceAttachmentsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ServiceAttachmentsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentsScopedListWarningDataFormGroup() {
		return new FormGroup<ServiceAttachmentsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ServiceAttachmentAggregatedListWarningData?: Array<ServiceAttachmentAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ServiceAttachmentAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentAggregatedListWarningFormGroup() {
		return new FormGroup<ServiceAttachmentAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ServiceAttachmentAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentAggregatedListWarningDataFormGroup() {
		return new FormGroup<ServiceAttachmentAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of ServiceAttachment resources. */
		items?: Array<ServiceAttachment>;

		/** [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ServiceAttachmentListWarning;
	}
	export interface ServiceAttachmentListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentListFormGroup() {
		return new FormGroup<ServiceAttachmentListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ServiceAttachmentListWarningData?: Array<ServiceAttachmentListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ServiceAttachmentListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentListWarningFormGroup() {
		return new FormGroup<ServiceAttachmentListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ServiceAttachmentListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ServiceAttachmentListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateServiceAttachmentListWarningDataFormGroup() {
		return new FormGroup<ServiceAttachmentListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A Shielded Instance Identity. */
	export interface ShieldedInstanceIdentity {

		/** A Shielded Instance Identity Entry. */
		encryptionKey?: ShieldedInstanceIdentityEntry;

		/** [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry. */
		kind?: string | null;

		/** A Shielded Instance Identity Entry. */
		signingKey?: ShieldedInstanceIdentityEntry;
	}

	/** A Shielded Instance Identity. */
	export interface ShieldedInstanceIdentityFormProperties {

		/** [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateShieldedInstanceIdentityFormGroup() {
		return new FormGroup<ShieldedInstanceIdentityFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A Shielded Instance Identity Entry. */
	export interface ShieldedInstanceIdentityEntry {

		/** A PEM-encoded X.509 certificate. This field can be empty. */
		ekCert?: string | null;

		/** A PEM-encoded public key. */
		ekPub?: string | null;
	}

	/** A Shielded Instance Identity Entry. */
	export interface ShieldedInstanceIdentityEntryFormProperties {

		/** A PEM-encoded X.509 certificate. This field can be empty. */
		ekCert: FormControl<string | null | undefined>,

		/** A PEM-encoded public key. */
		ekPub: FormControl<string | null | undefined>,
	}
	export function CreateShieldedInstanceIdentityEntryFormGroup() {
		return new FormGroup<ShieldedInstanceIdentityEntryFormProperties>({
			ekCert: new FormControl<string | null | undefined>(undefined),
			ekPub: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs */
	export interface SignedUrlKey {

		/** Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		keyName?: string | null;

		/** 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string. */
		keyValue?: string | null;
	}

	/** Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs */
	export interface SignedUrlKeyFormProperties {

		/** Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		keyName: FormControl<string | null | undefined>,

		/** 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string. */
		keyValue: FormControl<string | null | undefined>,
	}
	export function CreateSignedUrlKeyFormGroup() {
		return new FormGroup<SignedUrlKeyFormProperties>({
			keyName: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			keyValue: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Persistent Disk Snapshot resource. You can use snapshots to back up data on a regular interval. For more information, read Creating persistent disk snapshots. */
	export interface Snapshot {

		/** [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64. */
		architecture?: AttachedDiskArchitecture | null;

		/** [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk. */
		autoCreated?: boolean | null;

		/** Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value. */
		chainName?: string | null;

		/** [Output Only] Size in bytes of the snapshot at creation time. */
		creationSizeBytes?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Size of the source disk, specified in GB. */
		diskSizeGb?: string | null;

		/** [Output Only] Number of bytes downloaded to restore a snapshot to a disk. */
		downloadBytes?: string | null;

		/** Whether this snapshot is created from a confidential compute mode disk. [Output Only]: This field is not set by user, but from source disk. */
		enableConfidentialCompute?: boolean | null;

		/** [Output Only] A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
		guestOsFeatures?: Array<GuestOsFeature>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot. */
		labelFingerprint?: string | null;

		/** Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty. */
		labels?: {[id: string]: string };

		/** [Output Only] Integer license codes indicating which licenses are attached to this snapshot. */
		licenseCodes?: Array<string>;

		/** [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image). */
		licenses?: Array<string>;

		/** An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API. */
		locationHint?: string | null;

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Output only. Reserved for future use. */
		satisfiesPzi?: boolean | null;

		/** [Output Only] Reserved for future use. */
		satisfiesPzs?: boolean | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;
		snapshotEncryptionKey?: CustomerEncryptionKey;

		/** Indicates the type of the snapshot. */
		snapshotType?: SnapshotSnapshotType | null;

		/** The source disk used to create this snapshot. */
		sourceDisk?: string | null;
		sourceDiskEncryptionKey?: CustomerEncryptionKey;

		/** The source disk whose recovery checkpoint will be used to create this snapshot. */
		sourceDiskForRecoveryCheckpoint?: string | null;

		/** [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name. */
		sourceDiskId?: string | null;

		/** [Output Only] URL of the resource policy which created this scheduled snapshot. */
		sourceSnapshotSchedulePolicy?: string | null;

		/** [Output Only] ID of the resource policy which created this scheduled snapshot. */
		sourceSnapshotSchedulePolicyId?: string | null;

		/** [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING. */
		status?: SnapshotStatus | null;

		/** [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion. */
		storageBytes?: string | null;

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus?: SavedDiskStorageBytesStatus | null;

		/** Cloud Storage bucket storage location of the snapshot (regional or multi-regional). */
		storageLocations?: Array<string>;
	}

	/** Represents a Persistent Disk Snapshot resource. You can use snapshots to back up data on a regular interval. For more information, read Creating persistent disk snapshots. */
	export interface SnapshotFormProperties {

		/** [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64. */
		architecture: FormControl<AttachedDiskArchitecture | null | undefined>,

		/** [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk. */
		autoCreated: FormControl<boolean | null | undefined>,

		/** Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value. */
		chainName: FormControl<string | null | undefined>,

		/** [Output Only] Size in bytes of the snapshot at creation time. */
		creationSizeBytes: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] Size of the source disk, specified in GB. */
		diskSizeGb: FormControl<string | null | undefined>,

		/** [Output Only] Number of bytes downloaded to restore a snapshot to a disk. */
		downloadBytes: FormControl<string | null | undefined>,

		/** Whether this snapshot is created from a confidential compute mode disk. [Output Only]: This field is not set by user, but from source disk. */
		enableConfidentialCompute: FormControl<boolean | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API. */
		locationHint: FormControl<string | null | undefined>,

		/** Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Output only. Reserved for future use. */
		satisfiesPzi: FormControl<boolean | null | undefined>,

		/** [Output Only] Reserved for future use. */
		satisfiesPzs: FormControl<boolean | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Indicates the type of the snapshot. */
		snapshotType: FormControl<SnapshotSnapshotType | null | undefined>,

		/** The source disk used to create this snapshot. */
		sourceDisk: FormControl<string | null | undefined>,

		/** The source disk whose recovery checkpoint will be used to create this snapshot. */
		sourceDiskForRecoveryCheckpoint: FormControl<string | null | undefined>,

		/** [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name. */
		sourceDiskId: FormControl<string | null | undefined>,

		/** [Output Only] URL of the resource policy which created this scheduled snapshot. */
		sourceSnapshotSchedulePolicy: FormControl<string | null | undefined>,

		/** [Output Only] ID of the resource policy which created this scheduled snapshot. */
		sourceSnapshotSchedulePolicyId: FormControl<string | null | undefined>,

		/** [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING. */
		status: FormControl<SnapshotStatus | null | undefined>,

		/** [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion. */
		storageBytes: FormControl<string | null | undefined>,

		/** [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date. */
		storageBytesStatus: FormControl<SavedDiskStorageBytesStatus | null | undefined>,
	}
	export function CreateSnapshotFormGroup() {
		return new FormGroup<SnapshotFormProperties>({
			architecture: new FormControl<AttachedDiskArchitecture | null | undefined>(undefined),
			autoCreated: new FormControl<boolean | null | undefined>(undefined),
			chainName: new FormControl<string | null | undefined>(undefined),
			creationSizeBytes: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			diskSizeGb: new FormControl<string | null | undefined>(undefined),
			downloadBytes: new FormControl<string | null | undefined>(undefined),
			enableConfidentialCompute: new FormControl<boolean | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			locationHint: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			satisfiesPzi: new FormControl<boolean | null | undefined>(undefined),
			satisfiesPzs: new FormControl<boolean | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			snapshotType: new FormControl<SnapshotSnapshotType | null | undefined>(undefined),
			sourceDisk: new FormControl<string | null | undefined>(undefined),
			sourceDiskForRecoveryCheckpoint: new FormControl<string | null | undefined>(undefined),
			sourceDiskId: new FormControl<string | null | undefined>(undefined),
			sourceSnapshotSchedulePolicy: new FormControl<string | null | undefined>(undefined),
			sourceSnapshotSchedulePolicyId: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<SnapshotStatus | null | undefined>(undefined),
			storageBytes: new FormControl<string | null | undefined>(undefined),
			storageBytesStatus: new FormControl<SavedDiskStorageBytesStatus | null | undefined>(undefined),
		});

	}

	export enum SnapshotSnapshotType { ARCHIVE = 'ARCHIVE', STANDARD = 'STANDARD' }

	export enum SnapshotStatus { CREATING = 'CREATING', DELETING = 'DELETING', FAILED = 'FAILED', READY = 'READY', UPLOADING = 'UPLOADING' }


	/** Contains a list of Snapshot resources. */
	export interface SnapshotList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Snapshot resources. */
		items?: Array<Snapshot>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SnapshotListWarning;
	}

	/** Contains a list of Snapshot resources. */
	export interface SnapshotListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotListFormGroup() {
		return new FormGroup<SnapshotListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SnapshotListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SnapshotListWarningData?: Array<SnapshotListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SnapshotListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotListWarningFormGroup() {
		return new FormGroup<SnapshotListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SnapshotListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SnapshotListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotListWarningDataFormGroup() {
		return new FormGroup<SnapshotListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SnapshotSettings {
		storageLocation?: SnapshotSettingsStorageLocationSettings;
	}
	export interface SnapshotSettingsFormProperties {
	}
	export function CreateSnapshotSettingsFormGroup() {
		return new FormGroup<SnapshotSettingsFormProperties>({
		});

	}

	export interface SnapshotSettingsStorageLocationSettings {

		/** When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the locations listed in this field. Keys are GCS bucket locations. */
		locations?: {[id: string]: SnapshotSettingsStorageLocationSettingsStorageLocationPreference };

		/** The chosen location policy. */
		policy?: SnapshotSettingsStorageLocationSettingsPolicy | null;
	}
	export interface SnapshotSettingsStorageLocationSettingsFormProperties {

		/** When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the locations listed in this field. Keys are GCS bucket locations. */
		locations: FormControl<{[id: string]: SnapshotSettingsStorageLocationSettingsStorageLocationPreference } | null | undefined>,

		/** The chosen location policy. */
		policy: FormControl<SnapshotSettingsStorageLocationSettingsPolicy | null | undefined>,
	}
	export function CreateSnapshotSettingsStorageLocationSettingsFormGroup() {
		return new FormGroup<SnapshotSettingsStorageLocationSettingsFormProperties>({
			locations: new FormControl<{[id: string]: SnapshotSettingsStorageLocationSettingsStorageLocationPreference } | null | undefined>(undefined),
			policy: new FormControl<SnapshotSettingsStorageLocationSettingsPolicy | null | undefined>(undefined),
		});

	}


	/** A structure for specifying storage locations. */
	export interface SnapshotSettingsStorageLocationSettingsStorageLocationPreference {

		/** Name of the location. It should be one of the GCS buckets. */
		name?: string | null;
	}

	/** A structure for specifying storage locations. */
	export interface SnapshotSettingsStorageLocationSettingsStorageLocationPreferenceFormProperties {

		/** Name of the location. It should be one of the GCS buckets. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotSettingsStorageLocationSettingsStorageLocationPreferenceFormGroup() {
		return new FormGroup<SnapshotSettingsStorageLocationSettingsStorageLocationPreferenceFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SnapshotSettingsStorageLocationSettingsPolicy { LOCAL_REGION = 'LOCAL_REGION', NEAREST_MULTI_REGION = 'NEAREST_MULTI_REGION', SPECIFIC_LOCATIONS = 'SPECIFIC_LOCATIONS', STORAGE_LOCATION_POLICY_UNSPECIFIED = 'STORAGE_LOCATION_POLICY_UNSPECIFIED' }


	/** Represents an SSL certificate resource. Google Compute Engine has two SSL certificate resources: * [Global](/compute/docs/reference/rest/v1/sslCertificates) * [Regional](/compute/docs/reference/rest/v1/regionSslCertificates) The global SSL certificates (sslCertificates) are used by: - Global external Application Load Balancers - Classic Application Load Balancers - Proxy Network Load Balancers (with target SSL proxies) The regional SSL certificates (regionSslCertificates) are used by: - Regional external Application Load Balancers - Regional internal Application Load Balancers Optionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read Creating and using SSL certificates, SSL certificates quotas and limits, and Troubleshooting SSL certificates. */
	export interface SslCertificate {

		/** A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert. */
		certificate?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Expire time of the certificate. RFC3339 */
		expireTime?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates. */
		kind?: string | null;

		/** Configuration and status of a managed SSL certificate. */
		managed?: SslCertificateManagedSslCertificate;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field. */
		privateKey?: string | null;

		/** [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate. */
		region?: string | null;

		/** [Output only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Configuration and status of a self-managed SSL certificate. */
		selfManaged?: SslCertificateSelfManagedSslCertificate;

		/** [Output Only] Domains associated with the certificate via Subject Alternative Name. */
		subjectAlternativeNames?: Array<string>;

		/** (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used. */
		type?: SslCertificateType | null;
	}

	/** Represents an SSL certificate resource. Google Compute Engine has two SSL certificate resources: * [Global](/compute/docs/reference/rest/v1/sslCertificates) * [Regional](/compute/docs/reference/rest/v1/regionSslCertificates) The global SSL certificates (sslCertificates) are used by: - Global external Application Load Balancers - Classic Application Load Balancers - Proxy Network Load Balancers (with target SSL proxies) The regional SSL certificates (regionSslCertificates) are used by: - Regional external Application Load Balancers - Regional internal Application Load Balancers Optionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read Creating and using SSL certificates, SSL certificates quotas and limits, and Troubleshooting SSL certificates. */
	export interface SslCertificateFormProperties {

		/** A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert. */
		certificate: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] Expire time of the certificate. RFC3339 */
		expireTime: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field. */
		privateKey: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate. */
		region: FormControl<string | null | undefined>,

		/** [Output only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used. */
		type: FormControl<SslCertificateType | null | undefined>,
	}
	export function CreateSslCertificateFormGroup() {
		return new FormGroup<SslCertificateFormProperties>({
			certificate: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			expireTime: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			privateKey: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<SslCertificateType | null | undefined>(undefined),
		});

	}


	/** Configuration and status of a managed SSL certificate. */
	export interface SslCertificateManagedSslCertificate {

		/** [Output only] Detailed statuses of the domains specified for managed certificate resource. */
		domainStatus?: {[id: string]: SslCertificateManagedSslCertificateDomainStatus };

		/** The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates). */
		domains?: Array<string>;

		/** [Output only] Status of the managed certificate resource. */
		status?: SslCertificateManagedSslCertificateStatus | null;
	}

	/** Configuration and status of a managed SSL certificate. */
	export interface SslCertificateManagedSslCertificateFormProperties {

		/** [Output only] Detailed statuses of the domains specified for managed certificate resource. */
		domainStatus: FormControl<{[id: string]: SslCertificateManagedSslCertificateDomainStatus } | null | undefined>,

		/** [Output only] Status of the managed certificate resource. */
		status: FormControl<SslCertificateManagedSslCertificateStatus | null | undefined>,
	}
	export function CreateSslCertificateManagedSslCertificateFormGroup() {
		return new FormGroup<SslCertificateManagedSslCertificateFormProperties>({
			domainStatus: new FormControl<{[id: string]: SslCertificateManagedSslCertificateDomainStatus } | null | undefined>(undefined),
			status: new FormControl<SslCertificateManagedSslCertificateStatus | null | undefined>(undefined),
		});

	}

	export enum SslCertificateManagedSslCertificateDomainStatus { ACTIVE = 'ACTIVE', DOMAIN_STATUS_UNSPECIFIED = 'DOMAIN_STATUS_UNSPECIFIED', FAILED_CAA_CHECKING = 'FAILED_CAA_CHECKING', FAILED_CAA_FORBIDDEN = 'FAILED_CAA_FORBIDDEN', FAILED_NOT_VISIBLE = 'FAILED_NOT_VISIBLE', FAILED_RATE_LIMITED = 'FAILED_RATE_LIMITED', PROVISIONING = 'PROVISIONING' }

	export enum SslCertificateManagedSslCertificateStatus { ACTIVE = 'ACTIVE', MANAGED_CERTIFICATE_STATUS_UNSPECIFIED = 'MANAGED_CERTIFICATE_STATUS_UNSPECIFIED', PROVISIONING = 'PROVISIONING', PROVISIONING_FAILED = 'PROVISIONING_FAILED', PROVISIONING_FAILED_PERMANENTLY = 'PROVISIONING_FAILED_PERMANENTLY', RENEWAL_FAILED = 'RENEWAL_FAILED' }


	/** Configuration and status of a self-managed SSL certificate. */
	export interface SslCertificateSelfManagedSslCertificate {

		/** A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert. */
		certificate?: string | null;

		/** A write-only private key in PEM format. Only insert requests will include this field. */
		privateKey?: string | null;
	}

	/** Configuration and status of a self-managed SSL certificate. */
	export interface SslCertificateSelfManagedSslCertificateFormProperties {

		/** A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert. */
		certificate: FormControl<string | null | undefined>,

		/** A write-only private key in PEM format. Only insert requests will include this field. */
		privateKey: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateSelfManagedSslCertificateFormGroup() {
		return new FormGroup<SslCertificateSelfManagedSslCertificateFormProperties>({
			certificate: new FormControl<string | null | undefined>(undefined),
			privateKey: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SslCertificateType { MANAGED = 'MANAGED', SELF_MANAGED = 'SELF_MANAGED', TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED' }

	export interface SslCertificateAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslCertificatesScopedList resources. */
		items?: {[id: string]: SslCertificatesScopedList };

		/** [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: SslCertificateAggregatedListWarning;
	}
	export interface SslCertificateAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of SslCertificatesScopedList resources. */
		items: FormControl<{[id: string]: SslCertificatesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateAggregatedListFormGroup() {
		return new FormGroup<SslCertificateAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: SslCertificatesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslCertificatesScopedList {

		/** List of SslCertificates contained in this scope. */
		sslCertificates?: Array<SslCertificate>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: SslCertificatesScopedListWarning;
	}
	export interface SslCertificatesScopedListFormProperties {
	}
	export function CreateSslCertificatesScopedListFormGroup() {
		return new FormGroup<SslCertificatesScopedListFormProperties>({
		});

	}

	export interface SslCertificatesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslCertificatesScopedListWarningData?: Array<SslCertificatesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslCertificatesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificatesScopedListWarningFormGroup() {
		return new FormGroup<SslCertificatesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslCertificatesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslCertificatesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificatesScopedListWarningDataFormGroup() {
		return new FormGroup<SslCertificatesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslCertificateAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslCertificateAggregatedListWarningData?: Array<SslCertificateAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslCertificateAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateAggregatedListWarningFormGroup() {
		return new FormGroup<SslCertificateAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslCertificateAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslCertificateAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateAggregatedListWarningDataFormGroup() {
		return new FormGroup<SslCertificateAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of SslCertificate resources. */
	export interface SslCertificateList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslCertificate resources. */
		items?: Array<SslCertificate>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SslCertificateListWarning;
	}

	/** Contains a list of SslCertificate resources. */
	export interface SslCertificateListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateListFormGroup() {
		return new FormGroup<SslCertificateListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslCertificateListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslCertificateListWarningData?: Array<SslCertificateListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslCertificateListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateListWarningFormGroup() {
		return new FormGroup<SslCertificateListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslCertificateListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslCertificateListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslCertificateListWarningDataFormGroup() {
		return new FormGroup<SslCertificateListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesAggregatedList {
		etag?: string | null;

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslPoliciesScopedList resources. */
		items?: {[id: string]: SslPoliciesScopedList };

		/** [Output Only] Type of resource. Always compute#sslPolicyAggregatedList for lists of SSL Policies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: SslPoliciesAggregatedListWarning;
	}
	export interface SslPoliciesAggregatedListFormProperties {
		etag: FormControl<string | null | undefined>,

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of SslPoliciesScopedList resources. */
		items: FormControl<{[id: string]: SslPoliciesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#sslPolicyAggregatedList for lists of SSL Policies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesAggregatedListFormGroup() {
		return new FormGroup<SslPoliciesAggregatedListFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: SslPoliciesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesScopedList {

		/** A list of SslPolicies contained in this scope. */
		sslPolicies?: Array<SslPolicy>;

		/** Informational warning which replaces the list of SSL policies when the list is empty. */
		warning?: SslPoliciesScopedListWarning;
	}
	export interface SslPoliciesScopedListFormProperties {
	}
	export function CreateSslPoliciesScopedListFormGroup() {
		return new FormGroup<SslPoliciesScopedListFormProperties>({
		});

	}


	/** Represents an SSL Policy resource. Use SSL policies to control SSL features, such as versions and cipher suites, that are offered by Application Load Balancers and proxy Network Load Balancers. For more information, read SSL policies overview. */
	export interface SslPolicy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM. */
		customFeatures?: Array<string>;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The list of features enabled in the SSL policy. */
		enabledFeatures?: Array<string>;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies. */
		kind?: string | null;

		/** The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2. */
		minTlsVersion?: SslPolicyMinTlsVersion | null;

		/** Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field. */
		profile?: SslPolicyProfile | null;

		/** [Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages. */
		SslPolicyWarnings?: Array<SslPolicyWarnings>;
	}

	/** Represents an SSL Policy resource. Use SSL policies to control SSL features, such as versions and cipher suites, that are offered by Application Load Balancers and proxy Network Load Balancers. For more information, read SSL policies overview. */
	export interface SslPolicyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies. */
		kind: FormControl<string | null | undefined>,

		/** The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2. */
		minTlsVersion: FormControl<SslPolicyMinTlsVersion | null | undefined>,

		/** Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field. */
		profile: FormControl<SslPolicyProfile | null | undefined>,

		/** [Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSslPolicyFormGroup() {
		return new FormGroup<SslPolicyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			minTlsVersion: new FormControl<SslPolicyMinTlsVersion | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			profile: new FormControl<SslPolicyProfile | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SslPolicyMinTlsVersion { TLS_1_0 = 'TLS_1_0', TLS_1_1 = 'TLS_1_1', TLS_1_2 = 'TLS_1_2' }

	export enum SslPolicyProfile { COMPATIBLE = 'COMPATIBLE', CUSTOM = 'CUSTOM', MODERN = 'MODERN', RESTRICTED = 'RESTRICTED' }

	export interface SslPolicyWarnings {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslPolicyWarningsData?: Array<SslPolicyWarningsData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslPolicyWarningsFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslPolicyWarningsFormGroup() {
		return new FormGroup<SslPolicyWarningsFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPolicyWarningsData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslPolicyWarningsDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslPolicyWarningsDataFormGroup() {
		return new FormGroup<SslPolicyWarningsDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslPoliciesScopedListWarningData?: Array<SslPoliciesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslPoliciesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesScopedListWarningFormGroup() {
		return new FormGroup<SslPoliciesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslPoliciesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesScopedListWarningDataFormGroup() {
		return new FormGroup<SslPoliciesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslPoliciesAggregatedListWarningData?: Array<SslPoliciesAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslPoliciesAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesAggregatedListWarningFormGroup() {
		return new FormGroup<SslPoliciesAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslPoliciesAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesAggregatedListWarningDataFormGroup() {
		return new FormGroup<SslPoliciesAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SslPolicy resources. */
		items?: Array<SslPolicy>;

		/** [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SslPoliciesListWarning;
	}
	export interface SslPoliciesListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesListFormGroup() {
		return new FormGroup<SslPoliciesListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SslPoliciesListWarningData?: Array<SslPoliciesListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SslPoliciesListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesListWarningFormGroup() {
		return new FormGroup<SslPoliciesListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SslPoliciesListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSslPoliciesListWarningDataFormGroup() {
		return new FormGroup<SslPoliciesListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SslPoliciesListAvailableFeaturesResponse {
		features?: Array<string>;
	}
	export interface SslPoliciesListAvailableFeaturesResponseFormProperties {
	}
	export function CreateSslPoliciesListAvailableFeaturesResponseFormGroup() {
		return new FormGroup<SslPoliciesListAvailableFeaturesResponseFormProperties>({
		});

	}

	export interface SslPolicyReference {

		/** URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource. */
		sslPolicy?: string | null;
	}
	export interface SslPolicyReferenceFormProperties {

		/** URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource. */
		sslPolicy: FormControl<string | null | undefined>,
	}
	export function CreateSslPolicyReferenceFormGroup() {
		return new FormGroup<SslPolicyReferenceFormProperties>({
			sslPolicy: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Subnetwork resource. A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read Virtual Private Cloud (VPC) Network. */
	export interface Subnetwork {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time. */
		description?: string | null;

		/** Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn't supported if the subnet purpose field is set to REGIONAL_MANAGED_PROXY. */
		enableFlowLogs?: boolean | null;

		/** The external IPv6 address range that is owned by this subnetwork. */
		externalIpv6Prefix?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork. */
		fingerprint?: string | null;

		/** [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork. */
		gatewayAddress?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] The internal IPv6 address range that is assigned to this subnetwork. */
		internalIpv6Prefix?: string | null;

		/** The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange. */
		ipCidrRange?: string | null;

		/** The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. */
		ipv6AccessType?: NetworkInterfaceIpv6AccessType | null;

		/** [Output Only] This field is for internal use. */
		ipv6CidrRange?: string | null;

		/** [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources. */
		kind?: string | null;

		/** The available logging options for this subnetwork. */
		logConfig?: SubnetworkLogConfig;

		/** The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time. */
		network?: string | null;

		/** Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess. */
		privateIpGoogleAccess?: boolean | null;

		/** This field is for internal use. This field can be both set at resource creation time and updated using patch. */
		privateIpv6GoogleAccess?: SubnetworkPrivateIpv6GoogleAccess | null;

		/** The purpose of the resource. This field can be either PRIVATE, GLOBAL_MANAGED_PROXY, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. Subnets with purpose set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY are user-created subnetworks that are reserved for Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. */
		purpose?: SubnetworkPurpose | null;

		/** URL of the region where the Subnetwork resides. This field can be set only at resource creation time. */
		region?: string | null;

		/** The URL of the reserved internal range. */
		reservedInternalRange?: string | null;

		/** The role of subnetwork. Currently, this field is only used when purpose is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request. */
		role?: SubnetworkRole | null;

		/** An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request. */
		secondaryIpRanges?: Array<SubnetworkSecondaryRange>;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch. */
		stackType?: NetworkInterfaceStackType | null;

		/** [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY */
		state?: SubnetworkState | null;
	}

	/** Represents a Subnetwork resource. A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read Virtual Private Cloud (VPC) Network. */
	export interface SubnetworkFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time. */
		description: FormControl<string | null | undefined>,

		/** Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn't supported if the subnet purpose field is set to REGIONAL_MANAGED_PROXY. */
		enableFlowLogs: FormControl<boolean | null | undefined>,

		/** The external IPv6 address range that is owned by this subnetwork. */
		externalIpv6Prefix: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork. */
		gatewayAddress: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] The internal IPv6 address range that is assigned to this subnetwork. */
		internalIpv6Prefix: FormControl<string | null | undefined>,

		/** The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. */
		ipv6AccessType: FormControl<NetworkInterfaceIpv6AccessType | null | undefined>,

		/** [Output Only] This field is for internal use. */
		ipv6CidrRange: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources. */
		kind: FormControl<string | null | undefined>,

		/** The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time. */
		network: FormControl<string | null | undefined>,

		/** Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess. */
		privateIpGoogleAccess: FormControl<boolean | null | undefined>,

		/** This field is for internal use. This field can be both set at resource creation time and updated using patch. */
		privateIpv6GoogleAccess: FormControl<SubnetworkPrivateIpv6GoogleAccess | null | undefined>,

		/** The purpose of the resource. This field can be either PRIVATE, GLOBAL_MANAGED_PROXY, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. Subnets with purpose set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY are user-created subnetworks that are reserved for Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. */
		purpose: FormControl<SubnetworkPurpose | null | undefined>,

		/** URL of the region where the Subnetwork resides. This field can be set only at resource creation time. */
		region: FormControl<string | null | undefined>,

		/** The URL of the reserved internal range. */
		reservedInternalRange: FormControl<string | null | undefined>,

		/** The role of subnetwork. Currently, this field is only used when purpose is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request. */
		role: FormControl<SubnetworkRole | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch. */
		stackType: FormControl<NetworkInterfaceStackType | null | undefined>,

		/** [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY */
		state: FormControl<SubnetworkState | null | undefined>,
	}
	export function CreateSubnetworkFormGroup() {
		return new FormGroup<SubnetworkFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			enableFlowLogs: new FormControl<boolean | null | undefined>(undefined),
			externalIpv6Prefix: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			gatewayAddress: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			internalIpv6Prefix: new FormControl<string | null | undefined>(undefined),
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			ipv6AccessType: new FormControl<NetworkInterfaceIpv6AccessType | null | undefined>(undefined),
			ipv6CidrRange: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			privateIpGoogleAccess: new FormControl<boolean | null | undefined>(undefined),
			privateIpv6GoogleAccess: new FormControl<SubnetworkPrivateIpv6GoogleAccess | null | undefined>(undefined),
			purpose: new FormControl<SubnetworkPurpose | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			reservedInternalRange: new FormControl<string | null | undefined>(undefined),
			role: new FormControl<SubnetworkRole | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			stackType: new FormControl<NetworkInterfaceStackType | null | undefined>(undefined),
			state: new FormControl<SubnetworkState | null | undefined>(undefined),
		});

	}


	/** The available logging options for this subnetwork. */
	export interface SubnetworkLogConfig {

		/** Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection. */
		aggregationInterval?: SubnetworkLogConfigAggregationInterval | null;

		/** Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. Flow logging isn't supported if the subnet purpose field is set to REGIONAL_MANAGED_PROXY. */
		enable?: boolean | null;

		/** Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging. */
		filterExpr?: string | null;

		/**
		 * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
		 * Type: float
		 */
		flowSampling?: number | null;

		/** Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA. */
		metadata?: SubnetworkLogConfigMetadata | null;

		/** Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA. */
		metadataFields?: Array<string>;
	}

	/** The available logging options for this subnetwork. */
	export interface SubnetworkLogConfigFormProperties {

		/** Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection. */
		aggregationInterval: FormControl<SubnetworkLogConfigAggregationInterval | null | undefined>,

		/** Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. Flow logging isn't supported if the subnet purpose field is set to REGIONAL_MANAGED_PROXY. */
		enable: FormControl<boolean | null | undefined>,

		/** Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging. */
		filterExpr: FormControl<string | null | undefined>,

		/**
		 * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
		 * Type: float
		 */
		flowSampling: FormControl<number | null | undefined>,

		/** Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA. */
		metadata: FormControl<SubnetworkLogConfigMetadata | null | undefined>,
	}
	export function CreateSubnetworkLogConfigFormGroup() {
		return new FormGroup<SubnetworkLogConfigFormProperties>({
			aggregationInterval: new FormControl<SubnetworkLogConfigAggregationInterval | null | undefined>(undefined),
			enable: new FormControl<boolean | null | undefined>(undefined),
			filterExpr: new FormControl<string | null | undefined>(undefined),
			flowSampling: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<SubnetworkLogConfigMetadata | null | undefined>(undefined),
		});

	}

	export enum SubnetworkLogConfigAggregationInterval { INTERVAL_10_MIN = 'INTERVAL_10_MIN', INTERVAL_15_MIN = 'INTERVAL_15_MIN', INTERVAL_1_MIN = 'INTERVAL_1_MIN', INTERVAL_30_SEC = 'INTERVAL_30_SEC', INTERVAL_5_MIN = 'INTERVAL_5_MIN', INTERVAL_5_SEC = 'INTERVAL_5_SEC' }

	export enum SubnetworkLogConfigMetadata { CUSTOM_METADATA = 'CUSTOM_METADATA', EXCLUDE_ALL_METADATA = 'EXCLUDE_ALL_METADATA', INCLUDE_ALL_METADATA = 'INCLUDE_ALL_METADATA' }

	export enum SubnetworkPrivateIpv6GoogleAccess { DISABLE_GOOGLE_ACCESS = 'DISABLE_GOOGLE_ACCESS', ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = 'ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE', ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = 'ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE' }

	export enum SubnetworkPurpose { GLOBAL_MANAGED_PROXY = 'GLOBAL_MANAGED_PROXY', INTERNAL_HTTPS_LOAD_BALANCER = 'INTERNAL_HTTPS_LOAD_BALANCER', PRIVATE = 'PRIVATE', PRIVATE_NAT = 'PRIVATE_NAT', PRIVATE_RFC_1918 = 'PRIVATE_RFC_1918', PRIVATE_SERVICE_CONNECT = 'PRIVATE_SERVICE_CONNECT', REGIONAL_MANAGED_PROXY = 'REGIONAL_MANAGED_PROXY' }

	export enum SubnetworkRole { ACTIVE = 'ACTIVE', BACKUP = 'BACKUP' }


	/** Represents a secondary IP range of a subnetwork. */
	export interface SubnetworkSecondaryRange {

		/** The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list. */
		ipCidrRange?: string | null;

		/** The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork. */
		rangeName?: string | null;

		/** The URL of the reserved internal range. */
		reservedInternalRange?: string | null;
	}

	/** Represents a secondary IP range of a subnetwork. */
	export interface SubnetworkSecondaryRangeFormProperties {

		/** The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork. */
		rangeName: FormControl<string | null | undefined>,

		/** The URL of the reserved internal range. */
		reservedInternalRange: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkSecondaryRangeFormGroup() {
		return new FormGroup<SubnetworkSecondaryRangeFormProperties>({
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			rangeName: new FormControl<string | null | undefined>(undefined),
			reservedInternalRange: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SubnetworkState { DRAINING = 'DRAINING', READY = 'READY' }

	export interface SubnetworkAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of SubnetworksScopedList resources. */
		items?: {[id: string]: SubnetworksScopedList };

		/** [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: SubnetworkAggregatedListWarning;
	}
	export interface SubnetworkAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of SubnetworksScopedList resources. */
		items: FormControl<{[id: string]: SubnetworksScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkAggregatedListFormGroup() {
		return new FormGroup<SubnetworkAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: SubnetworksScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworksScopedList {

		/** A list of subnetworks contained in this scope. */
		subnetworks?: Array<Subnetwork>;

		/** An informational warning that appears when the list of addresses is empty. */
		warning?: SubnetworksScopedListWarning;
	}
	export interface SubnetworksScopedListFormProperties {
	}
	export function CreateSubnetworksScopedListFormGroup() {
		return new FormGroup<SubnetworksScopedListFormProperties>({
		});

	}

	export interface SubnetworksScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SubnetworksScopedListWarningData?: Array<SubnetworksScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SubnetworksScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworksScopedListWarningFormGroup() {
		return new FormGroup<SubnetworksScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworksScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SubnetworksScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworksScopedListWarningDataFormGroup() {
		return new FormGroup<SubnetworksScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworkAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SubnetworkAggregatedListWarningData?: Array<SubnetworkAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SubnetworkAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkAggregatedListWarningFormGroup() {
		return new FormGroup<SubnetworkAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworkAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SubnetworkAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkAggregatedListWarningDataFormGroup() {
		return new FormGroup<SubnetworkAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of Subnetwork resources. */
	export interface SubnetworkList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Subnetwork resources. */
		items?: Array<Subnetwork>;

		/** [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: SubnetworkListWarning;
	}

	/** Contains a list of Subnetwork resources. */
	export interface SubnetworkListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkListFormGroup() {
		return new FormGroup<SubnetworkListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworkListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		SubnetworkListWarningData?: Array<SubnetworkListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface SubnetworkListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkListWarningFormGroup() {
		return new FormGroup<SubnetworkListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworkListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface SubnetworkListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworkListWarningDataFormGroup() {
		return new FormGroup<SubnetworkListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworksExpandIpCidrRangeRequest {

		/** The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update. */
		ipCidrRange?: string | null;
	}
	export interface SubnetworksExpandIpCidrRangeRequestFormProperties {

		/** The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update. */
		ipCidrRange: FormControl<string | null | undefined>,
	}
	export function CreateSubnetworksExpandIpCidrRangeRequestFormGroup() {
		return new FormGroup<SubnetworksExpandIpCidrRangeRequestFormProperties>({
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SubnetworksSetPrivateIpGoogleAccessRequest {
		privateIpGoogleAccess?: boolean | null;
	}
	export interface SubnetworksSetPrivateIpGoogleAccessRequestFormProperties {
		privateIpGoogleAccess: FormControl<boolean | null | undefined>,
	}
	export function CreateSubnetworksSetPrivateIpGoogleAccessRequestFormGroup() {
		return new FormGroup<SubnetworksSetPrivateIpGoogleAccessRequestFormProperties>({
			privateIpGoogleAccess: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents a Target gRPC Proxy resource. A target gRPC proxy is a component of load balancers intended for load balancing gRPC traffic. Only global forwarding rules with load balancing scheme INTERNAL_SELF_MANAGED can reference a target gRPC proxy. The target gRPC Proxy references a URL map that specifies how traffic is routed to gRPC backend services. */
	export interface TargetGrpcProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy. */
		fingerprint?: string | null;

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Server-defined URL with id for the resource. */
		selfLinkWithId?: string | null;

		/** URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC. */
		urlMap?: string | null;

		/** If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is connecting to */
		validateForProxyless?: boolean | null;
	}

	/** Represents a Target gRPC Proxy resource. A target gRPC proxy is a component of load balancers intended for load balancing gRPC traffic. Only global forwarding rules with load balancing scheme INTERNAL_SELF_MANAGED can reference a target gRPC proxy. The target gRPC Proxy references a URL map that specifies how traffic is routed to gRPC backend services. */
	export interface TargetGrpcProxyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy. */
		fingerprint: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL with id for the resource. */
		selfLinkWithId: FormControl<string | null | undefined>,

		/** URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC. */
		urlMap: FormControl<string | null | undefined>,

		/** If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is connecting to */
		validateForProxyless: FormControl<boolean | null | undefined>,
	}
	export function CreateTargetGrpcProxyFormGroup() {
		return new FormGroup<TargetGrpcProxyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			selfLink: new FormControl<string | null | undefined>(undefined),
			selfLinkWithId: new FormControl<string | null | undefined>(undefined),
			urlMap: new FormControl<string | null | undefined>(undefined),
			validateForProxyless: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface TargetGrpcProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetGrpcProxy resources. */
		items?: Array<TargetGrpcProxy>;

		/** [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetGrpcProxyListWarning;
	}
	export interface TargetGrpcProxyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetGrpcProxyListFormGroup() {
		return new FormGroup<TargetGrpcProxyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetGrpcProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetGrpcProxyListWarningData?: Array<TargetGrpcProxyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetGrpcProxyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetGrpcProxyListWarningFormGroup() {
		return new FormGroup<TargetGrpcProxyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetGrpcProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetGrpcProxyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetGrpcProxyListWarningDataFormGroup() {
		return new FormGroup<TargetGrpcProxyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpProxiesScopedList {

		/** A list of TargetHttpProxies contained in this scope. */
		targetHttpProxies?: Array<TargetHttpProxy>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: TargetHttpProxiesScopedListWarning;
	}
	export interface TargetHttpProxiesScopedListFormProperties {
	}
	export function CreateTargetHttpProxiesScopedListFormGroup() {
		return new FormGroup<TargetHttpProxiesScopedListFormProperties>({
		});

	}


	/** Represents a Target HTTP Proxy resource. Google Compute Engine has two Target HTTP Proxy resources: * [Global](/compute/docs/reference/rest/v1/targetHttpProxies) * [Regional](/compute/docs/reference/rest/v1/regionTargetHttpProxies) A target HTTP proxy is a component of Google Cloud HTTP load balancers. * targetHttpProxies are used by global external Application Load Balancers, classic Application Load Balancers, cross-region internal Application Load Balancers, and Traffic Director. * regionTargetHttpProxies are used by regional internal Application Load Balancers and regional external Application Load Balancers. Forwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts. */
	export interface TargetHttpProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy. */
		fingerprint?: string | null;

		/**
		 * Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		httpKeepAliveTimeoutSec?: number | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false. */
		proxyBind?: boolean | null;

		/** [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URL to the UrlMap resource that defines the mapping from URL to the BackendService. */
		urlMap?: string | null;
	}

	/** Represents a Target HTTP Proxy resource. Google Compute Engine has two Target HTTP Proxy resources: * [Global](/compute/docs/reference/rest/v1/targetHttpProxies) * [Regional](/compute/docs/reference/rest/v1/regionTargetHttpProxies) A target HTTP proxy is a component of Google Cloud HTTP load balancers. * targetHttpProxies are used by global external Application Load Balancers, classic Application Load Balancers, cross-region internal Application Load Balancers, and Traffic Director. * regionTargetHttpProxies are used by regional internal Application Load Balancers and regional external Application Load Balancers. Forwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts. */
	export interface TargetHttpProxyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy. */
		fingerprint: FormControl<string | null | undefined>,

		/**
		 * Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		httpKeepAliveTimeoutSec: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false. */
		proxyBind: FormControl<boolean | null | undefined>,

		/** [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** URL to the UrlMap resource that defines the mapping from URL to the BackendService. */
		urlMap: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxyFormGroup() {
		return new FormGroup<TargetHttpProxyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			httpKeepAliveTimeoutSec: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			proxyBind: new FormControl<boolean | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			urlMap: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpProxiesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetHttpProxiesScopedListWarningData?: Array<TargetHttpProxiesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetHttpProxiesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxiesScopedListWarningFormGroup() {
		return new FormGroup<TargetHttpProxiesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpProxiesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetHttpProxiesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxiesScopedListWarningDataFormGroup() {
		return new FormGroup<TargetHttpProxiesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpProxyAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpProxiesScopedList resources. */
		items?: {[id: string]: TargetHttpProxiesScopedList };

		/** [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;
	}
	export interface TargetHttpProxyAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of TargetHttpProxiesScopedList resources. */
		items: FormControl<{[id: string]: TargetHttpProxiesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxyAggregatedListFormGroup() {
		return new FormGroup<TargetHttpProxyAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: TargetHttpProxiesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of TargetHttpProxy resources. */
	export interface TargetHttpProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpProxy resources. */
		items?: Array<TargetHttpProxy>;

		/** Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetHttpProxyListWarning;
	}

	/** A list of TargetHttpProxy resources. */
	export interface TargetHttpProxyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxyListFormGroup() {
		return new FormGroup<TargetHttpProxyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetHttpProxyListWarningData?: Array<TargetHttpProxyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetHttpProxyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxyListWarningFormGroup() {
		return new FormGroup<TargetHttpProxyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetHttpProxyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpProxyListWarningDataFormGroup() {
		return new FormGroup<TargetHttpProxyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxiesScopedList {

		/** A list of TargetHttpsProxies contained in this scope. */
		targetHttpsProxies?: Array<TargetHttpsProxy>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: TargetHttpsProxiesScopedListWarning;
	}
	export interface TargetHttpsProxiesScopedListFormProperties {
	}
	export function CreateTargetHttpsProxiesScopedListFormGroup() {
		return new FormGroup<TargetHttpsProxiesScopedListFormProperties>({
		});

	}


	/** Represents a Target HTTPS Proxy resource. Google Compute Engine has two Target HTTPS Proxy resources: * [Global](/compute/docs/reference/rest/v1/targetHttpsProxies) * [Regional](/compute/docs/reference/rest/v1/regionTargetHttpsProxies) A target HTTPS proxy is a component of GCP HTTPS load balancers. * targetHttpProxies are used by global external Application Load Balancers, classic Application Load Balancers, cross-region internal Application Load Balancers, and Traffic Director. * regionTargetHttpProxies are used by regional internal Application Load Balancers and regional external Application Load Balancers. Forwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts. */
	export interface TargetHttpsProxy {

		/** Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be restricted by an authorization policy. Refer to the AuthorizationPolicy resource for additional details. authorizationPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. Note: This field currently has no impact. */
		authorizationPolicy?: string | null;

		/** URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy. */
		fingerprint?: string | null;

		/**
		 * Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		httpKeepAliveTimeoutSec?: number | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false. */
		proxyBind?: boolean | null;

		/** Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied. */
		quicOverride?: TargetHttpsProxyQuicOverride | null;

		/** [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED. For details which ServerTlsPolicy resources are accepted with INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED loadBalancingScheme consult ServerTlsPolicy documentation. If left blank, communications are not encrypted. */
		serverTlsPolicy?: string | null;

		/** URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED. */
		sslCertificates?: Array<string>;

		/** URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured. */
		sslPolicy?: string | null;

		/** A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map: - https://www.googleapis.compute/v1/projects/project/global/urlMaps/ url-map - projects/project/global/urlMaps/url-map - global/urlMaps/url-map */
		urlMap?: string | null;
	}

	/** Represents a Target HTTPS Proxy resource. Google Compute Engine has two Target HTTPS Proxy resources: * [Global](/compute/docs/reference/rest/v1/targetHttpsProxies) * [Regional](/compute/docs/reference/rest/v1/regionTargetHttpsProxies) A target HTTPS proxy is a component of GCP HTTPS load balancers. * targetHttpProxies are used by global external Application Load Balancers, classic Application Load Balancers, cross-region internal Application Load Balancers, and Traffic Director. * regionTargetHttpProxies are used by regional internal Application Load Balancers and regional external Application Load Balancers. Forwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts. */
	export interface TargetHttpsProxyFormProperties {

		/** Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be restricted by an authorization policy. Refer to the AuthorizationPolicy resource for additional details. authorizationPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. Note: This field currently has no impact. */
		authorizationPolicy: FormControl<string | null | undefined>,

		/** URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy. */
		fingerprint: FormControl<string | null | undefined>,

		/**
		 * Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		httpKeepAliveTimeoutSec: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false. */
		proxyBind: FormControl<boolean | null | undefined>,

		/** Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied. */
		quicOverride: FormControl<TargetHttpsProxyQuicOverride | null | undefined>,

		/** [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED. For details which ServerTlsPolicy resources are accepted with INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED loadBalancingScheme consult ServerTlsPolicy documentation. If left blank, communications are not encrypted. */
		serverTlsPolicy: FormControl<string | null | undefined>,

		/** URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured. */
		sslPolicy: FormControl<string | null | undefined>,

		/** A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map: - https://www.googleapis.compute/v1/projects/project/global/urlMaps/ url-map - projects/project/global/urlMaps/url-map - global/urlMaps/url-map */
		urlMap: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyFormGroup() {
		return new FormGroup<TargetHttpsProxyFormProperties>({
			authorizationPolicy: new FormControl<string | null | undefined>(undefined),
			certificateMap: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			httpKeepAliveTimeoutSec: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			proxyBind: new FormControl<boolean | null | undefined>(undefined),
			quicOverride: new FormControl<TargetHttpsProxyQuicOverride | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			serverTlsPolicy: new FormControl<string | null | undefined>(undefined),
			sslPolicy: new FormControl<string | null | undefined>(undefined),
			urlMap: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TargetHttpsProxyQuicOverride { DISABLE = 'DISABLE', ENABLE = 'ENABLE', NONE = 'NONE' }

	export interface TargetHttpsProxiesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetHttpsProxiesScopedListWarningData?: Array<TargetHttpsProxiesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetHttpsProxiesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxiesScopedListWarningFormGroup() {
		return new FormGroup<TargetHttpsProxiesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxiesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetHttpsProxiesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxiesScopedListWarningDataFormGroup() {
		return new FormGroup<TargetHttpsProxiesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxiesSetCertificateMapRequest {

		/** URL of the Certificate Map to associate with this TargetHttpsProxy. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap?: string | null;
	}
	export interface TargetHttpsProxiesSetCertificateMapRequestFormProperties {

		/** URL of the Certificate Map to associate with this TargetHttpsProxy. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxiesSetCertificateMapRequestFormGroup() {
		return new FormGroup<TargetHttpsProxiesSetCertificateMapRequestFormProperties>({
			certificateMap: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxiesSetQuicOverrideRequest {

		/** QUIC policy for the TargetHttpsProxy resource. */
		quicOverride?: TargetHttpsProxyQuicOverride | null;
	}
	export interface TargetHttpsProxiesSetQuicOverrideRequestFormProperties {

		/** QUIC policy for the TargetHttpsProxy resource. */
		quicOverride: FormControl<TargetHttpsProxyQuicOverride | null | undefined>,
	}
	export function CreateTargetHttpsProxiesSetQuicOverrideRequestFormGroup() {
		return new FormGroup<TargetHttpsProxiesSetQuicOverrideRequestFormProperties>({
			quicOverride: new FormControl<TargetHttpsProxyQuicOverride | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxiesSetSslCertificatesRequest {

		/** New set of SslCertificate resources to associate with this TargetHttpsProxy resource. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. */
		sslCertificates?: Array<string>;
	}
	export interface TargetHttpsProxiesSetSslCertificatesRequestFormProperties {
	}
	export function CreateTargetHttpsProxiesSetSslCertificatesRequestFormGroup() {
		return new FormGroup<TargetHttpsProxiesSetSslCertificatesRequestFormProperties>({
		});

	}

	export interface TargetHttpsProxyAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpsProxiesScopedList resources. */
		items?: {[id: string]: TargetHttpsProxiesScopedList };

		/** [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: TargetHttpsProxyAggregatedListWarning;
	}
	export interface TargetHttpsProxyAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of TargetHttpsProxiesScopedList resources. */
		items: FormControl<{[id: string]: TargetHttpsProxiesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyAggregatedListFormGroup() {
		return new FormGroup<TargetHttpsProxyAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: TargetHttpsProxiesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxyAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetHttpsProxyAggregatedListWarningData?: Array<TargetHttpsProxyAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetHttpsProxyAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyAggregatedListWarningFormGroup() {
		return new FormGroup<TargetHttpsProxyAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxyAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetHttpsProxyAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyAggregatedListWarningDataFormGroup() {
		return new FormGroup<TargetHttpsProxyAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of TargetHttpsProxy resources. */
	export interface TargetHttpsProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetHttpsProxy resources. */
		items?: Array<TargetHttpsProxy>;

		/** Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetHttpsProxyListWarning;
	}

	/** Contains a list of TargetHttpsProxy resources. */
	export interface TargetHttpsProxyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyListFormGroup() {
		return new FormGroup<TargetHttpsProxyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetHttpsProxyListWarningData?: Array<TargetHttpsProxyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetHttpsProxyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyListWarningFormGroup() {
		return new FormGroup<TargetHttpsProxyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetHttpsProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetHttpsProxyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetHttpsProxyListWarningDataFormGroup() {
		return new FormGroup<TargetHttpsProxyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Target Instance resource. You can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances. */
	export interface TargetInstance {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance */
		instance?: string | null;

		/** [Output Only] The type of the resource. Always compute#targetInstance for target instances. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance. */
		natPolicy?: TargetInstanceNatPolicy | null;

		/** The URL of the network this target instance uses to forward traffic. If not specified, the traffic will be forwarded to the network that the default network interface belongs to. */
		network?: string | null;

		/** [Output Only] The resource URL for the security policy associated with this target instance. */
		securityPolicy?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone?: string | null;
	}

	/** Represents a Target Instance resource. You can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances. */
	export interface TargetInstanceFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance */
		instance: FormControl<string | null | undefined>,

		/** [Output Only] The type of the resource. Always compute#targetInstance for target instances. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance. */
		natPolicy: FormControl<TargetInstanceNatPolicy | null | undefined>,

		/** The URL of the network this target instance uses to forward traffic. If not specified, the traffic will be forwarded to the network that the default network interface belongs to. */
		network: FormControl<string | null | undefined>,

		/** [Output Only] The resource URL for the security policy associated with this target instance. */
		securityPolicy: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceFormGroup() {
		return new FormGroup<TargetInstanceFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			instance: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			natPolicy: new FormControl<TargetInstanceNatPolicy | null | undefined>(undefined),
			network: new FormControl<string | null | undefined>(undefined),
			securityPolicy: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TargetInstanceNatPolicy { NO_NAT = 'NO_NAT' }

	export interface TargetInstanceAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetInstance resources. */
		items?: {[id: string]: TargetInstancesScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: TargetInstanceAggregatedListWarning;
	}
	export interface TargetInstanceAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of TargetInstance resources. */
		items: FormControl<{[id: string]: TargetInstancesScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceAggregatedListFormGroup() {
		return new FormGroup<TargetInstanceAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: TargetInstancesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetInstancesScopedList {

		/** A list of target instances contained in this scope. */
		targetInstances?: Array<TargetInstance>;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: TargetInstancesScopedListWarning;
	}
	export interface TargetInstancesScopedListFormProperties {
	}
	export function CreateTargetInstancesScopedListFormGroup() {
		return new FormGroup<TargetInstancesScopedListFormProperties>({
		});

	}

	export interface TargetInstancesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetInstancesScopedListWarningData?: Array<TargetInstancesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetInstancesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstancesScopedListWarningFormGroup() {
		return new FormGroup<TargetInstancesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetInstancesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetInstancesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstancesScopedListWarningDataFormGroup() {
		return new FormGroup<TargetInstancesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetInstanceAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetInstanceAggregatedListWarningData?: Array<TargetInstanceAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetInstanceAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceAggregatedListWarningFormGroup() {
		return new FormGroup<TargetInstanceAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetInstanceAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetInstanceAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceAggregatedListWarningDataFormGroup() {
		return new FormGroup<TargetInstanceAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of TargetInstance resources. */
	export interface TargetInstanceList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetInstance resources. */
		items?: Array<TargetInstance>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetInstanceListWarning;
	}

	/** Contains a list of TargetInstance resources. */
	export interface TargetInstanceListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceListFormGroup() {
		return new FormGroup<TargetInstanceListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetInstanceListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetInstanceListWarningData?: Array<TargetInstanceListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetInstanceListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceListWarningFormGroup() {
		return new FormGroup<TargetInstanceListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetInstanceListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetInstanceListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetInstanceListWarningDataFormGroup() {
		return new FormGroup<TargetInstanceListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Target Pool resource. Target pools are used with external passthrough Network Load Balancers. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools. */
	export interface TargetPool {

		/** The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1]. backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy. */
		backupPool?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/**
		 * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1]. If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
		 * Type: float
		 */
		failoverRatio?: number | null;

		/** The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. Only legacy HttpHealthChecks are supported. Only one health check may be specified. */
		healthChecks?: Array<string>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool. */
		instances?: Array<string>;

		/** [Output Only] Type of the resource. Always compute#targetPool for target pools. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** [Output Only] URL of the region where the target pool resides. */
		region?: string | null;

		/** [Output Only] The resource URL for the security policy associated with this target pool. */
		securityPolicy?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy. */
		sessionAffinity?: BackendServiceSessionAffinity | null;
	}

	/** Represents a Target Pool resource. Target pools are used with external passthrough Network Load Balancers. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools. */
	export interface TargetPoolFormProperties {

		/** The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1]. backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy. */
		backupPool: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/**
		 * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1]. If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
		 * Type: float
		 */
		failoverRatio: FormControl<number | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#targetPool for target pools. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the target pool resides. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] The resource URL for the security policy associated with this target pool. */
		securityPolicy: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy. */
		sessionAffinity: FormControl<BackendServiceSessionAffinity | null | undefined>,
	}
	export function CreateTargetPoolFormGroup() {
		return new FormGroup<TargetPoolFormProperties>({
			backupPool: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			failoverRatio: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			region: new FormControl<string | null | undefined>(undefined),
			securityPolicy: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sessionAffinity: new FormControl<BackendServiceSessionAffinity | null | undefined>(undefined),
		});

	}

	export interface TargetPoolAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetPool resources. */
		items?: {[id: string]: TargetPoolsScopedList };

		/** [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: TargetPoolAggregatedListWarning;
	}
	export interface TargetPoolAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of TargetPool resources. */
		items: FormControl<{[id: string]: TargetPoolsScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolAggregatedListFormGroup() {
		return new FormGroup<TargetPoolAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: TargetPoolsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolsScopedList {

		/** A list of target pools contained in this scope. */
		targetPools?: Array<TargetPool>;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: TargetPoolsScopedListWarning;
	}
	export interface TargetPoolsScopedListFormProperties {
	}
	export function CreateTargetPoolsScopedListFormGroup() {
		return new FormGroup<TargetPoolsScopedListFormProperties>({
		});

	}

	export interface TargetPoolsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetPoolsScopedListWarningData?: Array<TargetPoolsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetPoolsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolsScopedListWarningFormGroup() {
		return new FormGroup<TargetPoolsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetPoolsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolsScopedListWarningDataFormGroup() {
		return new FormGroup<TargetPoolsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetPoolAggregatedListWarningData?: Array<TargetPoolAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetPoolAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolAggregatedListWarningFormGroup() {
		return new FormGroup<TargetPoolAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetPoolAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolAggregatedListWarningDataFormGroup() {
		return new FormGroup<TargetPoolAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolInstanceHealth {
		healthStatus?: Array<HealthStatus>;

		/** [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance. */
		kind?: string | null;
	}
	export interface TargetPoolInstanceHealthFormProperties {

		/** [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance. */
		kind: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolInstanceHealthFormGroup() {
		return new FormGroup<TargetPoolInstanceHealthFormProperties>({
			kind: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of TargetPool resources. */
	export interface TargetPoolList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetPool resources. */
		items?: Array<TargetPool>;

		/** [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetPoolListWarning;
	}

	/** Contains a list of TargetPool resources. */
	export interface TargetPoolListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolListFormGroup() {
		return new FormGroup<TargetPoolListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetPoolListWarningData?: Array<TargetPoolListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetPoolListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolListWarningFormGroup() {
		return new FormGroup<TargetPoolListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetPoolListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetPoolListWarningDataFormGroup() {
		return new FormGroup<TargetPoolListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetPoolsAddHealthCheckRequest {

		/** The HttpHealthCheck to add to the target pool. */
		healthChecks?: Array<HealthCheckReference>;
	}
	export interface TargetPoolsAddHealthCheckRequestFormProperties {
	}
	export function CreateTargetPoolsAddHealthCheckRequestFormGroup() {
		return new FormGroup<TargetPoolsAddHealthCheckRequestFormProperties>({
		});

	}

	export interface TargetPoolsAddInstanceRequest {

		/** A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs: - https://www.googleapis.com/compute/v1/projects/project-id/zones/zone /instances/instance-name - projects/project-id/zones/zone/instances/instance-name - zones/zone/instances/instance-name */
		instances?: Array<InstanceReference>;
	}
	export interface TargetPoolsAddInstanceRequestFormProperties {
	}
	export function CreateTargetPoolsAddInstanceRequestFormGroup() {
		return new FormGroup<TargetPoolsAddInstanceRequestFormProperties>({
		});

	}

	export interface TargetPoolsRemoveHealthCheckRequest {

		/** Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project /global/httpHealthChecks/health-check - projects/project/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check */
		healthChecks?: Array<HealthCheckReference>;
	}
	export interface TargetPoolsRemoveHealthCheckRequestFormProperties {
	}
	export function CreateTargetPoolsRemoveHealthCheckRequestFormGroup() {
		return new FormGroup<TargetPoolsRemoveHealthCheckRequestFormProperties>({
		});

	}

	export interface TargetPoolsRemoveInstanceRequest {

		/** URLs of the instances to be removed from target pool. */
		instances?: Array<InstanceReference>;
	}
	export interface TargetPoolsRemoveInstanceRequestFormProperties {
	}
	export function CreateTargetPoolsRemoveInstanceRequestFormGroup() {
		return new FormGroup<TargetPoolsRemoveInstanceRequestFormProperties>({
		});

	}

	export interface TargetReference {
		target?: string | null;
	}
	export interface TargetReferenceFormProperties {
		target: FormControl<string | null | undefined>,
	}
	export function CreateTargetReferenceFormGroup() {
		return new FormGroup<TargetReferenceFormProperties>({
			target: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetSslProxiesSetBackendServiceRequest {

		/** The URL of the new BackendService resource for the targetSslProxy. */
		service?: string | null;
	}
	export interface TargetSslProxiesSetBackendServiceRequestFormProperties {

		/** The URL of the new BackendService resource for the targetSslProxy. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateTargetSslProxiesSetBackendServiceRequestFormGroup() {
		return new FormGroup<TargetSslProxiesSetBackendServiceRequestFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetSslProxiesSetCertificateMapRequest {

		/** URL of the Certificate Map to associate with this TargetSslProxy. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap?: string | null;
	}
	export interface TargetSslProxiesSetCertificateMapRequestFormProperties {

		/** URL of the Certificate Map to associate with this TargetSslProxy. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap: FormControl<string | null | undefined>,
	}
	export function CreateTargetSslProxiesSetCertificateMapRequestFormGroup() {
		return new FormGroup<TargetSslProxiesSetCertificateMapRequestFormProperties>({
			certificateMap: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetSslProxiesSetProxyHeaderRequest {

		/** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;
	}
	export interface TargetSslProxiesSetProxyHeaderRequestFormProperties {

		/** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,
	}
	export function CreateTargetSslProxiesSetProxyHeaderRequestFormGroup() {
		return new FormGroup<TargetSslProxiesSetProxyHeaderRequestFormProperties>({
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
		});

	}

	export interface TargetSslProxiesSetSslCertificatesRequest {

		/** New set of URLs to SslCertificate resources to associate with this TargetSslProxy. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. */
		sslCertificates?: Array<string>;
	}
	export interface TargetSslProxiesSetSslCertificatesRequestFormProperties {
	}
	export function CreateTargetSslProxiesSetSslCertificatesRequestFormGroup() {
		return new FormGroup<TargetSslProxiesSetSslCertificatesRequestFormProperties>({
		});

	}


	/** Represents a Target SSL Proxy resource. A target SSL proxy is a component of a Proxy Network Load Balancer. The forwarding rule references the target SSL proxy, and the target proxy then references a backend service. For more information, read Proxy Network Load Balancer overview. */
	export interface TargetSslProxy {

		/** URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap?: string | null;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URL to the BackendService resource. */
		service?: string | null;

		/** URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED. */
		sslCertificates?: Array<string>;

		/** URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured. */
		sslPolicy?: string | null;
	}

	/** Represents a Target SSL Proxy resource. A target SSL proxy is a component of a Proxy Network Load Balancer. The forwarding rule references the target SSL proxy, and the target proxy then references a backend service. For more information, read Proxy Network Load Balancer overview. */
	export interface TargetSslProxyFormProperties {

		/** URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored. Accepted format is //certificatemanager.googleapis.com/projects/{project }/locations/{location}/certificateMaps/{resourceName}. */
		certificateMap: FormControl<string | null | undefined>,

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** URL to the BackendService resource. */
		service: FormControl<string | null | undefined>,

		/** URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured. */
		sslPolicy: FormControl<string | null | undefined>,
	}
	export function CreateTargetSslProxyFormGroup() {
		return new FormGroup<TargetSslProxyFormProperties>({
			certificateMap: new FormControl<string | null | undefined>(undefined),
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			service: new FormControl<string | null | undefined>(undefined),
			sslPolicy: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of TargetSslProxy resources. */
	export interface TargetSslProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetSslProxy resources. */
		items?: Array<TargetSslProxy>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetSslProxyListWarning;
	}

	/** Contains a list of TargetSslProxy resources. */
	export interface TargetSslProxyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetSslProxyListFormGroup() {
		return new FormGroup<TargetSslProxyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetSslProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetSslProxyListWarningData?: Array<TargetSslProxyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetSslProxyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetSslProxyListWarningFormGroup() {
		return new FormGroup<TargetSslProxyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetSslProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetSslProxyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetSslProxyListWarningDataFormGroup() {
		return new FormGroup<TargetSslProxyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxiesScopedList {

		/** A list of TargetTcpProxies contained in this scope. */
		targetTcpProxies?: Array<TargetTcpProxy>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: TargetTcpProxiesScopedListWarning;
	}
	export interface TargetTcpProxiesScopedListFormProperties {
	}
	export function CreateTargetTcpProxiesScopedListFormGroup() {
		return new FormGroup<TargetTcpProxiesScopedListFormProperties>({
		});

	}


	/** Represents a Target TCP Proxy resource. A target TCP proxy is a component of a Proxy Network Load Balancer. The forwarding rule references the target TCP proxy, and the target proxy then references a backend service. For more information, read Proxy Network Load Balancer overview. */
	export interface TargetTcpProxy {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies. */
		kind?: string | null;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false. */
		proxyBind?: boolean | null;

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;

		/** [Output Only] URL of the region where the regional TCP proxy resides. This field is not applicable to global TCP proxy. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** URL to the BackendService resource. */
		service?: string | null;
	}

	/** Represents a Target TCP Proxy resource. A target TCP proxy is a component of a Proxy Network Load Balancer. The forwarding rule references the target TCP proxy, and the target proxy then references a backend service. For more information, read Proxy Network Load Balancer overview. */
	export interface TargetTcpProxyFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies. */
		kind: FormControl<string | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false. */
		proxyBind: FormControl<boolean | null | undefined>,

		/** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,

		/** [Output Only] URL of the region where the regional TCP proxy resides. This field is not applicable to global TCP proxy. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** URL to the BackendService resource. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyFormGroup() {
		return new FormGroup<TargetTcpProxyFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			proxyBind: new FormControl<boolean | null | undefined>(undefined),
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			service: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxiesScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetTcpProxiesScopedListWarningData?: Array<TargetTcpProxiesScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetTcpProxiesScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxiesScopedListWarningFormGroup() {
		return new FormGroup<TargetTcpProxiesScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxiesScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetTcpProxiesScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxiesScopedListWarningDataFormGroup() {
		return new FormGroup<TargetTcpProxiesScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxiesSetBackendServiceRequest {

		/** The URL of the new BackendService resource for the targetTcpProxy. */
		service?: string | null;
	}
	export interface TargetTcpProxiesSetBackendServiceRequestFormProperties {

		/** The URL of the new BackendService resource for the targetTcpProxy. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxiesSetBackendServiceRequestFormGroup() {
		return new FormGroup<TargetTcpProxiesSetBackendServiceRequestFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxiesSetProxyHeaderRequest {

		/** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
		proxyHeader?: HTTP2HealthCheckProxyHeader | null;
	}
	export interface TargetTcpProxiesSetProxyHeaderRequestFormProperties {

		/** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
		proxyHeader: FormControl<HTTP2HealthCheckProxyHeader | null | undefined>,
	}
	export function CreateTargetTcpProxiesSetProxyHeaderRequestFormGroup() {
		return new FormGroup<TargetTcpProxiesSetProxyHeaderRequestFormProperties>({
			proxyHeader: new FormControl<HTTP2HealthCheckProxyHeader | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxyAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetTcpProxiesScopedList resources. */
		items?: {[id: string]: TargetTcpProxiesScopedList };

		/** [Output Only] Type of resource. Always compute#targetTcpProxyAggregatedList for lists of Target TCP Proxies. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: TargetTcpProxyAggregatedListWarning;
	}
	export interface TargetTcpProxyAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of TargetTcpProxiesScopedList resources. */
		items: FormControl<{[id: string]: TargetTcpProxiesScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetTcpProxyAggregatedList for lists of Target TCP Proxies. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyAggregatedListFormGroup() {
		return new FormGroup<TargetTcpProxyAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: TargetTcpProxiesScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxyAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetTcpProxyAggregatedListWarningData?: Array<TargetTcpProxyAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetTcpProxyAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyAggregatedListWarningFormGroup() {
		return new FormGroup<TargetTcpProxyAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxyAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetTcpProxyAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyAggregatedListWarningDataFormGroup() {
		return new FormGroup<TargetTcpProxyAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of TargetTcpProxy resources. */
	export interface TargetTcpProxyList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetTcpProxy resources. */
		items?: Array<TargetTcpProxy>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetTcpProxyListWarning;
	}

	/** Contains a list of TargetTcpProxy resources. */
	export interface TargetTcpProxyListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyListFormGroup() {
		return new FormGroup<TargetTcpProxyListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxyListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetTcpProxyListWarningData?: Array<TargetTcpProxyListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetTcpProxyListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyListWarningFormGroup() {
		return new FormGroup<TargetTcpProxyListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetTcpProxyListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetTcpProxyListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetTcpProxyListWarningDataFormGroup() {
		return new FormGroup<TargetTcpProxyListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Target VPN Gateway resource. The target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview. */
	export interface TargetVpnGateway {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway. */
		forwardingRules?: Array<string>;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this TargetVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a TargetVpnGateway. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
		network?: string | null;

		/** [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING. */
		status?: TargetVpnGatewayStatus | null;

		/** [Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway. */
		tunnels?: Array<string>;
	}

	/** Represents a Target VPN Gateway resource. The target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview. */
	export interface TargetVpnGatewayFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this TargetVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a TargetVpnGateway. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
		network: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING. */
		status: FormControl<TargetVpnGatewayStatus | null | undefined>,
	}
	export function CreateTargetVpnGatewayFormGroup() {
		return new FormGroup<TargetVpnGatewayFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<TargetVpnGatewayStatus | null | undefined>(undefined),
		});

	}

	export enum TargetVpnGatewayStatus { CREATING = 'CREATING', DELETING = 'DELETING', FAILED = 'FAILED', READY = 'READY' }

	export interface TargetVpnGatewayAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetVpnGateway resources. */
		items?: {[id: string]: TargetVpnGatewaysScopedList };

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: TargetVpnGatewayAggregatedListWarning;
	}
	export interface TargetVpnGatewayAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of TargetVpnGateway resources. */
		items: FormControl<{[id: string]: TargetVpnGatewaysScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewayAggregatedListFormGroup() {
		return new FormGroup<TargetVpnGatewayAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: TargetVpnGatewaysScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetVpnGatewaysScopedList {

		/** [Output Only] A list of target VPN gateways contained in this scope. */
		targetVpnGateways?: Array<TargetVpnGateway>;

		/** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
		warning?: TargetVpnGatewaysScopedListWarning;
	}
	export interface TargetVpnGatewaysScopedListFormProperties {
	}
	export function CreateTargetVpnGatewaysScopedListFormGroup() {
		return new FormGroup<TargetVpnGatewaysScopedListFormProperties>({
		});

	}

	export interface TargetVpnGatewaysScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetVpnGatewaysScopedListWarningData?: Array<TargetVpnGatewaysScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetVpnGatewaysScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewaysScopedListWarningFormGroup() {
		return new FormGroup<TargetVpnGatewaysScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetVpnGatewaysScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetVpnGatewaysScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewaysScopedListWarningDataFormGroup() {
		return new FormGroup<TargetVpnGatewaysScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetVpnGatewayAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetVpnGatewayAggregatedListWarningData?: Array<TargetVpnGatewayAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetVpnGatewayAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewayAggregatedListWarningFormGroup() {
		return new FormGroup<TargetVpnGatewayAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetVpnGatewayAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetVpnGatewayAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewayAggregatedListWarningDataFormGroup() {
		return new FormGroup<TargetVpnGatewayAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of TargetVpnGateway resources. */
	export interface TargetVpnGatewayList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of TargetVpnGateway resources. */
		items?: Array<TargetVpnGateway>;

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: TargetVpnGatewayListWarning;
	}

	/** Contains a list of TargetVpnGateway resources. */
	export interface TargetVpnGatewayListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewayListFormGroup() {
		return new FormGroup<TargetVpnGatewayListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetVpnGatewayListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		TargetVpnGatewayListWarningData?: Array<TargetVpnGatewayListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface TargetVpnGatewayListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewayListWarningFormGroup() {
		return new FormGroup<TargetVpnGatewayListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TargetVpnGatewayListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface TargetVpnGatewayListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTargetVpnGatewayListWarningDataFormGroup() {
		return new FormGroup<TargetVpnGatewayListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TestFailure {

		/** The actual output URL evaluated by a load balancer containing the scheme, host, path and query parameters. */
		actualOutputUrl?: string | null;

		/**
		 * Actual HTTP status code for rule with `urlRedirect` calculated by load balancer
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		actualRedirectResponseCode?: number | null;

		/** BackendService or BackendBucket returned by load balancer. */
		actualService?: string | null;

		/** The expected output URL evaluated by a load balancer containing the scheme, host, path and query parameters. */
		expectedOutputUrl?: string | null;

		/**
		 * Expected HTTP status code for rule with `urlRedirect` calculated by load balancer
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		expectedRedirectResponseCode?: number | null;

		/** Expected BackendService or BackendBucket resource the given URL should be mapped to. */
		expectedService?: string | null;

		/** HTTP headers of the request. */
		headers?: Array<UrlMapTestHeader>;

		/** Host portion of the URL. */
		host?: string | null;

		/** Path portion including query parameters in the URL. */
		path?: string | null;
	}
	export interface TestFailureFormProperties {

		/** The actual output URL evaluated by a load balancer containing the scheme, host, path and query parameters. */
		actualOutputUrl: FormControl<string | null | undefined>,

		/**
		 * Actual HTTP status code for rule with `urlRedirect` calculated by load balancer
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		actualRedirectResponseCode: FormControl<number | null | undefined>,

		/** BackendService or BackendBucket returned by load balancer. */
		actualService: FormControl<string | null | undefined>,

		/** The expected output URL evaluated by a load balancer containing the scheme, host, path and query parameters. */
		expectedOutputUrl: FormControl<string | null | undefined>,

		/**
		 * Expected HTTP status code for rule with `urlRedirect` calculated by load balancer
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		expectedRedirectResponseCode: FormControl<number | null | undefined>,

		/** Expected BackendService or BackendBucket resource the given URL should be mapped to. */
		expectedService: FormControl<string | null | undefined>,

		/** Host portion of the URL. */
		host: FormControl<string | null | undefined>,

		/** Path portion including query parameters in the URL. */
		path: FormControl<string | null | undefined>,
	}
	export function CreateTestFailureFormGroup() {
		return new FormGroup<TestFailureFormProperties>({
			actualOutputUrl: new FormControl<string | null | undefined>(undefined),
			actualRedirectResponseCode: new FormControl<number | null | undefined>(undefined),
			actualService: new FormControl<string | null | undefined>(undefined),
			expectedOutputUrl: new FormControl<string | null | undefined>(undefined),
			expectedRedirectResponseCode: new FormControl<number | null | undefined>(undefined),
			expectedService: new FormControl<string | null | undefined>(undefined),
			host: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TestPermissionsRequest {

		/** The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. */
		permissions?: Array<string>;
	}
	export interface TestPermissionsRequestFormProperties {
	}
	export function CreateTestPermissionsRequestFormGroup() {
		return new FormGroup<TestPermissionsRequestFormProperties>({
		});

	}

	export interface TestPermissionsResponse {

		/** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
		permissions?: Array<string>;
	}
	export interface TestPermissionsResponseFormProperties {
	}
	export function CreateTestPermissionsResponseFormGroup() {
		return new FormGroup<TestPermissionsResponseFormProperties>({
		});

	}


	/** Contains a list of UrlMap resources. */
	export interface UrlMapList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of UrlMap resources. */
		items?: Array<UrlMap>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: UrlMapListWarning;
	}

	/** Contains a list of UrlMap resources. */
	export interface UrlMapListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapListFormGroup() {
		return new FormGroup<UrlMapListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		UrlMapListWarningData?: Array<UrlMapListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface UrlMapListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapListWarningFormGroup() {
		return new FormGroup<UrlMapListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface UrlMapListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapListWarningDataFormGroup() {
		return new FormGroup<UrlMapListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapReference {
		urlMap?: string | null;
	}
	export interface UrlMapReferenceFormProperties {
		urlMap: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapReferenceFormGroup() {
		return new FormGroup<UrlMapReferenceFormProperties>({
			urlMap: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Message representing the validation result for a UrlMap. */
	export interface UrlMapValidationResult {
		loadErrors?: Array<string>;

		/** Whether the given UrlMap can be successfully loaded. If false, 'loadErrors' indicates the reasons. */
		loadSucceeded?: boolean | null;
		testFailures?: Array<TestFailure>;

		/** If successfully loaded, this field indicates whether the test passed. If false, 'testFailures's indicate the reason of failure. */
		testPassed?: boolean | null;
	}

	/** Message representing the validation result for a UrlMap. */
	export interface UrlMapValidationResultFormProperties {

		/** Whether the given UrlMap can be successfully loaded. If false, 'loadErrors' indicates the reasons. */
		loadSucceeded: FormControl<boolean | null | undefined>,

		/** If successfully loaded, this field indicates whether the test passed. If false, 'testFailures's indicate the reason of failure. */
		testPassed: FormControl<boolean | null | undefined>,
	}
	export function CreateUrlMapValidationResultFormGroup() {
		return new FormGroup<UrlMapValidationResultFormProperties>({
			loadSucceeded: new FormControl<boolean | null | undefined>(undefined),
			testPassed: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UrlMapsAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of UrlMapsScopedList resources. */
		items?: {[id: string]: UrlMapsScopedList };

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: UrlMapsAggregatedListWarning;
	}
	export interface UrlMapsAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of UrlMapsScopedList resources. */
		items: FormControl<{[id: string]: UrlMapsScopedList } | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapsAggregatedListFormGroup() {
		return new FormGroup<UrlMapsAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: UrlMapsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapsScopedList {

		/** A list of UrlMaps contained in this scope. */
		urlMaps?: Array<UrlMap>;

		/** Informational warning which replaces the list of backend services when the list is empty. */
		warning?: UrlMapsScopedListWarning;
	}
	export interface UrlMapsScopedListFormProperties {
	}
	export function CreateUrlMapsScopedListFormGroup() {
		return new FormGroup<UrlMapsScopedListFormProperties>({
		});

	}

	export interface UrlMapsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		UrlMapsScopedListWarningData?: Array<UrlMapsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface UrlMapsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapsScopedListWarningFormGroup() {
		return new FormGroup<UrlMapsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface UrlMapsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapsScopedListWarningDataFormGroup() {
		return new FormGroup<UrlMapsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapsAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		UrlMapsAggregatedListWarningData?: Array<UrlMapsAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface UrlMapsAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapsAggregatedListWarningFormGroup() {
		return new FormGroup<UrlMapsAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapsAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface UrlMapsAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateUrlMapsAggregatedListWarningDataFormGroup() {
		return new FormGroup<UrlMapsAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UrlMapsValidateRequest {

		/** Specifies the load balancer type(s) this validation request is for. Use EXTERNAL_MANAGED for global external Application Load Balancers and regional external Application Load Balancers. Use EXTERNAL for classic Application Load Balancers. Use INTERNAL_MANAGED for internal Application Load Balancers. For more information, refer to Choosing a load balancer. If unspecified, the load balancing scheme will be inferred from the backend service resources this URL map references. If that can not be inferred (for example, this URL map only references backend buckets, or this Url map is for rewrites and redirects only and doesn't reference any backends), EXTERNAL will be used as the default type. If specified, the scheme(s) must not conflict with the load balancing scheme of the backend service resources this Url map references. */
		loadBalancingSchemes?: Array<string>;

		/** Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](/compute/docs/reference/rest/v1/urlMaps) * [Regional](/compute/docs/reference/rest/v1/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by global external Application Load Balancers, classic Application Load Balancers, and cross-region internal Application Load Balancers. * regionUrlMaps are used by internal Application Load Balancers, regional external Application Load Balancers and regional internal Application Load Balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts. */
		resource?: UrlMap;
	}
	export interface UrlMapsValidateRequestFormProperties {
	}
	export function CreateUrlMapsValidateRequestFormGroup() {
		return new FormGroup<UrlMapsValidateRequestFormProperties>({
		});

	}

	export interface UrlMapsValidateResponse {

		/** Message representing the validation result for a UrlMap. */
		result?: UrlMapValidationResult;
	}
	export interface UrlMapsValidateResponseFormProperties {
	}
	export function CreateUrlMapsValidateResponseFormGroup() {
		return new FormGroup<UrlMapsValidateResponseFormProperties>({
		});

	}


	/** Subnetwork which the current user has compute.subnetworks.use permission on. */
	export interface UsableSubnetwork {

		/** [Output Only] The external IPv6 address range that is assigned to this subnetwork. */
		externalIpv6Prefix?: string | null;

		/** [Output Only] The internal IPv6 address range that is assigned to this subnetwork. */
		internalIpv6Prefix?: string | null;

		/** The range of internal addresses that are owned by this subnetwork. */
		ipCidrRange?: string | null;

		/** The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. */
		ipv6AccessType?: NetworkInterfaceIpv6AccessType | null;

		/** Network URL. */
		network?: string | null;

		/** The purpose of the resource. This field can be either PRIVATE, GLOBAL_MANAGED_PROXY, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. Subnets with purpose set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY are user-created subnetworks that are reserved for Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. */
		purpose?: SubnetworkPurpose | null;

		/** The role of subnetwork. Currently, this field is only used when purpose is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request. */
		role?: SubnetworkRole | null;

		/** Secondary IP ranges. */
		secondaryIpRanges?: Array<UsableSubnetworkSecondaryRange>;

		/** The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch. */
		stackType?: NetworkInterfaceStackType | null;

		/** Subnetwork URL. */
		subnetwork?: string | null;
	}

	/** Subnetwork which the current user has compute.subnetworks.use permission on. */
	export interface UsableSubnetworkFormProperties {

		/** [Output Only] The external IPv6 address range that is assigned to this subnetwork. */
		externalIpv6Prefix: FormControl<string | null | undefined>,

		/** [Output Only] The internal IPv6 address range that is assigned to this subnetwork. */
		internalIpv6Prefix: FormControl<string | null | undefined>,

		/** The range of internal addresses that are owned by this subnetwork. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. */
		ipv6AccessType: FormControl<NetworkInterfaceIpv6AccessType | null | undefined>,

		/** Network URL. */
		network: FormControl<string | null | undefined>,

		/** The purpose of the resource. This field can be either PRIVATE, GLOBAL_MANAGED_PROXY, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. Subnets with purpose set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY are user-created subnetworks that are reserved for Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. */
		purpose: FormControl<SubnetworkPurpose | null | undefined>,

		/** The role of subnetwork. Currently, this field is only used when purpose is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request. */
		role: FormControl<SubnetworkRole | null | undefined>,

		/** The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch. */
		stackType: FormControl<NetworkInterfaceStackType | null | undefined>,

		/** Subnetwork URL. */
		subnetwork: FormControl<string | null | undefined>,
	}
	export function CreateUsableSubnetworkFormGroup() {
		return new FormGroup<UsableSubnetworkFormProperties>({
			externalIpv6Prefix: new FormControl<string | null | undefined>(undefined),
			internalIpv6Prefix: new FormControl<string | null | undefined>(undefined),
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			ipv6AccessType: new FormControl<NetworkInterfaceIpv6AccessType | null | undefined>(undefined),
			network: new FormControl<string | null | undefined>(undefined),
			purpose: new FormControl<SubnetworkPurpose | null | undefined>(undefined),
			role: new FormControl<SubnetworkRole | null | undefined>(undefined),
			stackType: new FormControl<NetworkInterfaceStackType | null | undefined>(undefined),
			subnetwork: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Secondary IP range of a usable subnetwork. */
	export interface UsableSubnetworkSecondaryRange {

		/** The range of IP addresses belonging to this subnetwork secondary range. */
		ipCidrRange?: string | null;

		/** The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork. */
		rangeName?: string | null;
	}

	/** Secondary IP range of a usable subnetwork. */
	export interface UsableSubnetworkSecondaryRangeFormProperties {

		/** The range of IP addresses belonging to this subnetwork secondary range. */
		ipCidrRange: FormControl<string | null | undefined>,

		/** The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork. */
		rangeName: FormControl<string | null | undefined>,
	}
	export function CreateUsableSubnetworkSecondaryRangeFormGroup() {
		return new FormGroup<UsableSubnetworkSecondaryRangeFormProperties>({
			ipCidrRange: new FormControl<string | null | undefined>(undefined),
			rangeName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UsableSubnetworksAggregatedList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output] A list of usable subnetwork URLs. */
		items?: Array<UsableSubnetwork>;

		/** [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. In special cases listUsable may return 0 subnetworks and nextPageToken which still should be used to get the next page of results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: UsableSubnetworksAggregatedListWarning;
	}
	export interface UsableSubnetworksAggregatedListFormProperties {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. In special cases listUsable may return 0 subnetworks and nextPageToken which still should be used to get the next page of results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateUsableSubnetworksAggregatedListFormGroup() {
		return new FormGroup<UsableSubnetworksAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UsableSubnetworksAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		UsableSubnetworksAggregatedListWarningData?: Array<UsableSubnetworksAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface UsableSubnetworksAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateUsableSubnetworksAggregatedListWarningFormGroup() {
		return new FormGroup<UsableSubnetworksAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UsableSubnetworksAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface UsableSubnetworksAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateUsableSubnetworksAggregatedListWarningDataFormGroup() {
		return new FormGroup<UsableSubnetworksAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contain information of Nat mapping for a VM endpoint (i.e., NIC). */
	export interface VmEndpointNatMappings {

		/** Name of the VM instance which the endpoint belongs to */
		instanceName?: string | null;
		interfaceNatMappings?: Array<VmEndpointNatMappingsInterfaceNatMappings>;
	}

	/** Contain information of Nat mapping for a VM endpoint (i.e., NIC). */
	export interface VmEndpointNatMappingsFormProperties {

		/** Name of the VM instance which the endpoint belongs to */
		instanceName: FormControl<string | null | undefined>,
	}
	export function CreateVmEndpointNatMappingsFormGroup() {
		return new FormGroup<VmEndpointNatMappingsFormProperties>({
			instanceName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contain information of Nat mapping for an interface of this endpoint. */
	export interface VmEndpointNatMappingsInterfaceNatMappings {

		/** List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"]. */
		drainNatIpPortRanges?: Array<string>;

		/** A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"]. */
		natIpPortRanges?: Array<string>;

		/**
		 * Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalDrainNatPorts?: number | null;

		/**
		 * Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalNatPorts?: number | null;

		/** Information about mappings provided by rules in this NAT. */
		ruleMappings?: Array<VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings>;

		/** Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: "10.33.4.55/32", or "192.168.5.0/24". */
		sourceAliasIpRange?: string | null;

		/** Primary IP of the VM for this NIC. */
		sourceVirtualIp?: string | null;
	}

	/** Contain information of Nat mapping for an interface of this endpoint. */
	export interface VmEndpointNatMappingsInterfaceNatMappingsFormProperties {

		/**
		 * Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalDrainNatPorts: FormControl<number | null | undefined>,

		/**
		 * Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalNatPorts: FormControl<number | null | undefined>,

		/** Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: "10.33.4.55/32", or "192.168.5.0/24". */
		sourceAliasIpRange: FormControl<string | null | undefined>,

		/** Primary IP of the VM for this NIC. */
		sourceVirtualIp: FormControl<string | null | undefined>,
	}
	export function CreateVmEndpointNatMappingsInterfaceNatMappingsFormGroup() {
		return new FormGroup<VmEndpointNatMappingsInterfaceNatMappingsFormProperties>({
			numTotalDrainNatPorts: new FormControl<number | null | undefined>(undefined),
			numTotalNatPorts: new FormControl<number | null | undefined>(undefined),
			sourceAliasIpRange: new FormControl<string | null | undefined>(undefined),
			sourceVirtualIp: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information of NAT Mappings provided by a NAT Rule. */
	export interface VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {

		/** List of all drain IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"]. */
		drainNatIpPortRanges?: Array<string>;

		/** A list of all IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"]. */
		natIpPortRanges?: Array<string>;

		/**
		 * Total number of drain ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field drain_nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalDrainNatPorts?: number | null;

		/**
		 * Total number of ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalNatPorts?: number | null;

		/**
		 * Rule number of the NAT Rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleNumber?: number | null;
	}

	/** Contains information of NAT Mappings provided by a NAT Rule. */
	export interface VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsFormProperties {

		/**
		 * Total number of drain ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field drain_nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalDrainNatPorts: FormControl<number | null | undefined>,

		/**
		 * Total number of ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field nat_ip_port_ranges.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		numTotalNatPorts: FormControl<number | null | undefined>,

		/**
		 * Rule number of the NAT Rule.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ruleNumber: FormControl<number | null | undefined>,
	}
	export function CreateVmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsFormGroup() {
		return new FormGroup<VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsFormProperties>({
			numTotalDrainNatPorts: new FormControl<number | null | undefined>(undefined),
			numTotalNatPorts: new FormControl<number | null | undefined>(undefined),
			ruleNumber: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Contains a list of VmEndpointNatMappings. */
	export interface VmEndpointNatMappingsList {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] A list of Nat mapping information of VM endpoints. */
		result?: Array<VmEndpointNatMappings>;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VmEndpointNatMappingsListWarning;
	}

	/** Contains a list of VmEndpointNatMappings. */
	export interface VmEndpointNatMappingsListFormProperties {

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateVmEndpointNatMappingsListFormGroup() {
		return new FormGroup<VmEndpointNatMappingsListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VmEndpointNatMappingsListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VmEndpointNatMappingsListWarningData?: Array<VmEndpointNatMappingsListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VmEndpointNatMappingsListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVmEndpointNatMappingsListWarningFormGroup() {
		return new FormGroup<VmEndpointNatMappingsListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VmEndpointNatMappingsListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VmEndpointNatMappingsListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVmEndpointNatMappingsListWarningDataFormGroup() {
		return new FormGroup<VmEndpointNatMappingsListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a HA VPN gateway. HA VPN is a high-availability (HA) Cloud VPN solution that lets you securely connect your on-premises network to your Google Cloud Virtual Private Cloud network through an IPsec VPN connection in a single region. For more information about Cloud HA VPN solutions, see Cloud VPN topologies . */
	export interface VpnGateway {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a VpnGateway. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
		network?: string | null;

		/** [Output Only] URL of the region where the VPN gateway resides. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used. */
		stackType?: NetworkInterfaceStackType | null;

		/** The list of VPN interfaces associated with this VPN gateway. */
		vpnInterfaces?: Array<VpnGatewayVpnGatewayInterface>;
	}

	/** Represents a HA VPN gateway. HA VPN is a high-availability (HA) Cloud VPN solution that lets you securely connect your on-premises network to your Google Cloud Virtual Private Cloud network through an IPsec VPN connection in a single region. For more information about Cloud HA VPN solutions, see Cloud VPN topologies . */
	export interface VpnGatewayFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a VpnGateway. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
		network: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the VPN gateway resides. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used. */
		stackType: FormControl<NetworkInterfaceStackType | null | undefined>,
	}
	export function CreateVpnGatewayFormGroup() {
		return new FormGroup<VpnGatewayFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			network: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			stackType: new FormControl<NetworkInterfaceStackType | null | undefined>(undefined),
		});

	}


	/** A VPN gateway interface. */
	export interface VpnGatewayVpnGatewayInterface {

		/**
		 * [Output Only] Numeric identifier for this VPN interface associated with the VPN gateway.
		 * Type: uint, 0 to 4,294,967,295
		 */
		id?: number | null;

		/** URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. */
		interconnectAttachment?: string | null;

		/** [Output Only] IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address. */
		ipAddress?: string | null;
	}

	/** A VPN gateway interface. */
	export interface VpnGatewayVpnGatewayInterfaceFormProperties {

		/**
		 * [Output Only] Numeric identifier for this VPN interface associated with the VPN gateway.
		 * Type: uint, 0 to 4,294,967,295
		 */
		id: FormControl<number | null | undefined>,

		/** URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. */
		interconnectAttachment: FormControl<string | null | undefined>,

		/** [Output Only] IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address. */
		ipAddress: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayVpnGatewayInterfaceFormGroup() {
		return new FormGroup<VpnGatewayVpnGatewayInterfaceFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			interconnectAttachment: new FormControl<string | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewayAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnGateway resources. */
		items?: {[id: string]: VpnGatewaysScopedList };

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: VpnGatewayAggregatedListWarning;
	}
	export interface VpnGatewayAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of VpnGateway resources. */
		items: FormControl<{[id: string]: VpnGatewaysScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayAggregatedListFormGroup() {
		return new FormGroup<VpnGatewayAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: VpnGatewaysScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewaysScopedList {

		/** [Output Only] A list of VPN gateways contained in this scope. */
		vpnGateways?: Array<VpnGateway>;

		/** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
		warning?: VpnGatewaysScopedListWarning;
	}
	export interface VpnGatewaysScopedListFormProperties {
	}
	export function CreateVpnGatewaysScopedListFormGroup() {
		return new FormGroup<VpnGatewaysScopedListFormProperties>({
		});

	}

	export interface VpnGatewaysScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VpnGatewaysScopedListWarningData?: Array<VpnGatewaysScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VpnGatewaysScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewaysScopedListWarningFormGroup() {
		return new FormGroup<VpnGatewaysScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewaysScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VpnGatewaysScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewaysScopedListWarningDataFormGroup() {
		return new FormGroup<VpnGatewaysScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewayAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VpnGatewayAggregatedListWarningData?: Array<VpnGatewayAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VpnGatewayAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayAggregatedListWarningFormGroup() {
		return new FormGroup<VpnGatewayAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewayAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VpnGatewayAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayAggregatedListWarningDataFormGroup() {
		return new FormGroup<VpnGatewayAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of VpnGateway resources. */
	export interface VpnGatewayList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnGateway resources. */
		items?: Array<VpnGateway>;

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VpnGatewayListWarning;
	}

	/** Contains a list of VpnGateway resources. */
	export interface VpnGatewayListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayListFormGroup() {
		return new FormGroup<VpnGatewayListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewayListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VpnGatewayListWarningData?: Array<VpnGatewayListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VpnGatewayListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayListWarningFormGroup() {
		return new FormGroup<VpnGatewayListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewayListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VpnGatewayListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayListWarningDataFormGroup() {
		return new FormGroup<VpnGatewayListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewayStatus {

		/** List of VPN connection for this VpnGateway. */
		vpnConnections?: Array<VpnGatewayStatusVpnConnection>;
	}
	export interface VpnGatewayStatusFormProperties {
	}
	export function CreateVpnGatewayStatusFormGroup() {
		return new FormGroup<VpnGatewayStatusFormProperties>({
		});

	}


	/** A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be an external VPN gateway or a Google Cloud VPN gateway. */
	export interface VpnGatewayStatusVpnConnection {

		/** URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
		peerExternalGateway?: string | null;

		/** URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
		peerGcpGateway?: string | null;

		/** Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway. */
		state?: VpnGatewayStatusHighAvailabilityRequirementState;

		/** List of VPN tunnels that are in this VPN connection. */
		tunnels?: Array<VpnGatewayStatusTunnel>;
	}

	/** A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be an external VPN gateway or a Google Cloud VPN gateway. */
	export interface VpnGatewayStatusVpnConnectionFormProperties {

		/** URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
		peerExternalGateway: FormControl<string | null | undefined>,

		/** URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
		peerGcpGateway: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayStatusVpnConnectionFormGroup() {
		return new FormGroup<VpnGatewayStatusVpnConnectionFormProperties>({
			peerExternalGateway: new FormControl<string | null | undefined>(undefined),
			peerGcpGateway: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway. */
	export interface VpnGatewayStatusHighAvailabilityRequirementState {

		/** Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET. */
		state?: VpnGatewayStatusHighAvailabilityRequirementStateState | null;

		/** Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE. */
		unsatisfiedReason?: VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReason | null;
	}

	/** Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway. */
	export interface VpnGatewayStatusHighAvailabilityRequirementStateFormProperties {

		/** Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET. */
		state: FormControl<VpnGatewayStatusHighAvailabilityRequirementStateState | null | undefined>,

		/** Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE. */
		unsatisfiedReason: FormControl<VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReason | null | undefined>,
	}
	export function CreateVpnGatewayStatusHighAvailabilityRequirementStateFormGroup() {
		return new FormGroup<VpnGatewayStatusHighAvailabilityRequirementStateFormProperties>({
			state: new FormControl<VpnGatewayStatusHighAvailabilityRequirementStateState | null | undefined>(undefined),
			unsatisfiedReason: new FormControl<VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReason | null | undefined>(undefined),
		});

	}

	export enum VpnGatewayStatusHighAvailabilityRequirementStateState { CONNECTION_REDUNDANCY_MET = 'CONNECTION_REDUNDANCY_MET', CONNECTION_REDUNDANCY_NOT_MET = 'CONNECTION_REDUNDANCY_NOT_MET' }

	export enum VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReason { INCOMPLETE_TUNNELS_COVERAGE = 'INCOMPLETE_TUNNELS_COVERAGE' }


	/** Contains some information about a VPN tunnel. */
	export interface VpnGatewayStatusTunnel {

		/**
		 * The VPN gateway interface this VPN tunnel is associated with.
		 * Type: uint, 0 to 4,294,967,295
		 */
		localGatewayInterface?: number | null;

		/**
		 * The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or a Google Cloud VPN gateway.
		 * Type: uint, 0 to 4,294,967,295
		 */
		peerGatewayInterface?: number | null;

		/** URL reference to the VPN tunnel. */
		tunnelUrl?: string | null;
	}

	/** Contains some information about a VPN tunnel. */
	export interface VpnGatewayStatusTunnelFormProperties {

		/**
		 * The VPN gateway interface this VPN tunnel is associated with.
		 * Type: uint, 0 to 4,294,967,295
		 */
		localGatewayInterface: FormControl<number | null | undefined>,

		/**
		 * The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or a Google Cloud VPN gateway.
		 * Type: uint, 0 to 4,294,967,295
		 */
		peerGatewayInterface: FormControl<number | null | undefined>,

		/** URL reference to the VPN tunnel. */
		tunnelUrl: FormControl<string | null | undefined>,
	}
	export function CreateVpnGatewayStatusTunnelFormGroup() {
		return new FormGroup<VpnGatewayStatusTunnelFormProperties>({
			localGatewayInterface: new FormControl<number | null | undefined>(undefined),
			peerGatewayInterface: new FormControl<number | null | undefined>(undefined),
			tunnelUrl: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnGatewaysGetStatusResponse {
		result?: VpnGatewayStatus;
	}
	export interface VpnGatewaysGetStatusResponseFormProperties {
	}
	export function CreateVpnGatewaysGetStatusResponseFormGroup() {
		return new FormGroup<VpnGatewaysGetStatusResponseFormProperties>({
		});

	}


	/** Represents a Cloud VPN Tunnel resource. For more information about VPN, read the the Cloud VPN Overview. */
	export interface VpnTunnel {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** An optional description of this resource. Provide this property when you create the resource. */
		description?: string | null;

		/** [Output Only] Detailed status message for the VPN tunnel. */
		detailedStatus?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/**
		 * IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ikeVersion?: number | null;

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind?: string | null;

		/** A fingerprint for the labels being applied to this VpnTunnel, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a VpnTunnel. */
		labelFingerprint?: string | null;

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels?: {[id: string]: string };

		/** Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported. */
		localTrafficSelector?: Array<string>;

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name?: string | null;

		/** URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway. */
		peerExternalGateway?: string | null;

		/**
		 * The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. Possible values are: `0`, `1`, `2`, `3`. The number of IDs in use depends on the external VPN gateway redundancy type.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		peerExternalGatewayInterface?: number | null;

		/** URL of the peer side HA VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer Google Cloud VPN gateway. */
		peerGcpGateway?: string | null;

		/** IP address of the peer VPN gateway. Only IPv4 is supported. */
		peerIp?: string | null;

		/** [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region?: string | null;

		/** Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported. */
		remoteTrafficSelector?: Array<string>;

		/** URL of the router resource to be used for dynamic routing. */
		router?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway. */
		sharedSecret?: string | null;

		/** Hash of the shared secret. */
		sharedSecretHash?: string | null;

		/** [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel. */
		status?: VpnTunnelStatus | null;

		/** URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. */
		targetVpnGateway?: string | null;

		/** URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created. */
		vpnGateway?: string | null;

		/**
		 * The interface ID of the VPN gateway with which this VPN tunnel is associated. Possible values are: `0`, `1`.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		vpnGatewayInterface?: number | null;
	}

	/** Represents a Cloud VPN Tunnel resource. For more information about VPN, read the the Cloud VPN Overview. */
	export interface VpnTunnelFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** An optional description of this resource. Provide this property when you create the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] Detailed status message for the VPN tunnel. */
		detailedStatus: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/**
		 * IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ikeVersion: FormControl<number | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind: FormControl<string | null | undefined>,

		/** A fingerprint for the labels being applied to this VpnTunnel, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a VpnTunnel. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. */
		name: FormControl<string | null | undefined>,

		/** URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway. */
		peerExternalGateway: FormControl<string | null | undefined>,

		/**
		 * The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. Possible values are: `0`, `1`, `2`, `3`. The number of IDs in use depends on the external VPN gateway redundancy type.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		peerExternalGatewayInterface: FormControl<number | null | undefined>,

		/** URL of the peer side HA VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer Google Cloud VPN gateway. */
		peerGcpGateway: FormControl<string | null | undefined>,

		/** IP address of the peer VPN gateway. Only IPv4 is supported. */
		peerIp: FormControl<string | null | undefined>,

		/** [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
		region: FormControl<string | null | undefined>,

		/** URL of the router resource to be used for dynamic routing. */
		router: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway. */
		sharedSecret: FormControl<string | null | undefined>,

		/** Hash of the shared secret. */
		sharedSecretHash: FormControl<string | null | undefined>,

		/** [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel. */
		status: FormControl<VpnTunnelStatus | null | undefined>,

		/** URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. */
		targetVpnGateway: FormControl<string | null | undefined>,

		/** URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created. */
		vpnGateway: FormControl<string | null | undefined>,

		/**
		 * The interface ID of the VPN gateway with which this VPN tunnel is associated. Possible values are: `0`, `1`.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		vpnGatewayInterface: FormControl<number | null | undefined>,
	}
	export function CreateVpnTunnelFormGroup() {
		return new FormGroup<VpnTunnelFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			detailedStatus: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ikeVersion: new FormControl<number | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.pattern('[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?')]),
			peerExternalGateway: new FormControl<string | null | undefined>(undefined),
			peerExternalGatewayInterface: new FormControl<number | null | undefined>(undefined),
			peerGcpGateway: new FormControl<string | null | undefined>(undefined),
			peerIp: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			router: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			sharedSecret: new FormControl<string | null | undefined>(undefined),
			sharedSecretHash: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<VpnTunnelStatus | null | undefined>(undefined),
			targetVpnGateway: new FormControl<string | null | undefined>(undefined),
			vpnGateway: new FormControl<string | null | undefined>(undefined),
			vpnGatewayInterface: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum VpnTunnelStatus { ALLOCATING_RESOURCES = 'ALLOCATING_RESOURCES', AUTHORIZATION_ERROR = 'AUTHORIZATION_ERROR', DEPROVISIONING = 'DEPROVISIONING', ESTABLISHED = 'ESTABLISHED', FAILED = 'FAILED', FIRST_HANDSHAKE = 'FIRST_HANDSHAKE', NEGOTIATION_FAILURE = 'NEGOTIATION_FAILURE', NETWORK_ERROR = 'NETWORK_ERROR', NO_INCOMING_PACKETS = 'NO_INCOMING_PACKETS', PROVISIONING = 'PROVISIONING', REJECTED = 'REJECTED', STOPPED = 'STOPPED', WAITING_FOR_FULL_CONFIG = 'WAITING_FOR_FULL_CONFIG' }

	export interface VpnTunnelAggregatedList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnTunnelsScopedList resources. */
		items?: {[id: string]: VpnTunnelsScopedList };

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Unreachable resources. */
		unreachables?: Array<string>;

		/** [Output Only] Informational warning message. */
		warning?: VpnTunnelAggregatedListWarning;
	}
	export interface VpnTunnelAggregatedListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** A list of VpnTunnelsScopedList resources. */
		items: FormControl<{[id: string]: VpnTunnelsScopedList } | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelAggregatedListFormGroup() {
		return new FormGroup<VpnTunnelAggregatedListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			items: new FormControl<{[id: string]: VpnTunnelsScopedList } | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnTunnelsScopedList {

		/** A list of VPN tunnels contained in this scope. */
		vpnTunnels?: Array<VpnTunnel>;

		/** Informational warning which replaces the list of addresses when the list is empty. */
		warning?: VpnTunnelsScopedListWarning;
	}
	export interface VpnTunnelsScopedListFormProperties {
	}
	export function CreateVpnTunnelsScopedListFormGroup() {
		return new FormGroup<VpnTunnelsScopedListFormProperties>({
		});

	}

	export interface VpnTunnelsScopedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VpnTunnelsScopedListWarningData?: Array<VpnTunnelsScopedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VpnTunnelsScopedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelsScopedListWarningFormGroup() {
		return new FormGroup<VpnTunnelsScopedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnTunnelsScopedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VpnTunnelsScopedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelsScopedListWarningDataFormGroup() {
		return new FormGroup<VpnTunnelsScopedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnTunnelAggregatedListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VpnTunnelAggregatedListWarningData?: Array<VpnTunnelAggregatedListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VpnTunnelAggregatedListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelAggregatedListWarningFormGroup() {
		return new FormGroup<VpnTunnelAggregatedListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnTunnelAggregatedListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VpnTunnelAggregatedListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelAggregatedListWarningDataFormGroup() {
		return new FormGroup<VpnTunnelAggregatedListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains a list of VpnTunnel resources. */
	export interface VpnTunnelList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of VpnTunnel resources. */
		items?: Array<VpnTunnel>;

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: VpnTunnelListWarning;
	}

	/** Contains a list of VpnTunnel resources. */
	export interface VpnTunnelListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelListFormGroup() {
		return new FormGroup<VpnTunnelListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnTunnelListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		VpnTunnelListWarningData?: Array<VpnTunnelListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface VpnTunnelListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelListWarningFormGroup() {
		return new FormGroup<VpnTunnelListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface VpnTunnelListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface VpnTunnelListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateVpnTunnelListWarningDataFormGroup() {
		return new FormGroup<VpnTunnelListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface XpnHostList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** [Output Only] A list of shared VPC host project URLs. */
		items?: Array<Project>;

		/** [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: XpnHostListWarning;
	}
	export interface XpnHostListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateXpnHostListFormGroup() {
		return new FormGroup<XpnHostListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface XpnHostListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		XpnHostListWarningData?: Array<XpnHostListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface XpnHostListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateXpnHostListWarningFormGroup() {
		return new FormGroup<XpnHostListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface XpnHostListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface XpnHostListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateXpnHostListWarningDataFormGroup() {
		return new FormGroup<XpnHostListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Zone resource. A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones. */
	export interface Zone {

		/** [Output Only] Available cpu/platform selections for the zone. */
		availableCpuPlatforms?: Array<string>;

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp?: string | null;

		/** Deprecation status for a public resource. */
		deprecated?: DeprecationStatus;

		/** [Output Only] Textual description of the resource. */
		description?: string | null;

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id?: string | null;

		/** [Output Only] Type of the resource. Always compute#zone for zones. */
		kind?: string | null;

		/** [Output Only] Name of the resource. */
		name?: string | null;

		/** [Output Only] Full URL reference to the region which hosts the zone. */
		region?: string | null;

		/** [Output Only] Server-defined URL for the resource. */
		selfLink?: string | null;

		/** [Output Only] Status of the zone, either UP or DOWN. */
		status?: RegionStatus | null;

		/** [Output Only] Reserved for future use. */
		supportsPzs?: boolean | null;
	}

	/** Represents a Zone resource. A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones. */
	export interface ZoneFormProperties {

		/** [Output Only] Creation timestamp in RFC3339 text format. */
		creationTimestamp: FormControl<string | null | undefined>,

		/** [Output Only] Textual description of the resource. */
		description: FormControl<string | null | undefined>,

		/** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
		id: FormControl<string | null | undefined>,

		/** [Output Only] Type of the resource. Always compute#zone for zones. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] Name of the resource. */
		name: FormControl<string | null | undefined>,

		/** [Output Only] Full URL reference to the region which hosts the zone. */
		region: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for the resource. */
		selfLink: FormControl<string | null | undefined>,

		/** [Output Only] Status of the zone, either UP or DOWN. */
		status: FormControl<RegionStatus | null | undefined>,

		/** [Output Only] Reserved for future use. */
		supportsPzs: FormControl<boolean | null | undefined>,
	}
	export function CreateZoneFormGroup() {
		return new FormGroup<ZoneFormProperties>({
			creationTimestamp: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<RegionStatus | null | undefined>(undefined),
			supportsPzs: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Contains a list of zone resources. */
	export interface ZoneList {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id?: string | null;

		/** A list of Zone resources. */
		items?: Array<Zone>;

		/** Type of resource. */
		kind?: string | null;

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken?: string | null;

		/** [Output Only] Server-defined URL for this resource. */
		selfLink?: string | null;

		/** [Output Only] Informational warning message. */
		warning?: ZoneListWarning;
	}

	/** Contains a list of zone resources. */
	export interface ZoneListFormProperties {

		/** [Output Only] Unique identifier for the resource; defined by the server. */
		id: FormControl<string | null | undefined>,

		/** Type of resource. */
		kind: FormControl<string | null | undefined>,

		/** [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. */
		nextPageToken: FormControl<string | null | undefined>,

		/** [Output Only] Server-defined URL for this resource. */
		selfLink: FormControl<string | null | undefined>,
	}
	export function CreateZoneListFormGroup() {
		return new FormGroup<ZoneListFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ZoneListWarning {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code?: AcceleratorTypesScopedListWarningCode | null;

		/** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
		ZoneListWarningData?: Array<ZoneListWarningData>;

		/** [Output Only] A human-readable description of the warning code. */
		message?: string | null;
	}
	export interface ZoneListWarningFormProperties {

		/** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
		code: FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>,

		/** [Output Only] A human-readable description of the warning code. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateZoneListWarningFormGroup() {
		return new FormGroup<ZoneListWarningFormProperties>({
			code: new FormControl<AcceleratorTypesScopedListWarningCode | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ZoneListWarningData {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key?: string | null;

		/** [Output Only] A warning data value corresponding to the key. */
		value?: string | null;
	}
	export interface ZoneListWarningDataFormProperties {

		/** [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding). */
		key: FormControl<string | null | undefined>,

		/** [Output Only] A warning data value corresponding to the key. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateZoneListWarningDataFormGroup() {
		return new FormGroup<ZoneListWarningDataFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ZoneSetLabelsRequest {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint?: string | null;

		/** The labels to set for this resource. */
		labels?: {[id: string]: string };
	}
	export interface ZoneSetLabelsRequestFormProperties {

		/** The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint. */
		labelFingerprint: FormControl<string | null | undefined>,

		/** The labels to set for this resource. */
		labels: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateZoneSetLabelsRequestFormGroup() {
		return new FormGroup<ZoneSetLabelsRequestFormProperties>({
			labelFingerprint: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}

	export interface ZoneSetPolicyRequest {

		/** Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
		bindings?: Array<Binding>;

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag?: string | null;

		/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
		policy?: Policy;
	}
	export interface ZoneSetPolicyRequestFormProperties {

		/** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
		etag: FormControl<string | null | undefined>,
	}
	export function CreateZoneSetPolicyRequestFormGroup() {
		return new FormGroup<ZoneSetPolicyRequestFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Lists all the policies that have been configured for the specified folder or organization.
		 * Get locations/global/firewallPolicies
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {string} parentId Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {FirewallPolicyList} Successful response
		 */
		Compute_firewallPolicies_list(filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, parentId: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<FirewallPolicyList> {
			return this.http.get<FirewallPolicyList>(this.baseUri + 'locations/global/firewallPolicies?filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&parentId=' + (parentId == null ? '' : encodeURIComponent(parentId)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new policy in the specified project using the data included in the request.
		 * Post locations/global/firewallPolicies
		 * @param {string} parentId Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_insert(parentId: string | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies?parentId=' + (parentId == null ? '' : encodeURIComponent(parentId)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists associations of a specified target, i.e., organization or folder.
		 * Get locations/global/firewallPolicies/listAssociations
		 * @param {string} targetResource The target resource to list associations. It is an organization, or a folder.
		 * @return {FirewallPoliciesListAssociationsResponse} Successful response
		 */
		Compute_firewallPolicies_listAssociations(targetResource: string | null | undefined): Observable<FirewallPoliciesListAssociationsResponse> {
			return this.http.get<FirewallPoliciesListAssociationsResponse>(this.baseUri + 'locations/global/firewallPolicies/listAssociations?targetResource=' + (targetResource == null ? '' : encodeURIComponent(targetResource)), {});
		}

		/**
		 * Deletes the specified policy.
		 * Delete locations/global/firewallPolicies/{firewallPolicy}
		 * @param {string} firewallPolicy Name of the firewall policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_delete(firewallPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified firewall policy.
		 * Get locations/global/firewallPolicies/{firewallPolicy}
		 * @param {string} firewallPolicy Name of the firewall policy to get.
		 * @return {FirewallPolicy} Successful response
		 */
		Compute_firewallPolicies_get(firewallPolicy: string): Observable<FirewallPolicy> {
			return this.http.get<FirewallPolicy>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)), {});
		}

		/**
		 * Patches the specified policy with the data included in the request.
		 * Patch locations/global/firewallPolicies/{firewallPolicy}
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_patch(firewallPolicy: string, requestId: string | null | undefined, requestBody: FirewallPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts an association for the specified firewall policy.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/addAssociation
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {boolean} replaceExistingAssociation Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association already exists.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_addAssociation(firewallPolicy: string, replaceExistingAssociation: boolean | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyAssociation): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/addAssociation&replaceExistingAssociation=' + replaceExistingAssociation + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts a rule into a firewall policy.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/addRule
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_addRule(firewallPolicy: string, requestId: string | null | undefined, requestBody: FirewallPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/addRule&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Copies rules to the specified firewall policy.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/cloneRules
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceFirewallPolicy The firewall policy from which to copy rules.
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_cloneRules(firewallPolicy: string, requestId: string | null | undefined, sourceFirewallPolicy: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/cloneRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceFirewallPolicy=' + (sourceFirewallPolicy == null ? '' : encodeURIComponent(sourceFirewallPolicy)), null, {});
		}

		/**
		 * Gets an association with the specified name.
		 * Get locations/global/firewallPolicies/{firewallPolicy}/getAssociation
		 * @param {string} firewallPolicy Name of the firewall policy to which the queried rule belongs.
		 * @param {string} name The name of the association to get from the firewall policy.
		 * @return {FirewallPolicyAssociation} Successful response
		 */
		Compute_firewallPolicies_getAssociation(firewallPolicy: string, name: string | null | undefined): Observable<FirewallPolicyAssociation> {
			return this.http.get<FirewallPolicyAssociation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/getAssociation&name=' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Gets a rule of the specified priority.
		 * Get locations/global/firewallPolicies/{firewallPolicy}/getRule
		 * @param {string} firewallPolicy Name of the firewall policy to which the queried rule belongs.
		 * @param {number} priority The priority of the rule to get from the firewall policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {FirewallPolicyRule} Successful response
		 */
		Compute_firewallPolicies_getRule(firewallPolicy: string, priority: number | null | undefined): Observable<FirewallPolicyRule> {
			return this.http.get<FirewallPolicyRule>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/getRule&priority=' + priority, {});
		}

		/**
		 * Moves the specified firewall policy.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/move
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} parentId The new parent of the firewall policy. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_move(firewallPolicy: string, parentId: string | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/move&parentId=' + (parentId == null ? '' : encodeURIComponent(parentId)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Patches a rule of the specified priority.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/patchRule
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} priority The priority of the rule to patch.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_patchRule(firewallPolicy: string, priority: number | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/patchRule&priority=' + priority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes an association for the specified firewall policy.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/removeAssociation
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} name Name for the attachment that will be removed.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_removeAssociation(firewallPolicy: string, name: string | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/removeAssociation&name=' + (name == null ? '' : encodeURIComponent(name)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Deletes a rule of the specified priority.
		 * Post locations/global/firewallPolicies/{firewallPolicy}/removeRule
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} priority The priority of the rule to remove from the firewall policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewallPolicies_removeRule(firewallPolicy: string, priority: number | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'locations/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/removeRule&priority=' + priority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get locations/global/firewallPolicies/{resource}/getIamPolicy
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_firewallPolicies_getIamPolicy(resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'locations/global/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post locations/global/firewallPolicies/{resource}/setIamPolicy
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_firewallPolicies_setIamPolicy(resource: string, requestBody: GlobalOrganizationSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'locations/global/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post locations/global/firewallPolicies/{resource}/testIamPermissions
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_firewallPolicies_testIamPermissions(resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'locations/global/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified organization.
		 * Get locations/global/operations
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {string} parentId Parent ID for this request.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {OperationList} Successful response
		 */
		Compute_globalOrganizationOperations_list(filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, parentId: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<OperationList> {
			return this.http.get<OperationList>(this.baseUri + 'locations/global/operations?filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&parentId=' + (parentId == null ? '' : encodeURIComponent(parentId)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified Operations resource.
		 * Delete locations/global/operations/{operation}
		 * @param {string} operation Name of the Operations resource to delete.
		 * @param {string} parentId Parent ID for this request.
		 * @return {void} Successful response
		 */
		Compute_globalOrganizationOperations_delete(operation: string, parentId: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'locations/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '&parentId=' + (parentId == null ? '' : encodeURIComponent(parentId)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
		 * Get locations/global/operations/{operation}
		 * @param {string} operation Name of the Operations resource to return.
		 * @param {string} parentId Parent ID for this request.
		 * @return {Operation} Successful response
		 */
		Compute_globalOrganizationOperations_get(operation: string, parentId: string | null | undefined): Observable<Operation> {
			return this.http.get<Operation>(this.baseUri + 'locations/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '&parentId=' + (parentId == null ? '' : encodeURIComponent(parentId)), {});
		}

		/**
		 * Returns the specified Project resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
		 * Get projects/{project}
		 * @param {string} project Project ID for this request.
		 * @return {Project} Successful response
		 */
		Compute_projects_get(project: string): Observable<Project> {
			return this.http.get<Project>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)), {});
		}

		/**
		 * Retrieves an aggregated list of accelerator types.
		 * Get projects/{project}/aggregated/acceleratorTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AcceleratorTypeAggregatedList} Successful response
		 */
		Compute_acceleratorTypes_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<AcceleratorTypeAggregatedList> {
			return this.http.get<AcceleratorTypeAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/acceleratorTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of addresses.
		 * Get projects/{project}/aggregated/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AddressAggregatedList} Successful response
		 */
		Compute_addresses_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<AddressAggregatedList> {
			return this.http.get<AddressAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/addresses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of autoscalers.
		 * Get projects/{project}/aggregated/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AutoscalerAggregatedList} Successful response
		 */
		Compute_autoscalers_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<AutoscalerAggregatedList> {
			return this.http.get<AutoscalerAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/autoscalers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all BackendService resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/backendServices
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {BackendServiceAggregatedList} Successful response
		 */
		Compute_backendServices_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<BackendServiceAggregatedList> {
			return this.http.get<BackendServiceAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/backendServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of commitments by region.
		 * Get projects/{project}/aggregated/commitments
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {CommitmentAggregatedList} Successful response
		 */
		Compute_regionCommitments_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<CommitmentAggregatedList> {
			return this.http.get<CommitmentAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/commitments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of disk types.
		 * Get projects/{project}/aggregated/diskTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {DiskTypeAggregatedList} Successful response
		 */
		Compute_diskTypes_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<DiskTypeAggregatedList> {
			return this.http.get<DiskTypeAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/diskTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of persistent disks.
		 * Get projects/{project}/aggregated/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {DiskAggregatedList} Successful response
		 */
		Compute_disks_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<DiskAggregatedList> {
			return this.http.get<DiskAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/disks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of forwarding rules.
		 * Get projects/{project}/aggregated/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ForwardingRuleAggregatedList} Successful response
		 */
		Compute_forwardingRules_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<ForwardingRuleAggregatedList> {
			return this.http.get<ForwardingRuleAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/forwardingRules&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/healthChecks
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {HealthChecksAggregatedList} Successful response
		 */
		Compute_healthChecks_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<HealthChecksAggregatedList> {
			return this.http.get<HealthChecksAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/healthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of managed instance groups and groups them by zone.
		 * Get projects/{project}/aggregated/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupManagerAggregatedList} Successful response
		 */
		Compute_instanceGroupManagers_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<InstanceGroupManagerAggregatedList> {
			return this.http.get<InstanceGroupManagerAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instanceGroupManagers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of instance groups and sorts them by zone.
		 * Get projects/{project}/aggregated/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupAggregatedList} Successful response
		 */
		Compute_instanceGroups_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<InstanceGroupAggregatedList> {
			return this.http.get<InstanceGroupAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instanceGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all InstanceTemplates resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/instanceTemplates
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceTemplateAggregatedList} Successful response
		 */
		Compute_instanceTemplates_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<InstanceTemplateAggregatedList> {
			return this.http.get<InstanceTemplateAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instanceTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project that has a very large number of instances.
		 * Get projects/{project}/aggregated/instances
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceAggregatedList} Successful response
		 */
		Compute_instances_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<InstanceAggregatedList> {
			return this.http.get<InstanceAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/instances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of interconnect attachments.
		 * Get projects/{project}/aggregated/interconnectAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InterconnectAttachmentAggregatedList} Successful response
		 */
		Compute_interconnectAttachments_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<InterconnectAttachmentAggregatedList> {
			return this.http.get<InterconnectAttachmentAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/interconnectAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of machine types.
		 * Get projects/{project}/aggregated/machineTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {MachineTypeAggregatedList} Successful response
		 */
		Compute_machineTypes_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<MachineTypeAggregatedList> {
			return this.http.get<MachineTypeAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/machineTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all NetworkAttachment resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/networkAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkAttachmentAggregatedList} Successful response
		 */
		Compute_networkAttachments_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<NetworkAttachmentAggregatedList> {
			return this.http.get<NetworkAttachmentAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/networkAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all NetworkEdgeSecurityService resources available to the specified project.
		 * Get projects/{project}/aggregated/networkEdgeSecurityServices
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEdgeSecurityServiceAggregatedList} Successful response
		 */
		Compute_networkEdgeSecurityServices_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<NetworkEdgeSecurityServiceAggregatedList> {
			return this.http.get<NetworkEdgeSecurityServiceAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/networkEdgeSecurityServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of network endpoint groups and sorts them by zone.
		 * Get projects/{project}/aggregated/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupAggregatedList} Successful response
		 */
		Compute_networkEndpointGroups_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<NetworkEndpointGroupAggregatedList> {
			return this.http.get<NetworkEndpointGroupAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
		 * Get projects/{project}/aggregated/nodeGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeGroupAggregatedList} Successful response
		 */
		Compute_nodeGroups_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<NodeGroupAggregatedList> {
			return this.http.get<NodeGroupAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/nodeGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of node templates.
		 * Get projects/{project}/aggregated/nodeTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeTemplateAggregatedList} Successful response
		 */
		Compute_nodeTemplates_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<NodeTemplateAggregatedList> {
			return this.http.get<NodeTemplateAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/nodeTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of node types.
		 * Get projects/{project}/aggregated/nodeTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeTypeAggregatedList} Successful response
		 */
		Compute_nodeTypes_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<NodeTypeAggregatedList> {
			return this.http.get<NodeTypeAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/nodeTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of all operations.
		 * Get projects/{project}/aggregated/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {OperationAggregatedList} Successful response
		 */
		Compute_globalOperations_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<OperationAggregatedList> {
			return this.http.get<OperationAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of packetMirrorings.
		 * Get projects/{project}/aggregated/packetMirrorings
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {PacketMirroringAggregatedList} Successful response
		 */
		Compute_packetMirrorings_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<PacketMirroringAggregatedList> {
			return this.http.get<PacketMirroringAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/packetMirrorings&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Lists all PublicDelegatedPrefix resources owned by the specific project across all scopes.
		 * Get projects/{project}/aggregated/publicDelegatedPrefixes
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {PublicDelegatedPrefixAggregatedList} Successful response
		 */
		Compute_publicDelegatedPrefixes_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<PublicDelegatedPrefixAggregatedList> {
			return this.http.get<PublicDelegatedPrefixAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/publicDelegatedPrefixes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of reservations.
		 * Get projects/{project}/aggregated/reservations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ReservationAggregatedList} Successful response
		 */
		Compute_reservations_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<ReservationAggregatedList> {
			return this.http.get<ReservationAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/reservations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of resource policies.
		 * Get projects/{project}/aggregated/resourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ResourcePolicyAggregatedList} Successful response
		 */
		Compute_resourcePolicies_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<ResourcePolicyAggregatedList> {
			return this.http.get<ResourcePolicyAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/resourcePolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of routers.
		 * Get projects/{project}/aggregated/routers
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RouterAggregatedList} Successful response
		 */
		Compute_routers_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<RouterAggregatedList> {
			return this.http.get<RouterAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/routers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all SecurityPolicy resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/securityPolicies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SecurityPoliciesAggregatedList} Successful response
		 */
		Compute_securityPolicies_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<SecurityPoliciesAggregatedList> {
			return this.http.get<SecurityPoliciesAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/securityPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all ServiceAttachment resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/serviceAttachments
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ServiceAttachmentAggregatedList} Successful response
		 */
		Compute_serviceAttachments_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<ServiceAttachmentAggregatedList> {
			return this.http.get<ServiceAttachmentAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/serviceAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/sslCertificates
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslCertificateAggregatedList} Successful response
		 */
		Compute_sslCertificates_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<SslCertificateAggregatedList> {
			return this.http.get<SslCertificateAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/sslCertificates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all SslPolicy resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/sslPolicies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslPoliciesAggregatedList} Successful response
		 */
		Compute_sslPolicies_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<SslPoliciesAggregatedList> {
			return this.http.get<SslPoliciesAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/sslPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of subnetworks.
		 * Get projects/{project}/aggregated/subnetworks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SubnetworkAggregatedList} Successful response
		 */
		Compute_subnetworks_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<SubnetworkAggregatedList> {
			return this.http.get<SubnetworkAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/subnetworks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of all usable subnetworks in the project.
		 * Get projects/{project}/aggregated/subnetworks/listUsable
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {UsableSubnetworksAggregatedList} Successful response
		 */
		Compute_subnetworks_listUsable(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<UsableSubnetworksAggregatedList> {
			return this.http.get<UsableSubnetworksAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/subnetworks/listUsable&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/targetHttpProxies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetHttpProxyAggregatedList} Successful response
		 */
		Compute_targetHttpProxies_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<TargetHttpProxyAggregatedList> {
			return this.http.get<TargetHttpProxyAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetHttpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/targetHttpsProxies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetHttpsProxyAggregatedList} Successful response
		 */
		Compute_targetHttpsProxies_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<TargetHttpsProxyAggregatedList> {
			return this.http.get<TargetHttpsProxyAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetHttpsProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of target instances.
		 * Get projects/{project}/aggregated/targetInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetInstanceAggregatedList} Successful response
		 */
		Compute_targetInstances_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<TargetInstanceAggregatedList> {
			return this.http.get<TargetInstanceAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of target pools.
		 * Get projects/{project}/aggregated/targetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetPoolAggregatedList} Successful response
		 */
		Compute_targetPools_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<TargetPoolAggregatedList> {
			return this.http.get<TargetPoolAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetPools&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all TargetTcpProxy resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/targetTcpProxies
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetTcpProxyAggregatedList} Successful response
		 */
		Compute_targetTcpProxies_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<TargetTcpProxyAggregatedList> {
			return this.http.get<TargetTcpProxyAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetTcpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of target VPN gateways.
		 * Get projects/{project}/aggregated/targetVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetVpnGatewayAggregatedList} Successful response
		 */
		Compute_targetVpnGateways_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<TargetVpnGatewayAggregatedList> {
			return this.http.get<TargetVpnGatewayAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/targetVpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
		 * Get projects/{project}/aggregated/urlMaps
		 * @param {string} project Name of the project scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {UrlMapsAggregatedList} Successful response
		 */
		Compute_urlMaps_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<UrlMapsAggregatedList> {
			return this.http.get<UrlMapsAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/urlMaps&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of VPN gateways.
		 * Get projects/{project}/aggregated/vpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {VpnGatewayAggregatedList} Successful response
		 */
		Compute_vpnGateways_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<VpnGatewayAggregatedList> {
			return this.http.get<VpnGatewayAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/vpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Retrieves an aggregated list of VPN tunnels.
		 * Get projects/{project}/aggregated/vpnTunnels
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {boolean} includeAllScopes Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {VpnTunnelAggregatedList} Successful response
		 */
		Compute_vpnTunnels_aggregatedList(project: string, filter: string | null | undefined, includeAllScopes: boolean | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, serviceProjectNumber: string | null | undefined): Observable<VpnTunnelAggregatedList> {
			return this.http.get<VpnTunnelAggregatedList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/aggregated/vpnTunnels&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&includeAllScopes=' + includeAllScopes + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess + '&serviceProjectNumber=' + (serviceProjectNumber == null ? '' : encodeURIComponent(serviceProjectNumber)), {});
		}

		/**
		 * Disable this project as a shared VPC host project.
		 * Post projects/{project}/disableXpnHost
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_disableXpnHost(project: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/disableXpnHost&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Disable a service resource (also known as service project) associated with this host project.
		 * Post projects/{project}/disableXpnResource
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_disableXpnResource(project: string, requestId: string | null | undefined, requestBody: ProjectsDisableXpnResourceRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/disableXpnResource&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Enable this project as a shared VPC host project.
		 * Post projects/{project}/enableXpnHost
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_enableXpnHost(project: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/enableXpnHost&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
		 * Post projects/{project}/enableXpnResource
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_enableXpnResource(project: string, requestId: string | null | undefined, requestBody: ProjectsEnableXpnResourceRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/enableXpnResource&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the shared VPC host project that this project links to. May be empty if no link exists.
		 * Get projects/{project}/getXpnHost
		 * @param {string} project Project ID for this request.
		 * @return {Project} Successful response
		 */
		Compute_projects_getXpnHost(project: string): Observable<Project> {
			return this.http.get<Project>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/getXpnHost', {});
		}

		/**
		 * Gets service resources (a.k.a service project) associated with this host project.
		 * Get projects/{project}/getXpnResources
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ProjectsGetXpnResources} Successful response
		 */
		Compute_projects_getXpnResources(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ProjectsGetXpnResources> {
			return this.http.get<ProjectsGetXpnResources>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/getXpnResources&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Retrieves a list of global addresses.
		 * Get projects/{project}/global/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AddressList} Successful response
		 */
		Compute_globalAddresses_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<AddressList> {
			return this.http.get<AddressList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an address resource in the specified project by using the data included in the request.
		 * Post projects/{project}/global/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalAddresses_insert(project: string, requestId: string | null | undefined, requestBody: Address): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified address resource.
		 * Delete projects/{project}/global/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} address Name of the address resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalAddresses_delete(project: string, address: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified address resource.
		 * Get projects/{project}/global/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} address Name of the address resource to return.
		 * @return {Address} Successful response
		 */
		Compute_globalAddresses_get(project: string, address: string): Observable<Address> {
			return this.http.get<Address>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses/' + (address == null ? '' : encodeURIComponent(address)), {});
		}

		/**
		 * Moves the specified address resource from one project to another project.
		 * Post projects/{project}/global/addresses/{address}/move
		 * @param {string} project Source project ID which the Address is moved from.
		 * @param {string} address Name of the address resource to move.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalAddresses_move(project: string, address: string, requestId: string | null | undefined, requestBody: GlobalAddressesMoveRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '/move&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/global/addresses/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_globalAddresses_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/addresses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of BackendBucket resources available to the specified project.
		 * Get projects/{project}/global/backendBuckets
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {BackendBucketList} Successful response
		 */
		Compute_backendBuckets_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<BackendBucketList> {
			return this.http.get<BackendBucketList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a BackendBucket resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/backendBuckets
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_insert(project: string, requestId: string | null | undefined, requestBody: BackendBucket): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified BackendBucket resource.
		 * Delete projects/{project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_delete(project: string, backendBucket: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified BackendBucket resource.
		 * Get projects/{project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to return.
		 * @return {BackendBucket} Successful response
		 */
		Compute_backendBuckets_get(project: string, backendBucket: string): Observable<BackendBucket> {
			return this.http.get<BackendBucket>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)), {});
		}

		/**
		 * Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_patch(project: string, backendBucket: string, requestId: string | null | undefined, requestBody: BackendBucket): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified BackendBucket resource with the data included in the request.
		 * Put projects/{project}/global/backendBuckets/{backendBucket}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_update(project: string, backendBucket: string, requestId: string | null | undefined, requestBody: BackendBucket): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds a key for validating requests with signed URLs for this backend bucket.
		 * Post projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_addSignedUrlKey(project: string, backendBucket: string, requestId: string | null | undefined, requestBody: SignedUrlKey): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '/addSignedUrlKey&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a key for validating requests with signed URLs for this backend bucket.
		 * Post projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} keyName The name of the Signed URL Key to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_deleteSignedUrlKey(project: string, backendBucket: string, keyName: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '/deleteSignedUrlKey&keyName=' + (keyName == null ? '' : encodeURIComponent(keyName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Sets the edge security policy for the specified backend bucket.
		 * Post projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} backendBucket Name of the BackendBucket resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendBuckets_setEdgeSecurityPolicy(project: string, backendBucket: string, requestId: string | null | undefined, requestBody: SecurityPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (backendBucket == null ? '' : encodeURIComponent(backendBucket)) + '/setEdgeSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/backendBuckets/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_backendBuckets_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/backendBuckets/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_backendBuckets_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/backendBuckets/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_backendBuckets_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendBuckets/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of BackendService resources available to the specified project.
		 * Get projects/{project}/global/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {BackendServiceList} Successful response
		 */
		Compute_backendServices_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<BackendServiceList> {
			return this.http.get<BackendServiceList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview .
		 * Post projects/{project}/global/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_insert(project: string, requestId: string | null | undefined, requestBody: BackendService): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves an aggregated list of all usable backend services in the specified project.
		 * Get projects/{project}/global/backendServices/listUsable
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {BackendServiceListUsable} Successful response
		 */
		Compute_backendServices_listUsable(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<BackendServiceListUsable> {
			return this.http.get<BackendServiceListUsable>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/listUsable&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified BackendService resource.
		 * Delete projects/{project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_delete(project: string, backendService: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified BackendService resource.
		 * Get projects/{project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to return.
		 * @return {BackendService} Successful response
		 */
		Compute_backendServices_get(project: string, backendService: string): Observable<BackendService> {
			return this.http.get<BackendService>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)), {});
		}

		/**
		 * Patches the specified BackendService resource with the data included in the request. For more information, see Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_patch(project: string, backendService: string, requestId: string | null | undefined, requestBody: BackendService): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
		 * Put projects/{project}/global/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_update(project: string, backendService: string, requestId: string | null | undefined, requestBody: BackendService): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds a key for validating requests with signed URLs for this backend service.
		 * Post projects/{project}/global/backendServices/{backendService}/addSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_addSignedUrlKey(project: string, backendService: string, requestId: string | null | undefined, requestBody: SignedUrlKey): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/addSignedUrlKey&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a key for validating requests with signed URLs for this backend service.
		 * Post projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
		 * @param {string} keyName The name of the Signed URL Key to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_deleteSignedUrlKey(project: string, backendService: string, keyName: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/deleteSignedUrlKey&keyName=' + (keyName == null ? '' : encodeURIComponent(keyName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Gets the most recent health check results for this BackendService. Example request body: { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
		 * Post projects/{project}/global/backendServices/{backendService}/getHealth
		 * @param {string} backendService Name of the BackendService resource to which the queried instance belongs.
		 * @return {BackendServiceGroupHealth} Successful response
		 */
		Compute_backendServices_getHealth(project: string, backendService: string, requestBody: ResourceGroupReference): Observable<BackendServiceGroupHealth> {
			return this.http.post<BackendServiceGroupHealth>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/getHealth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the edge security policy for the specified backend service.
		 * Post projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the edge security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_setEdgeSecurityPolicy(project: string, backendService: string, requestId: string | null | undefined, requestBody: SecurityPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/setEdgeSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
		 * Post projects/{project}/global/backendServices/{backendService}/setSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} backendService Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_backendServices_setSecurityPolicy(project: string, backendService: string, requestId: string | null | undefined, requestBody: SecurityPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/setSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/backendServices/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_backendServices_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/backendServices/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_backendServices_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/backendServices/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_backendServices_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/backendServices/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of ExternalVpnGateway available to the specified project.
		 * Get projects/{project}/global/externalVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ExternalVpnGatewayList} Successful response
		 */
		Compute_externalVpnGateways_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ExternalVpnGatewayList> {
			return this.http.get<ExternalVpnGatewayList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a ExternalVpnGateway in the specified project using the data included in the request.
		 * Post projects/{project}/global/externalVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_externalVpnGateways_insert(project: string, requestId: string | null | undefined, requestBody: ExternalVpnGateway): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified externalVpnGateway.
		 * Delete projects/{project}/global/externalVpnGateways/{externalVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} externalVpnGateway Name of the externalVpnGateways to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_externalVpnGateways_delete(project: string, externalVpnGateway: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (externalVpnGateway == null ? '' : encodeURIComponent(externalVpnGateway)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
		 * Get projects/{project}/global/externalVpnGateways/{externalVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} externalVpnGateway Name of the externalVpnGateway to return.
		 * @return {ExternalVpnGateway} Successful response
		 */
		Compute_externalVpnGateways_get(project: string, externalVpnGateway: string): Observable<ExternalVpnGateway> {
			return this.http.get<ExternalVpnGateway>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (externalVpnGateway == null ? '' : encodeURIComponent(externalVpnGateway)), {});
		}

		/**
		 * Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/global/externalVpnGateways/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_externalVpnGateways_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_externalVpnGateways_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/externalVpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the policies that have been configured for the specified project.
		 * Get projects/{project}/global/firewallPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {FirewallPolicyList} Successful response
		 */
		Compute_networkFirewallPolicies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<FirewallPolicyList> {
			return this.http.get<FirewallPolicyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new policy in the specified project using the data included in the request.
		 * Post projects/{project}/global/firewallPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_insert(project: string, requestId: string | null | undefined, requestBody: FirewallPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified policy.
		 * Delete projects/{project}/global/firewallPolicies/{firewallPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_delete(project: string, firewallPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified network firewall policy.
		 * Get projects/{project}/global/firewallPolicies/{firewallPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to get.
		 * @return {FirewallPolicy} Successful response
		 */
		Compute_networkFirewallPolicies_get(project: string, firewallPolicy: string): Observable<FirewallPolicy> {
			return this.http.get<FirewallPolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)), {});
		}

		/**
		 * Patches the specified policy with the data included in the request.
		 * Patch projects/{project}/global/firewallPolicies/{firewallPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_patch(project: string, firewallPolicy: string, requestId: string | null | undefined, requestBody: FirewallPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts an association for the specified firewall policy.
		 * Post projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {boolean} replaceExistingAssociation Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association already exists.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_addAssociation(project: string, firewallPolicy: string, replaceExistingAssociation: boolean | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyAssociation): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/addAssociation&replaceExistingAssociation=' + replaceExistingAssociation + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts a rule into a firewall policy.
		 * Post projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} maxPriority When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {number} minPriority When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_addRule(project: string, firewallPolicy: string, maxPriority: number | null | undefined, minPriority: number | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/addRule&maxPriority=' + maxPriority + '&minPriority=' + minPriority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Copies rules to the specified firewall policy.
		 * Post projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceFirewallPolicy The firewall policy from which to copy rules.
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_cloneRules(project: string, firewallPolicy: string, requestId: string | null | undefined, sourceFirewallPolicy: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/cloneRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceFirewallPolicy=' + (sourceFirewallPolicy == null ? '' : encodeURIComponent(sourceFirewallPolicy)), null, {});
		}

		/**
		 * Gets an association with the specified name.
		 * Get projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to which the queried association belongs.
		 * @param {string} name The name of the association to get from the firewall policy.
		 * @return {FirewallPolicyAssociation} Successful response
		 */
		Compute_networkFirewallPolicies_getAssociation(project: string, firewallPolicy: string, name: string | null | undefined): Observable<FirewallPolicyAssociation> {
			return this.http.get<FirewallPolicyAssociation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/getAssociation&name=' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Gets a rule of the specified priority.
		 * Get projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to which the queried rule belongs.
		 * @param {number} priority The priority of the rule to get from the firewall policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {FirewallPolicyRule} Successful response
		 */
		Compute_networkFirewallPolicies_getRule(project: string, firewallPolicy: string, priority: number | null | undefined): Observable<FirewallPolicyRule> {
			return this.http.get<FirewallPolicyRule>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/getRule&priority=' + priority, {});
		}

		/**
		 * Patches a rule of the specified priority.
		 * Post projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} priority The priority of the rule to patch.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_patchRule(project: string, firewallPolicy: string, priority: number | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/patchRule&priority=' + priority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes an association for the specified firewall policy.
		 * Post projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} name Name for the attachment that will be removed.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_removeAssociation(project: string, firewallPolicy: string, name: string | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/removeAssociation&name=' + (name == null ? '' : encodeURIComponent(name)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Deletes a rule of the specified priority.
		 * Post projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule
		 * @param {string} project Project ID for this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} priority The priority of the rule to remove from the firewall policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkFirewallPolicies_removeRule(project: string, firewallPolicy: string, priority: number | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/removeRule&priority=' + priority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/firewallPolicies/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_networkFirewallPolicies_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/firewallPolicies/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_networkFirewallPolicies_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/firewallPolicies/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_networkFirewallPolicies_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of firewall rules available to the specified project.
		 * Get projects/{project}/global/firewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {FirewallList} Successful response
		 */
		Compute_firewalls_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<FirewallList> {
			return this.http.get<FirewallList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a firewall rule in the specified project using the data included in the request.
		 * Post projects/{project}/global/firewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewalls_insert(project: string, requestId: string | null | undefined, requestBody: Firewall): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified firewall.
		 * Delete projects/{project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewalls_delete(project: string, firewall: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified firewall.
		 * Get projects/{project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to return.
		 * @return {Firewall} Successful response
		 */
		Compute_firewalls_get(project: string, firewall: string): Observable<Firewall> {
			return this.http.get<Firewall>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)), {});
		}

		/**
		 * Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewalls_patch(project: string, firewall: string, requestId: string | null | undefined, requestBody: Firewall): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
		 * Put projects/{project}/global/firewalls/{firewall}
		 * @param {string} project Project ID for this request.
		 * @param {string} firewall Name of the firewall rule to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_firewalls_update(project: string, firewall: string, requestId: string | null | undefined, requestBody: Firewall): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/firewalls/' + (firewall == null ? '' : encodeURIComponent(firewall)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of GlobalForwardingRule resources available to the specified project.
		 * Get projects/{project}/global/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ForwardingRuleList} Successful response
		 */
		Compute_globalForwardingRules_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ForwardingRuleList> {
			return this.http.get<ForwardingRuleList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalForwardingRules_insert(project: string, requestId: string | null | undefined, requestBody: ForwardingRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified GlobalForwardingRule resource.
		 * Delete projects/{project}/global/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalForwardingRules_delete(project: string, forwardingRule: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
		 * Get projects/{project}/global/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to return.
		 * @return {ForwardingRule} Successful response
		 */
		Compute_globalForwardingRules_get(project: string, forwardingRule: string): Observable<ForwardingRule> {
			return this.http.get<ForwardingRule>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)), {});
		}

		/**
		 * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
		 * Patch projects/{project}/global/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalForwardingRules_patch(project: string, forwardingRule: string, requestId: string | null | undefined, requestBody: ForwardingRule): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
		 * Post projects/{project}/global/forwardingRules/{forwardingRule}/setTarget
		 * @param {string} project Project ID for this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource in which target is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalForwardingRules_setTarget(project: string, forwardingRule: string, requestId: string | null | undefined, requestBody: TargetReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '/setTarget&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on the specified resource. To learn more about labels, read the Labeling resources documentation.
		 * Post projects/{project}/global/forwardingRules/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_globalForwardingRules_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/forwardingRules/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of HealthCheck resources available to the specified project.
		 * Get projects/{project}/global/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {HealthCheckList} Successful response
		 */
		Compute_healthChecks_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<HealthCheckList> {
			return this.http.get<HealthCheckList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a HealthCheck resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_healthChecks_insert(project: string, requestId: string | null | undefined, requestBody: HealthCheck): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified HealthCheck resource.
		 * Delete projects/{project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_healthChecks_delete(project: string, healthCheck: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified HealthCheck resource.
		 * Get projects/{project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to return.
		 * @return {HealthCheck} Successful response
		 */
		Compute_healthChecks_get(project: string, healthCheck: string): Observable<HealthCheck> {
			return this.http.get<HealthCheck>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)), {});
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_healthChecks_patch(project: string, healthCheck: string, requestId: string | null | undefined, requestBody: HealthCheck): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request.
		 * Put projects/{project}/global/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_healthChecks_update(project: string, healthCheck: string, requestId: string | null | undefined, requestBody: HealthCheck): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of HttpHealthCheck resources available to the specified project.
		 * Get projects/{project}/global/httpHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {HttpHealthCheckList} Successful response
		 */
		Compute_httpHealthChecks_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<HttpHealthCheckList> {
			return this.http.get<HttpHealthCheckList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a HttpHealthCheck resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/httpHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpHealthChecks_insert(project: string, requestId: string | null | undefined, requestBody: HttpHealthCheck): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified HttpHealthCheck resource.
		 * Delete projects/{project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpHealthChecks_delete(project: string, httpHealthCheck: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified HttpHealthCheck resource.
		 * Get projects/{project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to return.
		 * @return {HttpHealthCheck} Successful response
		 */
		Compute_httpHealthChecks_get(project: string, httpHealthCheck: string): Observable<HttpHealthCheck> {
			return this.http.get<HttpHealthCheck>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)), {});
		}

		/**
		 * Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpHealthChecks_patch(project: string, httpHealthCheck: string, requestId: string | null | undefined, requestBody: HttpHealthCheck): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a HttpHealthCheck resource in the specified project using the data included in the request.
		 * Put projects/{project}/global/httpHealthChecks/{httpHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpHealthCheck Name of the HttpHealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpHealthChecks_update(project: string, httpHealthCheck: string, requestId: string | null | undefined, requestBody: HttpHealthCheck): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpHealthChecks/' + (httpHealthCheck == null ? '' : encodeURIComponent(httpHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of HttpsHealthCheck resources available to the specified project.
		 * Get projects/{project}/global/httpsHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {HttpsHealthCheckList} Successful response
		 */
		Compute_httpsHealthChecks_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<HttpsHealthCheckList> {
			return this.http.get<HttpsHealthCheckList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a HttpsHealthCheck resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/httpsHealthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpsHealthChecks_insert(project: string, requestId: string | null | undefined, requestBody: HttpsHealthCheck): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified HttpsHealthCheck resource.
		 * Delete projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpsHealthChecks_delete(project: string, httpsHealthCheck: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified HttpsHealthCheck resource.
		 * Get projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to return.
		 * @return {HttpsHealthCheck} Successful response
		 */
		Compute_httpsHealthChecks_get(project: string, httpsHealthCheck: string): Observable<HttpsHealthCheck> {
			return this.http.get<HttpsHealthCheck>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)), {});
		}

		/**
		 * Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpsHealthChecks_patch(project: string, httpsHealthCheck: string, requestId: string | null | undefined, requestBody: HttpsHealthCheck): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a HttpsHealthCheck resource in the specified project using the data included in the request.
		 * Put projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} httpsHealthCheck Name of the HttpsHealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_httpsHealthChecks_update(project: string, httpsHealthCheck: string, requestId: string | null | undefined, requestBody: HttpsHealthCheck): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/httpsHealthChecks/' + (httpsHealthCheck == null ? '' : encodeURIComponent(httpsHealthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
		 * Get projects/{project}/global/images
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ImageList} Successful response
		 */
		Compute_images_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ImageList> {
			return this.http.get<ImageList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an image in the specified project using the data included in the request.
		 * Post projects/{project}/global/images
		 * @param {string} project Project ID for this request.
		 * @param {boolean} forceCreate Force image creation if true.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_images_insert(project: string, forceCreate: boolean | null | undefined, requestId: string | null | undefined, requestBody: Image): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images&forceCreate=' + forceCreate + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the latest image that is part of an image family and is not deprecated. For more information on image families, see Public image families documentation.
		 * Get projects/{project}/global/images/family/{family}
		 * @param {string} project The image project that the image belongs to. For example, to get a CentOS image, specify centos-cloud as the image project.
		 * @param {string} family Name of the image family to search for.
		 * @return {Image} Successful response
		 */
		Compute_images_getFromFamily(project: string, family: string): Observable<Image> {
			return this.http.get<Image>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/family/' + (family == null ? '' : encodeURIComponent(family)), {});
		}

		/**
		 * Deletes the specified image.
		 * Delete projects/{project}/global/images/{image}
		 * @param {string} project Project ID for this request.
		 * @param {string} image Name of the image resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_images_delete(project: string, image: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified image.
		 * Get projects/{project}/global/images/{image}
		 * @param {string} project Project ID for this request.
		 * @param {string} image Name of the image resource to return.
		 * @return {Image} Successful response
		 */
		Compute_images_get(project: string, image: string): Observable<Image> {
			return this.http.get<Image>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)), {});
		}

		/**
		 * Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
		 * Patch projects/{project}/global/images/{image}
		 * @param {string} project Project ID for this request.
		 * @param {string} image Name of the image resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_images_patch(project: string, image: string, requestId: string | null | undefined, requestBody: Image): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the deprecation status of an image. If an empty request body is given, clears the deprecation status instead.
		 * Post projects/{project}/global/images/{image}/deprecate
		 * @param {string} project Project ID for this request.
		 * @param {string} image Image name.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_images_deprecate(project: string, image: string, requestId: string | null | undefined, requestBody: DeprecationStatus): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (image == null ? '' : encodeURIComponent(image)) + '/deprecate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/images/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_images_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/images/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_images_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/global/images/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_images_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/images/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_images_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/images/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of instance templates that are contained within the specified project.
		 * Get projects/{project}/global/instanceTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceTemplateList} Successful response
		 */
		Compute_instanceTemplates_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceTemplateList> {
			return this.http.get<InstanceTemplateList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
		 * Post projects/{project}/global/instanceTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceTemplates_insert(project: string, requestId: string | null | undefined, requestBody: InstanceTemplate): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
		 * Delete projects/{project}/global/instanceTemplates/{instanceTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} instanceTemplate The name of the instance template to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceTemplates_delete(project: string, instanceTemplate: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (instanceTemplate == null ? '' : encodeURIComponent(instanceTemplate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified instance template.
		 * Get projects/{project}/global/instanceTemplates/{instanceTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} instanceTemplate The name of the instance template.
		 * @return {InstanceTemplate} Successful response
		 */
		Compute_instanceTemplates_get(project: string, instanceTemplate: string): Observable<InstanceTemplate> {
			return this.http.get<InstanceTemplate>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (instanceTemplate == null ? '' : encodeURIComponent(instanceTemplate)), {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/instanceTemplates/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_instanceTemplates_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/instanceTemplates/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_instanceTemplates_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/instanceTemplates/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_instanceTemplates_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/instanceTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of interconnect locations available to the specified project.
		 * Get projects/{project}/global/interconnectLocations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InterconnectLocationList} Successful response
		 */
		Compute_interconnectLocations_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InterconnectLocationList> {
			return this.http.get<InterconnectLocationList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnectLocations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
		 * Get projects/{project}/global/interconnectLocations/{interconnectLocation}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnectLocation Name of the interconnect location to return.
		 * @return {InterconnectLocation} Successful response
		 */
		Compute_interconnectLocations_get(project: string, interconnectLocation: string): Observable<InterconnectLocation> {
			return this.http.get<InterconnectLocation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnectLocations/' + (interconnectLocation == null ? '' : encodeURIComponent(interconnectLocation)), {});
		}

		/**
		 * Retrieves the list of interconnect remote locations available to the specified project.
		 * Get projects/{project}/global/interconnectRemoteLocations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InterconnectRemoteLocationList} Successful response
		 */
		Compute_interconnectRemoteLocations_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InterconnectRemoteLocationList> {
			return this.http.get<InterconnectRemoteLocationList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnectRemoteLocations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the details for the specified interconnect remote location. Gets a list of available interconnect remote locations by making a list() request.
		 * Get projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnectRemoteLocation Name of the interconnect remote location to return.
		 * @return {InterconnectRemoteLocation} Successful response
		 */
		Compute_interconnectRemoteLocations_get(project: string, interconnectRemoteLocation: string): Observable<InterconnectRemoteLocation> {
			return this.http.get<InterconnectRemoteLocation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnectRemoteLocations/' + (interconnectRemoteLocation == null ? '' : encodeURIComponent(interconnectRemoteLocation)), {});
		}

		/**
		 * Retrieves the list of Interconnects available to the specified project.
		 * Get projects/{project}/global/interconnects
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InterconnectList} Successful response
		 */
		Compute_interconnects_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InterconnectList> {
			return this.http.get<InterconnectList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an Interconnect in the specified project using the data included in the request.
		 * Post projects/{project}/global/interconnects
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_interconnects_insert(project: string, requestId: string | null | undefined, requestBody: Interconnect): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified Interconnect.
		 * Delete projects/{project}/global/interconnects/{interconnect}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_interconnects_delete(project: string, interconnect: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified Interconnect. Get a list of available Interconnects by making a list() request.
		 * Get projects/{project}/global/interconnects/{interconnect}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect to return.
		 * @return {Interconnect} Successful response
		 */
		Compute_interconnects_get(project: string, interconnect: string): Observable<Interconnect> {
			return this.http.get<Interconnect>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)), {});
		}

		/**
		 * Updates the specified Interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/interconnects/{interconnect}
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_interconnects_patch(project: string, interconnect: string, requestId: string | null | undefined, requestBody: Interconnect): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the interconnectDiagnostics for the specified Interconnect. In the event of a global outage, do not use this API to make decisions about where to redirect your network traffic. Unlike a VLAN attachment, which is regional, a Cloud Interconnect connection is a global resource. A global outage can prevent this API from functioning properly.
		 * Get projects/{project}/global/interconnects/{interconnect}/getDiagnostics
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect resource to query.
		 * @return {InterconnectsGetDiagnosticsResponse} Successful response
		 */
		Compute_interconnects_getDiagnostics(project: string, interconnect: string): Observable<InterconnectsGetDiagnosticsResponse> {
			return this.http.get<InterconnectsGetDiagnosticsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '/getDiagnostics', {});
		}

		/**
		 * Returns the interconnectMacsecConfig for the specified Interconnect.
		 * Get projects/{project}/global/interconnects/{interconnect}/getMacsecConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} interconnect Name of the interconnect resource to query.
		 * @return {InterconnectsGetMacsecConfigResponse} Successful response
		 */
		Compute_interconnects_getMacsecConfig(project: string, interconnect: string): Observable<InterconnectsGetMacsecConfigResponse> {
			return this.http.get<InterconnectsGetMacsecConfigResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (interconnect == null ? '' : encodeURIComponent(interconnect)) + '/getMacsecConfig', {});
		}

		/**
		 * Sets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/global/interconnects/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_interconnects_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/interconnects/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get projects/{project}/global/licenseCodes/{licenseCode}
		 * @param {string} project Project ID for this request.
		 * @param {string} licenseCode Number corresponding to the License code resource to return.
		 * @return {LicenseCode} Successful response
		 */
		Compute_licenseCodes_get(project: string, licenseCode: string): Observable<LicenseCode> {
			return this.http.get<LicenseCode>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenseCodes/' + (licenseCode == null ? '' : encodeURIComponent(licenseCode)), {});
		}

		/**
		 * Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post projects/{project}/global/licenseCodes/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_licenseCodes_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenseCodes/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get projects/{project}/global/licenses
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {LicensesListResponse} Successful response
		 */
		Compute_licenses_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<LicensesListResponse> {
			return this.http.get<LicensesListResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Create a License resource in the specified project. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post projects/{project}/global/licenses
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_licenses_insert(project: string, requestId: string | null | undefined, requestBody: License): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified license. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Delete projects/{project}/global/licenses/{license}
		 * @param {string} project Project ID for this request.
		 * @param {string} license Name of the license resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_licenses_delete(project: string, license: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (license == null ? '' : encodeURIComponent(license)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified License resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get projects/{project}/global/licenses/{license}
		 * @param {string} project Project ID for this request.
		 * @param {string} license Name of the License resource to return.
		 * @return {License} Successful response
		 */
		Compute_licenses_get(project: string, license: string): Observable<License> {
			return this.http.get<License>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (license == null ? '' : encodeURIComponent(license)), {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Get projects/{project}/global/licenses/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_licenses_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post projects/{project}/global/licenses/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_licenses_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
		 * Post projects/{project}/global/licenses/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_licenses_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/licenses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of machine images that are contained within the specified project.
		 * Get projects/{project}/global/machineImages
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {MachineImageList} Successful response
		 */
		Compute_machineImages_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<MachineImageList> {
			return this.http.get<MachineImageList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a machine image in the specified project using the data that is included in the request. If you are creating a new machine image to update an existing instance, your new machine image should use the same network or, if applicable, the same subnetwork as the original instance.
		 * Post projects/{project}/global/machineImages
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceInstance Required. Source instance that is used to create the machine image from.
		 * @return {Operation} Successful response
		 */
		Compute_machineImages_insert(project: string, requestId: string | null | undefined, sourceInstance: string | null | undefined, requestBody: MachineImage): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceInstance=' + (sourceInstance == null ? '' : encodeURIComponent(sourceInstance)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified machine image. Deleting a machine image is permanent and cannot be undone.
		 * Delete projects/{project}/global/machineImages/{machineImage}
		 * @param {string} project Project ID for this request.
		 * @param {string} machineImage The name of the machine image to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_machineImages_delete(project: string, machineImage: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages/' + (machineImage == null ? '' : encodeURIComponent(machineImage)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified machine image.
		 * Get projects/{project}/global/machineImages/{machineImage}
		 * @param {string} project Project ID for this request.
		 * @param {string} machineImage The name of the machine image.
		 * @return {MachineImage} Successful response
		 */
		Compute_machineImages_get(project: string, machineImage: string): Observable<MachineImage> {
			return this.http.get<MachineImage>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages/' + (machineImage == null ? '' : encodeURIComponent(machineImage)), {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/machineImages/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_machineImages_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/machineImages/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_machineImages_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/machineImages/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_machineImages_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/machineImages/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of network endpoint groups that are located in the specified project.
		 * Get projects/{project}/global/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupList} Successful response
		 */
		Compute_globalNetworkEndpointGroups_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkEndpointGroupList> {
			return this.http.get<NetworkEndpointGroupList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a network endpoint group in the specified project using the parameters that are included in the request.
		 * Post projects/{project}/global/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalNetworkEndpointGroups_insert(project: string, requestId: string | null | undefined, requestBody: NetworkEndpointGroup): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
		 * Delete projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalNetworkEndpointGroups_delete(project: string, networkEndpointGroup: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified network endpoint group.
		 * Get projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
		 * @return {NetworkEndpointGroup} Successful response
		 */
		Compute_globalNetworkEndpointGroups_get(project: string, networkEndpointGroup: string): Observable<NetworkEndpointGroup> {
			return this.http.get<NetworkEndpointGroup>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)), {});
		}

		/**
		 * Attach a network endpoint to the specified network endpoint group.
		 * Post projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalNetworkEndpointGroups_attachNetworkEndpoints(project: string, networkEndpointGroup: string, requestId: string | null | undefined, requestBody: GlobalNetworkEndpointGroupsAttachEndpointsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/attachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Detach the network endpoint from the specified network endpoint group.
		 * Post projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalNetworkEndpointGroups_detachNetworkEndpoints(project: string, networkEndpointGroup: string, requestId: string | null | undefined, requestBody: GlobalNetworkEndpointGroupsDetachEndpointsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/detachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the network endpoints in the specified network endpoint group.
		 * Post projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupsListNetworkEndpoints} Successful response
		 */
		Compute_globalNetworkEndpointGroups_listNetworkEndpoints(project: string, networkEndpointGroup: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkEndpointGroupsListNetworkEndpoints> {
			return this.http.post<NetworkEndpointGroupsListNetworkEndpoints>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/listNetworkEndpoints&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Retrieves the list of networks available to the specified project.
		 * Get projects/{project}/global/networks
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkList} Successful response
		 */
		Compute_networks_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkList> {
			return this.http.get<NetworkList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a network in the specified project using the data included in the request.
		 * Post projects/{project}/global/networks
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_insert(project: string, requestId: string | null | undefined, requestBody: Network): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified network.
		 * Delete projects/{project}/global/networks/{network}
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_delete(project: string, network: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified network.
		 * Get projects/{project}/global/networks/{network}
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to return.
		 * @return {Network} Successful response
		 */
		Compute_networks_get(project: string, network: string): Observable<Network> {
			return this.http.get<Network>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)), {});
		}

		/**
		 * Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
		 * Patch projects/{project}/global/networks/{network}
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_patch(project: string, network: string, requestId: string | null | undefined, requestBody: Network): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds a peering to the specified network.
		 * Post projects/{project}/global/networks/{network}/addPeering
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network resource to add peering to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_addPeering(project: string, network: string, requestId: string | null | undefined, requestBody: NetworksAddPeeringRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/addPeering&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the effective firewalls on a given network.
		 * Get projects/{project}/global/networks/{network}/getEffectiveFirewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network for this request.
		 * @return {NetworksGetEffectiveFirewallsResponse} Successful response
		 */
		Compute_networks_getEffectiveFirewalls(project: string, network: string): Observable<NetworksGetEffectiveFirewallsResponse> {
			return this.http.get<NetworksGetEffectiveFirewallsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/getEffectiveFirewalls', {});
		}

		/**
		 * Lists the peering routes exchanged over peering connection.
		 * Get projects/{project}/global/networks/{network}/listPeeringRoutes
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network for this request.
		 * @param {Compute_networks_listPeeringRoutesDirection} direction The direction of the exchanged routes.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {string} peeringName The response will show routes exchanged over the given peering connection.
		 * @param {string} region The region of the request. The response will include all subnet routes, static routes and dynamic routes in the region.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ExchangedPeeringRoutesList} Successful response
		 */
		Compute_networks_listPeeringRoutes(project: string, network: string, direction: Compute_networks_listPeeringRoutesDirection | null | undefined, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, peeringName: string | null | undefined, region: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ExchangedPeeringRoutesList> {
			return this.http.get<ExchangedPeeringRoutesList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/listPeeringRoutes&direction=' + direction + '&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&peeringName=' + (peeringName == null ? '' : encodeURIComponent(peeringName)) + '&region=' + (region == null ? '' : encodeURIComponent(region)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Removes a peering from the specified network.
		 * Post projects/{project}/global/networks/{network}/removePeering
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network resource to remove peering from.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_removePeering(project: string, network: string, requestId: string | null | undefined, requestBody: NetworksRemovePeeringRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/removePeering&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Switches the network mode from auto subnet mode to custom subnet mode.
		 * Post projects/{project}/global/networks/{network}/switchToCustomMode
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network to be updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_switchToCustomMode(project: string, network: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/switchToCustomMode&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Updates the specified network peering with the data included in the request. You can only modify the NetworkPeering.export_custom_routes field and the NetworkPeering.import_custom_routes field.
		 * Patch projects/{project}/global/networks/{network}/updatePeering
		 * @param {string} project Project ID for this request.
		 * @param {string} network Name of the network resource which the updated peering is belonging to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networks_updatePeering(project: string, network: string, requestId: string | null | undefined, requestBody: NetworksUpdatePeeringRequest): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/networks/' + (network == null ? '' : encodeURIComponent(network)) + '/updatePeering&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified project.
		 * Get projects/{project}/global/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {OperationList} Successful response
		 */
		Compute_globalOperations_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<OperationList> {
			return this.http.get<OperationList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified Operations resource.
		 * Delete projects/{project}/global/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} operation Name of the Operations resource to delete.
		 * @return {void} Successful response
		 */
		Compute_globalOperations_delete(project: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified Operations resource.
		 * Get projects/{project}/global/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {Operation} Successful response
		 */
		Compute_globalOperations_get(project: string, operation: string): Observable<Operation> {
			return this.http.get<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)), {});
		}

		/**
		 * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
		 * Post projects/{project}/global/operations/{operation}/wait
		 * @param {string} project Project ID for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {Operation} Successful response
		 */
		Compute_globalOperations_wait(project: string, operation: string): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '/wait', null, {});
		}

		/**
		 * Lists the PublicAdvertisedPrefixes for a project.
		 * Get projects/{project}/global/publicAdvertisedPrefixes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {PublicAdvertisedPrefixList} Successful response
		 */
		Compute_publicAdvertisedPrefixes_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<PublicAdvertisedPrefixList> {
			return this.http.get<PublicAdvertisedPrefixList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a PublicAdvertisedPrefix in the specified project using the parameters that are included in the request.
		 * Post projects/{project}/global/publicAdvertisedPrefixes
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicAdvertisedPrefixes_insert(project: string, requestId: string | null | undefined, requestBody: PublicAdvertisedPrefix): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified PublicAdvertisedPrefix
		 * Delete projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} publicAdvertisedPrefix Name of the PublicAdvertisedPrefix resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicAdvertisedPrefixes_delete(project: string, publicAdvertisedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes/' + (publicAdvertisedPrefix == null ? '' : encodeURIComponent(publicAdvertisedPrefix)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified PublicAdvertisedPrefix resource.
		 * Get projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} publicAdvertisedPrefix Name of the PublicAdvertisedPrefix resource to return.
		 * @return {PublicAdvertisedPrefix} Successful response
		 */
		Compute_publicAdvertisedPrefixes_get(project: string, publicAdvertisedPrefix: string): Observable<PublicAdvertisedPrefix> {
			return this.http.get<PublicAdvertisedPrefix>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes/' + (publicAdvertisedPrefix == null ? '' : encodeURIComponent(publicAdvertisedPrefix)), {});
		}

		/**
		 * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} publicAdvertisedPrefix Name of the PublicAdvertisedPrefix resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicAdvertisedPrefixes_patch(project: string, publicAdvertisedPrefix: string, requestId: string | null | undefined, requestBody: PublicAdvertisedPrefix): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes/' + (publicAdvertisedPrefix == null ? '' : encodeURIComponent(publicAdvertisedPrefix)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Announces the specified PublicAdvertisedPrefix
		 * Post projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/announce
		 * @param {string} project Project ID for this request.
		 * @param {string} publicAdvertisedPrefix The name of the public advertised prefix. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicAdvertisedPrefixes_announce(project: string, publicAdvertisedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes/' + (publicAdvertisedPrefix == null ? '' : encodeURIComponent(publicAdvertisedPrefix)) + '/announce&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Withdraws the specified PublicAdvertisedPrefix
		 * Post projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/withdraw
		 * @param {string} project Project ID for this request.
		 * @param {string} publicAdvertisedPrefix The name of the public advertised prefix. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicAdvertisedPrefixes_withdraw(project: string, publicAdvertisedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicAdvertisedPrefixes/' + (publicAdvertisedPrefix == null ? '' : encodeURIComponent(publicAdvertisedPrefix)) + '/withdraw&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Lists the global PublicDelegatedPrefixes for a project.
		 * Get projects/{project}/global/publicDelegatedPrefixes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {PublicDelegatedPrefixList} Successful response
		 */
		Compute_globalPublicDelegatedPrefixes_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<PublicDelegatedPrefixList> {
			return this.http.get<PublicDelegatedPrefixList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicDelegatedPrefixes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a global PublicDelegatedPrefix in the specified project using the parameters that are included in the request.
		 * Post projects/{project}/global/publicDelegatedPrefixes
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalPublicDelegatedPrefixes_insert(project: string, requestId: string | null | undefined, requestBody: PublicDelegatedPrefix): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicDelegatedPrefixes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified global PublicDelegatedPrefix.
		 * Delete projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} publicDelegatedPrefix Name of the PublicDelegatedPrefix resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalPublicDelegatedPrefixes_delete(project: string, publicDelegatedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified global PublicDelegatedPrefix resource.
		 * Get projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} publicDelegatedPrefix Name of the PublicDelegatedPrefix resource to return.
		 * @return {PublicDelegatedPrefix} Successful response
		 */
		Compute_globalPublicDelegatedPrefixes_get(project: string, publicDelegatedPrefix: string): Observable<PublicDelegatedPrefix> {
			return this.http.get<PublicDelegatedPrefix>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)), {});
		}

		/**
		 * Patches the specified global PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} publicDelegatedPrefix Name of the PublicDelegatedPrefix resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_globalPublicDelegatedPrefixes_patch(project: string, publicDelegatedPrefix: string, requestId: string | null | undefined, requestBody: PublicDelegatedPrefix): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of Route resources available to the specified project.
		 * Get projects/{project}/global/routes
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RouteList} Successful response
		 */
		Compute_routes_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RouteList> {
			return this.http.get<RouteList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/routes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a Route resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/routes
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_routes_insert(project: string, requestId: string | null | undefined, requestBody: Route): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/routes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified Route resource.
		 * Delete projects/{project}/global/routes/{route}
		 * @param {string} project Project ID for this request.
		 * @param {string} route Name of the Route resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_routes_delete(project: string, route: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/routes/' + (route == null ? '' : encodeURIComponent(route)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified Route resource.
		 * Get projects/{project}/global/routes/{route}
		 * @param {string} project Project ID for this request.
		 * @param {string} route Name of the Route resource to return.
		 * @return {Route} Successful response
		 */
		Compute_routes_get(project: string, route: string): Observable<Route> {
			return this.http.get<Route>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/routes/' + (route == null ? '' : encodeURIComponent(route)), {});
		}

		/**
		 * List all the policies that have been configured for the specified project.
		 * Get projects/{project}/global/securityPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SecurityPolicyList} Successful response
		 */
		Compute_securityPolicies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SecurityPolicyList> {
			return this.http.get<SecurityPolicyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new policy in the specified project using the data included in the request.
		 * Post projects/{project}/global/securityPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_insert(project: string, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: SecurityPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
		 * Get projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SecurityPoliciesListPreconfiguredExpressionSetsResponse} Successful response
		 */
		Compute_securityPolicies_listPreconfiguredExpressionSets(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SecurityPoliciesListPreconfiguredExpressionSetsResponse> {
			return this.http.get<SecurityPoliciesListPreconfiguredExpressionSetsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/listPreconfiguredExpressionSets&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/global/securityPolicies/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified policy.
		 * Delete projects/{project}/global/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_delete(project: string, securityPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * List all of the ordered rules present in a single specified policy.
		 * Get projects/{project}/global/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to get.
		 * @return {SecurityPolicy} Successful response
		 */
		Compute_securityPolicies_get(project: string, securityPolicy: string): Observable<SecurityPolicy> {
			return this.http.get<SecurityPolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)), {});
		}

		/**
		 * Patches the specified policy with the data included in the request. To clear fields in the policy, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
		 * Patch projects/{project}/global/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask Indicates fields to be cleared as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_patch(project: string, securityPolicy: string, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: SecurityPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts a rule into a security policy.
		 * Post projects/{project}/global/securityPolicies/{securityPolicy}/addRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_addRule(project: string, securityPolicy: string, validateOnly: boolean | null | undefined, requestBody: SecurityPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/addRule&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a rule at the specified priority.
		 * Get projects/{project}/global/securityPolicies/{securityPolicy}/getRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to which the queried rule belongs.
		 * @param {number} priority The priority of the rule to get from the security policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {SecurityPolicyRule} Successful response
		 */
		Compute_securityPolicies_getRule(project: string, securityPolicy: string, priority: number | null | undefined): Observable<SecurityPolicyRule> {
			return this.http.get<SecurityPolicyRule>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/getRule&priority=' + priority, {});
		}

		/**
		 * Patches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
		 * Post projects/{project}/global/securityPolicies/{securityPolicy}/patchRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {number} priority The priority of the rule to patch.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} updateMask Indicates fields to be cleared as part of this request.
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_patchRule(project: string, securityPolicy: string, priority: number | null | undefined, updateMask: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: SecurityPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/patchRule&priority=' + priority + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a rule at the specified priority.
		 * Post projects/{project}/global/securityPolicies/{securityPolicy}/removeRule
		 * @param {string} project Project ID for this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {number} priority The priority of the rule to remove from the security policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Operation} Successful response
		 */
		Compute_securityPolicies_removeRule(project: string, securityPolicy: string, priority: number | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/removeRule&priority=' + priority, null, {});
		}

		/**
		 * Get snapshot settings.
		 * Get projects/{project}/global/snapshotSettings
		 * @param {string} project Project ID for this request.
		 * @return {SnapshotSettings} Successful response
		 */
		Compute_snapshotSettings_get(project: string): Observable<SnapshotSettings> {
			return this.http.get<SnapshotSettings>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshotSettings', {});
		}

		/**
		 * Patch snapshot settings.
		 * Patch projects/{project}/global/snapshotSettings
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask update_mask indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_snapshotSettings_patch(project: string, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: SnapshotSettings): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshotSettings&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of Snapshot resources contained within the specified project.
		 * Get projects/{project}/global/snapshots
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SnapshotList} Successful response
		 */
		Compute_snapshots_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SnapshotList> {
			return this.http.get<SnapshotList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a snapshot in the specified project using the data included in the request. For regular snapshot creation, consider using this method instead of disks.createSnapshot, as this method supports more features, such as creating snapshots in a project different from the source disk project.
		 * Post projects/{project}/global/snapshots
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_snapshots_insert(project: string, requestId: string | null | undefined, requestBody: Snapshot): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/global/snapshots/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_snapshots_getIamPolicy(project: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/global/snapshots/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_snapshots_setIamPolicy(project: string, resource: string, requestBody: GlobalSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/global/snapshots/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Operation} Successful response
		 */
		Compute_snapshots_setLabels(project: string, resource: string, requestBody: GlobalSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/global/snapshots/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_snapshots_testIamPermissions(project: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.
		 * Delete projects/{project}/global/snapshots/{snapshot}
		 * @param {string} project Project ID for this request.
		 * @param {string} snapshot Name of the Snapshot resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_snapshots_delete(project: string, snapshot: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (snapshot == null ? '' : encodeURIComponent(snapshot)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified Snapshot resource.
		 * Get projects/{project}/global/snapshots/{snapshot}
		 * @param {string} project Project ID for this request.
		 * @param {string} snapshot Name of the Snapshot resource to return.
		 * @return {Snapshot} Successful response
		 */
		Compute_snapshots_get(project: string, snapshot: string): Observable<Snapshot> {
			return this.http.get<Snapshot>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/snapshots/' + (snapshot == null ? '' : encodeURIComponent(snapshot)), {});
		}

		/**
		 * Retrieves the list of SslCertificate resources available to the specified project.
		 * Get projects/{project}/global/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslCertificateList} Successful response
		 */
		Compute_sslCertificates_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SslCertificateList> {
			return this.http.get<SslCertificateList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a SslCertificate resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_sslCertificates_insert(project: string, requestId: string | null | undefined, requestBody: SslCertificate): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified SslCertificate resource.
		 * Delete projects/{project}/global/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_sslCertificates_delete(project: string, sslCertificate: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified SslCertificate resource.
		 * Get projects/{project}/global/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to return.
		 * @return {SslCertificate} Successful response
		 */
		Compute_sslCertificates_get(project: string, sslCertificate: string): Observable<SslCertificate> {
			return this.http.get<SslCertificate>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)), {});
		}

		/**
		 * Lists all the SSL policies that have been configured for the specified project.
		 * Get projects/{project}/global/sslPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslPoliciesList} Successful response
		 */
		Compute_sslPolicies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SslPoliciesList> {
			return this.http.get<SslPoliciesList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified SSL policy resource.
		 * Post projects/{project}/global/sslPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_sslPolicies_insert(project: string, requestId: string | null | undefined, requestBody: SslPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all features that can be specified in the SSL policy when using custom profile.
		 * Get projects/{project}/global/sslPolicies/listAvailableFeatures
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslPoliciesListAvailableFeaturesResponse} Successful response
		 */
		Compute_sslPolicies_listAvailableFeatures(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SslPoliciesListAvailableFeaturesResponse> {
			return this.http.get<SslPoliciesListAvailableFeaturesResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/listAvailableFeatures&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
		 * Delete projects/{project}/global/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslPolicy Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_sslPolicies_delete(project: string, sslPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Lists all of the ordered rules present in a single specified policy.
		 * Get projects/{project}/global/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @return {SslPolicy} Successful response
		 */
		Compute_sslPolicies_get(project: string, sslPolicy: string): Observable<SslPolicy> {
			return this.http.get<SslPolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)), {});
		}

		/**
		 * Patches the specified SSL policy with the data included in the request.
		 * Patch projects/{project}/global/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_sslPolicies_patch(project: string, sslPolicy: string, requestId: string | null | undefined, requestBody: SslPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the TargetGrpcProxies for a project in the given scope.
		 * Get projects/{project}/global/targetGrpcProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetGrpcProxyList} Successful response
		 */
		Compute_targetGrpcProxies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetGrpcProxyList> {
			return this.http.get<TargetGrpcProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetGrpcProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
		 * Post projects/{project}/global/targetGrpcProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetGrpcProxies_insert(project: string, requestId: string | null | undefined, requestBody: TargetGrpcProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetGrpcProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetGrpcProxy in the given scope
		 * Delete projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetGrpcProxy Name of the TargetGrpcProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetGrpcProxies_delete(project: string, targetGrpcProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetGrpcProxies/' + (targetGrpcProxy == null ? '' : encodeURIComponent(targetGrpcProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetGrpcProxy resource in the given scope.
		 * Get projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetGrpcProxy Name of the TargetGrpcProxy resource to return.
		 * @return {TargetGrpcProxy} Successful response
		 */
		Compute_targetGrpcProxies_get(project: string, targetGrpcProxy: string): Observable<TargetGrpcProxy> {
			return this.http.get<TargetGrpcProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetGrpcProxies/' + (targetGrpcProxy == null ? '' : encodeURIComponent(targetGrpcProxy)), {});
		}

		/**
		 * Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetGrpcProxy Name of the TargetGrpcProxy resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetGrpcProxies_patch(project: string, targetGrpcProxy: string, requestId: string | null | undefined, requestBody: TargetGrpcProxy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetGrpcProxies/' + (targetGrpcProxy == null ? '' : encodeURIComponent(targetGrpcProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of TargetHttpProxy resources available to the specified project.
		 * Get projects/{project}/global/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetHttpProxyList} Successful response
		 */
		Compute_targetHttpProxies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetHttpProxyList> {
			return this.http.get<TargetHttpProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetHttpProxy resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpProxies_insert(project: string, requestId: string | null | undefined, requestBody: TargetHttpProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetHttpProxy resource.
		 * Delete projects/{project}/global/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpProxies_delete(project: string, targetHttpProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetHttpProxy resource.
		 * Get projects/{project}/global/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to return.
		 * @return {TargetHttpProxy} Successful response
		 */
		Compute_targetHttpProxies_get(project: string, targetHttpProxy: string): Observable<TargetHttpProxy> {
			return this.http.get<TargetHttpProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)), {});
		}

		/**
		 * Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpProxies_patch(project: string, targetHttpProxy: string, requestId: string | null | undefined, requestBody: TargetHttpProxy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of TargetHttpsProxy resources available to the specified project.
		 * Get projects/{project}/global/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetHttpsProxyList} Successful response
		 */
		Compute_targetHttpsProxies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetHttpsProxyList> {
			return this.http.get<TargetHttpsProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_insert(project: string, requestId: string | null | undefined, requestBody: TargetHttpsProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetHttpsProxy resource.
		 * Delete projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_delete(project: string, targetHttpsProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetHttpsProxy resource.
		 * Get projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to return.
		 * @return {TargetHttpsProxy} Successful response
		 */
		Compute_targetHttpsProxies_get(project: string, targetHttpsProxy: string): Observable<TargetHttpsProxy> {
			return this.http.get<TargetHttpsProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)), {});
		}

		/**
		 * Patches the specified TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_patch(project: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: TargetHttpsProxy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the Certificate Map for TargetHttpsProxy.
		 * Post projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_setCertificateMap(project: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: TargetHttpsProxiesSetCertificateMapRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setCertificateMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the QUIC override policy for TargetHttpsProxy.
		 * Post projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_setQuicOverride(project: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: TargetHttpsProxiesSetQuicOverrideRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setQuicOverride&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
		 * Post projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_setSslPolicy(project: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: SslPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setSslPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of TargetSslProxy resources available to the specified project.
		 * Get projects/{project}/global/targetSslProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetSslProxyList} Successful response
		 */
		Compute_targetSslProxies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetSslProxyList> {
			return this.http.get<TargetSslProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetSslProxy resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/targetSslProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_insert(project: string, requestId: string | null | undefined, requestBody: TargetSslProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetSslProxy resource.
		 * Delete projects/{project}/global/targetSslProxies/{targetSslProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_delete(project: string, targetSslProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetSslProxy resource.
		 * Get projects/{project}/global/targetSslProxies/{targetSslProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource to return.
		 * @return {TargetSslProxy} Successful response
		 */
		Compute_targetSslProxies_get(project: string, targetSslProxy: string): Observable<TargetSslProxy> {
			return this.http.get<TargetSslProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)), {});
		}

		/**
		 * Changes the BackendService for TargetSslProxy.
		 * Post projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose BackendService resource is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_setBackendService(project: string, targetSslProxy: string, requestId: string | null | undefined, requestBody: TargetSslProxiesSetBackendServiceRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setBackendService&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the Certificate Map for TargetSslProxy.
		 * Post projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_setCertificateMap(project: string, targetSslProxy: string, requestId: string | null | undefined, requestBody: TargetSslProxiesSetCertificateMapRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setCertificateMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the ProxyHeaderType for TargetSslProxy.
		 * Post projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose ProxyHeader is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_setProxyHeader(project: string, targetSslProxy: string, requestId: string | null | undefined, requestBody: TargetSslProxiesSetProxyHeaderRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setProxyHeader&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes SslCertificates for TargetSslProxy.
		 * Post projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_setSslCertificates(project: string, targetSslProxy: string, requestId: string | null | undefined, requestBody: TargetSslProxiesSetSslCertificatesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setSslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the load balancer. They do not affect the connection between the load balancer and the backends.
		 * Post projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} targetSslProxy Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetSslProxies_setSslPolicy(project: string, targetSslProxy: string, requestId: string | null | undefined, requestBody: SslPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetSslProxies/' + (targetSslProxy == null ? '' : encodeURIComponent(targetSslProxy)) + '/setSslPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of TargetTcpProxy resources available to the specified project.
		 * Get projects/{project}/global/targetTcpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetTcpProxyList} Successful response
		 */
		Compute_targetTcpProxies_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetTcpProxyList> {
			return this.http.get<TargetTcpProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetTcpProxy resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/targetTcpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetTcpProxies_insert(project: string, requestId: string | null | undefined, requestBody: TargetTcpProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetTcpProxy resource.
		 * Delete projects/{project}/global/targetTcpProxies/{targetTcpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetTcpProxies_delete(project: string, targetTcpProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetTcpProxy resource.
		 * Get projects/{project}/global/targetTcpProxies/{targetTcpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource to return.
		 * @return {TargetTcpProxy} Successful response
		 */
		Compute_targetTcpProxies_get(project: string, targetTcpProxy: string): Observable<TargetTcpProxy> {
			return this.http.get<TargetTcpProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)), {});
		}

		/**
		 * Changes the BackendService for TargetTcpProxy.
		 * Post projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource whose BackendService resource is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetTcpProxies_setBackendService(project: string, targetTcpProxy: string, requestId: string | null | undefined, requestBody: TargetTcpProxiesSetBackendServiceRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '/setBackendService&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the ProxyHeaderType for TargetTcpProxy.
		 * Post projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader
		 * @param {string} project Project ID for this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource whose ProxyHeader is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetTcpProxies_setProxyHeader(project: string, targetTcpProxy: string, requestId: string | null | undefined, requestBody: TargetTcpProxiesSetProxyHeaderRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '/setProxyHeader&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of UrlMap resources available to the specified project.
		 * Get projects/{project}/global/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {UrlMapList} Successful response
		 */
		Compute_urlMaps_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<UrlMapList> {
			return this.http.get<UrlMapList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a UrlMap resource in the specified project using the data included in the request.
		 * Post projects/{project}/global/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_urlMaps_insert(project: string, requestId: string | null | undefined, requestBody: UrlMap): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified UrlMap resource.
		 * Delete projects/{project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_urlMaps_delete(project: string, urlMap: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified UrlMap resource.
		 * Get projects/{project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to return.
		 * @return {UrlMap} Successful response
		 */
		Compute_urlMaps_get(project: string, urlMap: string): Observable<UrlMap> {
			return this.http.get<UrlMap>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)), {});
		}

		/**
		 * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_urlMaps_patch(project: string, urlMap: string, requestId: string | null | undefined, requestBody: UrlMap): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified UrlMap resource with the data included in the request.
		 * Put projects/{project}/global/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_urlMaps_update(project: string, urlMap: string, requestId: string | null | undefined, requestBody: UrlMap): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
		 * Post projects/{project}/global/urlMaps/{urlMap}/invalidateCache
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_urlMaps_invalidateCache(project: string, urlMap: string, requestId: string | null | undefined, requestBody: CacheInvalidationRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '/invalidateCache&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
		 * Post projects/{project}/global/urlMaps/{urlMap}/validate
		 * @param {string} project Project ID for this request.
		 * @param {string} urlMap Name of the UrlMap resource to be validated as.
		 * @return {UrlMapsValidateResponse} Successful response
		 */
		Compute_urlMaps_validate(project: string, urlMap: string, requestBody: UrlMapsValidateRequest): Observable<UrlMapsValidateResponse> {
			return this.http.post<UrlMapsValidateResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/global/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '/validate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all shared VPC host projects visible to the user in an organization.
		 * Post projects/{project}/listXpnHosts
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {XpnHostList} Successful response
		 */
		Compute_projects_listXpnHosts(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, requestBody: ProjectsListXpnHostsRequest): Observable<XpnHostList> {
			return this.http.post<XpnHostList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/listXpnHosts&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Moves a persistent disk from one zone to another.
		 * Post projects/{project}/moveDisk
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_moveDisk(project: string, requestId: string | null | undefined, requestBody: DiskMoveRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/moveDisk&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Moves an instance and its attached persistent disks from one zone to another. *Note*: Moving VMs or disks by using this method might cause unexpected behavior. For more information, see the [known issue](/compute/docs/troubleshooting/known-issues#moving_vms_or_disks_using_the_moveinstance_api_or_the_causes_unexpected_behavior). [Deprecated] This method is deprecated. See [moving instance across zones](/compute/docs/instances/moving-instance-across-zones) instead.
		 * Post projects/{project}/moveInstance
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_moveInstance(project: string, requestId: string | null | undefined, requestBody: InstanceMoveRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/moveInstance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of region resources available to the specified project. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `items.quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
		 * Get projects/{project}/regions
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionList} Successful response
		 */
		Compute_regions_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionList> {
			return this.http.get<RegionList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified Region resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
		 * Get projects/{project}/regions/{region}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region resource to return.
		 * @return {Region} Successful response
		 */
		Compute_regions_get(project: string, region: string): Observable<Region> {
			return this.http.get<Region>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)), {});
		}

		/**
		 * Retrieves a list of addresses contained within the specified region.
		 * Get projects/{project}/regions/{region}/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AddressList} Successful response
		 */
		Compute_addresses_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<AddressList> {
			return this.http.get<AddressList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an address resource in the specified project by using the data included in the request.
		 * Post projects/{project}/regions/{region}/addresses
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_addresses_insert(project: string, region: string, requestId: string | null | undefined, requestBody: Address): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified address resource.
		 * Delete projects/{project}/regions/{region}/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} address Name of the address resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_addresses_delete(project: string, region: string, address: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified address resource.
		 * Get projects/{project}/regions/{region}/addresses/{address}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} address Name of the address resource to return.
		 * @return {Address} Successful response
		 */
		Compute_addresses_get(project: string, region: string, address: string): Observable<Address> {
			return this.http.get<Address>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses/' + (address == null ? '' : encodeURIComponent(address)), {});
		}

		/**
		 * Moves the specified address resource.
		 * Post projects/{project}/regions/{region}/addresses/{address}/move
		 * @param {string} project Source project ID which the Address is moved from.
		 * @param {string} region Name of the region for this request.
		 * @param {string} address Name of the address resource to move.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_addresses_move(project: string, region: string, address: string, requestId: string | null | undefined, requestBody: RegionAddressesMoveRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses/' + (address == null ? '' : encodeURIComponent(address)) + '/move&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on an Address. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/regions/{region}/addresses/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_addresses_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/addresses/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of autoscalers contained within the specified region.
		 * Get projects/{project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionAutoscalerList} Successful response
		 */
		Compute_regionAutoscalers_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionAutoscalerList> {
			return this.http.get<RegionAutoscalerList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionAutoscalers_patch(project: string, region: string, autoscaler: string | null | undefined, requestId: string | null | undefined, requestBody: Autoscaler): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates an autoscaler in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionAutoscalers_insert(project: string, region: string, requestId: string | null | undefined, requestBody: Autoscaler): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request.
		 * Put projects/{project}/regions/{region}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionAutoscalers_update(project: string, region: string, autoscaler: string | null | undefined, requestId: string | null | undefined, requestBody: Autoscaler): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified autoscaler.
		 * Delete projects/{project}/regions/{region}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionAutoscalers_delete(project: string, region: string, autoscaler: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified autoscaler.
		 * Get projects/{project}/regions/{region}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} autoscaler Name of the autoscaler to return.
		 * @return {Autoscaler} Successful response
		 */
		Compute_regionAutoscalers_get(project: string, region: string, autoscaler: string): Observable<Autoscaler> {
			return this.http.get<Autoscaler>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)), {});
		}

		/**
		 * Retrieves the list of regional BackendService resources available to the specified project in the given region.
		 * Get projects/{project}/regions/{region}/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {BackendServiceList} Successful response
		 */
		Compute_regionBackendServices_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<BackendServiceList> {
			return this.http.get<BackendServiceList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview.
		 * Post projects/{project}/regions/{region}/backendServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionBackendServices_insert(project: string, region: string, requestId: string | null | undefined, requestBody: BackendService): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves an aggregated list of all usable backend services in the specified project in the given region.
		 * Get projects/{project}/regions/{region}/backendServices/listUsable
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request. It must be a string that meets the requirements in RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {BackendServiceListUsable} Successful response
		 */
		Compute_regionBackendServices_listUsable(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<BackendServiceListUsable> {
			return this.http.get<BackendServiceListUsable>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/listUsable&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified regional BackendService resource.
		 * Delete projects/{project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionBackendServices_delete(project: string, region: string, backendService: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified regional BackendService resource.
		 * Get projects/{project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to return.
		 * @return {BackendService} Successful response
		 */
		Compute_regionBackendServices_get(project: string, region: string, backendService: string): Observable<BackendService> {
			return this.http.get<BackendService>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)), {});
		}

		/**
		 * Updates the specified regional BackendService resource with the data included in the request. For more information, see Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionBackendServices_patch(project: string, region: string, backendService: string, requestId: string | null | undefined, requestBody: BackendService): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified regional BackendService resource with the data included in the request. For more information, see Backend services overview .
		 * Put projects/{project}/regions/{region}/backendServices/{backendService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionBackendServices_update(project: string, region: string, backendService: string, requestId: string | null | undefined, requestBody: BackendService): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the most recent health check results for this regional BackendService.
		 * Post projects/{project}/regions/{region}/backendServices/{backendService}/getHealth
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource for which to get health.
		 * @return {BackendServiceGroupHealth} Successful response
		 */
		Compute_regionBackendServices_getHealth(project: string, region: string, backendService: string, requestBody: ResourceGroupReference): Observable<BackendServiceGroupHealth> {
			return this.http.post<BackendServiceGroupHealth>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/getHealth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
		 * Post projects/{project}/regions/{region}/backendServices/{backendService}/setSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} backendService Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionBackendServices_setSecurityPolicy(project: string, region: string, backendService: string, requestId: string | null | undefined, requestBody: SecurityPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (backendService == null ? '' : encodeURIComponent(backendService)) + '/setSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_regionBackendServices_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_regionBackendServices_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_regionBackendServices_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/backendServices/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of commitments contained within the specified region.
		 * Get projects/{project}/regions/{region}/commitments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {CommitmentList} Successful response
		 */
		Compute_regionCommitments_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<CommitmentList> {
			return this.http.get<CommitmentList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a commitment in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/commitments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionCommitments_insert(project: string, region: string, requestId: string | null | undefined, requestBody: Commitment): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the specified commitment resource.
		 * Get projects/{project}/regions/{region}/commitments/{commitment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} commitment Name of the commitment to return.
		 * @return {Commitment} Successful response
		 */
		Compute_regionCommitments_get(project: string, region: string, commitment: string): Observable<Commitment> {
			return this.http.get<Commitment>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments/' + (commitment == null ? '' : encodeURIComponent(commitment)), {});
		}

		/**
		 * Updates the specified commitment with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: auto_renew.
		 * Patch projects/{project}/regions/{region}/commitments/{commitment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} commitment Name of the commitment for which auto renew is being updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask update_mask indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_regionCommitments_update(project: string, region: string, commitment: string, paths: Array<string> | null | undefined, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: Commitment): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/commitments/' + (commitment == null ? '' : encodeURIComponent(commitment)) + '&' + paths?.map(z => `paths=${encodeURIComponent(z)}`).join('&') + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of regional disk types available to the specified project.
		 * Get projects/{project}/regions/{region}/diskTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionDiskTypeList} Successful response
		 */
		Compute_regionDiskTypes_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionDiskTypeList> {
			return this.http.get<RegionDiskTypeList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/diskTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified regional disk type.
		 * Get projects/{project}/regions/{region}/diskTypes/{diskType}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} diskType Name of the disk type to return.
		 * @return {DiskType} Successful response
		 */
		Compute_regionDiskTypes_get(project: string, region: string, diskType: string): Observable<DiskType> {
			return this.http.get<DiskType>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/diskTypes/' + (diskType == null ? '' : encodeURIComponent(diskType)), {});
		}

		/**
		 * Retrieves the list of persistent disks contained within the specified region.
		 * Get projects/{project}/regions/{region}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {DiskList} Successful response
		 */
		Compute_regionDisks_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<DiskList> {
			return this.http.get<DiskList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a persistent regional disk in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceImage Source image to restore onto a disk. This field is optional.
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_insert(project: string, region: string, requestId: string | null | undefined, sourceImage: string | null | undefined, requestBody: Disk): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceImage=' + (sourceImage == null ? '' : encodeURIComponent(sourceImage)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Bulk create a set of disks.
		 * Post projects/{project}/regions/{region}/disks/bulkInsert
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_bulkInsert(project: string, region: string, requestId: string | null | undefined, requestBody: BulkInsertDiskResource): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/bulkInsert&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
		 * Post projects/{project}/regions/{region}/disks/stopGroupAsyncReplication
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request. This must be the region of the primary or secondary disks in the consistency group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_stopGroupAsyncReplication(project: string, region: string, requestId: string | null | undefined, requestBody: DisksStopGroupAsyncReplicationResource): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/stopGroupAsyncReplication&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
		 * Delete projects/{project}/regions/{region}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_delete(project: string, region: string, disk: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns a specified regional persistent disk.
		 * Get projects/{project}/regions/{region}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk to return.
		 * @return {Disk} Successful response
		 */
		Compute_regionDisks_get(project: string, region: string, disk: string): Observable<Disk> {
			return this.http.get<Disk>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)), {});
		}

		/**
		 * Update the specified disk with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
		 * Patch projects/{project}/regions/{region}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask update_mask indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_update(project: string, region: string, disk: string, paths: Array<string> | null | undefined, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: Disk): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '&' + paths?.map(z => `paths=${encodeURIComponent(z)}`).join('&') + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
		 * Post projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_addResourcePolicies(project: string, region: string, disk: string, requestId: string | null | undefined, requestBody: RegionDisksAddResourcePoliciesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/addResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
		 * Post projects/{project}/regions/{region}/disks/{disk}/createSnapshot
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk to snapshot.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_createSnapshot(project: string, region: string, disk: string, requestId: string | null | undefined, requestBody: Snapshot): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/createSnapshot&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes resource policies from a regional disk.
		 * Post projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_removeResourcePolicies(project: string, region: string, disk: string, requestId: string | null | undefined, requestBody: RegionDisksRemoveResourcePoliciesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/removeResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Resizes the specified regional persistent disk.
		 * Post projects/{project}/regions/{region}/disks/{disk}/resize
		 * @param {string} project The project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} disk Name of the regional persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_resize(project: string, region: string, disk: string, requestId: string | null | undefined, requestBody: RegionDisksResizeRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/resize&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Starts asynchronous replication. Must be invoked on the primary disk.
		 * Post projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The name of the persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_startAsyncReplication(project: string, region: string, disk: string, requestId: string | null | undefined, requestBody: RegionDisksStartAsyncReplicationRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/startAsyncReplication&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
		 * Post projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} disk The name of the persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_stopAsyncReplication(project: string, region: string, disk: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/stopAsyncReplication&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/disks/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_regionDisks_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/disks/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_regionDisks_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on the target regional disk.
		 * Post projects/{project}/regions/{region}/disks/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionDisks_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/disks/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_regionDisks_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the network firewall policies that have been configured for the specified project in the given region.
		 * Get projects/{project}/regions/{region}/firewallPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {FirewallPolicyList} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<FirewallPolicyList> {
			return this.http.get<FirewallPolicyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new network firewall policy in the specified project and region.
		 * Post projects/{project}/regions/{region}/firewallPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_insert(project: string, region: string, requestId: string | null | undefined, requestBody: FirewallPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the effective firewalls on a given network.
		 * Get projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} network Network reference
		 * @return {RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_getEffectiveFirewalls(project: string, region: string, network: string): Observable<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse> {
			return this.http.get<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/getEffectiveFirewalls&network=' + (network == null ? '' : encodeURIComponent(network)), {});
		}

		/**
		 * Deletes the specified network firewall policy.
		 * Delete projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_delete(project: string, region: string, firewallPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified network firewall policy.
		 * Get projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to get.
		 * @return {FirewallPolicy} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_get(project: string, region: string, firewallPolicy: string): Observable<FirewallPolicy> {
			return this.http.get<FirewallPolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)), {});
		}

		/**
		 * Patches the specified network firewall policy.
		 * Patch projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_patch(project: string, region: string, firewallPolicy: string, requestId: string | null | undefined, requestBody: FirewallPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts an association for the specified network firewall policy.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {boolean} replaceExistingAssociation Indicates whether or not to replace it if an association already exists. This is false by default, in which case an error will be returned if an association already exists.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_addAssociation(project: string, region: string, firewallPolicy: string, replaceExistingAssociation: boolean | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyAssociation): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/addAssociation&replaceExistingAssociation=' + replaceExistingAssociation + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts a rule into a network firewall policy.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} maxPriority When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {number} minPriority When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_addRule(project: string, region: string, firewallPolicy: string, maxPriority: number | null | undefined, minPriority: number | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/addRule&maxPriority=' + maxPriority + '&minPriority=' + minPriority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Copies rules to the specified network firewall policy.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceFirewallPolicy The firewall policy from which to copy rules.
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_cloneRules(project: string, region: string, firewallPolicy: string, requestId: string | null | undefined, sourceFirewallPolicy: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/cloneRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceFirewallPolicy=' + (sourceFirewallPolicy == null ? '' : encodeURIComponent(sourceFirewallPolicy)), null, {});
		}

		/**
		 * Gets an association with the specified name.
		 * Get projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to which the queried association belongs.
		 * @param {string} name The name of the association to get from the firewall policy.
		 * @return {FirewallPolicyAssociation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_getAssociation(project: string, region: string, firewallPolicy: string, name: string | null | undefined): Observable<FirewallPolicyAssociation> {
			return this.http.get<FirewallPolicyAssociation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/getAssociation&name=' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Gets a rule of the specified priority.
		 * Get projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to which the queried rule belongs.
		 * @param {number} priority The priority of the rule to get from the firewall policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {FirewallPolicyRule} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_getRule(project: string, region: string, firewallPolicy: string, priority: number | null | undefined): Observable<FirewallPolicyRule> {
			return this.http.get<FirewallPolicyRule>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/getRule&priority=' + priority, {});
		}

		/**
		 * Patches a rule of the specified priority.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} priority The priority of the rule to patch.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_patchRule(project: string, region: string, firewallPolicy: string, priority: number | null | undefined, requestId: string | null | undefined, requestBody: FirewallPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/patchRule&priority=' + priority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes an association for the specified network firewall policy.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {string} name Name for the association that will be removed.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_removeAssociation(project: string, region: string, firewallPolicy: string, name: string | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/removeAssociation&name=' + (name == null ? '' : encodeURIComponent(name)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Deletes a rule of the specified priority.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} firewallPolicy Name of the firewall policy to update.
		 * @param {number} priority The priority of the rule to remove from the firewall policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_removeRule(project: string, region: string, firewallPolicy: string, priority: number | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (firewallPolicy == null ? '' : encodeURIComponent(firewallPolicy)) + '/removeRule&priority=' + priority + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_regionNetworkFirewallPolicies_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/firewallPolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of ForwardingRule resources available to the specified project and region.
		 * Get projects/{project}/regions/{region}/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ForwardingRuleList} Successful response
		 */
		Compute_forwardingRules_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ForwardingRuleList> {
			return this.http.get<ForwardingRuleList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a ForwardingRule resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/forwardingRules
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_forwardingRules_insert(project: string, region: string, requestId: string | null | undefined, requestBody: ForwardingRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified ForwardingRule resource.
		 * Delete projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_forwardingRules_delete(project: string, region: string, forwardingRule: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified ForwardingRule resource.
		 * Get projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to return.
		 * @return {ForwardingRule} Successful response
		 */
		Compute_forwardingRules_get(project: string, region: string, forwardingRule: string): Observable<ForwardingRule> {
			return this.http.get<ForwardingRule>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)), {});
		}

		/**
		 * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
		 * Patch projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_forwardingRules_patch(project: string, region: string, forwardingRule: string, requestId: string | null | undefined, requestBody: ForwardingRule): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes target URL for forwarding rule. The new target should be of the same type as the old target.
		 * Post projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} forwardingRule Name of the ForwardingRule resource in which target is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_forwardingRules_setTarget(project: string, region: string, forwardingRule: string, requestId: string | null | undefined, requestBody: TargetReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (forwardingRule == null ? '' : encodeURIComponent(forwardingRule)) + '/setTarget&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_forwardingRules_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/forwardingRules/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
		 * Get projects/{project}/regions/{region}/healthCheckServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {HealthCheckServicesList} Successful response
		 */
		Compute_regionHealthCheckServices_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<HealthCheckServicesList> {
			return this.http.get<HealthCheckServicesList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthCheckServices&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/healthCheckServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthCheckServices_insert(project: string, region: string, requestId: string | null | undefined, requestBody: HealthCheckService): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthCheckServices&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified regional HealthCheckService.
		 * Delete projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheckService Name of the HealthCheckService to delete. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthCheckServices_delete(project: string, region: string, healthCheckService: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthCheckServices/' + (healthCheckService == null ? '' : encodeURIComponent(healthCheckService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified regional HealthCheckService resource.
		 * Get projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheckService Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @return {HealthCheckService} Successful response
		 */
		Compute_regionHealthCheckServices_get(project: string, region: string, healthCheckService: string): Observable<HealthCheckService> {
			return this.http.get<HealthCheckService>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthCheckServices/' + (healthCheckService == null ? '' : encodeURIComponent(healthCheckService)), {});
		}

		/**
		 * Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheckService Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthCheckServices_patch(project: string, region: string, healthCheckService: string, requestId: string | null | undefined, requestBody: HealthCheckService): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthCheckServices/' + (healthCheckService == null ? '' : encodeURIComponent(healthCheckService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of HealthCheck resources available to the specified project.
		 * Get projects/{project}/regions/{region}/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {HealthCheckList} Successful response
		 */
		Compute_regionHealthChecks_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<HealthCheckList> {
			return this.http.get<HealthCheckList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a HealthCheck resource in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/healthChecks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthChecks_insert(project: string, region: string, requestId: string | null | undefined, requestBody: HealthCheck): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified HealthCheck resource.
		 * Delete projects/{project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthChecks_delete(project: string, region: string, healthCheck: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified HealthCheck resource.
		 * Get projects/{project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to return.
		 * @return {HealthCheck} Successful response
		 */
		Compute_regionHealthChecks_get(project: string, region: string, healthCheck: string): Observable<HealthCheck> {
			return this.http.get<HealthCheck>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)), {});
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthChecks_patch(project: string, region: string, healthCheck: string, requestId: string | null | undefined, requestBody: HealthCheck): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a HealthCheck resource in the specified project using the data included in the request.
		 * Put projects/{project}/regions/{region}/healthChecks/{healthCheck}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} healthCheck Name of the HealthCheck resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionHealthChecks_update(project: string, region: string, healthCheck: string, requestId: string | null | undefined, requestBody: HealthCheck): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/healthChecks/' + (healthCheck == null ? '' : encodeURIComponent(healthCheck)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of managed instance groups that are contained within the specified region.
		 * Get projects/{project}/regions/{region}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionInstanceGroupManagerList} Successful response
		 */
		Compute_regionInstanceGroupManagers_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionInstanceGroupManagerList> {
			return this.http.get<RegionInstanceGroupManagerList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A regional managed instance group can contain up to 2000 instances.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_insert(project: string, region: string, requestId: string | null | undefined, requestBody: InstanceGroupManager): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified managed instance group and all of the instances in that group.
		 * Delete projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_delete(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns all of the details about the specified managed instance group.
		 * Get projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group to return.
		 * @return {InstanceGroupManager} Successful response
		 */
		Compute_regionInstanceGroupManagers_get(project: string, region: string, instanceGroupManager: string): Observable<InstanceGroupManager> {
			return this.http.get<InstanceGroupManager>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)), {});
		}

		/**
		 * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
		 * Patch projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager The name of the instance group manager.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_patch(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManager): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_abandonInstances(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagersAbandonInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/abandonInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Apply updates to selected instances the managed instance group.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request, should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group, should conform to RFC1035.
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_applyUpdatesToInstances(project: string, region: string, instanceGroupManager: string, requestBody: RegionInstanceGroupManagersApplyUpdatesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/applyUpdatesToInstances', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates instances with per-instance configurations in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_createInstances(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagersCreateInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/createInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_deleteInstances(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagersDeleteInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/deleteInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes selected per-instance configurations for the managed instance group.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request, should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_deletePerInstanceConfigs(project: string, region: string, instanceGroupManager: string, requestBody: RegionInstanceGroupManagerDeleteInstanceConfigReq): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/deletePerInstanceConfigs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
		 * Get projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request. This should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|1-9{0,19}.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionInstanceGroupManagersListErrorsResponse} Successful response
		 */
		Compute_regionInstanceGroupManagers_listErrors(project: string, region: string, instanceGroupManager: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionInstanceGroupManagersListErrorsResponse> {
			return this.http.get<RegionInstanceGroupManagersListErrorsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listErrors&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionInstanceGroupManagersListInstancesResponse} Successful response
		 */
		Compute_regionInstanceGroupManagers_listManagedInstances(project: string, region: string, instanceGroupManager: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionInstanceGroupManagersListInstancesResponse> {
			return this.http.post<RegionInstanceGroupManagersListInstancesResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listManagedInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request, should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionInstanceGroupManagersListInstanceConfigsResp} Successful response
		 */
		Compute_regionInstanceGroupManagers_listPerInstanceConfigs(project: string, region: string, instanceGroupManager: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionInstanceGroupManagersListInstanceConfigsResp> {
			return this.http.post<RegionInstanceGroupManagersListInstanceConfigsResp>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listPerInstanceConfigs&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request, should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_patchPerInstanceConfigs(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagerPatchInstanceConfigReq): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/patchPerInstanceConfigs&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_recreateInstances(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagersRecreateRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/recreateInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {number} size Number of instances that should exist in this instance group manager.
		 *     Minimum: 0
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_resize(project: string, region: string, instanceGroupManager: string, size: number, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/resize&size=' + size + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_setInstanceTemplate(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagersSetTemplateRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setInstanceTemplate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroupManager Name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_setTargetPools(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagersSetTargetPoolsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setTargetPools&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
		 * Post projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request, should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroupManagers_updatePerInstanceConfigs(project: string, region: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupManagerUpdateInstanceConfigReq): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/updatePerInstanceConfigs&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of instance group resources contained within the specified region.
		 * Get projects/{project}/regions/{region}/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionInstanceGroupList} Successful response
		 */
		Compute_regionInstanceGroups_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RegionInstanceGroupList> {
			return this.http.get<RegionInstanceGroupList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified instance group resource.
		 * Get projects/{project}/regions/{region}/instanceGroups/{instanceGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroup Name of the instance group resource to return.
		 * @return {InstanceGroup} Successful response
		 */
		Compute_regionInstanceGroups_get(project: string, region: string, instanceGroup: string): Observable<InstanceGroup> {
			return this.http.get<InstanceGroup>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)), {});
		}

		/**
		 * Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
		 * Post projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroup Name of the regional instance group for which we want to list the instances.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RegionInstanceGroupsListInstances} Successful response
		 */
		Compute_regionInstanceGroups_listInstances(project: string, region: string, instanceGroup: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, requestBody: RegionInstanceGroupsListInstancesRequest): Observable<RegionInstanceGroupsListInstances> {
			return this.http.post<RegionInstanceGroupsListInstances>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/listInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the named ports for the specified regional instance group.
		 * Post projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} instanceGroup The name of the regional instance group where the named ports are updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceGroups_setNamedPorts(project: string, region: string, instanceGroup: string, requestId: string | null | undefined, requestBody: RegionInstanceGroupsSetNamedPortsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/setNamedPorts&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of instance templates that are contained within the specified project and region.
		 * Get projects/{project}/regions/{region}/instanceTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the regions for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceTemplateList} Successful response
		 */
		Compute_regionInstanceTemplates_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceTemplateList> {
			return this.http.get<InstanceTemplateList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an instance template in the specified project and region using the global instance template whose URL is included in the request.
		 * Post projects/{project}/regions/{region}/instanceTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceTemplates_insert(project: string, region: string, requestId: string | null | undefined, requestBody: InstanceTemplate): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceTemplates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone.
		 * Delete projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} instanceTemplate The name of the instance template to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstanceTemplates_delete(project: string, region: string, instanceTemplate: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceTemplates/' + (instanceTemplate == null ? '' : encodeURIComponent(instanceTemplate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified instance template.
		 * Get projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} instanceTemplate The name of the instance template.
		 * @return {InstanceTemplate} Successful response
		 */
		Compute_regionInstanceTemplates_get(project: string, region: string, instanceTemplate: string): Observable<InstanceTemplate> {
			return this.http.get<InstanceTemplate>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instanceTemplates/' + (instanceTemplate == null ? '' : encodeURIComponent(instanceTemplate)), {});
		}

		/**
		 * Creates multiple instances in a given region. Count specifies the number of instances to create.
		 * Post projects/{project}/regions/{region}/instances/bulkInsert
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionInstances_bulkInsert(project: string, region: string, requestId: string | null | undefined, requestBody: BulkInsertInstanceResource): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/instances/bulkInsert&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of interconnect attachments contained within the specified region.
		 * Get projects/{project}/regions/{region}/interconnectAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InterconnectAttachmentList} Successful response
		 */
		Compute_interconnectAttachments_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InterconnectAttachmentList> {
			return this.http.get<InterconnectAttachmentList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an InterconnectAttachment in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/interconnectAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_interconnectAttachments_insert(project: string, region: string, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: InterconnectAttachment): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified interconnect attachment.
		 * Delete projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} interconnectAttachment Name of the interconnect attachment to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_interconnectAttachments_delete(project: string, region: string, interconnectAttachment: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (interconnectAttachment == null ? '' : encodeURIComponent(interconnectAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified interconnect attachment.
		 * Get projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} interconnectAttachment Name of the interconnect attachment to return.
		 * @return {InterconnectAttachment} Successful response
		 */
		Compute_interconnectAttachments_get(project: string, region: string, interconnectAttachment: string): Observable<InterconnectAttachment> {
			return this.http.get<InterconnectAttachment>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (interconnectAttachment == null ? '' : encodeURIComponent(interconnectAttachment)), {});
		}

		/**
		 * Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} interconnectAttachment Name of the interconnect attachment to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_interconnectAttachments_patch(project: string, region: string, interconnectAttachment: string, requestId: string | null | undefined, requestBody: InterconnectAttachment): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (interconnectAttachment == null ? '' : encodeURIComponent(interconnectAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_interconnectAttachments_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/interconnectAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the NetworkAttachments for a project in the given scope.
		 * Get projects/{project}/regions/{region}/networkAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkAttachmentList} Successful response
		 */
		Compute_networkAttachments_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkAttachmentList> {
			return this.http.get<NetworkAttachmentList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a NetworkAttachment in the specified project in the given scope using the parameters that are included in the request.
		 * Post projects/{project}/regions/{region}/networkAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
		 * @return {Operation} Successful response
		 */
		Compute_networkAttachments_insert(project: string, region: string, requestId: string | null | undefined, requestBody: NetworkAttachment): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified NetworkAttachment in the given scope
		 * Delete projects/{project}/regions/{region}/networkAttachments/{networkAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} networkAttachment Name of the NetworkAttachment resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
		 * @return {Operation} Successful response
		 */
		Compute_networkAttachments_delete(project: string, region: string, networkAttachment: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments/' + (networkAttachment == null ? '' : encodeURIComponent(networkAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified NetworkAttachment resource in the given scope.
		 * Get projects/{project}/regions/{region}/networkAttachments/{networkAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} networkAttachment Name of the NetworkAttachment resource to return.
		 * @return {NetworkAttachment} Successful response
		 */
		Compute_networkAttachments_get(project: string, region: string, networkAttachment: string): Observable<NetworkAttachment> {
			return this.http.get<NetworkAttachment>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments/' + (networkAttachment == null ? '' : encodeURIComponent(networkAttachment)), {});
		}

		/**
		 * Patches the specified NetworkAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/networkAttachments/{networkAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} networkAttachment Name of the NetworkAttachment resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
		 * @return {Operation} Successful response
		 */
		Compute_networkAttachments_patch(project: string, region: string, networkAttachment: string, requestId: string | null | undefined, requestBody: NetworkAttachment): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments/' + (networkAttachment == null ? '' : encodeURIComponent(networkAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_networkAttachments_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/networkAttachments/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_networkAttachments_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/networkAttachments/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_networkAttachments_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a new service in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/networkEdgeSecurityServices
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_networkEdgeSecurityServices_insert(project: string, region: string, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: NetworkEdgeSecurityService): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEdgeSecurityServices&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified service.
		 * Delete projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} networkEdgeSecurityService Name of the network edge security service to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkEdgeSecurityServices_delete(project: string, region: string, networkEdgeSecurityService: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEdgeSecurityServices/' + (networkEdgeSecurityService == null ? '' : encodeURIComponent(networkEdgeSecurityService)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Gets a specified NetworkEdgeSecurityService.
		 * Get projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} networkEdgeSecurityService Name of the network edge security service to get.
		 * @return {NetworkEdgeSecurityService} Successful response
		 */
		Compute_networkEdgeSecurityServices_get(project: string, region: string, networkEdgeSecurityService: string): Observable<NetworkEdgeSecurityService> {
			return this.http.get<NetworkEdgeSecurityService>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEdgeSecurityServices/' + (networkEdgeSecurityService == null ? '' : encodeURIComponent(networkEdgeSecurityService)), {});
		}

		/**
		 * Patches the specified policy with the data included in the request.
		 * Patch projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} networkEdgeSecurityService Name of the network edge security service to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask Indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_networkEdgeSecurityServices_patch(project: string, region: string, networkEdgeSecurityService: string, paths: Array<string> | null | undefined, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: NetworkEdgeSecurityService): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEdgeSecurityServices/' + (networkEdgeSecurityService == null ? '' : encodeURIComponent(networkEdgeSecurityService)) + '&' + paths?.map(z => `paths=${encodeURIComponent(z)}`).join('&') + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of regional network endpoint groups available to the specified project in the given region.
		 * Get projects/{project}/regions/{region}/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupList} Successful response
		 */
		Compute_regionNetworkEndpointGroups_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkEndpointGroupList> {
			return this.http.get<NetworkEndpointGroupList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a network endpoint group in the specified project using the parameters that are included in the request.
		 * Post projects/{project}/regions/{region}/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where you want to create the network endpoint group. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkEndpointGroups_insert(project: string, region: string, requestId: string | null | undefined, requestBody: NetworkEndpointGroup): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
		 * Delete projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkEndpointGroups_delete(project: string, region: string, networkEndpointGroup: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified network endpoint group.
		 * Get projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
		 * @return {NetworkEndpointGroup} Successful response
		 */
		Compute_regionNetworkEndpointGroups_get(project: string, region: string, networkEndpointGroup: string): Observable<NetworkEndpointGroup> {
			return this.http.get<NetworkEndpointGroup>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)), {});
		}

		/**
		 * Attach a list of network endpoints to the specified network endpoint group.
		 * Post projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where you want to create the network endpoint group. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkEndpointGroups_attachNetworkEndpoints(project: string, region: string, networkEndpointGroup: string, requestId: string | null | undefined, requestBody: RegionNetworkEndpointGroupsAttachEndpointsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/attachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Detach the network endpoint from the specified network endpoint group.
		 * Post projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group you are detaching network endpoints from. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
		 * @return {Operation} Successful response
		 */
		Compute_regionNetworkEndpointGroups_detachNetworkEndpoints(project: string, region: string, networkEndpointGroup: string, requestId: string | null | undefined, requestBody: RegionNetworkEndpointGroupsDetachEndpointsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/detachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the network endpoints in the specified network endpoint group.
		 * Post projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupsListNetworkEndpoints} Successful response
		 */
		Compute_regionNetworkEndpointGroups_listNetworkEndpoints(project: string, region: string, networkEndpointGroup: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkEndpointGroupsListNetworkEndpoints> {
			return this.http.post<NetworkEndpointGroupsListNetworkEndpoints>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/listNetworkEndpoints&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Retrieves a list of node templates available to the specified project.
		 * Get projects/{project}/regions/{region}/nodeTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeTemplateList} Successful response
		 */
		Compute_nodeTemplates_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NodeTemplateList> {
			return this.http.get<NodeTemplateList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a NodeTemplate resource in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/nodeTemplates
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeTemplates_insert(project: string, region: string, requestId: string | null | undefined, requestBody: NodeTemplate): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified NodeTemplate resource.
		 * Delete projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} nodeTemplate Name of the NodeTemplate resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeTemplates_delete(project: string, region: string, nodeTemplate: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (nodeTemplate == null ? '' : encodeURIComponent(nodeTemplate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified node template.
		 * Get projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} nodeTemplate Name of the node template to return.
		 * @return {NodeTemplate} Successful response
		 */
		Compute_nodeTemplates_get(project: string, region: string, nodeTemplate: string): Observable<NodeTemplate> {
			return this.http.get<NodeTemplate>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (nodeTemplate == null ? '' : encodeURIComponent(nodeTemplate)), {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_nodeTemplates_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_nodeTemplates_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_nodeTemplates_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/nodeTemplates/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the NotificationEndpoints for a project in the given region.
		 * Get projects/{project}/regions/{region}/notificationEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NotificationEndpointList} Successful response
		 */
		Compute_regionNotificationEndpoints_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NotificationEndpointList> {
			return this.http.get<NotificationEndpointList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/notificationEndpoints&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
		 * Post projects/{project}/regions/{region}/notificationEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNotificationEndpoints_insert(project: string, region: string, requestId: string | null | undefined, requestBody: NotificationEndpoint): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/notificationEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified NotificationEndpoint in the given region
		 * Delete projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} notificationEndpoint Name of the NotificationEndpoint resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionNotificationEndpoints_delete(project: string, region: string, notificationEndpoint: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/notificationEndpoints/' + (notificationEndpoint == null ? '' : encodeURIComponent(notificationEndpoint)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified NotificationEndpoint resource in the given region.
		 * Get projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} notificationEndpoint Name of the NotificationEndpoint resource to return.
		 * @return {NotificationEndpoint} Successful response
		 */
		Compute_regionNotificationEndpoints_get(project: string, region: string, notificationEndpoint: string): Observable<NotificationEndpoint> {
			return this.http.get<NotificationEndpoint>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/notificationEndpoints/' + (notificationEndpoint == null ? '' : encodeURIComponent(notificationEndpoint)), {});
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified region.
		 * Get projects/{project}/regions/{region}/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {OperationList} Successful response
		 */
		Compute_regionOperations_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<OperationList> {
			return this.http.get<OperationList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified region-specific Operations resource.
		 * Delete projects/{project}/regions/{region}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} operation Name of the Operations resource to delete.
		 * @return {void} Successful response
		 */
		Compute_regionOperations_delete(project: string, region: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified region-specific Operations resource.
		 * Get projects/{project}/regions/{region}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {Operation} Successful response
		 */
		Compute_regionOperations_get(project: string, region: string, operation: string): Observable<Operation> {
			return this.http.get<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)), {});
		}

		/**
		 * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
		 * Post projects/{project}/regions/{region}/operations/{operation}/wait
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {Operation} Successful response
		 */
		Compute_regionOperations_wait(project: string, region: string, operation: string): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '/wait', null, {});
		}

		/**
		 * Retrieves a list of PacketMirroring resources available to the specified project and region.
		 * Get projects/{project}/regions/{region}/packetMirrorings
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {PacketMirroringList} Successful response
		 */
		Compute_packetMirrorings_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<PacketMirroringList> {
			return this.http.get<PacketMirroringList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a PacketMirroring resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/packetMirrorings
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_packetMirrorings_insert(project: string, region: string, requestId: string | null | undefined, requestBody: PacketMirroring): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified PacketMirroring resource.
		 * Delete projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} packetMirroring Name of the PacketMirroring resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_packetMirrorings_delete(project: string, region: string, packetMirroring: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (packetMirroring == null ? '' : encodeURIComponent(packetMirroring)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified PacketMirroring resource.
		 * Get projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} packetMirroring Name of the PacketMirroring resource to return.
		 * @return {PacketMirroring} Successful response
		 */
		Compute_packetMirrorings_get(project: string, region: string, packetMirroring: string): Observable<PacketMirroring> {
			return this.http.get<PacketMirroring>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (packetMirroring == null ? '' : encodeURIComponent(packetMirroring)), {});
		}

		/**
		 * Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} packetMirroring Name of the PacketMirroring resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_packetMirrorings_patch(project: string, region: string, packetMirroring: string, requestId: string | null | undefined, requestBody: PacketMirroring): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (packetMirroring == null ? '' : encodeURIComponent(packetMirroring)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_packetMirrorings_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/packetMirrorings/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the PublicDelegatedPrefixes for a project in the given region.
		 * Get projects/{project}/regions/{region}/publicDelegatedPrefixes
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {PublicDelegatedPrefixList} Successful response
		 */
		Compute_publicDelegatedPrefixes_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<PublicDelegatedPrefixList> {
			return this.http.get<PublicDelegatedPrefixList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request.
		 * Post projects/{project}/regions/{region}/publicDelegatedPrefixes
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicDelegatedPrefixes_insert(project: string, region: string, requestId: string | null | undefined, requestBody: PublicDelegatedPrefix): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified PublicDelegatedPrefix in the given region.
		 * Delete projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} publicDelegatedPrefix Name of the PublicDelegatedPrefix resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicDelegatedPrefixes_delete(project: string, region: string, publicDelegatedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified PublicDelegatedPrefix resource in the given region.
		 * Get projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} publicDelegatedPrefix Name of the PublicDelegatedPrefix resource to return.
		 * @return {PublicDelegatedPrefix} Successful response
		 */
		Compute_publicDelegatedPrefixes_get(project: string, region: string, publicDelegatedPrefix: string): Observable<PublicDelegatedPrefix> {
			return this.http.get<PublicDelegatedPrefix>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)), {});
		}

		/**
		 * Patches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} publicDelegatedPrefix Name of the PublicDelegatedPrefix resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicDelegatedPrefixes_patch(project: string, region: string, publicDelegatedPrefix: string, requestId: string | null | undefined, requestBody: PublicDelegatedPrefix): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Announces the specified PublicDelegatedPrefix in the given region.
		 * Post projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/announce
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the public delegated prefix is located. It should comply with RFC1035.
		 * @param {string} publicDelegatedPrefix The name of the public delegated prefix. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicDelegatedPrefixes_announce(project: string, region: string, publicDelegatedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)) + '/announce&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Withdraws the specified PublicDelegatedPrefix in the given region.
		 * Post projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/withdraw
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region where the public delegated prefix is located. It should comply with RFC1035.
		 * @param {string} publicDelegatedPrefix The name of the public delegated prefix. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_publicDelegatedPrefixes_withdraw(project: string, region: string, publicDelegatedPrefix: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/publicDelegatedPrefixes/' + (publicDelegatedPrefix == null ? '' : encodeURIComponent(publicDelegatedPrefix)) + '/withdraw&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * A list all the resource policies that have been configured for the specified project in specified region.
		 * Get projects/{project}/regions/{region}/resourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ResourcePolicyList} Successful response
		 */
		Compute_resourcePolicies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ResourcePolicyList> {
			return this.http.get<ResourcePolicyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new resource policy.
		 * Post projects/{project}/regions/{region}/resourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_resourcePolicies_insert(project: string, region: string, requestId: string | null | undefined, requestBody: ResourcePolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified resource policy.
		 * Delete projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} resourcePolicy Name of the resource policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_resourcePolicies_delete(project: string, region: string, resourcePolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resourcePolicy == null ? '' : encodeURIComponent(resourcePolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Retrieves all information of the specified resource policy.
		 * Get projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} resourcePolicy Name of the resource policy to retrieve.
		 * @return {ResourcePolicy} Successful response
		 */
		Compute_resourcePolicies_get(project: string, region: string, resourcePolicy: string): Observable<ResourcePolicy> {
			return this.http.get<ResourcePolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resourcePolicy == null ? '' : encodeURIComponent(resourcePolicy)), {});
		}

		/**
		 * Modify the specified resource policy.
		 * Patch projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} resourcePolicy Id of the resource policy to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask update_mask indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_resourcePolicies_patch(project: string, region: string, resourcePolicy: string, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: ResourcePolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resourcePolicy == null ? '' : encodeURIComponent(resourcePolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_resourcePolicies_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_resourcePolicies_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_resourcePolicies_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/resourcePolicies/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of Router resources available to the specified project.
		 * Get projects/{project}/regions/{region}/routers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {RouterList} Successful response
		 */
		Compute_routers_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<RouterList> {
			return this.http.get<RouterList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a Router resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/routers
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_routers_insert(project: string, region: string, requestId: string | null | undefined, requestBody: Router): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified Router resource.
		 * Delete projects/{project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_routers_delete(project: string, region: string, router: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified Router resource.
		 * Get projects/{project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to return.
		 * @return {Router} Successful response
		 */
		Compute_routers_get(project: string, region: string, router: string): Observable<Router> {
			return this.http.get<Router>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)), {});
		}

		/**
		 * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_routers_patch(project: string, region: string, router: string, requestId: string | null | undefined, requestBody: Router): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
		 * Put projects/{project}/regions/{region}/routers/{router}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_routers_update(project: string, region: string, router: string, requestId: string | null | undefined, requestBody: Router): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves runtime NAT IP information.
		 * Get projects/{project}/regions/{region}/routers/{router}/getNatIpInfo
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query for Nat IP information. The name should conform to RFC1035.
		 * @param {string} natName Name of the nat service to filter the NAT IP information. If it is omitted, all nats for this router will be returned. Name should conform to RFC1035.
		 * @return {NatIpInfoResponse} Successful response
		 */
		Compute_routers_getNatIpInfo(project: string, region: string, router: string, natName: string | null | undefined): Observable<NatIpInfoResponse> {
			return this.http.get<NatIpInfoResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/getNatIpInfo&natName=' + (natName == null ? '' : encodeURIComponent(natName)), {});
		}

		/**
		 * Retrieves runtime Nat mapping information of VM endpoints.
		 * Get projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query for Nat Mapping information of VM endpoints.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} natName Name of the nat service to filter the Nat Mapping information. If it is omitted, all nats for this router will be returned. Name should conform to RFC1035.
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {VmEndpointNatMappingsList} Successful response
		 */
		Compute_routers_getNatMappingInfo(project: string, region: string, router: string, filter: string | null | undefined, maxResults: number | null | undefined, natName: string | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<VmEndpointNatMappingsList> {
			return this.http.get<VmEndpointNatMappingsList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/getNatMappingInfo&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&natName=' + (natName == null ? '' : encodeURIComponent(natName)) + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Retrieves runtime information of the specified router.
		 * Get projects/{project}/regions/{region}/routers/{router}/getRouterStatus
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query.
		 * @return {RouterStatusResponse} Successful response
		 */
		Compute_routers_getRouterStatus(project: string, region: string, router: string): Observable<RouterStatusResponse> {
			return this.http.get<RouterStatusResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/getRouterStatus', {});
		}

		/**
		 * Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
		 * Post projects/{project}/regions/{region}/routers/{router}/preview
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} router Name of the Router resource to query.
		 * @return {RoutersPreviewResponse} Successful response
		 */
		Compute_routers_preview(project: string, region: string, router: string, requestBody: Router): Observable<RoutersPreviewResponse> {
			return this.http.post<RoutersPreviewResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/routers/' + (router == null ? '' : encodeURIComponent(router)) + '/preview', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List all the policies that have been configured for the specified project and region.
		 * Get projects/{project}/regions/{region}/securityPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SecurityPolicyList} Successful response
		 */
		Compute_regionSecurityPolicies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SecurityPolicyList> {
			return this.http.get<SecurityPolicyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new policy in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/securityPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_regionSecurityPolicies_insert(project: string, region: string, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: SecurityPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified policy.
		 * Delete projects/{project}/regions/{region}/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionSecurityPolicies_delete(project: string, region: string, securityPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * List all of the ordered rules present in a single specified policy.
		 * Get projects/{project}/regions/{region}/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to get.
		 * @return {SecurityPolicy} Successful response
		 */
		Compute_regionSecurityPolicies_get(project: string, region: string, securityPolicy: string): Observable<SecurityPolicy> {
			return this.http.get<SecurityPolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)), {});
		}

		/**
		 * Patches the specified policy with the data included in the request. To clear fields in the policy, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
		 * Patch projects/{project}/regions/{region}/securityPolicies/{securityPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask Indicates fields to be cleared as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_regionSecurityPolicies_patch(project: string, region: string, securityPolicy: string, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: SecurityPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts a rule into a security policy.
		 * Post projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/addRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_regionSecurityPolicies_addRule(project: string, region: string, securityPolicy: string, validateOnly: boolean | null | undefined, requestBody: SecurityPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/addRule&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a rule at the specified priority.
		 * Get projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/getRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to which the queried rule belongs.
		 * @param {number} priority The priority of the rule to get from the security policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {SecurityPolicyRule} Successful response
		 */
		Compute_regionSecurityPolicies_getRule(project: string, region: string, securityPolicy: string, priority: number | null | undefined): Observable<SecurityPolicyRule> {
			return this.http.get<SecurityPolicyRule>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/getRule&priority=' + priority, {});
		}

		/**
		 * Patches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
		 * Post projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/patchRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {number} priority The priority of the rule to patch.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} updateMask Indicates fields to be cleared as part of this request.
		 * @param {boolean} validateOnly If true, the request will not be committed.
		 * @return {Operation} Successful response
		 */
		Compute_regionSecurityPolicies_patchRule(project: string, region: string, securityPolicy: string, priority: number | null | undefined, updateMask: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: SecurityPolicyRule): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/patchRule&priority=' + priority + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a rule at the specified priority.
		 * Post projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/removeRule
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} securityPolicy Name of the security policy to update.
		 * @param {number} priority The priority of the rule to remove from the security policy.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Operation} Successful response
		 */
		Compute_regionSecurityPolicies_removeRule(project: string, region: string, securityPolicy: string, priority: number | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/securityPolicies/' + (securityPolicy == null ? '' : encodeURIComponent(securityPolicy)) + '/removeRule&priority=' + priority, null, {});
		}

		/**
		 * Lists the ServiceAttachments for a project in the given scope.
		 * Get projects/{project}/regions/{region}/serviceAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ServiceAttachmentList} Successful response
		 */
		Compute_serviceAttachments_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ServiceAttachmentList> {
			return this.http.get<ServiceAttachmentList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.
		 * Post projects/{project}/regions/{region}/serviceAttachments
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_serviceAttachments_insert(project: string, region: string, requestId: string | null | undefined, requestBody: ServiceAttachment): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_serviceAttachments_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_serviceAttachments_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_serviceAttachments_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified ServiceAttachment in the given scope
		 * Delete projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} serviceAttachment Name of the ServiceAttachment resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_serviceAttachments_delete(project: string, region: string, serviceAttachment: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments/' + (serviceAttachment == null ? '' : encodeURIComponent(serviceAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified ServiceAttachment resource in the given scope.
		 * Get projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region of this request.
		 * @param {string} serviceAttachment Name of the ServiceAttachment resource to return.
		 * @return {ServiceAttachment} Successful response
		 */
		Compute_serviceAttachments_get(project: string, region: string, serviceAttachment: string): Observable<ServiceAttachment> {
			return this.http.get<ServiceAttachment>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments/' + (serviceAttachment == null ? '' : encodeURIComponent(serviceAttachment)), {});
		}

		/**
		 * Patches the specified ServiceAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region scoping this request and should conform to RFC1035.
		 * @param {string} serviceAttachment The resource id of the ServiceAttachment to patch. It should conform to RFC1035 resource name or be a string form on an unsigned long number.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_serviceAttachments_patch(project: string, region: string, serviceAttachment: string, requestId: string | null | undefined, requestBody: ServiceAttachment): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/serviceAttachments/' + (serviceAttachment == null ? '' : encodeURIComponent(serviceAttachment)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of SslCertificate resources available to the specified project in the specified region.
		 * Get projects/{project}/regions/{region}/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslCertificateList} Successful response
		 */
		Compute_regionSslCertificates_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SslCertificateList> {
			return this.http.get<SslCertificateList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a SslCertificate resource in the specified project and region using the data included in the request
		 * Post projects/{project}/regions/{region}/sslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionSslCertificates_insert(project: string, region: string, requestId: string | null | undefined, requestBody: SslCertificate): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified SslCertificate resource in the region.
		 * Delete projects/{project}/regions/{region}/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionSslCertificates_delete(project: string, region: string, sslCertificate: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
		 * Get projects/{project}/regions/{region}/sslCertificates/{sslCertificate}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslCertificate Name of the SslCertificate resource to return.
		 * @return {SslCertificate} Successful response
		 */
		Compute_regionSslCertificates_get(project: string, region: string, sslCertificate: string): Observable<SslCertificate> {
			return this.http.get<SslCertificate>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslCertificates/' + (sslCertificate == null ? '' : encodeURIComponent(sslCertificate)), {});
		}

		/**
		 * Lists all the SSL policies that have been configured for the specified project and region.
		 * Get projects/{project}/regions/{region}/sslPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslPoliciesList} Successful response
		 */
		Compute_regionSslPolicies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SslPoliciesList> {
			return this.http.get<SslPoliciesList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslPolicies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new policy in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/sslPolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionSslPolicies_insert(project: string, region: string, requestId: string | null | undefined, requestBody: SslPolicy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslPolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all features that can be specified in the SSL policy when using custom profile.
		 * Get projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SslPoliciesListAvailableFeaturesResponse} Successful response
		 */
		Compute_regionSslPolicies_listAvailableFeatures(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SslPoliciesListAvailableFeaturesResponse> {
			return this.http.get<SslPoliciesListAvailableFeaturesResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslPolicies/listAvailableFeatures&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
		 * Delete projects/{project}/regions/{region}/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslPolicy Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionSslPolicies_delete(project: string, region: string, sslPolicy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Lists all of the ordered rules present in a single specified policy.
		 * Get projects/{project}/regions/{region}/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @return {SslPolicy} Successful response
		 */
		Compute_regionSslPolicies_get(project: string, region: string, sslPolicy: string): Observable<SslPolicy> {
			return this.http.get<SslPolicy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)), {});
		}

		/**
		 * Patches the specified SSL policy with the data included in the request.
		 * Patch projects/{project}/regions/{region}/sslPolicies/{sslPolicy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionSslPolicies_patch(project: string, region: string, sslPolicy: string, requestId: string | null | undefined, requestBody: SslPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/sslPolicies/' + (sslPolicy == null ? '' : encodeURIComponent(sslPolicy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of subnetworks available to the specified project.
		 * Get projects/{project}/regions/{region}/subnetworks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {SubnetworkList} Successful response
		 */
		Compute_subnetworks_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<SubnetworkList> {
			return this.http.get<SubnetworkList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a subnetwork in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/subnetworks
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_subnetworks_insert(project: string, region: string, requestId: string | null | undefined, requestBody: Subnetwork): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_subnetworks_getIamPolicy(project: string, region: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_subnetworks_setIamPolicy(project: string, region: string, resource: string, requestBody: RegionSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_subnetworks_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified subnetwork.
		 * Delete projects/{project}/regions/{region}/subnetworks/{subnetwork}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_subnetworks_delete(project: string, region: string, subnetwork: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified subnetwork.
		 * Get projects/{project}/regions/{region}/subnetworks/{subnetwork}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to return.
		 * @return {Subnetwork} Successful response
		 */
		Compute_subnetworks_get(project: string, region: string, subnetwork: string): Observable<Subnetwork> {
			return this.http.get<Subnetwork>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)), {});
		}

		/**
		 * Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
		 * Patch projects/{project}/regions/{region}/subnetworks/{subnetwork}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to patch.
		 * @param {number} drainTimeoutSeconds The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork. The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_subnetworks_patch(project: string, region: string, subnetwork: string, drainTimeoutSeconds: number | null | undefined, requestId: string | null | undefined, requestBody: Subnetwork): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '&drainTimeoutSeconds=' + drainTimeoutSeconds + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Expands the IP CIDR range of the subnetwork to a specified value.
		 * Post projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_subnetworks_expandIpCidrRange(project: string, region: string, subnetwork: string, requestId: string | null | undefined, requestBody: SubnetworksExpandIpCidrRangeRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '/expandIpCidrRange&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
		 * Post projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} subnetwork Name of the Subnetwork resource.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_subnetworks_setPrivateIpGoogleAccess(project: string, region: string, subnetwork: string, requestId: string | null | undefined, requestBody: SubnetworksSetPrivateIpGoogleAccessRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/subnetworks/' + (subnetwork == null ? '' : encodeURIComponent(subnetwork)) + '/setPrivateIpGoogleAccess&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
		 * Get projects/{project}/regions/{region}/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetHttpProxyList} Successful response
		 */
		Compute_regionTargetHttpProxies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetHttpProxyList> {
			return this.http.get<TargetHttpProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/targetHttpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpProxies_insert(project: string, region: string, requestId: string | null | undefined, requestBody: TargetHttpProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetHttpProxy resource.
		 * Delete projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpProxies_delete(project: string, region: string, targetHttpProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetHttpProxy resource in the specified region.
		 * Get projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy resource to return.
		 * @return {TargetHttpProxy} Successful response
		 */
		Compute_regionTargetHttpProxies_get(project: string, region: string, targetHttpProxy: string): Observable<TargetHttpProxy> {
			return this.http.get<TargetHttpProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)), {});
		}

		/**
		 * Changes the URL map for TargetHttpProxy.
		 * Post projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy to set a URL map for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpProxies_setUrlMap(project: string, region: string, targetHttpProxy: string, requestId: string | null | undefined, requestBody: UrlMapReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
		 * Get projects/{project}/regions/{region}/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetHttpsProxyList} Successful response
		 */
		Compute_regionTargetHttpsProxies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetHttpsProxyList> {
			return this.http.get<TargetHttpsProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/targetHttpsProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpsProxies_insert(project: string, region: string, requestId: string | null | undefined, requestBody: TargetHttpsProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetHttpsProxy resource.
		 * Delete projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpsProxies_delete(project: string, region: string, targetHttpsProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetHttpsProxy resource in the specified region.
		 * Get projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to return.
		 * @return {TargetHttpsProxy} Successful response
		 */
		Compute_regionTargetHttpsProxies_get(project: string, region: string, targetHttpsProxy: string): Observable<TargetHttpsProxy> {
			return this.http.get<TargetHttpsProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)), {});
		}

		/**
		 * Patches the specified regional TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpsProxies_patch(project: string, region: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: TargetHttpsProxy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Replaces SslCertificates for TargetHttpsProxy.
		 * Post projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpsProxies_setSslCertificates(project: string, region: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: RegionTargetHttpsProxiesSetSslCertificatesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setSslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the URL map for TargetHttpsProxy.
		 * Post projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy to set a URL map for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetHttpsProxies_setUrlMap(project: string, region: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: UrlMapReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of target pools available to the specified project and region.
		 * Get projects/{project}/regions/{region}/targetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetPoolList} Successful response
		 */
		Compute_targetPools_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetPoolList> {
			return this.http.get<TargetPoolList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a target pool in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/targetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_insert(project: string, region: string, requestId: string | null | undefined, requestBody: TargetPool): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified target pool.
		 * Delete projects/{project}/regions/{region}/targetPools/{targetPool}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_delete(project: string, region: string, targetPool: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified target pool.
		 * Get projects/{project}/regions/{region}/targetPools/{targetPool}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to return.
		 * @return {TargetPool} Successful response
		 */
		Compute_targetPools_get(project: string, region: string, targetPool: string): Observable<TargetPool> {
			return this.http.get<TargetPool>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)), {});
		}

		/**
		 * Adds health check URLs to a target pool.
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the target pool to add a health check to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_addHealthCheck(project: string, region: string, targetPool: string, requestId: string | null | undefined, requestBody: TargetPoolsAddHealthCheckRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/addHealthCheck&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds an instance to a target pool.
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to add instances to.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_addInstance(project: string, region: string, targetPool: string, requestId: string | null | undefined, requestBody: TargetPoolsAddInstanceRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/addInstance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to which the queried instance belongs.
		 * @return {TargetPoolInstanceHealth} Successful response
		 */
		Compute_targetPools_getHealth(project: string, region: string, targetPool: string, requestBody: InstanceReference): Observable<TargetPoolInstanceHealth> {
			return this.http.post<TargetPoolInstanceHealth>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/getHealth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes health check URL from a target pool.
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetPool Name of the target pool to remove health checks from.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_removeHealthCheck(project: string, region: string, targetPool: string, requestId: string | null | undefined, requestBody: TargetPoolsRemoveHealthCheckRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/removeHealthCheck&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes instance URL from a target pool.
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to remove instances from.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_removeInstance(project: string, region: string, targetPool: string, requestId: string | null | undefined, requestBody: TargetPoolsRemoveInstanceRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/removeInstance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes a backup target pool's configurations.
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to set a backup pool for.
		 * @param {number} failoverRatio New failoverRatio value for the target pool.
		 *     Type: double
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_setBackup(project: string, region: string, targetPool: string, failoverRatio: number | null | undefined, requestId: string | null | undefined, requestBody: TargetReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/setBackup&failoverRatio=' + failoverRatio + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the Google Cloud Armor security policy for the specified target pool. For more information, see Google Cloud Armor Overview
		 * Post projects/{project}/regions/{region}/targetPools/{targetPool}/setSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetPool Name of the TargetPool resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetPools_setSecurityPolicy(project: string, region: string, targetPool: string, requestId: string | null | undefined, requestBody: SecurityPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetPools/' + (targetPool == null ? '' : encodeURIComponent(targetPool)) + '/setSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of TargetTcpProxy resources available to the specified project in a given region.
		 * Get projects/{project}/regions/{region}/targetTcpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetTcpProxyList} Successful response
		 */
		Compute_regionTargetTcpProxies_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetTcpProxyList> {
			return this.http.get<TargetTcpProxyList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetTcpProxies&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetTcpProxy resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/targetTcpProxies
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetTcpProxies_insert(project: string, region: string, requestId: string | null | undefined, requestBody: TargetTcpProxy): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetTcpProxies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetTcpProxy resource.
		 * Delete projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_regionTargetTcpProxies_delete(project: string, region: string, targetTcpProxy: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetTcpProxy resource.
		 * Get projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} targetTcpProxy Name of the TargetTcpProxy resource to return.
		 * @return {TargetTcpProxy} Successful response
		 */
		Compute_regionTargetTcpProxies_get(project: string, region: string, targetTcpProxy: string): Observable<TargetTcpProxy> {
			return this.http.get<TargetTcpProxy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetTcpProxies/' + (targetTcpProxy == null ? '' : encodeURIComponent(targetTcpProxy)), {});
		}

		/**
		 * Retrieves a list of target VPN gateways available to the specified project and region.
		 * Get projects/{project}/regions/{region}/targetVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetVpnGatewayList} Successful response
		 */
		Compute_targetVpnGateways_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetVpnGatewayList> {
			return this.http.get<TargetVpnGatewayList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a target VPN gateway in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/targetVpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetVpnGateways_insert(project: string, region: string, requestId: string | null | undefined, requestBody: TargetVpnGateway): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetVpnGateways_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified target VPN gateway.
		 * Delete projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetVpnGateway Name of the target VPN gateway to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetVpnGateways_delete(project: string, region: string, targetVpnGateway: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways/' + (targetVpnGateway == null ? '' : encodeURIComponent(targetVpnGateway)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified target VPN gateway.
		 * Get projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} targetVpnGateway Name of the target VPN gateway to return.
		 * @return {TargetVpnGateway} Successful response
		 */
		Compute_targetVpnGateways_get(project: string, region: string, targetVpnGateway: string): Observable<TargetVpnGateway> {
			return this.http.get<TargetVpnGateway>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/targetVpnGateways/' + (targetVpnGateway == null ? '' : encodeURIComponent(targetVpnGateway)), {});
		}

		/**
		 * Retrieves the list of UrlMap resources available to the specified project in the specified region.
		 * Get projects/{project}/regions/{region}/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {UrlMapList} Successful response
		 */
		Compute_regionUrlMaps_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<UrlMapList> {
			return this.http.get<UrlMapList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a UrlMap resource in the specified project using the data included in the request.
		 * Post projects/{project}/regions/{region}/urlMaps
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {Operation} Successful response
		 */
		Compute_regionUrlMaps_insert(project: string, region: string, requestId: string | null | undefined, requestBody: UrlMap): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified UrlMap resource.
		 * Delete projects/{project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to delete.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {Operation} Successful response
		 */
		Compute_regionUrlMaps_delete(project: string, region: string, urlMap: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified UrlMap resource.
		 * Get projects/{project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to return.
		 * @return {UrlMap} Successful response
		 */
		Compute_regionUrlMaps_get(project: string, region: string, urlMap: string): Observable<UrlMap> {
			return this.http.get<UrlMap>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)), {});
		}

		/**
		 * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
		 * Patch projects/{project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to patch.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {Operation} Successful response
		 */
		Compute_regionUrlMaps_patch(project: string, region: string, urlMap: string, requestId: string | null | undefined, requestBody: UrlMap): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified UrlMap resource with the data included in the request.
		 * Put projects/{project}/regions/{region}/urlMaps/{urlMap}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to update.
		 * @param {string} requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
		 * @return {Operation} Successful response
		 */
		Compute_regionUrlMaps_update(project: string, region: string, urlMap: string, requestId: string | null | undefined, requestBody: UrlMap): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
		 * Post projects/{project}/regions/{region}/urlMaps/{urlMap}/validate
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region scoping this request.
		 * @param {string} urlMap Name of the UrlMap resource to be validated as.
		 * @return {UrlMapsValidateResponse} Successful response
		 */
		Compute_regionUrlMaps_validate(project: string, region: string, urlMap: string, requestBody: RegionUrlMapsValidateRequest): Observable<UrlMapsValidateResponse> {
			return this.http.post<UrlMapsValidateResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/urlMaps/' + (urlMap == null ? '' : encodeURIComponent(urlMap)) + '/validate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of VPN gateways available to the specified project and region.
		 * Get projects/{project}/regions/{region}/vpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {VpnGatewayList} Successful response
		 */
		Compute_vpnGateways_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<VpnGatewayList> {
			return this.http.get<VpnGatewayList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a VPN gateway in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/vpnGateways
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_vpnGateways_insert(project: string, region: string, requestId: string | null | undefined, requestBody: VpnGateway): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_vpnGateways_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} region The name of the region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_vpnGateways_testIamPermissions(project: string, region: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified VPN gateway.
		 * Delete projects/{project}/regions/{region}/vpnGateways/{vpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnGateway Name of the VPN gateway to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_vpnGateways_delete(project: string, region: string, vpnGateway: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (vpnGateway == null ? '' : encodeURIComponent(vpnGateway)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified VPN gateway.
		 * Get projects/{project}/regions/{region}/vpnGateways/{vpnGateway}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnGateway Name of the VPN gateway to return.
		 * @return {VpnGateway} Successful response
		 */
		Compute_vpnGateways_get(project: string, region: string, vpnGateway: string): Observable<VpnGateway> {
			return this.http.get<VpnGateway>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (vpnGateway == null ? '' : encodeURIComponent(vpnGateway)), {});
		}

		/**
		 * Returns the status for the specified VPN gateway.
		 * Get projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnGateway Name of the VPN gateway to return.
		 * @return {VpnGatewaysGetStatusResponse} Successful response
		 */
		Compute_vpnGateways_getStatus(project: string, region: string, vpnGateway: string): Observable<VpnGatewaysGetStatusResponse> {
			return this.http.get<VpnGatewaysGetStatusResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnGateways/' + (vpnGateway == null ? '' : encodeURIComponent(vpnGateway)) + '/getStatus', {});
		}

		/**
		 * Retrieves a list of VpnTunnel resources contained in the specified project and region.
		 * Get projects/{project}/regions/{region}/vpnTunnels
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {VpnTunnelList} Successful response
		 */
		Compute_vpnTunnels_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<VpnTunnelList> {
			return this.http.get<VpnTunnelList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a VpnTunnel resource in the specified project and region using the data included in the request.
		 * Post projects/{project}/regions/{region}/vpnTunnels
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_vpnTunnels_insert(project: string, region: string, requestId: string | null | undefined, requestBody: VpnTunnel): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} region The region for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_vpnTunnels_setLabels(project: string, region: string, resource: string, requestId: string | null | undefined, requestBody: RegionSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified VpnTunnel resource.
		 * Delete projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnTunnel Name of the VpnTunnel resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_vpnTunnels_delete(project: string, region: string, vpnTunnel: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels/' + (vpnTunnel == null ? '' : encodeURIComponent(vpnTunnel)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified VpnTunnel resource.
		 * Get projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}
		 * @param {string} project Project ID for this request.
		 * @param {string} region Name of the region for this request.
		 * @param {string} vpnTunnel Name of the VpnTunnel resource to return.
		 * @return {VpnTunnel} Successful response
		 */
		Compute_vpnTunnels_get(project: string, region: string, vpnTunnel: string): Observable<VpnTunnel> {
			return this.http.get<VpnTunnel>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/vpnTunnels/' + (vpnTunnel == null ? '' : encodeURIComponent(vpnTunnel)), {});
		}

		/**
		 * Retrieves the list of Zone resources under the specific region available to the specified project.
		 * Get projects/{project}/regions/{region}/zones
		 * @param {string} project Project ID for this request.
		 * @param {string} region Region for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ZoneList} Successful response
		 */
		Compute_regionZones_list(project: string, region: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ZoneList> {
			return this.http.get<ZoneList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/regions/' + (region == null ? '' : encodeURIComponent(region)) + '/zones&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Sets metadata common to all instances within the specified project using the data included in the request.
		 * Post projects/{project}/setCommonInstanceMetadata
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_setCommonInstanceMetadata(project: string, requestId: string | null | undefined, requestBody: Metadata): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/setCommonInstanceMetadata&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
		 * Post projects/{project}/setDefaultNetworkTier
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_setDefaultNetworkTier(project: string, requestId: string | null | undefined, requestBody: ProjectsSetDefaultNetworkTierRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/setDefaultNetworkTier&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
		 * Post projects/{project}/setUsageExportBucket
		 * @param {string} project Project ID for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_projects_setUsageExportBucket(project: string, requestId: string | null | undefined, requestBody: UsageExportLocation): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/setUsageExportBucket&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the URL map for TargetHttpProxy.
		 * Post projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpProxy Name of the TargetHttpProxy to set a URL map for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpProxies_setUrlMap(project: string, targetHttpProxy: string, requestId: string | null | undefined, requestBody: UrlMapReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/targetHttpProxies/' + (targetHttpProxy == null ? '' : encodeURIComponent(targetHttpProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Replaces SslCertificates for TargetHttpsProxy.
		 * Post projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_setSslCertificates(project: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: TargetHttpsProxiesSetSslCertificatesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setSslCertificates&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the URL map for TargetHttpsProxy.
		 * Post projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap
		 * @param {string} project Project ID for this request.
		 * @param {string} targetHttpsProxy Name of the TargetHttpsProxy resource whose URL map is to be set.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetHttpsProxies_setUrlMap(project: string, targetHttpsProxy: string, requestId: string | null | undefined, requestBody: UrlMapReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/targetHttpsProxies/' + (targetHttpsProxy == null ? '' : encodeURIComponent(targetHttpsProxy)) + '/setUrlMap&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of Zone resources available to the specified project.
		 * Get projects/{project}/zones
		 * @param {string} project Project ID for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ZoneList} Successful response
		 */
		Compute_zones_list(project: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ZoneList> {
			return this.http.get<ZoneList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified Zone resource.
		 * Get projects/{project}/zones/{zone}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone resource to return.
		 * @return {Zone} Successful response
		 */
		Compute_zones_get(project: string, zone: string): Observable<Zone> {
			return this.http.get<Zone>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)), {});
		}

		/**
		 * Retrieves a list of accelerator types that are available to the specified project.
		 * Get projects/{project}/zones/{zone}/acceleratorTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AcceleratorTypeList} Successful response
		 */
		Compute_acceleratorTypes_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<AcceleratorTypeList> {
			return this.http.get<AcceleratorTypeList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/acceleratorTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified accelerator type.
		 * Get projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} acceleratorType Name of the accelerator type to return.
		 * @return {AcceleratorType} Successful response
		 */
		Compute_acceleratorTypes_get(project: string, zone: string, acceleratorType: string): Observable<AcceleratorType> {
			return this.http.get<AcceleratorType>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/acceleratorTypes/' + (acceleratorType == null ? '' : encodeURIComponent(acceleratorType)), {});
		}

		/**
		 * Retrieves a list of autoscalers contained within the specified zone.
		 * Get projects/{project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {AutoscalerList} Successful response
		 */
		Compute_autoscalers_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<AutoscalerList> {
			return this.http.get<AutoscalerList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to patch.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_autoscalers_patch(project: string, zone: string, autoscaler: string | null | undefined, requestId: string | null | undefined, requestBody: Autoscaler): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates an autoscaler in the specified project using the data included in the request.
		 * Post projects/{project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_autoscalers_insert(project: string, zone: string, requestId: string | null | undefined, requestBody: Autoscaler): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates an autoscaler in the specified project using the data included in the request.
		 * Put projects/{project}/zones/{zone}/autoscalers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_autoscalers_update(project: string, zone: string, autoscaler: string | null | undefined, requestId: string | null | undefined, requestBody: Autoscaler): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers&autoscaler=' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified autoscaler.
		 * Delete projects/{project}/zones/{zone}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_autoscalers_delete(project: string, zone: string, autoscaler: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified autoscaler resource.
		 * Get projects/{project}/zones/{zone}/autoscalers/{autoscaler}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} autoscaler Name of the autoscaler to return.
		 * @return {Autoscaler} Successful response
		 */
		Compute_autoscalers_get(project: string, zone: string, autoscaler: string): Observable<Autoscaler> {
			return this.http.get<Autoscaler>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/autoscalers/' + (autoscaler == null ? '' : encodeURIComponent(autoscaler)), {});
		}

		/**
		 * Retrieves a list of disk types available to the specified project.
		 * Get projects/{project}/zones/{zone}/diskTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {DiskTypeList} Successful response
		 */
		Compute_diskTypes_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<DiskTypeList> {
			return this.http.get<DiskTypeList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/diskTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified disk type.
		 * Get projects/{project}/zones/{zone}/diskTypes/{diskType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} diskType Name of the disk type to return.
		 * @return {DiskType} Successful response
		 */
		Compute_diskTypes_get(project: string, zone: string, diskType: string): Observable<DiskType> {
			return this.http.get<DiskType>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/diskTypes/' + (diskType == null ? '' : encodeURIComponent(diskType)), {});
		}

		/**
		 * Retrieves a list of persistent disks contained within the specified zone.
		 * Get projects/{project}/zones/{zone}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {DiskList} Successful response
		 */
		Compute_disks_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<DiskList> {
			return this.http.get<DiskList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
		 * Post projects/{project}/zones/{zone}/disks
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceImage Source image to restore onto a disk. This field is optional.
		 * @return {Operation} Successful response
		 */
		Compute_disks_insert(project: string, zone: string, requestId: string | null | undefined, sourceImage: string | null | undefined, requestBody: Disk): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceImage=' + (sourceImage == null ? '' : encodeURIComponent(sourceImage)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Bulk create a set of disks.
		 * Post projects/{project}/zones/{zone}/disks/bulkInsert
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_bulkInsert(project: string, zone: string, requestId: string | null | undefined, requestBody: BulkInsertDiskResource): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/bulkInsert&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
		 * Post projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request. This must be the zone of the primary or secondary disks in the consistency group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_stopGroupAsyncReplication(project: string, zone: string, requestId: string | null | undefined, requestBody: DisksStopGroupAsyncReplicationResource): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/stopGroupAsyncReplication&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
		 * Delete projects/{project}/zones/{zone}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk Name of the persistent disk to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_delete(project: string, zone: string, disk: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified persistent disk.
		 * Get projects/{project}/zones/{zone}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk Name of the persistent disk to return.
		 * @return {Disk} Successful response
		 */
		Compute_disks_get(project: string, zone: string, disk: string): Observable<Disk> {
			return this.http.get<Disk>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)), {});
		}

		/**
		 * Updates the specified disk with the data included in the request. The update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
		 * Patch projects/{project}/zones/{zone}/disks/{disk}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask update_mask indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_disks_update(project: string, zone: string, disk: string, paths: Array<string> | null | undefined, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: Disk): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '&' + paths?.map(z => `paths=${encodeURIComponent(z)}`).join('&') + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
		 * Post projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_addResourcePolicies(project: string, zone: string, disk: string, requestId: string | null | undefined, requestBody: DisksAddResourcePoliciesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/addResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
		 * Post projects/{project}/zones/{zone}/disks/{disk}/createSnapshot
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk Name of the persistent disk to snapshot.
		 * @param {boolean} guestFlush [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_createSnapshot(project: string, zone: string, disk: string, guestFlush: boolean | null | undefined, requestId: string | null | undefined, requestBody: Snapshot): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/createSnapshot&guestFlush=' + guestFlush + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes resource policies from a disk.
		 * Post projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The disk name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_removeResourcePolicies(project: string, zone: string, disk: string, requestId: string | null | undefined, requestBody: DisksRemoveResourcePoliciesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/removeResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Resizes the specified persistent disk. You can only increase the size of the disk.
		 * Post projects/{project}/zones/{zone}/disks/{disk}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The name of the persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_resize(project: string, zone: string, disk: string, requestId: string | null | undefined, requestBody: DisksResizeRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/resize&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Starts asynchronous replication. Must be invoked on the primary disk.
		 * Post projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The name of the persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_startAsyncReplication(project: string, zone: string, disk: string, requestId: string | null | undefined, requestBody: DisksStartAsyncReplicationRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/startAsyncReplication&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
		 * Post projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} disk The name of the persistent disk.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_stopAsyncReplication(project: string, zone: string, disk: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (disk == null ? '' : encodeURIComponent(disk)) + '/stopAsyncReplication&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_disks_getIamPolicy(project: string, zone: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_disks_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/zones/{zone}/disks/{resource}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_disks_setLabels(project: string, zone: string, resource: string, requestId: string | null | undefined, requestBody: ZoneSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_disks_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/disks/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the latest image that is part of an image family, is not deprecated and is rolled out in the specified zone.
		 * Get projects/{project}/zones/{zone}/imageFamilyViews/{family}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} family Name of the image family to search for.
		 * @return {ImageFamilyView} Successful response
		 */
		Compute_imageFamilyViews_get(project: string, zone: string, family: string): Observable<ImageFamilyView> {
			return this.http.get<ImageFamilyView>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/imageFamilyViews/' + (family == null ? '' : encodeURIComponent(family)), {});
		}

		/**
		 * Retrieves a list of managed instance groups that are contained within the specified project and zone.
		 * Get projects/{project}/zones/{zone}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupManagerList} Successful response
		 */
		Compute_instanceGroupManagers_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceGroupManagerList> {
			return this.http.get<InstanceGroupManagerList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_insert(project: string, zone: string, requestId: string | null | undefined, requestBody: InstanceGroupManager): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read Deleting an instance group for more information.
		 * Delete projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_delete(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns all of the details about the specified managed instance group.
		 * Get projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @return {InstanceGroupManager} Successful response
		 */
		Compute_instanceGroupManagers_get(project: string, zone: string, instanceGroupManager: string): Observable<InstanceGroupManager> {
			return this.http.get<InstanceGroupManager>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)), {});
		}

		/**
		 * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
		 * Patch projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the managed instance group.
		 * @param {string} instanceGroupManager The name of the instance group manager.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_patch(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManager): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_abandonInstances(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersAbandonInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/abandonInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. Should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group, should conform to RFC1035.
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_applyUpdatesToInstances(project: string, zone: string, instanceGroupManager: string, requestBody: InstanceGroupManagersApplyUpdatesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/applyUpdatesToInstances', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates instances with per-instance configurations in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_createInstances(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersCreateInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/createInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_deleteInstances(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersDeleteInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/deleteInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes selected per-instance configurations for the managed instance group.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_deletePerInstanceConfigs(project: string, zone: string, instanceGroupManager: string, requestBody: InstanceGroupManagersDeletePerInstanceConfigsReq): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/deletePerInstanceConfigs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
		 * Get projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|1-9{0,19}.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupManagersListErrorsResponse} Successful response
		 */
		Compute_instanceGroupManagers_listErrors(project: string, zone: string, instanceGroupManager: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceGroupManagersListErrorsResponse> {
			return this.http.get<InstanceGroupManagersListErrorsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listErrors&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupManagersListManagedInstancesResponse} Successful response
		 */
		Compute_instanceGroupManagers_listManagedInstances(project: string, zone: string, instanceGroupManager: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceGroupManagersListManagedInstancesResponse> {
			return this.http.post<InstanceGroupManagersListManagedInstancesResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listManagedInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupManagersListPerInstanceConfigsResp} Successful response
		 */
		Compute_instanceGroupManagers_listPerInstanceConfigs(project: string, zone: string, instanceGroupManager: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceGroupManagersListPerInstanceConfigsResp> {
			return this.http.post<InstanceGroupManagersListPerInstanceConfigsResp>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/listPerInstanceConfigs&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_patchPerInstanceConfigs(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersPatchPerInstanceConfigsReq): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/patchPerInstanceConfigs&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_recreateInstances(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersRecreateInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/recreateInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including: + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance. This list is subject to change. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {number} size The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_resize(project: string, zone: string, instanceGroupManager: string, size: number, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/resize&size=' + size + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_setInstanceTemplate(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersSetInstanceTemplateRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setInstanceTemplate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located.
		 * @param {string} instanceGroupManager The name of the managed instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_setTargetPools(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersSetTargetPoolsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/setTargetPools&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
		 * Post projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
		 * @param {string} instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroupManagers_updatePerInstanceConfigs(project: string, zone: string, instanceGroupManager: string, requestId: string | null | undefined, requestBody: InstanceGroupManagersUpdatePerInstanceConfigsReq): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroupManagers/' + (instanceGroupManager == null ? '' : encodeURIComponent(instanceGroupManager)) + '/updatePerInstanceConfigs&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of zonal instance group resources contained within the specified zone. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
		 * Get projects/{project}/zones/{zone}/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupList} Successful response
		 */
		Compute_instanceGroups_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceGroupList> {
			return this.http.get<InstanceGroupList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an instance group in the specified project using the parameters that are included in the request.
		 * Post projects/{project}/zones/{zone}/instanceGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the instance group.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroups_insert(project: string, zone: string, requestId: string | null | undefined, requestBody: InstanceGroup): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read Deleting an instance group for more information.
		 * Delete projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroups_delete(project: string, zone: string, instanceGroup: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
		 * Get projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group.
		 * @return {InstanceGroup} Successful response
		 */
		Compute_instanceGroups_get(project: string, zone: string, instanceGroup: string): Observable<InstanceGroup> {
			return this.http.get<InstanceGroup>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)), {});
		}

		/**
		 * Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read Adding instances for more information.
		 * Post projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group where you are adding instances.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroups_addInstances(project: string, zone: string, instanceGroup: string, requestId: string | null | undefined, requestBody: InstanceGroupsAddInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/addInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the instances in the specified instance group. The orderBy query parameter is not supported. The filter query parameter is supported, but only for expressions that use `eq` (equal) or `ne` (not equal) operators.
		 * Post projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group from which you want to generate a list of included instances.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceGroupsListInstances} Successful response
		 */
		Compute_instanceGroups_listInstances(project: string, zone: string, instanceGroup: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, requestBody: InstanceGroupsListInstancesRequest): Observable<InstanceGroupsListInstances> {
			return this.http.post<InstanceGroupsListInstances>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/listInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes one or more instances from the specified instance group, but does not delete those instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
		 * Post projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group where the specified instances will be removed.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroups_removeInstances(project: string, zone: string, instanceGroup: string, requestId: string | null | undefined, requestBody: InstanceGroupsRemoveInstancesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/removeInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the named ports for the specified instance group.
		 * Post projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the instance group is located.
		 * @param {string} instanceGroup The name of the instance group where the named ports are updated.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instanceGroups_setNamedPorts(project: string, zone: string, instanceGroup: string, requestId: string | null | undefined, requestBody: InstanceGroupsSetNamedPortsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instanceGroups/' + (instanceGroup == null ? '' : encodeURIComponent(instanceGroup)) + '/setNamedPorts&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the list of instances contained within the specified zone.
		 * Get projects/{project}/zones/{zone}/instances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceList} Successful response
		 */
		Compute_instances_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceList> {
			return this.http.get<InstanceList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates an instance resource in the specified project using the data included in the request.
		 * Post projects/{project}/zones/{zone}/instances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} sourceInstanceTemplate Specifies instance template to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate 
		 * @param {string} sourceMachineImage Specifies the machine image to use to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to a machine image: - https://www.googleapis.com/compute/v1/projects/project/global/global /machineImages/machineImage - projects/project/global/global/machineImages/machineImage - global/machineImages/machineImage 
		 * @return {Operation} Successful response
		 */
		Compute_instances_insert(project: string, zone: string, requestId: string | null | undefined, sourceInstanceTemplate: string | null | undefined, sourceMachineImage: string | null | undefined, requestBody: Instance): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&sourceInstanceTemplate=' + (sourceInstanceTemplate == null ? '' : encodeURIComponent(sourceInstanceTemplate)) + '&sourceMachineImage=' + (sourceMachineImage == null ? '' : encodeURIComponent(sourceMachineImage)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates multiple instances. Count specifies the number of instances to create. For more information, see About bulk creation of VMs.
		 * Post projects/{project}/zones/{zone}/instances/bulkInsert
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_bulkInsert(project: string, zone: string, requestId: string | null | undefined, requestBody: BulkInsertInstanceResource): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/bulkInsert&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified Instance resource. For more information, see Deleting an instance.
		 * Delete projects/{project}/zones/{zone}/instances/{instance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_delete(project: string, zone: string, instance: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified Instance resource.
		 * Get projects/{project}/zones/{zone}/instances/{instance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to return.
		 * @return {Instance} Successful response
		 */
		Compute_instances_get(project: string, zone: string, instance: string): Observable<Instance> {
			return this.http.get<Instance>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)), {});
		}

		/**
		 * Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See Updating a running instance for a list of updatable instance properties.
		 * Put projects/{project}/zones/{zone}/instances/{instance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to update.
		 * @param {Compute_instances_updateMinimalAction} minimalAction Specifies the action to take when updating an instance even if the updated properties do not require it. If not specified, then Compute Engine acts based on the minimum action that the updated properties require.
		 * @param {Compute_instances_updateMinimalAction} mostDisruptiveAllowedAction Specifies the most disruptive action that can be taken on the instance as part of the update. Compute Engine returns an error if the instance properties require a more disruptive action as part of the instance update. Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_update(project: string, zone: string, instance: string, minimalAction: Compute_instances_updateMinimalAction | null | undefined, mostDisruptiveAllowedAction: Compute_instances_updateMinimalAction | null | undefined, requestId: string | null | undefined, requestBody: Instance): Observable<Operation> {
			return this.http.put<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '&minimalAction=' + minimalAction + '&mostDisruptiveAllowedAction=' + mostDisruptiveAllowedAction + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds an access config to an instance's network interface.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} networkInterface The name of the network interface to add to this instance.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_addAccessConfig(project: string, zone: string, instance: string, networkInterface: string, requestId: string | null | undefined, requestBody: AccessConfig): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/addAccessConfig&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_addResourcePolicies(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesAddResourcePoliciesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/addResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/attachDisk
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {boolean} forceAttach Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_attachDisk(project: string, zone: string, instance: string, forceAttach: boolean | null | undefined, requestId: string | null | undefined, requestBody: AttachedDisk): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/attachDisk&forceAttach=' + forceAttach + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes an access config from an instance's network interface.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} accessConfig The name of the access config to delete.
		 * @param {string} networkInterface The name of the network interface.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_deleteAccessConfig(project: string, zone: string, instance: string, accessConfig: string, networkInterface: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/deleteAccessConfig&accessConfig=' + (accessConfig == null ? '' : encodeURIComponent(accessConfig)) + '&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Detaches a disk from an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/detachDisk
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Instance name for this request.
		 * @param {string} deviceName The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_detachDisk(project: string, zone: string, instance: string, deviceName: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/detachDisk&deviceName=' + (deviceName == null ? '' : encodeURIComponent(deviceName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Returns effective firewalls applied to an interface of the instance.
		 * Get projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} networkInterface The name of the network interface to get the effective firewalls.
		 * @return {InstancesGetEffectiveFirewallsResponse} Successful response
		 */
		Compute_instances_getEffectiveFirewalls(project: string, zone: string, instance: string, networkInterface: string): Observable<InstancesGetEffectiveFirewallsResponse> {
			return this.http.get<InstancesGetEffectiveFirewallsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/getEffectiveFirewalls&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)), {});
		}

		/**
		 * Returns the specified guest attributes entry.
		 * Get projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} queryPath Specifies the guest attributes path to be queried.
		 * @param {string} variableKey Specifies the key for the guest attributes entry.
		 * @return {GuestAttributes} Successful response
		 */
		Compute_instances_getGuestAttributes(project: string, zone: string, instance: string, queryPath: string | null | undefined, variableKey: string | null | undefined): Observable<GuestAttributes> {
			return this.http.get<GuestAttributes>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/getGuestAttributes&queryPath=' + (queryPath == null ? '' : encodeURIComponent(queryPath)) + '&variableKey=' + (variableKey == null ? '' : encodeURIComponent(variableKey)), {});
		}

		/**
		 * Returns the Shielded Instance Identity of an instance
		 * Get projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name or id of the instance scoping this request.
		 * @return {ShieldedInstanceIdentity} Successful response
		 */
		Compute_instances_getShieldedInstanceIdentity(project: string, zone: string, instance: string): Observable<ShieldedInstanceIdentity> {
			return this.http.get<ShieldedInstanceIdentity>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/getShieldedInstanceIdentity', {});
		}

		/**
		 * Perform a manual maintenance on the instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/performMaintenance
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_performMaintenance(project: string, zone: string, instance: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/performMaintenance&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
		 * Get projects/{project}/zones/{zone}/instances/{instance}/referrers
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {InstanceListReferrers} Successful response
		 */
		Compute_instances_listReferrers(project: string, zone: string, instance: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<InstanceListReferrers> {
			return this.http.get<InstanceListReferrers>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/referrers&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Removes resource policies from an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_removeResourcePolicies(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesRemoveResourcePoliciesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/removeResourcePolicies&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Performs a reset on the instance. This is a hard reset. The VM does not do a graceful shutdown. For more information, see Resetting an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/reset
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_reset(project: string, zone: string, instance: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/reset&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Resumes an instance that was suspended using the instances().suspend method.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/resume
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to resume.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_resume(project: string, zone: string, instance: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/resume&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Returns the screenshot from the specified instance.
		 * Get projects/{project}/zones/{zone}/instances/{instance}/screenshot
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @return {Screenshot} Successful response
		 */
		Compute_instances_getScreenshot(project: string, zone: string, instance: string): Observable<Screenshot> {
			return this.http.get<Screenshot>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/screenshot', {});
		}

		/**
		 * Sends diagnostic interrupt to the instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @return {void} Successful response
		 */
		Compute_instances_sendDiagnosticInterrupt(project: string, zone: string, instance: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/sendDiagnosticInterrupt', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns the last 1 MB of serial port output from the specified instance.
		 * Get projects/{project}/zones/{zone}/instances/{instance}/serialPort
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance for this request.
		 * @param {number} port Specifies which COM or serial port to retrieve data from.
		 *     Minimum: 1    Maximum: 4
		 * @param {string} start Specifies the starting byte position of the output to return. To start with the first byte of output to the specified port, omit this field or set it to `0`. If the output for that byte position is available, this field matches the `start` parameter sent with the request. If the amount of serial console output exceeds the size of the buffer (1 MB), the oldest output is discarded and is no longer available. If the requested start position refers to discarded output, the start position is adjusted to the oldest output still available, and the adjusted start position is returned as the `start` property value. You can also provide a negative start position, which translates to the most recent number of bytes written to the serial port. For example, -3 is interpreted as the most recent 3 bytes written to the serial console.
		 * @return {SerialPortOutput} Successful response
		 */
		Compute_instances_getSerialPortOutput(project: string, zone: string, instance: string, port: number | null | undefined, start: string | null | undefined): Observable<SerialPortOutput> {
			return this.http.get<SerialPortOutput>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/serialPort&port=' + port + '&start=' + (start == null ? '' : encodeURIComponent(start)), {});
		}

		/**
		 * Sets the auto-delete flag for a disk attached to an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {boolean} autoDelete Whether to auto-delete the disk when the instance is deleted.
		 * @param {string} deviceName The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setDiskAutoDelete(project: string, zone: string, instance: string, autoDelete: boolean, deviceName: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setDiskAutoDelete&autoDelete=' + autoDelete + '&deviceName=' + (deviceName == null ? '' : encodeURIComponent(deviceName)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setLabels
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setLabels(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetLabelsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setLabels&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setMachineResources
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setMachineResources(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetMachineResourcesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMachineResources&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the machine type for a stopped instance to the machine type specified in the request.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setMachineType
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setMachineType(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetMachineTypeRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMachineType&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets metadata for the specified instance to the data included in the request.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setMetadata
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setMetadata(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: Metadata): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMetadata&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setMinCpuPlatform(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetMinCpuPlatformRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setMinCpuPlatform&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets name of an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setName
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setName(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetNameRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setName&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states. For more information about setting scheduling options for a VM, see Set VM host maintenance policy.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setScheduling
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Instance name for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setScheduling(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: Scheduling): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setScheduling&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the Google Cloud Armor security policy for the specified instance. For more information, see Google Cloud Armor Overview
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} instance Name of the Instance resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setSecurityPolicy(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetSecurityPolicyRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to start.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setServiceAccount(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesSetServiceAccountRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setServiceAccount&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name or id of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setShieldedInstanceIntegrityPolicy(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: ShieldedInstanceIntegrityPolicy): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setShieldedInstanceIntegrityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sets network tags for the specified instance to the data included in the request.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/setTags
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setTags(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: Tags): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/setTags&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulates a host maintenance event on a VM. For more information, see Simulate a host maintenance event.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {boolean} withExtendedNotifications Determines whether the customers receive notifications before migration. Only applicable to SF vms.
		 * @return {Operation} Successful response
		 */
		Compute_instances_simulateMaintenanceEvent(project: string, zone: string, instance: string, requestId: string | null | undefined, withExtendedNotifications: boolean | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/simulateMaintenanceEvent&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&withExtendedNotifications=' + withExtendedNotifications, null, {});
		}

		/**
		 * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/start
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to start.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_start(project: string, zone: string, instance: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/start&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to start.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_startWithEncryptionKey(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: InstancesStartWithEncryptionKeyRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/startWithEncryptionKey&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/stop
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to stop.
		 * @param {boolean} discardLocalSsd This property is required if the instance has any attached Local SSD disks. If false, Local SSD data will be preserved when the instance is suspended. If true, the contents of any attached Local SSD disks will be discarded.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_stop(project: string, zone: string, instance: string, discardLocalSsd: boolean | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/stop&discardLocalSsd=' + discardLocalSsd + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * This method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances have no compute costs (cores or RAM), and incur only storage charges for the saved VM memory and localSSD data. Any charged resources the virtual machine was using, such as persistent disks and static IP addresses, will continue to be charged while the instance is suspended. For more information, see Suspending and resuming an instance.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/suspend
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance resource to suspend.
		 * @param {boolean} discardLocalSsd This property is required if the instance has any attached Local SSD disks. If false, Local SSD data will be preserved when the instance is suspended. If true, the contents of any attached Local SSD disks will be discarded.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_suspend(project: string, zone: string, instance: string, discardLocalSsd: boolean | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/suspend&discardLocalSsd=' + discardLocalSsd + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Post projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} networkInterface The name of the network interface where the access config is attached.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_updateAccessConfig(project: string, zone: string, instance: string, networkInterface: string, requestId: string | null | undefined, requestBody: AccessConfig): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateAccessConfig&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_updateDisplayDevice(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: DisplayDevice): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateDisplayDevice&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates an instance's network interface. This method can only update an interface's alias IP range and attached network. See Modifying alias IP ranges for an existing instance for instructions on changing alias IP ranges. See Migrating a VM between networks for instructions on migrating an interface. This method follows PATCH semantics.
		 * Patch projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance The instance name for this request.
		 * @param {string} networkInterface The name of the network interface to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_updateNetworkInterface(project: string, zone: string, instance: string, networkInterface: string, requestId: string | null | undefined, requestBody: NetworkInterface): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateNetworkInterface&networkInterface=' + (networkInterface == null ? '' : encodeURIComponent(networkInterface)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
		 * Patch projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} instance Name or id of the instance scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_updateShieldedInstanceConfig(project: string, zone: string, instance: string, requestId: string | null | undefined, requestBody: ShieldedInstanceConfig): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (instance == null ? '' : encodeURIComponent(instance)) + '/updateShieldedInstanceConfig&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_instances_getIamPolicy(project: string, zone: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets deletion protection on the instance.
		 * Post projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {boolean} deletionProtection Whether the resource should be protected against deletion.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_instances_setDeletionProtection(project: string, zone: string, resource: string, deletionProtection: boolean | null | undefined, requestId: string | null | undefined): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setDeletionProtection&deletionProtection=' + deletionProtection + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), null, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_instances_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_instances_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/instances/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of machine types available to the specified project.
		 * Get projects/{project}/zones/{zone}/machineTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {MachineTypeList} Successful response
		 */
		Compute_machineTypes_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<MachineTypeList> {
			return this.http.get<MachineTypeList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/machineTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified machine type.
		 * Get projects/{project}/zones/{zone}/machineTypes/{machineType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} machineType Name of the machine type to return.
		 * @return {MachineType} Successful response
		 */
		Compute_machineTypes_get(project: string, zone: string, machineType: string): Observable<MachineType> {
			return this.http.get<MachineType>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/machineTypes/' + (machineType == null ? '' : encodeURIComponent(machineType)), {});
		}

		/**
		 * Retrieves the list of network endpoint groups that are located in the specified project and zone.
		 * Get projects/{project}/zones/{zone}/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupList} Successful response
		 */
		Compute_networkEndpointGroups_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NetworkEndpointGroupList> {
			return this.http.get<NetworkEndpointGroupList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a network endpoint group in the specified project using the parameters that are included in the request.
		 * Post projects/{project}/zones/{zone}/networkEndpointGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where you want to create the network endpoint group. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkEndpointGroups_insert(project: string, zone: string, requestId: string | null | undefined, requestBody: NetworkEndpointGroup): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
		 * Delete projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkEndpointGroups_delete(project: string, zone: string, networkEndpointGroup: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified network endpoint group.
		 * Get projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
		 * @return {NetworkEndpointGroup} Successful response
		 */
		Compute_networkEndpointGroups_get(project: string, zone: string, networkEndpointGroup: string): Observable<NetworkEndpointGroup> {
			return this.http.get<NetworkEndpointGroup>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)), {});
		}

		/**
		 * Attach a list of network endpoints to the specified network endpoint group.
		 * Post projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkEndpointGroups_attachNetworkEndpoints(project: string, zone: string, networkEndpointGroup: string, requestId: string | null | undefined, requestBody: NetworkEndpointGroupsAttachEndpointsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/attachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Detach a list of network endpoints from the specified network endpoint group.
		 * Post projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_networkEndpointGroups_detachNetworkEndpoints(project: string, zone: string, networkEndpointGroup: string, requestId: string | null | undefined, requestBody: NetworkEndpointGroupsDetachEndpointsRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/detachNetworkEndpoints&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the network endpoints in the specified network endpoint group.
		 * Post projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
		 * @param {string} networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NetworkEndpointGroupsListNetworkEndpoints} Successful response
		 */
		Compute_networkEndpointGroups_listNetworkEndpoints(project: string, zone: string, networkEndpointGroup: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined, requestBody: NetworkEndpointGroupsListEndpointsRequest): Observable<NetworkEndpointGroupsListNetworkEndpoints> {
			return this.http.post<NetworkEndpointGroupsListNetworkEndpoints>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (networkEndpointGroup == null ? '' : encodeURIComponent(networkEndpointGroup)) + '/listNetworkEndpoints&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_networkEndpointGroups_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/networkEndpointGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
		 * Get projects/{project}/zones/{zone}/nodeGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeGroupList} Successful response
		 */
		Compute_nodeGroups_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NodeGroupList> {
			return this.http.get<NodeGroupList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a NodeGroup resource in the specified project using the data included in the request.
		 * Post projects/{project}/zones/{zone}/nodeGroups
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {number} initialNodeCount Initial count of nodes in the node group.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_insert(project: string, zone: string, initialNodeCount: number, requestId: string | null | undefined, requestBody: NodeGroup): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups&initialNodeCount=' + initialNodeCount + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified NodeGroup resource.
		 * Delete projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_delete(project: string, zone: string, nodeGroup: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
		 * Get projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the node group to return.
		 * @return {NodeGroup} Successful response
		 */
		Compute_nodeGroups_get(project: string, zone: string, nodeGroup: string): Observable<NodeGroup> {
			return this.http.get<NodeGroup>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)), {});
		}

		/**
		 * Updates the specified node group.
		 * Patch projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_patch(project: string, zone: string, nodeGroup: string, requestId: string | null | undefined, requestBody: NodeGroup): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds specified number of nodes to the node group.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_addNodes(project: string, zone: string, nodeGroup: string, requestId: string | null | undefined, requestBody: NodeGroupsAddNodesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/addNodes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes specified nodes from the node group.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource whose nodes will be deleted.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_deleteNodes(project: string, zone: string, nodeGroup: string, requestId: string | null | undefined, requestBody: NodeGroupsDeleteNodesRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/deleteNodes&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists nodes in the node group.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource whose nodes you want to list.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeGroupsListNodes} Successful response
		 */
		Compute_nodeGroups_listNodes(project: string, zone: string, nodeGroup: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NodeGroupsListNodes> {
			return this.http.post<NodeGroupsListNodes>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/listNodes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, null, {});
		}

		/**
		 * Updates the node template of the node group.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_setNodeTemplate(project: string, zone: string, nodeGroup: string, requestId: string | null | undefined, requestBody: NodeGroupsSetNodeTemplateRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/setNodeTemplate&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulates maintenance event on specified nodes from the node group.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeGroup Name of the NodeGroup resource whose nodes will go under maintenance simulation.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_nodeGroups_simulateMaintenanceEvent(project: string, zone: string, nodeGroup: string, requestId: string | null | undefined, requestBody: NodeGroupsSimulateMaintenanceEventRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (nodeGroup == null ? '' : encodeURIComponent(nodeGroup)) + '/simulateMaintenanceEvent&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_nodeGroups_getIamPolicy(project: string, zone: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_nodeGroups_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_nodeGroups_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeGroups/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of node types available to the specified project.
		 * Get projects/{project}/zones/{zone}/nodeTypes
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {NodeTypeList} Successful response
		 */
		Compute_nodeTypes_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<NodeTypeList> {
			return this.http.get<NodeTypeList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeTypes&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Returns the specified node type.
		 * Get projects/{project}/zones/{zone}/nodeTypes/{nodeType}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} nodeType Name of the node type to return.
		 * @return {NodeType} Successful response
		 */
		Compute_nodeTypes_get(project: string, zone: string, nodeType: string): Observable<NodeType> {
			return this.http.get<NodeType>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/nodeTypes/' + (nodeType == null ? '' : encodeURIComponent(nodeType)), {});
		}

		/**
		 * Retrieves a list of Operation resources contained within the specified zone.
		 * Get projects/{project}/zones/{zone}/operations
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {OperationList} Successful response
		 */
		Compute_zoneOperations_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<OperationList> {
			return this.http.get<OperationList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Deletes the specified zone-specific Operations resource.
		 * Delete projects/{project}/zones/{zone}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} operation Name of the Operations resource to delete.
		 * @return {void} Successful response
		 */
		Compute_zoneOperations_delete(project: string, zone: string, operation: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the specified zone-specific Operations resource.
		 * Get projects/{project}/zones/{zone}/operations/{operation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {Operation} Successful response
		 */
		Compute_zoneOperations_get(project: string, zone: string, operation: string): Observable<Operation> {
			return this.http.get<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)), {});
		}

		/**
		 * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method waits for no more than the 2 minutes and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
		 * Post projects/{project}/zones/{zone}/operations/{operation}/wait
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} operation Name of the Operations resource to return.
		 * @return {Operation} Successful response
		 */
		Compute_zoneOperations_wait(project: string, zone: string, operation: string): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/operations/' + (operation == null ? '' : encodeURIComponent(operation)) + '/wait', null, {});
		}

		/**
		 * A list of all the reservations that have been configured for the specified project in specified zone.
		 * Get projects/{project}/zones/{zone}/reservations
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {ReservationList} Successful response
		 */
		Compute_reservations_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<ReservationList> {
			return this.http.get<ReservationList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a new reservation. For more information, read Reserving zonal resources.
		 * Post projects/{project}/zones/{zone}/reservations
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_reservations_insert(project: string, zone: string, requestId: string | null | undefined, requestBody: Reservation): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified reservation.
		 * Delete projects/{project}/zones/{zone}/reservations/{reservation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_reservations_delete(project: string, zone: string, reservation: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Retrieves information about the specified reservation.
		 * Get projects/{project}/zones/{zone}/reservations/{reservation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to retrieve.
		 * @return {Reservation} Successful response
		 */
		Compute_reservations_get(project: string, zone: string, reservation: string): Observable<Reservation> {
			return this.http.get<Reservation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)), {});
		}

		/**
		 * Update share settings of the reservation.
		 * Patch projects/{project}/zones/{zone}/reservations/{reservation}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask Update_mask indicates fields to be updated as part of this request.
		 * @return {Operation} Successful response
		 */
		Compute_reservations_update(project: string, zone: string, reservation: string, paths: Array<string> | null | undefined, requestId: string | null | undefined, updateMask: string | null | undefined, requestBody: Reservation): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)) + '&' + paths?.map(z => `paths=${encodeURIComponent(z)}`).join('&') + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
		 * Post projects/{project}/zones/{zone}/reservations/{reservation}/resize
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone for this request.
		 * @param {string} reservation Name of the reservation to update.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_reservations_resize(project: string, zone: string, reservation: string, requestId: string | null | undefined, requestBody: ReservationsResizeRequest): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (reservation == null ? '' : encodeURIComponent(reservation)) + '/resize&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
		 * Get projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @param {number} optionsRequestedPolicyVersion Requested IAM Policy version.
		 *     Type: int, -2,147,483,648 to 2,147,483,647
		 * @return {Policy} Successful response
		 */
		Compute_reservations_getIamPolicy(project: string, zone: string, resource: string, optionsRequestedPolicyVersion: number | null | undefined): Observable<Policy> {
			return this.http.get<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (resource == null ? '' : encodeURIComponent(resource)) + '/getIamPolicy&optionsRequestedPolicyVersion=' + optionsRequestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy.
		 * Post projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {Policy} Successful response
		 */
		Compute_reservations_setIamPolicy(project: string, zone: string, resource: string, requestBody: ZoneSetPolicyRequest): Observable<Policy> {
			return this.http.post<Policy>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (resource == null ? '' : encodeURIComponent(resource)) + '/setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource.
		 * Post projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions
		 * @param {string} project Project ID for this request.
		 * @param {string} zone The name of the zone for this request.
		 * @param {string} resource Name or id of the resource for this request.
		 * @return {TestPermissionsResponse} Successful response
		 */
		Compute_reservations_testIamPermissions(project: string, zone: string, resource: string, requestBody: TestPermissionsRequest): Observable<TestPermissionsResponse> {
			return this.http.post<TestPermissionsResponse>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/reservations/' + (resource == null ? '' : encodeURIComponent(resource)) + '/testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves a list of TargetInstance resources available to the specified project and zone.
		 * Get projects/{project}/zones/{zone}/targetInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} filter A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
		 * @param {number} maxResults The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
		 *     Minimum: 0
		 * @param {string} orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
		 * @param {string} pageToken Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
		 * @param {boolean} returnPartialSuccess Opt-in for partial success behavior which provides partial results in case of failure. The default value is false.
		 * @return {TargetInstanceList} Successful response
		 */
		Compute_targetInstances_list(project: string, zone: string, filter: string | null | undefined, maxResults: number | null | undefined, orderBy: string | null | undefined, pageToken: string | null | undefined, returnPartialSuccess: boolean | null | undefined): Observable<TargetInstanceList> {
			return this.http.get<TargetInstanceList>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&maxResults=' + maxResults + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&returnPartialSuccess=' + returnPartialSuccess, {});
		}

		/**
		 * Creates a TargetInstance resource in the specified project and zone using the data included in the request.
		 * Post projects/{project}/zones/{zone}/targetInstances
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetInstances_insert(project: string, zone: string, requestId: string | null | undefined, requestBody: TargetInstance): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified TargetInstance resource.
		 * Delete projects/{project}/zones/{zone}/targetInstances/{targetInstance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} targetInstance Name of the TargetInstance resource to delete.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetInstances_delete(project: string, zone: string, targetInstance: string, requestId: string | null | undefined): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances/' + (targetInstance == null ? '' : encodeURIComponent(targetInstance)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), {});
		}

		/**
		 * Returns the specified TargetInstance resource.
		 * Get projects/{project}/zones/{zone}/targetInstances/{targetInstance}
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} targetInstance Name of the TargetInstance resource to return.
		 * @return {TargetInstance} Successful response
		 */
		Compute_targetInstances_get(project: string, zone: string, targetInstance: string): Observable<TargetInstance> {
			return this.http.get<TargetInstance>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances/' + (targetInstance == null ? '' : encodeURIComponent(targetInstance)), {});
		}

		/**
		 * Sets the Google Cloud Armor security policy for the specified target instance. For more information, see Google Cloud Armor Overview
		 * Post projects/{project}/zones/{zone}/targetInstances/{targetInstance}/setSecurityPolicy
		 * @param {string} project Project ID for this request.
		 * @param {string} zone Name of the zone scoping this request.
		 * @param {string} targetInstance Name of the TargetInstance resource to which the security policy should be set. The name should conform to RFC1035.
		 * @param {string} requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
		 * @return {Operation} Successful response
		 */
		Compute_targetInstances_setSecurityPolicy(project: string, zone: string, targetInstance: string, requestId: string | null | undefined, requestBody: SecurityPolicyReference): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'projects/' + (project == null ? '' : encodeURIComponent(project)) + '/zones/' + (zone == null ? '' : encodeURIComponent(zone)) + '/targetInstances/' + (targetInstance == null ? '' : encodeURIComponent(targetInstance)) + '/setSecurityPolicy&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

	export enum Compute_networks_listPeeringRoutesDirection { INCOMING = 'INCOMING', OUTGOING = 'OUTGOING' }

	export enum Compute_instances_updateMinimalAction { INVALID = 'INVALID', NO_EFFECT = 'NO_EFFECT', REFRESH = 'REFRESH', RESTART = 'RESTART' }

}

